(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{150:function(n,e,t){},151:function(n,e,t){},362:function(n,e,t){},366:function(n,e,t){},412:function(n,e,t){},417:function(n,e,t){"use strict";t(150)},418:function(n,e,t){"use strict";t(151)},459:function(n,e,t){"use strict";t.r(e);var r=t(0),o=t(83);t(85);t(8),t(105);var a={"components/AlgoliaSearchBox":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3)]).then(t.bind(null,465)),"components/Common":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4),t.e(10),t.e(9),t.e(8),t.e(12),t.e(11),t.e(14),t.e(13)]).then(t.bind(null,18)),"components/DropdownLink":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3)]).then(t.bind(null,204)),"components/DropdownTransition":()=>t.e(0).then(t.bind(null,54)),"components/Footer":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3)]).then(t.bind(null,210)),"components/FriendLink":()=>Promise.all([t.e(0),t.e(7),t.e(6),t.e(5),t.e(4)]).then(t.bind(null,211)),"components/Home":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(20)]).then(t.bind(null,212)),"components/MobShare":()=>t.e(0).then(t.bind(null,466)),"components/NavLink":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3)]).then(t.bind(null,31)),"components/NavLinks":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3)]).then(t.bind(null,53)),"components/Navbar":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(10),t.e(9),t.e(8),t.e(12),t.e(11)]).then(t.bind(null,203)),"components/NoteAbstract":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3)]).then(t.bind(null,24)),"components/NoteAbstractItem":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3)]).then(t.bind(null,213)),"components/Page":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3)]).then(t.bind(null,214)),"components/PageInfo":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3)]).then(t.bind(null,56)),"components/Password":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4)]).then(t.bind(null,209)),"components/PersonalInfo":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3)]).then(t.bind(null,55)),"components/SearchBox":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3)]).then(t.bind(null,467)),"components/Sidebar":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3)]).then(t.bind(null,207)),"components/SidebarButton":()=>t.e(0).then(t.bind(null,216)),"components/SidebarGroup":()=>t.e(0).then(t.bind(null,208)),"components/SidebarLink":()=>t.e(0).then(t.bind(null,217)),"components/SidebarLinks":()=>t.e(0).then(t.bind(null,81)),"components/SubSidebar":()=>t.e(0).then(t.bind(null,218)),"components/TagList":()=>t.e(0).then(t.bind(null,32)),"global-components/Badge":()=>t.e(0).then(t.bind(null,474)),"layouts/404":()=>t.e(0).then(t.bind(null,468)),"layouts/Category":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4),t.e(10),t.e(9),t.e(8),t.e(12),t.e(11),t.e(14),t.e(13),t.e(15)]).then(t.bind(null,469)),"layouts/Layout":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4),t.e(10),t.e(9),t.e(8),t.e(12),t.e(11),t.e(14),t.e(13),t.e(15)]).then(t.bind(null,470)),"layouts/Tag":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4),t.e(10),t.e(9),t.e(8),t.e(12),t.e(11),t.e(14),t.e(13),t.e(15)]).then(t.bind(null,471)),"layouts/Tags":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4),t.e(10),t.e(9),t.e(8),t.e(12),t.e(11),t.e(14),t.e(13),t.e(15)]).then(t.bind(null,472)),"layouts/TimeLines":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4),t.e(10),t.e(9),t.e(8),t.e(12),t.e(11),t.e(14),t.e(13)]).then(t.bind(null,473)),"components/HomeBlog/index":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4)]).then(t.bind(null,215)),"components/Mode/ModePicker":()=>t.e(0).then(t.bind(null,206)),"components/Mode/index":()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(8)]).then(t.bind(null,205)),NotFound:()=>t.e(0).then(t.bind(null,468)),Category:()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4),t.e(10),t.e(9),t.e(8),t.e(12),t.e(11),t.e(14),t.e(13),t.e(15)]).then(t.bind(null,469)),Layout:()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4),t.e(10),t.e(9),t.e(8),t.e(12),t.e(11),t.e(14),t.e(13),t.e(15)]).then(t.bind(null,470)),Tag:()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4),t.e(10),t.e(9),t.e(8),t.e(12),t.e(11),t.e(14),t.e(13),t.e(15)]).then(t.bind(null,471)),Tags:()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4),t.e(10),t.e(9),t.e(8),t.e(12),t.e(11),t.e(14),t.e(13),t.e(15)]).then(t.bind(null,472)),TimeLines:()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(7),t.e(6),t.e(5),t.e(4),t.e(10),t.e(9),t.e(8),t.e(12),t.e(11),t.e(14),t.e(13)]).then(t.bind(null,473))},i={"v-39e916f0":()=>t.e(68).then(t.bind(null,496)),"v-d87406c0":()=>t.e(113).then(t.bind(null,497)),"v-cf0122fe":()=>t.e(109).then(t.bind(null,498)),"v-5c30984b":()=>t.e(83).then(t.bind(null,499)),"v-9bb5e86a":()=>t.e(100).then(t.bind(null,500)),"v-87c13ffa":()=>t.e(96).then(t.bind(null,501)),"v-737352ab":()=>t.e(90).then(t.bind(null,502)),"v-7844a1b2":()=>t.e(93).then(t.bind(null,503)),"v-6c84e740":()=>t.e(87).then(t.bind(null,504)),"v-09e74572":()=>t.e(48).then(t.bind(null,505)),"v-8d01e796":()=>t.e(97).then(t.bind(null,506)),"v-7493ab2a":()=>t.e(91).then(t.bind(null,507)),"v-71afeb6b":()=>t.e(89).then(t.bind(null,508)),"v-0c938f45":()=>t.e(51).then(t.bind(null,509)),"v-5900f271":()=>t.e(82).then(t.bind(null,510)),"v-3e8b35eb":()=>t.e(72).then(t.bind(null,511)),"v-e6907df6":()=>t.e(115).then(t.bind(null,512)),"v-521a09eb":()=>t.e(80).then(t.bind(null,513)),"v-dd7fb7c2":()=>t.e(114).then(t.bind(null,514)),"v-2e4cb8ab":()=>t.e(63).then(t.bind(null,515)),"v-18f00c8b":()=>t.e(56).then(t.bind(null,516)),"v-43a964cb":()=>t.e(75).then(t.bind(null,517)),"v-d4cae84e":()=>t.e(111).then(t.bind(null,518)),"v-09c6e9ab":()=>t.e(47).then(t.bind(null,519)),"v-2e91b746":()=>t.e(64).then(t.bind(null,520)),"v-0139db16":()=>t.e(44).then(t.bind(null,521)),"v-0aa71f1e":()=>t.e(49).then(t.bind(null,522)),"v-1c46f5ab":()=>t.e(59).then(t.bind(null,523)),"v-29559f8b":()=>t.e(61).then(t.bind(null,524)),"v-0c4cce2a":()=>t.e(50).then(t.bind(null,525)),"v-bfe34c2a":()=>t.e(105).then(t.bind(null,526)),"v-55150e46":()=>t.e(81).then(t.bind(null,527)),"v-843ae6ea":()=>t.e(95).then(t.bind(null,528)),"v-37efe66a":()=>t.e(67).then(t.bind(null,529)),"v-953c6676":()=>t.e(99).then(t.bind(null,530)),"v-d3a38240":()=>t.e(110).then(t.bind(null,531)),"v-2858ebea":()=>t.e(60).then(t.bind(null,532)),"v-76cf7acb":()=>t.e(92).then(t.bind(null,533)),"v-7d772acb":()=>t.e(94).then(t.bind(null,534)),"v-404c7aaa":()=>t.e(74).then(t.bind(null,535)),"v-3c6fea4b":()=>t.e(71).then(t.bind(null,536)),"v-b6401aea":()=>t.e(103).then(t.bind(null,537)),"v-cace3e2a":()=>t.e(108).then(t.bind(null,538)),"v-c0454a2a":()=>t.e(106).then(t.bind(null,539)),"v-0e09f56b":()=>t.e(54).then(t.bind(null,540)),"v-c2129e2a":()=>t.e(107).then(t.bind(null,541)),"v-e926e472":()=>t.e(116).then(t.bind(null,542)),"v-46d91da7":()=>t.e(76).then(t.bind(null,543)),"v-a953fe6a":()=>t.e(102).then(t.bind(null,544)),"v-373abf6b":()=>t.e(66).then(t.bind(null,545)),"v-3fc296ad":()=>t.e(73).then(t.bind(null,546)),"v-04a8950b":()=>t.e(45).then(t.bind(null,547)),"v-6ad03320":()=>t.e(85).then(t.bind(null,548)),"v-0cd88c0f":()=>t.e(53).then(t.bind(null,549)),"v-6af8ea4b":()=>t.e(86).then(t.bind(null,550)),"v-a5b2146a":()=>t.e(101).then(t.bind(null,551)),"v-4ff7afff":()=>t.e(79).then(t.bind(null,552)),"v-719d672b":()=>t.e(88).then(t.bind(null,553)),"v-4fb88c8b":()=>t.e(78).then(t.bind(null,554)),"v-05798f2b":()=>t.e(46).then(t.bind(null,555)),"v-90f907aa":()=>t.e(98).then(t.bind(null,556)),"v-4bf2e7fd":()=>t.e(77).then(t.bind(null,557)),"v-b6e43d0e":()=>t.e(104).then(t.bind(null,558)),"v-005e6c35":()=>t.e(43).then(t.bind(null,559)),"v-2e27bdad":()=>t.e(62).then(t.bind(null,560)),"v-3b86fbaa":()=>t.e(70).then(t.bind(null,561)),"v-f5c06ff6":()=>t.e(117).then(t.bind(null,562)),"v-1982f56a":()=>t.e(57).then(t.bind(null,563)),"v-37306b0b":()=>t.e(65).then(t.bind(null,564)),"v-d68118aa":()=>t.e(112).then(t.bind(null,565)),"v-0cbf1aab":()=>t.e(52).then(t.bind(null,566)),"v-19f48aff":()=>t.e(58).then(t.bind(null,567)),"v-6acd1126":()=>t.e(84).then(t.bind(null,568)),"v-1493d54b":()=>t.e(55).then(t.bind(null,569)),"v-3a7ef9eb":()=>t.e(69).then(t.bind(null,570))};function s(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const l=/-(\w)/g,c=s(n=>n.replace(l,(n,e)=>e?e.toUpperCase():"")),d=/\B([A-Z])/g,u=s(n=>n.replace(d,"-$1").toLowerCase()),m=s(n=>n.charAt(0).toUpperCase()+n.slice(1));function p(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(m(c(e))):n(m(e))||n(u(e))}const h=Object.assign({},a,i),g=n=>h[n],f=n=>i[n],v=n=>a[n],b=n=>r.b.component(n);function x(n){return p(f,n)}function y(n){return p(v,n)}function w(n){return p(g,n)}function k(n){return p(b,n)}function j(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!k(n)&&w(n)){const e=await w(n)();r.b.component(n,e.default)}}))}function T(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var _=t(193),z=t.n(_),S=t(194),I=t.n(S),E={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${I()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=C(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=P(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return z()([{name:"description",content:this.$description}],n,this.siteMeta,q)},updateCanonicalLink(){$(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",C(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){P(null,this.currentMetaTags),$()}};function $(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function C(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function P(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function q(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var A=t(195),N={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(A)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),o=window.innerHeight+t;for(let n=0;n<e.length;n++){const a=e[n],i=e[n+1],s=0===n&&0===t||t>=a.parentElement.offsetTop+10&&(!i||t<i.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(a.hash)){const t=a;if(o===r)for(let t=n+1;t<e.length;t++)if(l===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},L=(t(362),t(196)),M={data:()=>({zoom:null}),mounted(){this.updateZoom()},updated(){this.updateZoom()},methods:{updateZoom(){setTimeout(()=>{this.zoom&&this.zoom.detach(),this.zoom=Object(L.a)(".theme-reco-content :not(a) > img",{})},1e3)}}},R=t(57),O=t.n(R),D={mounted(){O.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||r.b.component(n.name)||O.a.start(),t()}),this.$router.afterEach(()=>{O.a.done(),this.isSidebarOpen=!1})}},U=t(197),F=t(219),H=[E,N,M,D,U.a,F.a],B={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return T("layout",n),r.b.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},V=t(1),W=Object(V.a)(B,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(W,"mixins",H);const G=[{name:"v-39e916f0",path:"/",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-39e916f0").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-d87406c0",path:"/frontend/algorithm/",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-d87406c0").then(t)}},{path:"/frontend/algorithm/index.html",redirect:"/frontend/algorithm/"},{name:"v-cf0122fe",path:"/frontend/algorithm/alg-leetcode-01.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-cf0122fe").then(t)}},{name:"v-5c30984b",path:"/frontend/algorithm/array-sort.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-5c30984b").then(t)}},{name:"v-9bb5e86a",path:"/frontend/algorithm/stack-base.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-9bb5e86a").then(t)}},{name:"v-87c13ffa",path:"/frontend/algorithm/linkedList-base.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-87c13ffa").then(t)}},{name:"v-737352ab",path:"/frontend/algorithm/binaryTree.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-737352ab").then(t)}},{name:"v-7844a1b2",path:"/frontend/issues/ajax.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-7844a1b2").then(t)}},{name:"v-6c84e740",path:"/frontend/issues/",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-6c84e740").then(t)}},{path:"/frontend/issues/index.html",redirect:"/frontend/issues/"},{name:"v-09e74572",path:"/frontend/issues/all-urls.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-09e74572").then(t)}},{name:"v-8d01e796",path:"/frontend/issues/angular1.x.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-8d01e796").then(t)}},{name:"v-7493ab2a",path:"/frontend/issues/axios.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-7493ab2a").then(t)}},{name:"v-71afeb6b",path:"/frontend/issues/basic.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-71afeb6b").then(t)}},{name:"v-0c938f45",path:"/frontend/issues/commitizen.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-0c938f45").then(t)}},{name:"v-5900f271",path:"/frontend/issues/document.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-5900f271").then(t)}},{name:"v-3e8b35eb",path:"/frontend/issues/dom.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-3e8b35eb").then(t)}},{name:"v-e6907df6",path:"/frontend/issues/eslint.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-e6907df6").then(t)}},{name:"v-521a09eb",path:"/frontend/issues/event.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-521a09eb").then(t)}},{name:"v-dd7fb7c2",path:"/frontend/issues/fq-fn-01.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-dd7fb7c2").then(t)}},{name:"v-2e4cb8ab",path:"/frontend/issues/fq-issue-02.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-2e4cb8ab").then(t)}},{name:"v-18f00c8b",path:"/frontend/issues/fq-issue-01.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-18f00c8b").then(t)}},{name:"v-43a964cb",path:"/frontend/issues/fq-issue-03.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-43a964cb").then(t)}},{name:"v-d4cae84e",path:"/frontend/issues/graphql-github.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-d4cae84e").then(t)}},{name:"v-09c6e9ab",path:"/frontend/issues/handleError.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-09c6e9ab").then(t)}},{name:"v-2e91b746",path:"/frontend/issues/learn-jest.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-2e91b746").then(t)}},{name:"v-0139db16",path:"/frontend/issues/less.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-0139db16").then(t)}},{name:"v-0aa71f1e",path:"/frontend/issues/micro-frontend.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-0aa71f1e").then(t)}},{name:"v-1c46f5ab",path:"/frontend/issues/oop.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-1c46f5ab").then(t)}},{name:"v-29559f8b",path:"/frontend/issues/promise.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-29559f8b").then(t)}},{name:"v-0c4cce2a",path:"/frontend/issues/rem.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-0c4cce2a").then(t)}},{name:"v-bfe34c2a",path:"/frontend/issues/render-html.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-bfe34c2a").then(t)}},{name:"v-55150e46",path:"/frontend/issues/typescript.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-55150e46").then(t)}},{name:"v-843ae6ea",path:"/frontend/issues/sass.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-843ae6ea").then(t)}},{name:"v-37efe66a",path:"/frontend/issues/use-css.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-37efe66a").then(t)}},{name:"v-953c6676",path:"/frontend/issues/use-html.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-953c6676").then(t)}},{name:"v-d3a38240",path:"/frontend/library/",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-d3a38240").then(t)}},{path:"/frontend/library/index.html",redirect:"/frontend/library/"},{name:"v-2858ebea",path:"/frontend/issues/web-xss.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-2858ebea").then(t)}},{name:"v-76cf7acb",path:"/frontend/issues/webpack.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-76cf7acb").then(t)}},{name:"v-7d772acb",path:"/frontend/library/rc-canvas-poster.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-7d772acb").then(t)}},{name:"v-404c7aaa",path:"/frontend/library/rc-hooks-reducer.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-404c7aaa").then(t)}},{name:"v-3c6fea4b",path:"/frontend/library/rc-lifecycle.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-3c6fea4b").then(t)}},{name:"v-b6401aea",path:"/frontend/library/rc-redux.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-b6401aea").then(t)}},{name:"v-cace3e2a",path:"/frontend/library/rc.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-cace3e2a").then(t)}},{name:"v-c0454a2a",path:"/frontend/library/vue-issues.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-c0454a2a").then(t)}},{name:"v-0e09f56b",path:"/frontend/library/vue-libs.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-0e09f56b").then(t)}},{name:"v-c2129e2a",path:"/frontend/library/vue-pagination.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-c2129e2a").then(t)}},{name:"v-e926e472",path:"/frontend/library/vue-plugins.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-e926e472").then(t)}},{name:"v-46d91da7",path:"/frontend/library/vue-props.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-46d91da7").then(t)}},{name:"v-a953fe6a",path:"/frontend/library/vue-router.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-a953fe6a").then(t)}},{name:"v-373abf6b",path:"/frontend/library/vue-slot.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-373abf6b").then(t)}},{name:"v-3fc296ad",path:"/frontend/library/vue.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-3fc296ad").then(t)}},{name:"v-04a8950b",path:"/frontend/library/vue2-tab.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-04a8950b").then(t)}},{name:"v-6ad03320",path:"/services/tools/",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-6ad03320").then(t)}},{path:"/services/tools/index.html",redirect:"/services/tools/"},{name:"v-0cd88c0f",path:"/services/tools/aria2.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-0cd88c0f").then(t)}},{name:"v-6af8ea4b",path:"/services/tools/centos7.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-6af8ea4b").then(t)}},{name:"v-a5b2146a",path:"/services/tools/curl.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-a5b2146a").then(t)}},{name:"v-4ff7afff",path:"/services/tools/ascii.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-4ff7afff").then(t)}},{name:"v-719d672b",path:"/services/tools/get-ua.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-719d672b").then(t)}},{name:"v-4fb88c8b",path:"/services/tools/docker.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-4fb88c8b").then(t)}},{name:"v-05798f2b",path:"/services/tools/github-actions.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-05798f2b").then(t)}},{name:"v-90f907aa",path:"/services/tools/gitlab.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-90f907aa").then(t)}},{name:"v-4bf2e7fd",path:"/services/tools/git.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-4bf2e7fd").then(t)}},{name:"v-b6e43d0e",path:"/services/tools/linux.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-b6e43d0e").then(t)}},{name:"v-005e6c35",path:"/services/tools/meilisearch.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-005e6c35").then(t)}},{name:"v-2e27bdad",path:"/services/tools/nginx.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-2e27bdad").then(t)}},{name:"v-3b86fbaa",path:"/services/tools/nodejs.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-3b86fbaa").then(t)}},{name:"v-f5c06ff6",path:"/services/tools/manjaro.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-f5c06ff6").then(t)}},{name:"v-1982f56a",path:"/services/tools/search-tip.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-1982f56a").then(t)}},{name:"v-37306b0b",path:"/services/tools/todo.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-37306b0b").then(t)}},{name:"v-d68118aa",path:"/services/tools/sentry.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-d68118aa").then(t)}},{name:"v-0cbf1aab",path:"/services/tools/ubuntu.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-0cbf1aab").then(t)}},{name:"v-19f48aff",path:"/services/tools/vagrant.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-19f48aff").then(t)}},{name:"v-6acd1126",path:"/services/tools/vim.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-6acd1126").then(t)}},{name:"v-1493d54b",path:"/services/tools/vscode.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-1493d54b").then(t)}},{name:"v-3a7ef9eb",path:"/services/tools/travis.html",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-3a7ef9eb").then(t)}},{name:"v-b1564aac",path:"/tag/",component:W,beforeEnter:(n,e,t)=>{j("Tags","v-b1564aac").then(t)},meta:{pid:"tags",id:"tags"}},{path:"/tag/index.html",redirect:"/tag/"},{name:"v-ef9325c4",path:"/categories/",component:W,beforeEnter:(n,e,t)=>{j("FrontmatterKey","v-ef9325c4").then(t)},meta:{pid:"categories",id:"categories"}},{path:"/categories/index.html",redirect:"/categories/"},{name:"v-6319eb4e",path:"/timeline/",component:W,beforeEnter:(n,e,t)=>{j("TimeLines","v-6319eb4e").then(t)},meta:{pid:"timeline",id:"timeline"}},{path:"/timeline/index.html",redirect:"/timeline/"},{name:"v-98a2e7c0",path:"/tag/array/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-98a2e7c0").then(t)},meta:{pid:"tags",id:"array"}},{path:"/tag/array/index.html",redirect:"/tag/array/"},{name:"v-13598032",path:"/tag/tree/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-13598032").then(t)},meta:{pid:"tags",id:"tree"}},{path:"/tag/tree/index.html",redirect:"/tag/tree/"},{name:"v-5b0b7c5e",path:"/tag/stack/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-5b0b7c5e").then(t)},meta:{pid:"tags",id:"stack"}},{path:"/tag/stack/index.html",redirect:"/tag/stack/"},{name:"v-61be8730",path:"/tag/queue/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-61be8730").then(t)},meta:{pid:"tags",id:"queue"}},{path:"/tag/queue/index.html",redirect:"/tag/queue/"},{name:"v-9949d8a4",path:"/tag/LinkedList/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-9949d8a4").then(t)},meta:{pid:"tags",id:"LinkedList"}},{path:"/tag/LinkedList/index.html",redirect:"/tag/LinkedList/"},{name:"v-14b7a14e",path:"/tag/heap/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-14b7a14e").then(t)},meta:{pid:"tags",id:"heap"}},{path:"/tag/heap/index.html",redirect:"/tag/heap/"},{name:"v-153af490",path:"/tag/cors/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-153af490").then(t)},meta:{pid:"tags",id:"cors"}},{path:"/tag/cors/index.html",redirect:"/tag/cors/"},{name:"v-073a6dd5",path:"/tag/XMLHttpRequest/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-073a6dd5").then(t)},meta:{pid:"tags",id:"XMLHttpRequest"}},{path:"/tag/XMLHttpRequest/index.html",redirect:"/tag/XMLHttpRequest/"},{name:"v-1559f73a",path:"/tag/blog/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-1559f73a").then(t)},meta:{pid:"tags",id:"blog"}},{path:"/tag/blog/index.html",redirect:"/tag/blog/"},{name:"v-1fa34910",path:"/tag/angular.js/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-1fa34910").then(t)},meta:{pid:"tags",id:"angular.js"}},{path:"/tag/angular.js/index.html",redirect:"/tag/angular.js/"},{name:"v-980194ba",path:"/tag/axios/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-980194ba").then(t)},meta:{pid:"tags",id:"axios"}},{path:"/tag/axios/index.html",redirect:"/tag/axios/"},{name:"v-0cb74bd8",path:"/tag/commitizen/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-0cb74bd8").then(t)},meta:{pid:"tags",id:"commitizen"}},{path:"/tag/commitizen/index.html",redirect:"/tag/commitizen/"},{name:"v-323ace52",path:"/tag/dom/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-323ace52").then(t)},meta:{pid:"tags",id:"dom"}},{path:"/tag/dom/index.html",redirect:"/tag/dom/"},{name:"v-62655d46",path:"/tag/element/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-62655d46").then(t)},meta:{pid:"tags",id:"element"}},{path:"/tag/element/index.html",redirect:"/tag/element/"},{name:"v-d1c09a98",path:"/tag/eslint/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-d1c09a98").then(t)},meta:{pid:"tags",id:"eslint"}},{path:"/tag/eslint/index.html",redirect:"/tag/eslint/"},{name:"v-322a45da",path:"/tag/vue/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-322a45da").then(t)},meta:{pid:"tags",id:"vue"}},{path:"/tag/vue/index.html",redirect:"/tag/vue/"},{name:"v-8a96d802",path:"/tag/event/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-8a96d802").then(t)},meta:{pid:"tags",id:"event"}},{path:"/tag/event/index.html",redirect:"/tag/event/"},{name:"v-11e48bed",path:"/tag/function/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-11e48bed").then(t)},meta:{pid:"tags",id:"function"}},{path:"/tag/function/index.html",redirect:"/tag/function/"},{name:"v-dc4adbe4",path:"/tag/array2tree/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-dc4adbe4").then(t)},meta:{pid:"tags",id:"array2tree"}},{path:"/tag/array2tree/index.html",redirect:"/tag/array2tree/"},{name:"v-5b1c0160",path:"/tag/tree2array/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-5b1c0160").then(t)},meta:{pid:"tags",id:"tree2array"}},{path:"/tag/tree2array/index.html",redirect:"/tag/tree2array/"},{name:"v-c784ecce",path:"/tag/继承/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-c784ecce").then(t)},meta:{pid:"tags",id:"继承"}},{path:"/tag/继承/index.html",redirect:"/tag/继承/"},{name:"v-55654be0",path:"/tag/graphql/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-55654be0").then(t)},meta:{pid:"tags",id:"graphql"}},{path:"/tag/graphql/index.html",redirect:"/tag/graphql/"},{name:"v-8afbbb5e",path:"/tag/error/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-8afbbb5e").then(t)},meta:{pid:"tags",id:"error"}},{path:"/tag/error/index.html",redirect:"/tag/error/"},{name:"v-147ebb2e",path:"/tag/jest/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-147ebb2e").then(t)},meta:{pid:"tags",id:"jest"}},{path:"/tag/jest/index.html",redirect:"/tag/jest/"},{name:"v-14465d68",path:"/tag/less/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-14465d68").then(t)},meta:{pid:"tags",id:"less"}},{path:"/tag/less/index.html",redirect:"/tag/less/"},{name:"v-c9be2158",path:"/tag/1像素问题/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-c9be2158").then(t)},meta:{pid:"tags",id:"1像素问题"}},{path:"/tag/1像素问题/index.html",redirect:"/tag/1像素问题/"},{name:"v-70b965d6",path:"/tag/micro/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-70b965d6").then(t)},meta:{pid:"tags",id:"micro"}},{path:"/tag/micro/index.html",redirect:"/tag/micro/"},{name:"v-d81c09c4",path:"/tag/promise/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-d81c09c4").then(t)},meta:{pid:"tags",id:"promise"}},{path:"/tag/promise/index.html",redirect:"/tag/promise/"},{name:"v-851ebe42",path:"/tag/viewport/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-851ebe42").then(t)},meta:{pid:"tags",id:"viewport"}},{path:"/tag/viewport/index.html",redirect:"/tag/viewport/"},{name:"v-322e5f02",path:"/tag/rem/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-322e5f02").then(t)},meta:{pid:"tags",id:"rem"}},{path:"/tag/rem/index.html",redirect:"/tag/rem/"},{name:"v-4539aef2",path:"/tag/html渲染/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-4539aef2").then(t)},meta:{pid:"tags",id:"html渲染"}},{path:"/tag/html渲染/index.html",redirect:"/tag/html渲染/"},{name:"v-2c1fde64",path:"/tag/tsconfig/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-2c1fde64").then(t)},meta:{pid:"tags",id:"tsconfig"}},{path:"/tag/tsconfig/index.html",redirect:"/tag/tsconfig/"},{name:"v-6173885a",path:"/tag/jsconfig/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-6173885a").then(t)},meta:{pid:"tags",id:"jsconfig"}},{path:"/tag/jsconfig/index.html",redirect:"/tag/jsconfig/"},{name:"v-1384b752",path:"/tag/sass/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-1384b752").then(t)},meta:{pid:"tags",id:"sass"}},{path:"/tag/sass/index.html",redirect:"/tag/sass/"},{name:"v-7630b09a",path:"/tag/清除浮动/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-7630b09a").then(t)},meta:{pid:"tags",id:"清除浮动"}},{path:"/tag/清除浮动/index.html",redirect:"/tag/清除浮动/"},{name:"v-0c6f8b40",path:"/tag/css三角形/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-0c6f8b40").then(t)},meta:{pid:"tags",id:"css三角形"}},{path:"/tag/css三角形/index.html",redirect:"/tag/css三角形/"},{name:"v-0c3f0c0d",path:"/tag/百分比单位/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-0c3f0c0d").then(t)},meta:{pid:"tags",id:"百分比单位"}},{path:"/tag/百分比单位/index.html",redirect:"/tag/百分比单位/"},{name:"v-1dbca4e8",path:"/tag/字体超出省略/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-1dbca4e8").then(t)},meta:{pid:"tags",id:"字体超出省略"}},{path:"/tag/字体超出省略/index.html",redirect:"/tag/字体超出省略/"},{name:"v-653195b2",path:"/tag/居中/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-653195b2").then(t)},meta:{pid:"tags",id:"居中"}},{path:"/tag/居中/index.html",redirect:"/tag/居中/"},{name:"v-382cb721",path:"/tag/布局/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-382cb721").then(t)},meta:{pid:"tags",id:"布局"}},{path:"/tag/布局/index.html",redirect:"/tag/布局/"},{name:"v-2f234f48",path:"/tag/web安全/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-2f234f48").then(t)},meta:{pid:"tags",id:"web安全"}},{path:"/tag/web安全/index.html",redirect:"/tag/web安全/"},{name:"v-b53ec9e8",path:"/tag/webpack/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-b53ec9e8").then(t)},meta:{pid:"tags",id:"webpack"}},{path:"/tag/webpack/index.html",redirect:"/tag/webpack/"},{name:"v-14c4f1da",path:"/tag/gulp/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-14c4f1da").then(t)},meta:{pid:"tags",id:"gulp"}},{path:"/tag/gulp/index.html",redirect:"/tag/gulp/"},{name:"v-3b41c9d6",path:"/tag/px2rem/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-3b41c9d6").then(t)},meta:{pid:"tags",id:"px2rem"}},{path:"/tag/px2rem/index.html",redirect:"/tag/px2rem/"},{name:"v-601bec8c",path:"/tag/react/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-601bec8c").then(t)},meta:{pid:"tags",id:"react"}},{path:"/tag/react/index.html",redirect:"/tag/react/"},{name:"v-98ab27a0",path:"/tag/aria2/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-98ab27a0").then(t)},meta:{pid:"tags",id:"aria2"}},{path:"/tag/aria2/index.html",redirect:"/tag/aria2/"},{name:"v-c6fb9be4",path:"/tag/centos7/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-c6fb9be4").then(t)},meta:{pid:"tags",id:"centos7"}},{path:"/tag/centos7/index.html",redirect:"/tag/centos7/"},{name:"v-153581ce",path:"/tag/curl/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-153581ce").then(t)},meta:{pid:"tags",id:"curl"}},{path:"/tag/curl/index.html",redirect:"/tag/curl/"},{name:"v-989423b0",path:"/tag/ascii/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-989423b0").then(t)},meta:{pid:"tags",id:"ascii"}},{path:"/tag/ascii/index.html",redirect:"/tag/ascii/"},{name:"v-5ae80825",path:"/tag/docker/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-5ae80825").then(t)},meta:{pid:"tags",id:"docker"}},{path:"/tag/docker/index.html",redirect:"/tag/docker/"},{name:"v-3801f600",path:"/tag/docker-compose/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-3801f600").then(t)},meta:{pid:"tags",id:"docker-compose"}},{path:"/tag/docker-compose/index.html",redirect:"/tag/docker-compose/"},{name:"v-1f67da7c",path:"/tag/github/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-1f67da7c").then(t)},meta:{pid:"tags",id:"github"}},{path:"/tag/github/index.html",redirect:"/tag/github/"},{name:"v-1f64cdac",path:"/tag/gitlab/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-1f64cdac").then(t)},meta:{pid:"tags",id:"gitlab"}},{path:"/tag/gitlab/index.html",redirect:"/tag/gitlab/"},{name:"v-32383f72",path:"/tag/git/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-32383f72").then(t)},meta:{pid:"tags",id:"git"}},{path:"/tag/git/index.html",redirect:"/tag/git/"},{name:"v-7418fe36",path:"/tag/linux/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-7418fe36").then(t)},meta:{pid:"tags",id:"linux"}},{path:"/tag/linux/index.html",redirect:"/tag/linux/"},{name:"v-146a0c63",path:"/tag/meilisearch/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-146a0c63").then(t)},meta:{pid:"tags",id:"meilisearch"}},{path:"/tag/meilisearch/index.html",redirect:"/tag/meilisearch/"},{name:"v-dfb71430",path:"/tag/vuepress/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-dfb71430").then(t)},meta:{pid:"tags",id:"vuepress"}},{path:"/tag/vuepress/index.html",redirect:"/tag/vuepress/"},{name:"v-6d82ba02",path:"/tag/nginx/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-6d82ba02").then(t)},meta:{pid:"tags",id:"nginx"}},{path:"/tag/nginx/index.html",redirect:"/tag/nginx/"},{name:"v-122bf2c4",path:"/tag/node.js/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-122bf2c4").then(t)},meta:{pid:"tags",id:"node.js"}},{path:"/tag/node.js/index.html",redirect:"/tag/node.js/"},{name:"v-51bc7eea",path:"/tag/manjaro/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-51bc7eea").then(t)},meta:{pid:"tags",id:"manjaro"}},{path:"/tag/manjaro/index.html",redirect:"/tag/manjaro/"},{name:"v-633c019d",path:"/tag/search/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-633c019d").then(t)},meta:{pid:"tags",id:"search"}},{path:"/tag/search/index.html",redirect:"/tag/search/"},{name:"v-63f45646",path:"/tag/sentry/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-63f45646").then(t)},meta:{pid:"tags",id:"sentry"}},{path:"/tag/sentry/index.html",redirect:"/tag/sentry/"},{name:"v-6dfb9784",path:"/tag/ubuntu/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-6dfb9784").then(t)},meta:{pid:"tags",id:"ubuntu"}},{path:"/tag/ubuntu/index.html",redirect:"/tag/ubuntu/"},{name:"v-728b15a8",path:"/tag/vagrant/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-728b15a8").then(t)},meta:{pid:"tags",id:"vagrant"}},{path:"/tag/vagrant/index.html",redirect:"/tag/vagrant/"},{name:"v-322a9e02",path:"/tag/vim/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-322a9e02").then(t)},meta:{pid:"tags",id:"vim"}},{path:"/tag/vim/index.html",redirect:"/tag/vim/"},{name:"v-19ed615b",path:"/tag/vscode/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-19ed615b").then(t)},meta:{pid:"tags",id:"vscode"}},{path:"/tag/vscode/index.html",redirect:"/tag/vscode/"},{name:"v-5e346c83",path:"/tag/travis-ci/",component:W,beforeEnter:(n,e,t)=>{j("Tag","v-5e346c83").then(t)},meta:{pid:"tags",id:"travis-ci"}},{path:"/tag/travis-ci/index.html",redirect:"/tag/travis-ci/"},{name:"v-41f4a8ff",path:"/categories/frontend/",component:W,beforeEnter:(n,e,t)=>{j("Category","v-41f4a8ff").then(t)},meta:{pid:"categories",id:"frontend"}},{path:"/categories/frontend/index.html",redirect:"/categories/frontend/"},{name:"v-d80bedfc",path:"/categories/system/",component:W,beforeEnter:(n,e,t)=>{j("Category","v-d80bedfc").then(t)},meta:{pid:"categories",id:"system"}},{path:"/categories/system/index.html",redirect:"/categories/system/"},{name:"v-2ebc7033",path:"/categories/services/",component:W,beforeEnter:(n,e,t)=>{j("Category","v-2ebc7033").then(t)},meta:{pid:"categories",id:"services"}},{path:"/categories/services/index.html",redirect:"/categories/services/"},{name:"v-72641fde",path:"/categories/frontend/page/2/",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-72641fde").then(t)},meta:{pid:"categories",id:"frontend"}},{path:"/categories/frontend/page/2/index.html",redirect:"/categories/frontend/page/2/"},{name:"v-72641ffd",path:"/categories/frontend/page/3/",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-72641ffd").then(t)},meta:{pid:"categories",id:"frontend"}},{path:"/categories/frontend/page/3/index.html",redirect:"/categories/frontend/page/3/"},{name:"v-7264201c",path:"/categories/frontend/page/4/",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-7264201c").then(t)},meta:{pid:"categories",id:"frontend"}},{path:"/categories/frontend/page/4/index.html",redirect:"/categories/frontend/page/4/"},{name:"v-7264203b",path:"/categories/frontend/page/5/",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-7264203b").then(t)},meta:{pid:"categories",id:"frontend"}},{path:"/categories/frontend/page/5/index.html",redirect:"/categories/frontend/page/5/"},{name:"v-7264205a",path:"/categories/frontend/page/6/",component:W,beforeEnter:(n,e,t)=>{j("Layout","v-7264205a").then(t)},meta:{pid:"categories",id:"frontend"}},{path:"/categories/frontend/page/6/index.html",redirect:"/categories/frontend/page/6/"},{path:"*",component:W}],K={title:"FE Note",description:"about front-end docs notes website",base:"/guide/",headTags:[["script",{},"\n    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\nnew Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\nj=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n'/guide/js/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n})(window,document,'script','dataLayer','GTM-NRFTTPL');\n    "],["link",{rel:"icon",href:"/guide/logo.png"}],["link",{rel:"manifest",href:"/guide/manifest.json"}],["link",{rel:"stylesheet",href:"/guide/css/prism-okaidia.css"}],["meta",{name:"theme-color",content:"#3eaf7c"}],["meta",{name:"apple-mobile-web-app-capable",content:"yes"}],["meta",{name:"viewport",content:"width=device-width,initial-scale=1,user-scalable=no"}],["meta",{name:"apple-mobile-web-app-status-bar-style",content:"black"}],["meta",{name:"google-site-verification",content:"eHyT7Ws8-2CUA3HNtea2CWJqk-R2c21lN58XjjS6SeU"}],["meta",{name:"msapplication-TileColor",content:"#000000"}],["script",{},'\n    !function(t, a, e) {\n      var n = a.createElement("script");\n      n.type = "text/javascript", n.src = "/guide/js/gtag.js?id=G-ERESYWH7YN",\n      n.async = !0, n.crossOrigin = "anonymous", n.onload = function() {\n          function a() {\n              dataLayer.push(arguments);\n          }\n          t.dataLayer = t.dataLayer || [], a("js", new Date()), a("config", "G-ERESYWH7YN");\n      };\n      var r = a.getElementsByTagName("script")[0];\n      r.parentNode.insertBefore(n, r);\n    }(window, document);\n    ']],pages:[{title:"Home",frontmatter:{home:!0,heroText:"About FE Web Note",tagline:"A Contented mind is a perpetual feast.",bgImageStyle:{height:"450px"},isShowTitleInHome:!1,pageClass:"custom-reco-pages",readingShow:"top"},regularPath:"/",relativePath:"README.md",key:"v-39e916f0",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"3/19/2022",lastUpdatedTimestamp:1647704805e3,createdTime:1643899953e3},{title:"导航目录",frontmatter:{title:"导航目录",date:"2021-06-05T00:00:00.000Z",sidebar:"auto",autoSort:9999,readingShow:"top"},regularPath:"/frontend/algorithm/",relativePath:"frontend/algorithm/README.md",key:"v-d87406c0",path:"/frontend/algorithm/",headersStr:null,content:"常见数据结构: 数组、栈、队列、树、堆、链表、哈希表、图\n\n> The Article Total （ 5 ）\n\n * leetcode题目(一)\n * 数组排序\n * 二叉搜索树\n * 链表\n * 栈与队列",normalizedContent:"常见数据结构: 数组、栈、队列、树、堆、链表、哈希表、图\n\n> the article total （ 5 ）\n\n * leetcode题目(一)\n * 数组排序\n * 二叉搜索树\n * 链表\n * 栈与队列",charsets:{cjk:!0},lastUpdated:"3/11/2023",lastUpdatedTimestamp:1678525665e3,createdTime:1647517837e3},{title:"leetcode题目(一)",frontmatter:{title:"leetcode题目(一)",date:"2022-03-29T00:00:00.000Z",sidebar:"auto",tags:["array","tree"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/algorithm/alg-leetcode-01.html",relativePath:"frontend/algorithm/alg-leetcode-01.md",key:"v-cf0122fe",path:"/frontend/algorithm/alg-leetcode-01.html",headers:[{level:2,title:"fib斐波那契(leetcode509)",slug:"fib斐波那契-leetcode509",normalizedTitle:"fib斐波那契(leetcode509)",charIndex:2},{level:2,title:"两数之和(leetcode1)",slug:"两数之和-leetcode1",normalizedTitle:"两数之和(leetcode1)",charIndex:852},{level:2,title:"三数之和(leetcode15)",slug:"三数之和-leetcode15",normalizedTitle:"三数之和(leetcode15)",charIndex:2194},{level:2,title:"四数之和(leetcode18)",slug:"四数之和-leetcode18",normalizedTitle:"四数之和(leetcode18)",charIndex:3480},{level:2,title:"两个大数相加",slug:"两个大数相加",normalizedTitle:"两个大数相加",charIndex:7509},{level:2,title:"爬楼梯(leetcode70)",slug:"爬楼梯-leetcode70",normalizedTitle:"爬楼梯(leetcode70)",charIndex:8202},{level:2,title:"跳跃游戏(leetcode55)",slug:"跳跃游戏-leetcode55",normalizedTitle:"跳跃游戏(leetcode55)",charIndex:8690},{level:2,title:"不同路径(leetcode62)",slug:"不同路径-leetcode62",normalizedTitle:"不同路径(leetcode62)",charIndex:9028},{level:2,title:"搜索插入位置(leetcode35)",slug:"搜索插入位置-leetcode35",normalizedTitle:"搜索插入位置(leetcode35)",charIndex:9543},{level:2,title:"最长递增子序列(leetcode300)",slug:"最长递增子序列-leetcode300",normalizedTitle:"最长递增子序列(leetcode300)",charIndex:9973},{level:2,title:"LRU缓存(leetcode146)",slug:"lru缓存-leetcode146",normalizedTitle:"lru缓存(leetcode146)",charIndex:11186},{level:2,title:"二叉树的层序遍历(leetcode102)",slug:"二叉树的层序遍历-leetcode102",normalizedTitle:"二叉树的层序遍历(leetcode102)",charIndex:12869},{level:2,title:"有效的括号(leetcode20)",slug:"有效的括号-leetcode20",normalizedTitle:"有效的括号(leetcode20)",charIndex:15019}],headersStr:"fib斐波那契(leetcode509) 两数之和(leetcode1) 三数之和(leetcode15) 四数之和(leetcode18) 两个大数相加 爬楼梯(leetcode70) 跳跃游戏(leetcode55) 不同路径(leetcode62) 搜索插入位置(leetcode35) 最长递增子序列(leetcode300) LRU缓存(leetcode146) 二叉树的层序遍历(leetcode102) 有效的括号(leetcode20)",content:'# fib斐波那契(leetcode509)\n\n> https://leetcode-cn.com/problems/fibonacci-number/\n\n斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和\n\n * 递归版\n\n// fn1\nvar fib = function (N) {\n  if (N == 0) return 0;\n  if (N == 1) return 1;\n  return fib(N - 1) + fib(N - 2)\n};\n\n\n1\n2\n3\n4\n5\n6\n\n * 方法1\n\nvar fib = function(n) {\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    var dp = [];\n    dp[0]=0, dp[1]=1;\n    for (let i = 2; i <= n; i++) {\n      dp[i] = dp[i-1] + dp[i-2]\n    }\n    return dp[n];\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * 方法2\n\nlet fib = n => {\n  if (n == 0) return 0;\n  let a1 = 0, a2 = 1;\n  for (let i = 1; i < n; i++) {\n    [a1, a2] = [a2, a1 + a2];\n  }\n  return a2;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 方法3\n\nlet fib = n => Math.round(\n  (Math.pow((1 + Math.sqrt(5)) / 2, n) -\n    Math.pow((1 - Math.sqrt(5)) / 2, n)) /\n  Math.sqrt(5)\n);\n\n\n1\n2\n3\n4\n5\n\n\n\n# 两数之和(leetcode1)\n\n> https://leetcode-cn.com/problems/two-sum/\n\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    for(var i=0; i<nums.length; i++){\n      var j = target - nums[i]\n      var index = nums.lastIndexOf(j)\n      if(index > -1 && i<index){\n          return [i, index]\n      }\n    }\n};\n\n\nvar twoSum = function(nums, target) {\n    map = new Map()\n    for(let i = 0; i < nums.length; i++) {\n        x = target - nums[i]\n        if(map.has(x)) {\n            return [map.get(x),i]\n        }\n        map.set(nums[i],i)\n    }\n};\n\nfunction twoSum(nums, start, target) {\n    let left = start, right = nums.length - 1;\n    const res = [];\n    while (left < right) {\n        let lo = nums[left], hi = nums[right];\n        const sum = lo + hi;\n        if (sum < target) {\n            while(left < right && nums[left] === lo) left++;\n        } else if (sum > target){\n            while(left < right && nums[right] === hi) right--;\n        } else {\n            res.push([lo, hi]);\n            while (left < right && nums[left] === lo) left++;\n            while(left < right && nums[right] === hi) right--;\n        }\n    }\n    return res;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# 三数之和(leetcode15)\n\n> https://leetcode-cn.com/problems/3sum/\n\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\n\nvar threeSum = function(nums) {\n  if (nums.length < 3) {\n    return [];\n  }\n  // 从小到大排序\n  const arr = nums.sort((a,b) => a-b);\n  // 最小值大于 0 或者 最大值小于 0，说明没有无效答案\n  if (arr[0] > 0 || arr[arr.length - 1] < 0) {\n    return [];\n  }\n  const n = arr.length;\n  const res = [];\n  for (let i = 0; i < n; i ++) {\n    // 如果当前值大于 0，和右侧的值再怎么加也不会等于 0，所以直接退出\n    if (nums[i] > 0) {\n      return res;\n    }\n    // 当前循环的值和上次循环的一样，就跳过，避免重复值\n    if (i > 0 && arr[i] === arr[i - 1]) {\n      continue;\n    }\n    // 双指针\n    let l = i + 1;\n    let r = n - 1;\n    while(l < r) {\n      const temp = arr[i] + arr[l] + arr[r];\n      if (temp > 0) {\n        r --;\n      }\n      if (temp < 0) {\n        l ++;\n      }\n      if (temp === 0) {\n        res.push([nums[i], nums[l], nums[r]]);\n        // 跳过重复值\n        while(l < r && nums[l] === nums[l + 1]) {\n          l ++;\n        }\n        // 同上\n        while(l < r && nums[r] === nums[r - 1]) {\n          r --;\n        }\n\n        l ++;\n        r --;\n      }\n    }\n  }\n  return res;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# 四数之和(leetcode18)\n\n> https://leetcode-cn.com/problems/4sum/\n\n// 求两数之和\nfunction twoSum(nums, start, target) {\n    let left = start, right = nums.length - 1;\n    const res = [];\n    while (left < right) {\n        let lo = nums[left], hi = nums[right];\n        const sum = lo + hi;\n        if (sum < target) {\n            while(left < right && nums[left] === lo) left++;\n        } else if (sum > target){\n            while(left < right && nums[right] === hi) right--;\n        } else {\n            res.push([lo, hi]);\n            while (left < right && nums[left] === lo) left++;\n            while(left < right && nums[right] === hi) right--;\n        }\n    }\n    return res;\n};\n\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums, start, target) {\n    const res = [];\n    let size = nums.length;\n    for (let i = start; i < size; i++) {\n        const tuples = twoSum(nums, i + 1, target - nums[i]);\n        // 如果找到，则会进入下列循环\n        for (const tuple of tuples) {\n            tuple.push(nums[i]);\n            res.push(tuple);\n        }\n        // 跳过重复项\n        while (i < size - 1 && nums[i] === nums[i + 1]) i++;\n    }\n    return res;\n};\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar fourSum = function(nums, target) {\n    nums.sort((a, b) => a - b);\n    const size = nums.length;\n    const res = [];\n    for (let i = 0; i < size; i++) {\n        const triples = threeSum(nums, i + 1, target - nums[i]);\n        for (const triple of triples) {\n            triple.push(nums[i]);\n            res.push(triple);\n        }\n        // 跳过重复项\n        while (i < size - 1 && nums[i] === nums[i + 1]) i++;\n    }\n    return res;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\n * 解法2\n\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar fourSum = function(nums, target) {\n    const result = []\n    if(nums.length < 4) return result\n\n    // 从小到大排序\n    nums.sort((a,b) => a-b)\n\n    const size = nums.length;\n    for(let i=0; i< size-3; i++){\n        if (i > 0 && nums[i] === nums[i - 1]) {\n            continue;\n        }\n        // 如果前四个值的和大于目标值 ，无效\n        if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) {\n            break;\n        }\n        // 判断 最小值与倒数三个数， 是否大于目标值\n        if (nums[i] + nums[size - 3] + nums[size - 2] + nums[size - 1] < target) {\n            continue;\n        }\n\n        for (let j = i + 1; j < size - 2; j++) {\n            if (j > i + 1 && nums[j] === nums[j - 1]) {\n                continue;\n            }\n            // 如果前四个值的和大于目标值 ，无效\n            if (nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) {\n                break;\n            }\n            // 判断前两个值 与 末尾2个值的和 ， 是否大于目标值\n            if (nums[i] + nums[j] + nums[size - 2] + nums[size - 1] < target) {\n                continue;\n            }\n            let left = j+1, right=size-1;\n            while(left<right){\n                const sum = nums[i] + nums[j] + nums[left] + nums[right]; // 求和\n                if (sum === target) {\n                    result.push([nums[i], nums[j], nums[left], nums[right]]);\n                    // 跳过重复\n                    while (left < right && nums[left] === nums[left + 1]) {\n                        left++;\n                    }\n                    // 跳过重复\n                    while (left < right && nums[right] === nums[right - 1]) {\n                        right--;\n                    }\n                    // 继续\n                    left++;\n                    right--;\n                } else if (sum < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n    }\n    return result\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n\n\n\n# 两个大数相加\n\nlet a = "9007199254740991";\nlet b = "1234567899999999999";\n\nfunction add(a ,b){\n   //取两个数字的最大长度\n   let maxLength = Math.max(a.length, b.length);\n   //用0去补齐长度\n   a = a.padStart(maxLength , 0);//"0009007199254740991"\n   b = b.padStart(maxLength , 0);//"1234567899999999999"\n\n   let t = 0;   //定义加法过程中需要用到的变量\n   let f = 0;   //"进位"\n   let sum = "";\n   // 从右往左遍历\n   for(let i=maxLength-1 ; i>=0 ; i--){\n      t = parseInt(a[i]) + parseInt(b[i]) + f;\n      f = Math.floor(t/10); // 取进位\n      sum = t%10 + sum;\n   }\n   // 最后还有进位\n   if(f == 1){\n      sum = "1" + sum;\n   }\n   return sum;\n}\n\nconsole.log(add(a,b))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 爬楼梯(leetcode70)\n\n> https://leetcode-cn.com/problems/climbing-stairs/\n\n * 方法1\n\nvar climbStairs = function(n) {\n  if(n<2) return 1\n  let dp = [];\n  dp[0] = 1, dp[1] = 1;\n  for(let i=2;i<=n;i++){\n    dp[i] = dp[i-1]+dp[i-2]\n  }\n  return dp[n]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 方法2\n\nvar climbStairs = function(n) {\n    if(n < 2) return 1\n    let a1 = 1, a2 = 1;\n    for(let i=2;i<=n; i++){\n        let temp = a1+a2;\n        a1 = a2\n        a2 = temp\n    }\n    return a2\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 跳跃游戏(leetcode55)\n\n> https://leetcode-cn.com/problems/jump-game/\n\nvar canJump = function(nums) {\n    let len = nums.length;\n    let k = 0\n    for(let i=0; i<len; i++){\n        // 索引 与 能移动的最大距离 比较\n        if(i > k) return false\n        // 记录能走的最大距离\n        k = Math.max(k, nums[i]+i)\n    }\n    return true\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 不同路径(leetcode62)\n\n> https://leetcode-cn.com/problems/unique-paths/\n\nvar uniquePaths = function(m, n) {\n    // 初始化 dp\n    const dp = new Array(m).fill(0).map(() => new Array(n).fill(0));\n    for (let i = 0; i < m; i++) {\n        dp[i][0] = 1;\n    }\n    for (let j = 0; j < n; j++) {\n        dp[0][j] = 1;\n    }\n\n    for(let i=1; i< m; i++){\n        for(let j=1; j<n; j++){\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        }\n    }\n\n    return dp[m-1][n-1]\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 搜索插入位置(leetcode35)\n\n> https://leetcode-cn.com/problems/search-insert-position/\n\nvar searchInsert = function(nums, target) {\n    let len = nums.length;\n    let left = 0, right = len-1\n\n    while(left <= right){\n        let mid = ~~(left + (right-left)/2)\n        if(nums[mid] >= target){\n            right = mid -1\n        }else{\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 最长递增子序列(leetcode300)\n\n> https://leetcode-cn.com/problems/longest-increasing-subsequence/\n\n * 方法1\n\nvar lengthOfLIS = function(nums) {\n    let len = nums.length;\n    let dp = Array.from({length:len}).fill(1)\n    let max = 1\n\n    for(let i=0; i<len; i++){\n        for(let j=0; j<i; j++){\n            if(nums[i] > nums[j]){\n                dp[i] = Math.max(dp[i], dp[j]+1)\n            }\n        }\n        max = Math.max(max, dp[i])\n    }\n    return max\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 方法2\n\nvar lengthOfLIS = function(nums) {\n    let len = nums.length;\n    let arr = [nums[0]]\n\n    for(let i=0; i<len;i++){\n        if(nums[i] > arr[arr.length-1]){\n            arr.push(nums[i])\n        }else{\n            let pos = searchInsert(arr, nums[i])\n            arr[pos] = nums[i]\n        }\n    }\n    return arr.length\n}\n\nfunction searchInsert(nums, target){\n    let len = nums.length;\n    let left = 0, right = len-1\n\n    while(left <= right){\n        let mid = ~~(left + (right-left)/2)\n        if(nums[mid] >= target){\n            right = mid -1\n        }else{\n            left = mid + 1\n        }\n    }\n\n    return left\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# LRU缓存(leetcode146)\n\n> LRU（Least recently used，最近最少使用）算法。最近被访问的数据那么它将来访问的概率就大，缓存满的时候，优先淘汰最无人问津者\n\n * 实现逻辑 Map : 原文：146. LRU 缓存机制\n\nMap 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值\nMap.prototype.keys()\n  返回一个新的 Iterator对象， 它按插入顺序包含了Map对象中每个元素的键 。\n\n1、尾部元素一直是最新set的，对应于LRU的最近使用原则\n  Map.set()\n2、头部元素是最远使用的，用于LRU容量满载时删除最远使用的元素，可获取其key\n  Map.keys().next().value\n\n解题步骤\nget\n  元素存在 delete、set\n  元素不存在 return -1\nput\n  元素存在  delete、set\n  元素不存在\n  容量超载 delete map头部元素(map.keys().next().value)、set\n  不超载   set\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 实现代码 leetcode 146\n\n/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n  this.cap = capacity;\n  this.cache = new Map();\n};\n\n/**\n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n  let cache = this.cache;\n  if (cache.has(key)) {\n    let val = cache.get(key);\n    // 删除元素\n    cache.delete(key);\n    // 重新插入到map结构最后\n    cache.set(key, val);\n    return val;\n  } else {\n    return -1;\n  }\n};\n\n/**\n * @param {number} key\n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n  let cache = this.cache;\n  if (cache.has(key)) {\n    // 删除元素\n    cache.delete(key);\n  } else {\n    if (cache.size == this.cap) {\n      // 删除map中第一个元素\n      cache.delete(cache.keys().next().value);\n    }\n  }\n  // 重新赋值插入\n  cache.set(key, value);\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * var obj = new LRUCache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n\n# 二叉树的层序遍历(leetcode102)\n\n> https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\n\nvar levelOrder = function(root) {\n    // 初始化结果数组\n    const res = []  \n    // 处理边界条件\n    if(!root) {\n        return res\n    }  \n    // 初始化队列\n    const queue = []   \n    // 队列第一个元素是根结点\n    queue.push(root)  \n    // 当队列不为空时，反复执行以下逻辑\n    while(queue.length) {\n        // level 用来存储当前层的结点\n        const level = []  \n        // 缓存刚进入循环时的队列长度，这一步很关键，因为队列长度后面会发生改变\n        const len = queue.length  \n        // 循环遍历当前层级的结点\n        for(let i=0;i<len;i++) {\n            // 取出队列的头部元素\n            const top = queue.shift()  \n            // 将头部元素的值推入 level 数组\n            level.push(top.val)\n            // 如果当前结点有左孩子，则推入下一层级\n            if(top.left) {\n                queue.push(top.left)\n            }\n            if(top.right) {\n                queue.push(top.right)\n            }\n        }\n        // 将 level 推入结果数组\n        res.push(level)\n    }\n    // 返回结果数组\n    return res\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n * 面试题，将treeNode使用层序遍历输出\n\nconst ExampleTreeRoot = {\n  name: "Top",\n  children: [\n    {\n      name: "Level 1",\n      children: [\n        {\n          name: "Level 1-1",\n          children: [],\n        },\n        {\n          name: "Level 1-2",\n          children: [],\n        },\n      ],\n    },\n    {\n      name: "Level 2",\n      children: [\n        {\n          name: "Level 2-1",\n          children: [],\n        },\n        {\n          name: "Level 2-2",\n          children: [],\n        },\n      ],\n    },\n  ],\n};\n\nfunction bfs(root) {\n  const queue = []; // 初始化队列queue\n  const ans = [];\n  // 根结点首先入队\n  queue.push(root);\n  // 队列不为空，说明没有遍历完全\n  while (queue.length) {\n    const top = queue[0]; // 取出队头元素\n    // 访问 top\n    ans.push(top.name);\n    if (top.children) {\n      top.children.forEach((chid) => {\n        queue.push(chid);\n      });\n    }\n    queue.shift(); // 访问完毕，队头元素出队\n  }\n  console.log(ans);\n}\n\nbfs(ExampleTreeRoot);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n\n# 有效的括号(leetcode20)\n\n> https://leetcode-cn.com/problems/valid-parentheses/ 给定一个只包括 \'(\'，\')\'，\'{\'，\'}\'，\'[\'，\']\' 的字符串 s ，判断字符串是否有效\n\nvar isValid = function(s) {\n    let map = {\n        "(": ")",\n        "[": "]",\n        "{": "}"\n    }\n    if(!s){return true}\n    if(s.length % 2) return false;  // 如果s.length为奇数\n    \n    const stack = []\n    let len = s.length;\n    for(let i=0; i<len; i++){\n        let ch = s[i]\n        if (ch === "(" || ch === "{" || ch === "["){\n            stack.push(map[ch])\n        }else{\n            if (!stack.length || stack.pop() !== ch) {\n                return false;\n            }\n        }\n    }\n    return !stack.length\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n',normalizedContent:'# fib斐波那契(leetcode509)\n\n> https://leetcode-cn.com/problems/fibonacci-number/\n\n斐波那契数 （通常用 f(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和\n\n * 递归版\n\n// fn1\nvar fib = function (n) {\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  return fib(n - 1) + fib(n - 2)\n};\n\n\n1\n2\n3\n4\n5\n6\n\n * 方法1\n\nvar fib = function(n) {\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    var dp = [];\n    dp[0]=0, dp[1]=1;\n    for (let i = 2; i <= n; i++) {\n      dp[i] = dp[i-1] + dp[i-2]\n    }\n    return dp[n];\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * 方法2\n\nlet fib = n => {\n  if (n == 0) return 0;\n  let a1 = 0, a2 = 1;\n  for (let i = 1; i < n; i++) {\n    [a1, a2] = [a2, a1 + a2];\n  }\n  return a2;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 方法3\n\nlet fib = n => math.round(\n  (math.pow((1 + math.sqrt(5)) / 2, n) -\n    math.pow((1 - math.sqrt(5)) / 2, n)) /\n  math.sqrt(5)\n);\n\n\n1\n2\n3\n4\n5\n\n\n\n# 两数之和(leetcode1)\n\n> https://leetcode-cn.com/problems/two-sum/\n\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twosum = function(nums, target) {\n    for(var i=0; i<nums.length; i++){\n      var j = target - nums[i]\n      var index = nums.lastindexof(j)\n      if(index > -1 && i<index){\n          return [i, index]\n      }\n    }\n};\n\n\nvar twosum = function(nums, target) {\n    map = new map()\n    for(let i = 0; i < nums.length; i++) {\n        x = target - nums[i]\n        if(map.has(x)) {\n            return [map.get(x),i]\n        }\n        map.set(nums[i],i)\n    }\n};\n\nfunction twosum(nums, start, target) {\n    let left = start, right = nums.length - 1;\n    const res = [];\n    while (left < right) {\n        let lo = nums[left], hi = nums[right];\n        const sum = lo + hi;\n        if (sum < target) {\n            while(left < right && nums[left] === lo) left++;\n        } else if (sum > target){\n            while(left < right && nums[right] === hi) right--;\n        } else {\n            res.push([lo, hi]);\n            while (left < right && nums[left] === lo) left++;\n            while(left < right && nums[right] === hi) right--;\n        }\n    }\n    return res;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# 三数之和(leetcode15)\n\n> https://leetcode-cn.com/problems/3sum/\n\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\n\nvar threesum = function(nums) {\n  if (nums.length < 3) {\n    return [];\n  }\n  // 从小到大排序\n  const arr = nums.sort((a,b) => a-b);\n  // 最小值大于 0 或者 最大值小于 0，说明没有无效答案\n  if (arr[0] > 0 || arr[arr.length - 1] < 0) {\n    return [];\n  }\n  const n = arr.length;\n  const res = [];\n  for (let i = 0; i < n; i ++) {\n    // 如果当前值大于 0，和右侧的值再怎么加也不会等于 0，所以直接退出\n    if (nums[i] > 0) {\n      return res;\n    }\n    // 当前循环的值和上次循环的一样，就跳过，避免重复值\n    if (i > 0 && arr[i] === arr[i - 1]) {\n      continue;\n    }\n    // 双指针\n    let l = i + 1;\n    let r = n - 1;\n    while(l < r) {\n      const temp = arr[i] + arr[l] + arr[r];\n      if (temp > 0) {\n        r --;\n      }\n      if (temp < 0) {\n        l ++;\n      }\n      if (temp === 0) {\n        res.push([nums[i], nums[l], nums[r]]);\n        // 跳过重复值\n        while(l < r && nums[l] === nums[l + 1]) {\n          l ++;\n        }\n        // 同上\n        while(l < r && nums[r] === nums[r - 1]) {\n          r --;\n        }\n\n        l ++;\n        r --;\n      }\n    }\n  }\n  return res;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# 四数之和(leetcode18)\n\n> https://leetcode-cn.com/problems/4sum/\n\n// 求两数之和\nfunction twosum(nums, start, target) {\n    let left = start, right = nums.length - 1;\n    const res = [];\n    while (left < right) {\n        let lo = nums[left], hi = nums[right];\n        const sum = lo + hi;\n        if (sum < target) {\n            while(left < right && nums[left] === lo) left++;\n        } else if (sum > target){\n            while(left < right && nums[right] === hi) right--;\n        } else {\n            res.push([lo, hi]);\n            while (left < right && nums[left] === lo) left++;\n            while(left < right && nums[right] === hi) right--;\n        }\n    }\n    return res;\n};\n\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threesum = function(nums, start, target) {\n    const res = [];\n    let size = nums.length;\n    for (let i = start; i < size; i++) {\n        const tuples = twosum(nums, i + 1, target - nums[i]);\n        // 如果找到，则会进入下列循环\n        for (const tuple of tuples) {\n            tuple.push(nums[i]);\n            res.push(tuple);\n        }\n        // 跳过重复项\n        while (i < size - 1 && nums[i] === nums[i + 1]) i++;\n    }\n    return res;\n};\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar foursum = function(nums, target) {\n    nums.sort((a, b) => a - b);\n    const size = nums.length;\n    const res = [];\n    for (let i = 0; i < size; i++) {\n        const triples = threesum(nums, i + 1, target - nums[i]);\n        for (const triple of triples) {\n            triple.push(nums[i]);\n            res.push(triple);\n        }\n        // 跳过重复项\n        while (i < size - 1 && nums[i] === nums[i + 1]) i++;\n    }\n    return res;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\n * 解法2\n\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar foursum = function(nums, target) {\n    const result = []\n    if(nums.length < 4) return result\n\n    // 从小到大排序\n    nums.sort((a,b) => a-b)\n\n    const size = nums.length;\n    for(let i=0; i< size-3; i++){\n        if (i > 0 && nums[i] === nums[i - 1]) {\n            continue;\n        }\n        // 如果前四个值的和大于目标值 ，无效\n        if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) {\n            break;\n        }\n        // 判断 最小值与倒数三个数， 是否大于目标值\n        if (nums[i] + nums[size - 3] + nums[size - 2] + nums[size - 1] < target) {\n            continue;\n        }\n\n        for (let j = i + 1; j < size - 2; j++) {\n            if (j > i + 1 && nums[j] === nums[j - 1]) {\n                continue;\n            }\n            // 如果前四个值的和大于目标值 ，无效\n            if (nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) {\n                break;\n            }\n            // 判断前两个值 与 末尾2个值的和 ， 是否大于目标值\n            if (nums[i] + nums[j] + nums[size - 2] + nums[size - 1] < target) {\n                continue;\n            }\n            let left = j+1, right=size-1;\n            while(left<right){\n                const sum = nums[i] + nums[j] + nums[left] + nums[right]; // 求和\n                if (sum === target) {\n                    result.push([nums[i], nums[j], nums[left], nums[right]]);\n                    // 跳过重复\n                    while (left < right && nums[left] === nums[left + 1]) {\n                        left++;\n                    }\n                    // 跳过重复\n                    while (left < right && nums[right] === nums[right - 1]) {\n                        right--;\n                    }\n                    // 继续\n                    left++;\n                    right--;\n                } else if (sum < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n    }\n    return result\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n\n\n\n# 两个大数相加\n\nlet a = "9007199254740991";\nlet b = "1234567899999999999";\n\nfunction add(a ,b){\n   //取两个数字的最大长度\n   let maxlength = math.max(a.length, b.length);\n   //用0去补齐长度\n   a = a.padstart(maxlength , 0);//"0009007199254740991"\n   b = b.padstart(maxlength , 0);//"1234567899999999999"\n\n   let t = 0;   //定义加法过程中需要用到的变量\n   let f = 0;   //"进位"\n   let sum = "";\n   // 从右往左遍历\n   for(let i=maxlength-1 ; i>=0 ; i--){\n      t = parseint(a[i]) + parseint(b[i]) + f;\n      f = math.floor(t/10); // 取进位\n      sum = t%10 + sum;\n   }\n   // 最后还有进位\n   if(f == 1){\n      sum = "1" + sum;\n   }\n   return sum;\n}\n\nconsole.log(add(a,b))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 爬楼梯(leetcode70)\n\n> https://leetcode-cn.com/problems/climbing-stairs/\n\n * 方法1\n\nvar climbstairs = function(n) {\n  if(n<2) return 1\n  let dp = [];\n  dp[0] = 1, dp[1] = 1;\n  for(let i=2;i<=n;i++){\n    dp[i] = dp[i-1]+dp[i-2]\n  }\n  return dp[n]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 方法2\n\nvar climbstairs = function(n) {\n    if(n < 2) return 1\n    let a1 = 1, a2 = 1;\n    for(let i=2;i<=n; i++){\n        let temp = a1+a2;\n        a1 = a2\n        a2 = temp\n    }\n    return a2\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 跳跃游戏(leetcode55)\n\n> https://leetcode-cn.com/problems/jump-game/\n\nvar canjump = function(nums) {\n    let len = nums.length;\n    let k = 0\n    for(let i=0; i<len; i++){\n        // 索引 与 能移动的最大距离 比较\n        if(i > k) return false\n        // 记录能走的最大距离\n        k = math.max(k, nums[i]+i)\n    }\n    return true\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 不同路径(leetcode62)\n\n> https://leetcode-cn.com/problems/unique-paths/\n\nvar uniquepaths = function(m, n) {\n    // 初始化 dp\n    const dp = new array(m).fill(0).map(() => new array(n).fill(0));\n    for (let i = 0; i < m; i++) {\n        dp[i][0] = 1;\n    }\n    for (let j = 0; j < n; j++) {\n        dp[0][j] = 1;\n    }\n\n    for(let i=1; i< m; i++){\n        for(let j=1; j<n; j++){\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        }\n    }\n\n    return dp[m-1][n-1]\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 搜索插入位置(leetcode35)\n\n> https://leetcode-cn.com/problems/search-insert-position/\n\nvar searchinsert = function(nums, target) {\n    let len = nums.length;\n    let left = 0, right = len-1\n\n    while(left <= right){\n        let mid = ~~(left + (right-left)/2)\n        if(nums[mid] >= target){\n            right = mid -1\n        }else{\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 最长递增子序列(leetcode300)\n\n> https://leetcode-cn.com/problems/longest-increasing-subsequence/\n\n * 方法1\n\nvar lengthoflis = function(nums) {\n    let len = nums.length;\n    let dp = array.from({length:len}).fill(1)\n    let max = 1\n\n    for(let i=0; i<len; i++){\n        for(let j=0; j<i; j++){\n            if(nums[i] > nums[j]){\n                dp[i] = math.max(dp[i], dp[j]+1)\n            }\n        }\n        max = math.max(max, dp[i])\n    }\n    return max\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 方法2\n\nvar lengthoflis = function(nums) {\n    let len = nums.length;\n    let arr = [nums[0]]\n\n    for(let i=0; i<len;i++){\n        if(nums[i] > arr[arr.length-1]){\n            arr.push(nums[i])\n        }else{\n            let pos = searchinsert(arr, nums[i])\n            arr[pos] = nums[i]\n        }\n    }\n    return arr.length\n}\n\nfunction searchinsert(nums, target){\n    let len = nums.length;\n    let left = 0, right = len-1\n\n    while(left <= right){\n        let mid = ~~(left + (right-left)/2)\n        if(nums[mid] >= target){\n            right = mid -1\n        }else{\n            left = mid + 1\n        }\n    }\n\n    return left\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# lru缓存(leetcode146)\n\n> lru（least recently used，最近最少使用）算法。最近被访问的数据那么它将来访问的概率就大，缓存满的时候，优先淘汰最无人问津者\n\n * 实现逻辑 map : 原文：146. lru 缓存机制\n\nmap 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，map 对象是按插入的顺序返回键值\nmap.prototype.keys()\n  返回一个新的 iterator对象， 它按插入顺序包含了map对象中每个元素的键 。\n\n1、尾部元素一直是最新set的，对应于lru的最近使用原则\n  map.set()\n2、头部元素是最远使用的，用于lru容量满载时删除最远使用的元素，可获取其key\n  map.keys().next().value\n\n解题步骤\nget\n  元素存在 delete、set\n  元素不存在 return -1\nput\n  元素存在  delete、set\n  元素不存在\n  容量超载 delete map头部元素(map.keys().next().value)、set\n  不超载   set\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 实现代码 leetcode 146\n\n/**\n * @param {number} capacity\n */\nvar lrucache = function(capacity) {\n  this.cap = capacity;\n  this.cache = new map();\n};\n\n/**\n * @param {number} key\n * @return {number}\n */\nlrucache.prototype.get = function(key) {\n  let cache = this.cache;\n  if (cache.has(key)) {\n    let val = cache.get(key);\n    // 删除元素\n    cache.delete(key);\n    // 重新插入到map结构最后\n    cache.set(key, val);\n    return val;\n  } else {\n    return -1;\n  }\n};\n\n/**\n * @param {number} key\n * @param {number} value\n * @return {void}\n */\nlrucache.prototype.put = function(key, value) {\n  let cache = this.cache;\n  if (cache.has(key)) {\n    // 删除元素\n    cache.delete(key);\n  } else {\n    if (cache.size == this.cap) {\n      // 删除map中第一个元素\n      cache.delete(cache.keys().next().value);\n    }\n  }\n  // 重新赋值插入\n  cache.set(key, value);\n};\n\n/**\n * your lrucache object will be instantiated and called as such:\n * var obj = new lrucache(capacity)\n * var param_1 = obj.get(key)\n * obj.put(key,value)\n */\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n\n# 二叉树的层序遍历(leetcode102)\n\n> https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\n\nvar levelorder = function(root) {\n    // 初始化结果数组\n    const res = []  \n    // 处理边界条件\n    if(!root) {\n        return res\n    }  \n    // 初始化队列\n    const queue = []   \n    // 队列第一个元素是根结点\n    queue.push(root)  \n    // 当队列不为空时，反复执行以下逻辑\n    while(queue.length) {\n        // level 用来存储当前层的结点\n        const level = []  \n        // 缓存刚进入循环时的队列长度，这一步很关键，因为队列长度后面会发生改变\n        const len = queue.length  \n        // 循环遍历当前层级的结点\n        for(let i=0;i<len;i++) {\n            // 取出队列的头部元素\n            const top = queue.shift()  \n            // 将头部元素的值推入 level 数组\n            level.push(top.val)\n            // 如果当前结点有左孩子，则推入下一层级\n            if(top.left) {\n                queue.push(top.left)\n            }\n            if(top.right) {\n                queue.push(top.right)\n            }\n        }\n        // 将 level 推入结果数组\n        res.push(level)\n    }\n    // 返回结果数组\n    return res\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n * 面试题，将treenode使用层序遍历输出\n\nconst exampletreeroot = {\n  name: "top",\n  children: [\n    {\n      name: "level 1",\n      children: [\n        {\n          name: "level 1-1",\n          children: [],\n        },\n        {\n          name: "level 1-2",\n          children: [],\n        },\n      ],\n    },\n    {\n      name: "level 2",\n      children: [\n        {\n          name: "level 2-1",\n          children: [],\n        },\n        {\n          name: "level 2-2",\n          children: [],\n        },\n      ],\n    },\n  ],\n};\n\nfunction bfs(root) {\n  const queue = []; // 初始化队列queue\n  const ans = [];\n  // 根结点首先入队\n  queue.push(root);\n  // 队列不为空，说明没有遍历完全\n  while (queue.length) {\n    const top = queue[0]; // 取出队头元素\n    // 访问 top\n    ans.push(top.name);\n    if (top.children) {\n      top.children.foreach((chid) => {\n        queue.push(chid);\n      });\n    }\n    queue.shift(); // 访问完毕，队头元素出队\n  }\n  console.log(ans);\n}\n\nbfs(exampletreeroot);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n\n# 有效的括号(leetcode20)\n\n> https://leetcode-cn.com/problems/valid-parentheses/ 给定一个只包括 \'(\'，\')\'，\'{\'，\'}\'，\'[\'，\']\' 的字符串 s ，判断字符串是否有效\n\nvar isvalid = function(s) {\n    let map = {\n        "(": ")",\n        "[": "]",\n        "{": "}"\n    }\n    if(!s){return true}\n    if(s.length % 2) return false;  // 如果s.length为奇数\n    \n    const stack = []\n    let len = s.length;\n    for(let i=0; i<len; i++){\n        let ch = s[i]\n        if (ch === "(" || ch === "{" || ch === "["){\n            stack.push(map[ch])\n        }else{\n            if (!stack.length || stack.pop() !== ch) {\n                return false;\n            }\n        }\n    }\n    return !stack.length\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n',charsets:{cjk:!0},lastUpdated:"3/29/2022",lastUpdatedTimestamp:1648559949e3,createdTime:164801325e4},{title:"数组排序",frontmatter:{title:"数组排序",date:"2021-06-18T00:00:00.000Z",sidebar:"auto",autoSort:885,tags:["array"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/algorithm/array-sort.html",relativePath:"frontend/algorithm/array-sort.md",key:"v-5c30984b",path:"/frontend/algorithm/array-sort.html",headers:[{level:2,title:"冒泡排序",slug:"冒泡排序",normalizedTitle:"冒泡排序",charIndex:40},{level:2,title:"快速排序",slug:"快速排序",normalizedTitle:"快速排序",charIndex:706},{level:2,title:"选择排序",slug:"选择排序",normalizedTitle:"选择排序",charIndex:3179},{level:2,title:"归并排序",slug:"归并排序",normalizedTitle:"归并排序",charIndex:3789},{level:2,title:"插入排序",slug:"插入排序",normalizedTitle:"插入排序",charIndex:4826},{level:3,title:"直接插入",slug:"直接插入",normalizedTitle:"直接插入",charIndex:4835},{level:3,title:"拆半插入",slug:"拆半插入",normalizedTitle:"拆半插入",charIndex:5922},{level:2,title:"希尔排序",slug:"希尔排序",normalizedTitle:"希尔排序",charIndex:7270},{level:2,title:"堆排序",slug:"堆排序",normalizedTitle:"堆排序",charIndex:8823},{level:2,title:"桶排序",slug:"桶排序",normalizedTitle:"桶排序",charIndex:10510},{level:2,title:"计数排序",slug:"计数排序",normalizedTitle:"计数排序",charIndex:12885},{level:2,title:"基数排序",slug:"基数排序",normalizedTitle:"基数排序",charIndex:14372},{level:2,title:"算法可视化工具",slug:"算法可视化工具",normalizedTitle:"算法可视化工具",charIndex:15675},{level:2,title:"二分查找(Binary Search)",slug:"二分查找-binary-search",normalizedTitle:"二分查找(binary search)",charIndex:15731},{level:2,title:"搜索插入位置",slug:"搜索插入位置",normalizedTitle:"搜索插入位置",charIndex:16181},{level:2,title:"有序数组合并为一个数组",slug:"有序数组合并为一个数组",normalizedTitle:"有序数组合并为一个数组",charIndex:16613},{level:2,title:"数组去重",slug:"数组去重",normalizedTitle:"数组去重",charIndex:17610}],headersStr:"冒泡排序 快速排序 选择排序 归并排序 插入排序 直接插入 拆半插入 希尔排序 堆排序 桶排序 计数排序 基数排序 算法可视化工具 二分查找(Binary Search) 搜索插入位置 有序数组合并为一个数组 数组去重",content:"原文: JavaScript 数据结构与算法之美 - 十大经典排序算法\n\n\n# 冒泡排序\n\n * 步骤\n   * 冒泡排序只会操作相邻的两个数据;\n   * 每次冒泡操作都会对相邻的两个元素进行比较，看是否满足大小关系要求。如果不满足就让它俩互换;\n   * 一次冒泡会让至少一个元素移动到它应该在的位置，重复 n 次，就完成了 n 个数据的排序工作.\n\n\n\n * 代码\n\nfunction bubbleSort(arr) {\n  var i = arr.length - 1; //初始时,最后位置保持不变\n  while (i > 0) {\n    var pos = 0; //每趟开始时,无记录交换\n    for (var j = 0; j < i; j++)\n      console.log(arr[j], arr[j + 1])\n    if (arr[j] > arr[j + 1]) {\n      pos = j; //记录交换的位置\n      var tmp = arr[j];\n      arr[j] = arr[j + 1];\n      arr[j + 1] = tmp;\n    }\n    i = pos; //为下一趟排序作准备\n  }\n  return arr;\n}\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\nconsole.log(bubbleSort(arr));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 快速排序\n\n * 相关资料： 资料 1 | 资料 2 | 资料 3 | 资料 4\n\n * 步骤\n   \n   * 先找到一个基准点（一般指数组的中部），然后数组被该基准点分为两部分，依次与该基准点数据比较，如果比它小，放左边；反之，放右边。\n   * 左右分别用一个空数组去存储比较后的数据。\n   * 最后递归执行上述操作，直到数组长度 <= 1\n\n\n\n * 代码实现\n\nconst quickSort = nums => {\n  let arr = [...nums]\n  if (arr.length <= 1) {\n    return arr;\n  }\n  //取基准点\n  const midIndex = Math.floor(arr.length / 2);\n  //取基准点的值，splice(index,1) 则返回的是含有被删除的元素的数组。\n  const valArr = arr.splice(midIndex, 1);\n  const midIndexVal = valArr[0];\n  const left = []; //存放比基准点小的数组\n  const right = []; //存放比基准点大的数组\n  //遍历数组，进行判断分配\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < midIndexVal) {\n      left.push(arr[i]); //比基准点小的放在左边数组\n    } else {\n      right.push(arr[i]); //比基准点大的放在右边数组\n    }\n  }\n  //递归执行以上操作，对左右两个数组进行操作，直到数组长度为 <= 1\n  return quickSort(left).concat(midIndexVal, quickSort(right));\n};\nconsole.log('quickSort ', quickSort([5, 14, 3, 21, 10]));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * 原地分区版快速排序实现\n\n// 原地分区版快速排序实现\nconst quickSort2 = (arr, left, right) => {\n  let len = arr.length,\n    partitionIndex;\n  left = typeof left != 'number' ? 0 : left;\n  right = typeof right != 'number' ? len - 1 : right;\n\n  if (left < right) {\n    // 返回基准值的所在位置， 即索引\n    partitionIndex = partition(arr, left, right);\n    // 可理解为：把数组拆分为 左边的数组值都比基准值小，右边的数组都比基准值大\n\n    // 比对基准值左边的数组\n    quickSort2(arr, left, partitionIndex - 1);\n    // 比对基准值右边的数组\n    quickSort2(arr, partitionIndex + 1, right);\n  }\n  return arr;\n};\n\nconst swap = (arr, i, j) => {\n  // let temp = arr[i];\n  // arr[i] = arr[j];\n  // arr[j] = temp;\n  [arr[i], arr[j]] = [arr[j], arr[i]]\n};\n\nconst partition = (arr, left, right) => {\n  //分区操作\n  let pivotIdx = left, //基准值（pivot）的索引\n    pivot = arr[pivotIdx], // 基准值（pivot）\n    index = pivotIdx + 1; // 初始index的位置\n\n  // index: 最终记录着数组中首次比基准值（pivot）大的最后索引位置\n\n  // i 取 index 的下一个数与之对比\n  for (let i = index; i <= right; i++) {\n    // 判断基准值与当前项的大小\n    if (arr[i] < pivot) {\n      // 如果比基准值小，将arr[i] 与 arr[index]交换\n      // 即 小于基准值的 与 大于基准值的 互相交换\n      swap(arr, i, index);\n      // index 下移一位\n      index++;\n    }\n  }\n  // 将基准值与最后一次小于它的值交换\n  swap(arr, pivotIdx, index - 1);\n\n  // 返回最后一次比基准值小的索引位置： index-1\n  return index - 1;\n};\n\nconst array2 = [8, 5, 1, 13, 2, 6, 9, 21];\n\nconsole.log('quickSort2 ', quickSort2(array2));\n// => [ 1, 2, 5, 6, 8, 9, 13, 21 ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n\n# 选择排序\n\n * 步骤\n   * 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置\n   * 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾\n   * 重复第二步，直到所有元素均排序完毕\n\n\n\n * 代码\n\nfunction selectionSort(arr) {\n  if (arr.length <= 1) return arr;\n  let len = arr.length;\n  let minIndex, temp;\n  for (let i = 0; i < len - 1; i++) {\n    minIndex = i;\n    for (let j = i + 1; j < len; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n    // temp = arr[i];\n    // arr[i] = arr[minIndex];\n    // arr[minIndex] = temp;\n  }\n  return arr;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 归并排序\n\n * 相关资料：资料 1\n\n排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序\n\n\n\n * 代码\n\nconst mergeSort = arr => {\n  //采用自上而下的递归方法\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  // length >> 1 和 Math.floor(len / 2) 等价\n  let middle = Math.floor(len / 2),\n    left = arr.slice(0, middle),\n    right = arr.slice(middle); // 拆分为两个子数组\n  return merge(mergeSort(left), mergeSort(right));\n};\n\nconst merge = (left, right) => {\n  const result = [];\n  while (left.length && right.length) {\n    // 注意: 判断的条件是小于或等于，如果只是小于，那么排序将不稳定.\n    if (left[0] <= right[0]) {\n      result.push(left.shift());\n    } else {\n      result.push(right.shift());\n    }\n  }\n\n  while (left.length) result.push(left.shift());\n  while (right.length) result.push(right.shift());\n  return result;\n};\nconst arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\nconsole.time('归并排序耗时');\nconsole.log('arr :', mergeSort(arr));\nconsole.timeEnd('归并排序耗时');\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 插入排序\n\n\n# 直接插入\n\n * 步骤\n   \n   * 从第一个元素开始，该元素可以认为已经被排序；\n   * 取出下一个元素，在已经排序的元素序列中从后向前扫描；\n   * 如果该元素（已排序）大于新元素，将该元素移到下一位置；\n   * 重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；\n   * 将新元素插入到该位置后；\n   * 重复步骤 2 ~ 5\n\n\n\n * 代码\n\n// 插入排序\nconst insertionSort = array => {\n  const len = array.length;\n  if (len <= 1) return\n\n  let preIndex, current;\n  for (let i = 1; i < len; i++) {\n    preIndex = i - 1; //待比较元素的下标\n    current = array[i]; //当前元素\n    while (preIndex >= 0 && array[preIndex] > current) {\n      //前置条件之一: 待比较元素比当前元素大\n      array[preIndex + 1] = array[preIndex]; //将待比较元素后移一位\n      preIndex--; //游标前移一位\n    }\n    if (preIndex + 1 != i) {\n      //避免同一个元素赋值给自身\n      array[preIndex + 1] = current; //将当前元素插入预留空位\n      console.log('array :', array);\n    }\n  }\n  return array;\n};\n\n// 测试\nconst array = [5, 4, 3, 2, 1];\nconsole.log(\"原始 array :\", array);\ninsertionSort(array);\n// 原始 array:    [5, 4, 3, 2, 1]\n// array:  \t\t [4, 5, 3, 2, 1]\n// array:  \t\t [3, 4, 5, 2, 1]\n// array: \t\t [2, 3, 4, 5, 1]\n// array:  \t\t [1, 2, 3, 4, 5]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 拆半插入\n\n * 步骤\n   \n   * 取0 ~ i-1 的中间点 ( m = (i-1) >> 1 )，array[i] 与array[m] 进行比较，若 array[i] < array[m]，则说明待插入的元素 array[i]应该处于数组的 0 ~ m索引之间；反之，则说明它应该处于数组的 m ~ i-1 索引之间。\n   * 重复步骤 1，每次缩小一半的查找范围，直至找到插入的位置。\n   * 将数组中插入位置之后的元素全部后移一位。\n   * 在指定位置插入第 i 个元素。\n\n注：x >> 1 是位运算中的右移运算，表示右移一位，等同于 x 除以 2 再取整，即 x >> 1 == Math.floor(x/2)\n\n * 代码\n\n// 折半插入排序\nconst binaryInsertionSort = array => {\n  const len = array.length;\n  if (len <= 1) return;\n\n  let current, i, j, low, high, m;\n  for (i = 1; i < len; i++) {\n    low = 0;\n    high = i - 1;\n    current = array[i];\n\n    while (low <= high) {\n      //步骤 1 & 2 : 折半查找\n      m = (low + high) >> 1; // 注: x>>1 是位运算中的右移运算, 表示右移一位, 等同于 x 除以 2 再取整, 即 x>>1 == Math.floor(x/2) .\n      if (array[i] >= array[m]) {\n        //值相同时, 切换到高半区，保证稳定性\n        low = m + 1; //插入点在高半区\n      } else {\n        high = m - 1; //插入点在低半区\n      }\n    }\n    for (j = i; j > low; j--) {\n      //步骤 3: 插入位置之后的元素全部后移一位\n      array[j] = array[j - 1];\n      console.log('array2 :', JSON.parse(JSON.stringify(array)));\n    }\n    array[low] = current; //步骤 4: 插入该元素\n  }\n  console.log('array2 :', JSON.parse(JSON.stringify(array)));\n  return array;\n};\n\nconst array2 = [5, 4, 3, 2, 1];\nconsole.log('原始 array2:', array2);\nbinaryInsertionSort(array2);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 希尔排序\n\n * 步骤\n   * 先将整个待排序的记录序列分割成为若干子序列。\n   * 分别进行直接插入排序。\n   * 待整个序列中的记录基本有序时，再对全体记录进行依次直接插入排序。\n\n\n\n * 代码\n\nconst shellSort = arr => {\n  let len = arr.length,\n    temp,\n    gap = 1;\n  console.time('希尔排序耗时');\n  while (gap < len / 3) {\n    //动态定义间隔序列\n    gap = gap * 3 + 1;\n  }\n  for (gap; gap > 0; gap = Math.floor(gap / 3)) {\n    for (let i = gap; i < len; i++) {\n      temp = arr[i];\n      let j = i - gap;\n      for (; j >= 0 && arr[j] > temp; j -= gap) {\n        arr[j + gap] = arr[j];\n      }\n      arr[j + gap] = temp;\n      console.log('arr  :', arr);\n    }\n  }\n  console.timeEnd('希尔排序耗时');\n  return arr;\n};\n\n// 测试\nconst array = [35, 33, 42, 10, 14, 19, 27, 44];\nconsole.log('原始array:', array);\nconst newArr = shellSort(array);\nconsole.log('newArr:', newArr);\n// 原始 array:   [35, 33, 42, 10, 14, 19, 27, 44]\n// arr      :   [14, 33, 42, 10, 35, 19, 27, 44]\n// arr      :   [14, 19, 42, 10, 35, 33, 27, 44]\n// arr      :   [14, 19, 27, 10, 35, 33, 42, 44]\n// arr      :   [14, 19, 27, 10, 35, 33, 42, 44]\n// arr      :   [14, 19, 27, 10, 35, 33, 42, 44]\n// arr      :   [14, 19, 27, 10, 35, 33, 42, 44]\n// arr      :   [10, 14, 19, 27, 35, 33, 42, 44]\n// arr      :   [10, 14, 19, 27, 35, 33, 42, 44]\n// arr      :   [10, 14, 19, 27, 33, 35, 42, 44]\n// arr      :   [10, 14, 19, 27, 33, 35, 42, 44]\n// arr      :   [10, 14, 19, 27, 33, 35, 42, 44]\n// 希尔排序耗时: 3.592041015625ms\n// newArr:     [10, 14, 19, 27, 33, 35, 42, 44]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n# 堆排序\n\n * 代码\n\n// 堆排序\nconst heapSort = array => {\n  console.time('堆排序耗时');\n  // 初始化大顶堆，从第一个非叶子结点开始\n  for (let i = Math.floor(array.length / 2 - 1); i >= 0; i--) {\n    heapify(array, i, array.length);\n  }\n  // 排序，每一次 for 循环找出一个当前最大值，数组长度减一\n  for (let i = Math.floor(array.length - 1); i > 0; i--) {\n    // 根节点与最后一个节点交换\n    swap(array, 0, i);\n    // 从根节点开始调整，并且最后一个结点已经为当前最大值，不需要再参与比较，所以第三个参数为 i，即比较到最后一个结点前一个即可\n    heapify(array, 0, i);\n  }\n  console.timeEnd('堆排序耗时');\n  return array;\n};\n\n// 交换两个节点\nconst swap = (array, i, j) => {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n};\n\n// 将 i 结点以下的堆整理为大顶堆，注意这一步实现的基础实际上是：\n// 假设结点 i 以下的子堆已经是一个大顶堆，heapify 函数实现的\n// 功能是实际上是：找到 结点 i 在包括结点 i 的堆中的正确位置。\n// 后面将写一个 for 循环，从第一个非叶子结点开始，对每一个非叶子结点\n// 都执行 heapify 操作，所以就满足了结点 i 以下的子堆已经是一大顶堆\nconst heapify = (array, i, length) => {\n  let temp = array[i]; // 当前父节点\n  // j < length 的目的是对结点 i 以下的结点全部做顺序调整\n  for (let j = 2 * i + 1; j < length; j = 2 * j + 1) {\n    temp = array[i]; // 将 array[i] 取出，整个过程相当于找到 array[i] 应处于的位置\n    if (j + 1 < length && array[j] < array[j + 1]) {\n      j++; // 找到两个孩子中较大的一个，再与父节点比较\n    }\n    if (temp < array[j]) {\n      swap(array, i, j); // 如果父节点小于子节点:交换；否则跳出\n      i = j; // 交换后，temp 的下标变为 j\n    } else {\n      break;\n    }\n  }\n};\n\n// 测试\nconst array = [4, 6, 8, 5, 9, 1, 2, 5, 3, 2];\nconsole.log('原始array:', array);\nconst newArr = heapSort(array);\nconsole.log('newArr:', newArr);\n// 原始 array:  [4, 6, 8, 5, 9, 1, 2, 5, 3, 2]\n// 堆排序耗时: 0.15087890625ms\n// newArr:     [1, 2, 2, 3, 4, 5, 5, 6, 8, 9]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# 桶排序\n\n * 代码\n\n// 桶排序\nconst bucketSort = (array, bucketSize) => {\n  if (array.length === 0) {\n    return array;\n  }\n\n  console.time('桶排序耗时');\n  let i = 0;\n  let minValue = array[0];\n  let maxValue = array[0];\n  for (i = 1; i < array.length; i++) {\n    if (array[i] < minValue) {\n      minValue = array[i]; //输入数据的最小值\n    } else if (array[i] > maxValue) {\n      maxValue = array[i]; //输入数据的最大值\n    }\n  }\n\n  //桶的初始化\n  const DEFAULT_BUCKET_SIZE = 5; //设置桶的默认数量为 5\n  bucketSize = bucketSize || DEFAULT_BUCKET_SIZE;\n  const bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1;\n  const buckets = new Array(bucketCount);\n  for (i = 0; i < buckets.length; i++) {\n    buckets[i] = [];\n  }\n\n  //利用映射函数将数据分配到各个桶中\n  for (i = 0; i < array.length; i++) {\n    buckets[Math.floor((array[i] - minValue) / bucketSize)].push(array[i]);\n  }\n\n  array.length = 0;\n  for (i = 0; i < buckets.length; i++) {\n    quickSort(buckets[i]); //对每个桶进行排序，这里使用了快速排序\n    for (var j = 0; j < buckets[i].length; j++) {\n      array.push(buckets[i][j]);\n    }\n  }\n  console.timeEnd('桶排序耗时');\n\n  return array;\n};\n\n// 快速排序\nconst quickSort = (arr, left, right) => {\n  let len = arr.length,\n    partitionIndex;\n  left = typeof left != 'number' ? 0 : left;\n  right = typeof right != 'number' ? len - 1 : right;\n\n  if (left < right) {\n    partitionIndex = partition(arr, left, right);\n    quickSort(arr, left, partitionIndex - 1);\n    quickSort(arr, partitionIndex + 1, right);\n  }\n  return arr;\n};\n\nconst partition = (arr, left, right) => {\n  //分区操作\n  let pivot = left, //设定基准值（pivot）\n    index = pivot + 1;\n  for (let i = index; i <= right; i++) {\n    if (arr[i] < arr[pivot]) {\n      swap(arr, i, index);\n      index++;\n    }\n  }\n  swap(arr, pivot, index - 1);\n  return index - 1;\n};\n\nconst swap = (arr, i, j) => {\n  let temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n};\n\n\n// 测试\nconst array = [4, 6, 8, 5, 9, 1, 2, 5, 3, 2];\nconsole.log('原始array:', array);\nconst newArr = bucketSort(array);\nconsole.log('newArr:', newArr);\n// 原始 array:  [4, 6, 8, 5, 9, 1, 2, 5, 3, 2]\n// 堆排序耗时:   0.133056640625ms\n// newArr:  \t [1, 2, 2, 3, 4, 5, 5, 6, 8, 9]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n\n\n\n# 计数排序\n\n * 代码\n\nconst countingSort = array => {\n  let len = array.length,\n    result = [],\n    countArr = [],\n    min = (max = array[0]);\n  console.time('计数排序耗时');\n  for (let i = 0; i < len; i++) {\n    // 获取最小，最大 值\n    min = min <= array[i] ? min : array[i];\n    max = max >= array[i] ? max : array[i];\n    countArr[array[i]] = countArr[array[i]] ? countArr[array[i]] + 1 : 1;\n  }\n  console.log('countArr :', countArr);\n  // 从最小值 -> 最大值,将计数逐项相加\n  for (let j = min; j < max; j++) {\n    countArr[j + 1] = (countArr[j + 1] || 0) + (countArr[j] || 0);\n  }\n  console.log('countArr 2:', countArr);\n  // countArr 中,下标为 array 数值，数据为 array 数值出现次数；反向填充数据进入 result 数据\n  for (let k = len - 1; k >= 0; k--) {\n    // result[位置] = array 数据\n    result[countArr[array[k]] - 1] = array[k];\n    // 减少 countArr 数组中保存的计数\n    countArr[array[k]]--;\n    // console.log(\"array[k]:\", array[k], 'countArr[array[k]] :', countArr[array[k]],)\n    console.log('result:', result);\n  }\n  console.timeEnd('计数排序耗时');\n  return result;\n};\n\n// 测试\nconst array = [2, 2, 3, 8, 7, 1, 2, 2, 2, 7, 3, 9, 8, 2, 1, 4, 2, 4, 6, 9, 2];\nconsole.log('原始 array: ', array);\nconst newArr = countingSort(array);\nconsole.log('newArr: ', newArr);\n// 原始 array:  [2, 2, 3, 8, 7, 1, 2, 2, 2, 7, 3, 9, 8, 2, 1, 4, 2, 4, 6, 9, 2]\n// 计数排序耗时:   5.6708984375ms\n// newArr:  \t [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 6, 7, 7, 8, 8, 9, 9]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n# 基数排序\n\n * 代码\n\n/**\n\t* name: 基数排序\n\t* @param  array 待排序数组\n\t* @param  max 最大位数\n\t*/\nconst radixSort = (array, max) => {\n  console.time('计数排序耗时');\n  const buckets = [];\n  let unit = 10,\n    base = 1;\n  for (let i = 0; i < max; i++ , base *= 10, unit *= 10) {\n    for (let j = 0; j < array.length; j++) {\n      let index = ~~((array[j] % unit) / base); //依次过滤出个位，十位等等数字\n      if (buckets[index] == null) {\n        buckets[index] = []; //初始化桶\n      }\n      buckets[index].push(array[j]); //往不同桶里添加数据\n    }\n    let pos = 0,\n      value;\n    for (let j = 0, length = buckets.length; j < length; j++) {\n      if (buckets[j] != null) {\n        while ((value = buckets[j].shift()) != null) {\n          array[pos++] = value; //将不同桶里数据挨个捞出来，为下一轮高位排序做准备，由于靠近桶底的元素排名靠前，因此从桶底先捞\n        }\n      }\n    }\n  }\n  console.timeEnd('计数排序耗时');\n  return array;\n};\n\n// 测试\nconst array = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\nconsole.log('原始array:', array);\nconst newArr = radixSort(array, 2);\nconsole.log('newArr:', newArr);\n// 原始 array:  [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\n// 堆排序耗时:   0.064208984375ms\n// newArr:  \t [2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n\n# 算法可视化工具\n\n * algorithm-visualizer\n * visualgo.net/en\n\n\n# 二分查找(Binary Search)\n\n> 二分查找，前提是数组为有序数组, 返回索引值, O(㏒n)复杂度\n\n * leetcode 704\n\nvar search = function(nums, target){\n  let left = 0, right = nums.length - 1;\n  while(left <= right){\n    const mid = Math.floor((right-left)/2 + left)\n    const midVal = nums[mid]\n    if(midVal == target){\n      return mid\n    }else if(midVal > target){\n      right = mid - 1\n    }else{\n      left = mid + 1\n    }\n  }\n  return -1\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 搜索插入位置\n\n * leetcode 35\n\nvar searchInsert = function(nums, target) {\n    const len = nums.length;\n    let left = 0, right=len-1, index = len;\n\n    while(left <= right){\n        let mid = Math.floor((right - left) /2 + left)\n        if(target <= nums[mid]){\n            index = mid;\n            right = mid - 1;\n        }else{\n            left = mid + 1;\n        }\n    }\n    return index\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 有序数组合并为一个数组\n\nfunction mergeArray (left, right) {\n  let result = [],\n       il = 0,\n       ir = 0;\n  while(il < left.length && ir < right.length) {\n    if (left[il] < right[ir]) {\n      result.push(left[il++]);\n    } else {\n      result.push(right[ir++]);\n    }\n  }\n  return result.concat(left[il] ? left.slice(il) : right.slice(ir));\n}\n\nmergeArray([2,4,5], [1,3,6])\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * leetcode 88\n\nvar merge = function(nums1, m, nums2, n) {\n    // 初始化两个指针的指向，初始化 nums1 尾部索引k\n    let i = m - 1, j = n - 1, k = m + n - 1\n    // 当两个数组都没遍历完时，指针同步移动\n    while(i >= 0 && j >= 0) {\n        // 取较大的值，从末尾往前填补\n        if(nums1[i] >= nums2[j]) {\n            nums1[k] = nums1[i] // <-\n            i--\n            k--\n        } else {\n            nums1[k] = nums2[j]\n            j--\n            k--\n        }\n    }\n    // nums2 留下的情况，特殊处理一下\n    while(j>=0) {\n        nums1[k] = nums2[j]\n        k--\n        j--\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 数组去重\n\n * 方法1\n\nfunction unique(arr) {\n  var result = [];\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var arri = arr[i];\n    if (result.indexOf(arri) < 0) {\n      result.push(arri);\n    }\n\n  }\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 方法2\n\nfunction unique(arr) {\n  for (let i = 0, len = arr.length; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] == arr[j]) {\n        arr.splice(j, 1)\n        len--;\n        j--\n      }\n    }\n  }\n  return arr\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 方法3\n\nfunction unique(arr) {\n  return arr.filter((item, index) => {\n    return arr.indexOf(item) === index\n  })\n}\n\n\n1\n2\n3\n4\n5\n\n * 方法4\n\nfunction unique(arr) {\n  return [...new Set(arr)]\n}\n\n\n1\n2\n3\n",normalizedContent:"原文: javascript 数据结构与算法之美 - 十大经典排序算法\n\n\n# 冒泡排序\n\n * 步骤\n   * 冒泡排序只会操作相邻的两个数据;\n   * 每次冒泡操作都会对相邻的两个元素进行比较，看是否满足大小关系要求。如果不满足就让它俩互换;\n   * 一次冒泡会让至少一个元素移动到它应该在的位置，重复 n 次，就完成了 n 个数据的排序工作.\n\n\n\n * 代码\n\nfunction bubblesort(arr) {\n  var i = arr.length - 1; //初始时,最后位置保持不变\n  while (i > 0) {\n    var pos = 0; //每趟开始时,无记录交换\n    for (var j = 0; j < i; j++)\n      console.log(arr[j], arr[j + 1])\n    if (arr[j] > arr[j + 1]) {\n      pos = j; //记录交换的位置\n      var tmp = arr[j];\n      arr[j] = arr[j + 1];\n      arr[j + 1] = tmp;\n    }\n    i = pos; //为下一趟排序作准备\n  }\n  return arr;\n}\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\nconsole.log(bubblesort(arr));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 快速排序\n\n * 相关资料： 资料 1 | 资料 2 | 资料 3 | 资料 4\n\n * 步骤\n   \n   * 先找到一个基准点（一般指数组的中部），然后数组被该基准点分为两部分，依次与该基准点数据比较，如果比它小，放左边；反之，放右边。\n   * 左右分别用一个空数组去存储比较后的数据。\n   * 最后递归执行上述操作，直到数组长度 <= 1\n\n\n\n * 代码实现\n\nconst quicksort = nums => {\n  let arr = [...nums]\n  if (arr.length <= 1) {\n    return arr;\n  }\n  //取基准点\n  const midindex = math.floor(arr.length / 2);\n  //取基准点的值，splice(index,1) 则返回的是含有被删除的元素的数组。\n  const valarr = arr.splice(midindex, 1);\n  const midindexval = valarr[0];\n  const left = []; //存放比基准点小的数组\n  const right = []; //存放比基准点大的数组\n  //遍历数组，进行判断分配\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < midindexval) {\n      left.push(arr[i]); //比基准点小的放在左边数组\n    } else {\n      right.push(arr[i]); //比基准点大的放在右边数组\n    }\n  }\n  //递归执行以上操作，对左右两个数组进行操作，直到数组长度为 <= 1\n  return quicksort(left).concat(midindexval, quicksort(right));\n};\nconsole.log('quicksort ', quicksort([5, 14, 3, 21, 10]));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * 原地分区版快速排序实现\n\n// 原地分区版快速排序实现\nconst quicksort2 = (arr, left, right) => {\n  let len = arr.length,\n    partitionindex;\n  left = typeof left != 'number' ? 0 : left;\n  right = typeof right != 'number' ? len - 1 : right;\n\n  if (left < right) {\n    // 返回基准值的所在位置， 即索引\n    partitionindex = partition(arr, left, right);\n    // 可理解为：把数组拆分为 左边的数组值都比基准值小，右边的数组都比基准值大\n\n    // 比对基准值左边的数组\n    quicksort2(arr, left, partitionindex - 1);\n    // 比对基准值右边的数组\n    quicksort2(arr, partitionindex + 1, right);\n  }\n  return arr;\n};\n\nconst swap = (arr, i, j) => {\n  // let temp = arr[i];\n  // arr[i] = arr[j];\n  // arr[j] = temp;\n  [arr[i], arr[j]] = [arr[j], arr[i]]\n};\n\nconst partition = (arr, left, right) => {\n  //分区操作\n  let pivotidx = left, //基准值（pivot）的索引\n    pivot = arr[pivotidx], // 基准值（pivot）\n    index = pivotidx + 1; // 初始index的位置\n\n  // index: 最终记录着数组中首次比基准值（pivot）大的最后索引位置\n\n  // i 取 index 的下一个数与之对比\n  for (let i = index; i <= right; i++) {\n    // 判断基准值与当前项的大小\n    if (arr[i] < pivot) {\n      // 如果比基准值小，将arr[i] 与 arr[index]交换\n      // 即 小于基准值的 与 大于基准值的 互相交换\n      swap(arr, i, index);\n      // index 下移一位\n      index++;\n    }\n  }\n  // 将基准值与最后一次小于它的值交换\n  swap(arr, pivotidx, index - 1);\n\n  // 返回最后一次比基准值小的索引位置： index-1\n  return index - 1;\n};\n\nconst array2 = [8, 5, 1, 13, 2, 6, 9, 21];\n\nconsole.log('quicksort2 ', quicksort2(array2));\n// => [ 1, 2, 5, 6, 8, 9, 13, 21 ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n\n# 选择排序\n\n * 步骤\n   * 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置\n   * 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾\n   * 重复第二步，直到所有元素均排序完毕\n\n\n\n * 代码\n\nfunction selectionsort(arr) {\n  if (arr.length <= 1) return arr;\n  let len = arr.length;\n  let minindex, temp;\n  for (let i = 0; i < len - 1; i++) {\n    minindex = i;\n    for (let j = i + 1; j < len; j++) {\n      if (arr[j] < arr[minindex]) {\n        minindex = j;\n      }\n    }\n    [arr[i], arr[minindex]] = [arr[minindex], arr[i]];\n    // temp = arr[i];\n    // arr[i] = arr[minindex];\n    // arr[minindex] = temp;\n  }\n  return arr;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 归并排序\n\n * 相关资料：资料 1\n\n排序一个数组，我们先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序\n\n\n\n * 代码\n\nconst mergesort = arr => {\n  //采用自上而下的递归方法\n  const len = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  // length >> 1 和 math.floor(len / 2) 等价\n  let middle = math.floor(len / 2),\n    left = arr.slice(0, middle),\n    right = arr.slice(middle); // 拆分为两个子数组\n  return merge(mergesort(left), mergesort(right));\n};\n\nconst merge = (left, right) => {\n  const result = [];\n  while (left.length && right.length) {\n    // 注意: 判断的条件是小于或等于，如果只是小于，那么排序将不稳定.\n    if (left[0] <= right[0]) {\n      result.push(left.shift());\n    } else {\n      result.push(right.shift());\n    }\n  }\n\n  while (left.length) result.push(left.shift());\n  while (right.length) result.push(right.shift());\n  return result;\n};\nconst arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\nconsole.time('归并排序耗时');\nconsole.log('arr :', mergesort(arr));\nconsole.timeend('归并排序耗时');\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 插入排序\n\n\n# 直接插入\n\n * 步骤\n   \n   * 从第一个元素开始，该元素可以认为已经被排序；\n   * 取出下一个元素，在已经排序的元素序列中从后向前扫描；\n   * 如果该元素（已排序）大于新元素，将该元素移到下一位置；\n   * 重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；\n   * 将新元素插入到该位置后；\n   * 重复步骤 2 ~ 5\n\n\n\n * 代码\n\n// 插入排序\nconst insertionsort = array => {\n  const len = array.length;\n  if (len <= 1) return\n\n  let preindex, current;\n  for (let i = 1; i < len; i++) {\n    preindex = i - 1; //待比较元素的下标\n    current = array[i]; //当前元素\n    while (preindex >= 0 && array[preindex] > current) {\n      //前置条件之一: 待比较元素比当前元素大\n      array[preindex + 1] = array[preindex]; //将待比较元素后移一位\n      preindex--; //游标前移一位\n    }\n    if (preindex + 1 != i) {\n      //避免同一个元素赋值给自身\n      array[preindex + 1] = current; //将当前元素插入预留空位\n      console.log('array :', array);\n    }\n  }\n  return array;\n};\n\n// 测试\nconst array = [5, 4, 3, 2, 1];\nconsole.log(\"原始 array :\", array);\ninsertionsort(array);\n// 原始 array:    [5, 4, 3, 2, 1]\n// array:  \t\t [4, 5, 3, 2, 1]\n// array:  \t\t [3, 4, 5, 2, 1]\n// array: \t\t [2, 3, 4, 5, 1]\n// array:  \t\t [1, 2, 3, 4, 5]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 拆半插入\n\n * 步骤\n   \n   * 取0 ~ i-1 的中间点 ( m = (i-1) >> 1 )，array[i] 与array[m] 进行比较，若 array[i] < array[m]，则说明待插入的元素 array[i]应该处于数组的 0 ~ m索引之间；反之，则说明它应该处于数组的 m ~ i-1 索引之间。\n   * 重复步骤 1，每次缩小一半的查找范围，直至找到插入的位置。\n   * 将数组中插入位置之后的元素全部后移一位。\n   * 在指定位置插入第 i 个元素。\n\n注：x >> 1 是位运算中的右移运算，表示右移一位，等同于 x 除以 2 再取整，即 x >> 1 == math.floor(x/2)\n\n * 代码\n\n// 折半插入排序\nconst binaryinsertionsort = array => {\n  const len = array.length;\n  if (len <= 1) return;\n\n  let current, i, j, low, high, m;\n  for (i = 1; i < len; i++) {\n    low = 0;\n    high = i - 1;\n    current = array[i];\n\n    while (low <= high) {\n      //步骤 1 & 2 : 折半查找\n      m = (low + high) >> 1; // 注: x>>1 是位运算中的右移运算, 表示右移一位, 等同于 x 除以 2 再取整, 即 x>>1 == math.floor(x/2) .\n      if (array[i] >= array[m]) {\n        //值相同时, 切换到高半区，保证稳定性\n        low = m + 1; //插入点在高半区\n      } else {\n        high = m - 1; //插入点在低半区\n      }\n    }\n    for (j = i; j > low; j--) {\n      //步骤 3: 插入位置之后的元素全部后移一位\n      array[j] = array[j - 1];\n      console.log('array2 :', json.parse(json.stringify(array)));\n    }\n    array[low] = current; //步骤 4: 插入该元素\n  }\n  console.log('array2 :', json.parse(json.stringify(array)));\n  return array;\n};\n\nconst array2 = [5, 4, 3, 2, 1];\nconsole.log('原始 array2:', array2);\nbinaryinsertionsort(array2);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 希尔排序\n\n * 步骤\n   * 先将整个待排序的记录序列分割成为若干子序列。\n   * 分别进行直接插入排序。\n   * 待整个序列中的记录基本有序时，再对全体记录进行依次直接插入排序。\n\n\n\n * 代码\n\nconst shellsort = arr => {\n  let len = arr.length,\n    temp,\n    gap = 1;\n  console.time('希尔排序耗时');\n  while (gap < len / 3) {\n    //动态定义间隔序列\n    gap = gap * 3 + 1;\n  }\n  for (gap; gap > 0; gap = math.floor(gap / 3)) {\n    for (let i = gap; i < len; i++) {\n      temp = arr[i];\n      let j = i - gap;\n      for (; j >= 0 && arr[j] > temp; j -= gap) {\n        arr[j + gap] = arr[j];\n      }\n      arr[j + gap] = temp;\n      console.log('arr  :', arr);\n    }\n  }\n  console.timeend('希尔排序耗时');\n  return arr;\n};\n\n// 测试\nconst array = [35, 33, 42, 10, 14, 19, 27, 44];\nconsole.log('原始array:', array);\nconst newarr = shellsort(array);\nconsole.log('newarr:', newarr);\n// 原始 array:   [35, 33, 42, 10, 14, 19, 27, 44]\n// arr      :   [14, 33, 42, 10, 35, 19, 27, 44]\n// arr      :   [14, 19, 42, 10, 35, 33, 27, 44]\n// arr      :   [14, 19, 27, 10, 35, 33, 42, 44]\n// arr      :   [14, 19, 27, 10, 35, 33, 42, 44]\n// arr      :   [14, 19, 27, 10, 35, 33, 42, 44]\n// arr      :   [14, 19, 27, 10, 35, 33, 42, 44]\n// arr      :   [10, 14, 19, 27, 35, 33, 42, 44]\n// arr      :   [10, 14, 19, 27, 35, 33, 42, 44]\n// arr      :   [10, 14, 19, 27, 33, 35, 42, 44]\n// arr      :   [10, 14, 19, 27, 33, 35, 42, 44]\n// arr      :   [10, 14, 19, 27, 33, 35, 42, 44]\n// 希尔排序耗时: 3.592041015625ms\n// newarr:     [10, 14, 19, 27, 33, 35, 42, 44]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n# 堆排序\n\n * 代码\n\n// 堆排序\nconst heapsort = array => {\n  console.time('堆排序耗时');\n  // 初始化大顶堆，从第一个非叶子结点开始\n  for (let i = math.floor(array.length / 2 - 1); i >= 0; i--) {\n    heapify(array, i, array.length);\n  }\n  // 排序，每一次 for 循环找出一个当前最大值，数组长度减一\n  for (let i = math.floor(array.length - 1); i > 0; i--) {\n    // 根节点与最后一个节点交换\n    swap(array, 0, i);\n    // 从根节点开始调整，并且最后一个结点已经为当前最大值，不需要再参与比较，所以第三个参数为 i，即比较到最后一个结点前一个即可\n    heapify(array, 0, i);\n  }\n  console.timeend('堆排序耗时');\n  return array;\n};\n\n// 交换两个节点\nconst swap = (array, i, j) => {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n};\n\n// 将 i 结点以下的堆整理为大顶堆，注意这一步实现的基础实际上是：\n// 假设结点 i 以下的子堆已经是一个大顶堆，heapify 函数实现的\n// 功能是实际上是：找到 结点 i 在包括结点 i 的堆中的正确位置。\n// 后面将写一个 for 循环，从第一个非叶子结点开始，对每一个非叶子结点\n// 都执行 heapify 操作，所以就满足了结点 i 以下的子堆已经是一大顶堆\nconst heapify = (array, i, length) => {\n  let temp = array[i]; // 当前父节点\n  // j < length 的目的是对结点 i 以下的结点全部做顺序调整\n  for (let j = 2 * i + 1; j < length; j = 2 * j + 1) {\n    temp = array[i]; // 将 array[i] 取出，整个过程相当于找到 array[i] 应处于的位置\n    if (j + 1 < length && array[j] < array[j + 1]) {\n      j++; // 找到两个孩子中较大的一个，再与父节点比较\n    }\n    if (temp < array[j]) {\n      swap(array, i, j); // 如果父节点小于子节点:交换；否则跳出\n      i = j; // 交换后，temp 的下标变为 j\n    } else {\n      break;\n    }\n  }\n};\n\n// 测试\nconst array = [4, 6, 8, 5, 9, 1, 2, 5, 3, 2];\nconsole.log('原始array:', array);\nconst newarr = heapsort(array);\nconsole.log('newarr:', newarr);\n// 原始 array:  [4, 6, 8, 5, 9, 1, 2, 5, 3, 2]\n// 堆排序耗时: 0.15087890625ms\n// newarr:     [1, 2, 2, 3, 4, 5, 5, 6, 8, 9]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# 桶排序\n\n * 代码\n\n// 桶排序\nconst bucketsort = (array, bucketsize) => {\n  if (array.length === 0) {\n    return array;\n  }\n\n  console.time('桶排序耗时');\n  let i = 0;\n  let minvalue = array[0];\n  let maxvalue = array[0];\n  for (i = 1; i < array.length; i++) {\n    if (array[i] < minvalue) {\n      minvalue = array[i]; //输入数据的最小值\n    } else if (array[i] > maxvalue) {\n      maxvalue = array[i]; //输入数据的最大值\n    }\n  }\n\n  //桶的初始化\n  const default_bucket_size = 5; //设置桶的默认数量为 5\n  bucketsize = bucketsize || default_bucket_size;\n  const bucketcount = math.floor((maxvalue - minvalue) / bucketsize) + 1;\n  const buckets = new array(bucketcount);\n  for (i = 0; i < buckets.length; i++) {\n    buckets[i] = [];\n  }\n\n  //利用映射函数将数据分配到各个桶中\n  for (i = 0; i < array.length; i++) {\n    buckets[math.floor((array[i] - minvalue) / bucketsize)].push(array[i]);\n  }\n\n  array.length = 0;\n  for (i = 0; i < buckets.length; i++) {\n    quicksort(buckets[i]); //对每个桶进行排序，这里使用了快速排序\n    for (var j = 0; j < buckets[i].length; j++) {\n      array.push(buckets[i][j]);\n    }\n  }\n  console.timeend('桶排序耗时');\n\n  return array;\n};\n\n// 快速排序\nconst quicksort = (arr, left, right) => {\n  let len = arr.length,\n    partitionindex;\n  left = typeof left != 'number' ? 0 : left;\n  right = typeof right != 'number' ? len - 1 : right;\n\n  if (left < right) {\n    partitionindex = partition(arr, left, right);\n    quicksort(arr, left, partitionindex - 1);\n    quicksort(arr, partitionindex + 1, right);\n  }\n  return arr;\n};\n\nconst partition = (arr, left, right) => {\n  //分区操作\n  let pivot = left, //设定基准值（pivot）\n    index = pivot + 1;\n  for (let i = index; i <= right; i++) {\n    if (arr[i] < arr[pivot]) {\n      swap(arr, i, index);\n      index++;\n    }\n  }\n  swap(arr, pivot, index - 1);\n  return index - 1;\n};\n\nconst swap = (arr, i, j) => {\n  let temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n};\n\n\n// 测试\nconst array = [4, 6, 8, 5, 9, 1, 2, 5, 3, 2];\nconsole.log('原始array:', array);\nconst newarr = bucketsort(array);\nconsole.log('newarr:', newarr);\n// 原始 array:  [4, 6, 8, 5, 9, 1, 2, 5, 3, 2]\n// 堆排序耗时:   0.133056640625ms\n// newarr:  \t [1, 2, 2, 3, 4, 5, 5, 6, 8, 9]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n\n\n\n# 计数排序\n\n * 代码\n\nconst countingsort = array => {\n  let len = array.length,\n    result = [],\n    countarr = [],\n    min = (max = array[0]);\n  console.time('计数排序耗时');\n  for (let i = 0; i < len; i++) {\n    // 获取最小，最大 值\n    min = min <= array[i] ? min : array[i];\n    max = max >= array[i] ? max : array[i];\n    countarr[array[i]] = countarr[array[i]] ? countarr[array[i]] + 1 : 1;\n  }\n  console.log('countarr :', countarr);\n  // 从最小值 -> 最大值,将计数逐项相加\n  for (let j = min; j < max; j++) {\n    countarr[j + 1] = (countarr[j + 1] || 0) + (countarr[j] || 0);\n  }\n  console.log('countarr 2:', countarr);\n  // countarr 中,下标为 array 数值，数据为 array 数值出现次数；反向填充数据进入 result 数据\n  for (let k = len - 1; k >= 0; k--) {\n    // result[位置] = array 数据\n    result[countarr[array[k]] - 1] = array[k];\n    // 减少 countarr 数组中保存的计数\n    countarr[array[k]]--;\n    // console.log(\"array[k]:\", array[k], 'countarr[array[k]] :', countarr[array[k]],)\n    console.log('result:', result);\n  }\n  console.timeend('计数排序耗时');\n  return result;\n};\n\n// 测试\nconst array = [2, 2, 3, 8, 7, 1, 2, 2, 2, 7, 3, 9, 8, 2, 1, 4, 2, 4, 6, 9, 2];\nconsole.log('原始 array: ', array);\nconst newarr = countingsort(array);\nconsole.log('newarr: ', newarr);\n// 原始 array:  [2, 2, 3, 8, 7, 1, 2, 2, 2, 7, 3, 9, 8, 2, 1, 4, 2, 4, 6, 9, 2]\n// 计数排序耗时:   5.6708984375ms\n// newarr:  \t [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 6, 7, 7, 8, 8, 9, 9]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n# 基数排序\n\n * 代码\n\n/**\n\t* name: 基数排序\n\t* @param  array 待排序数组\n\t* @param  max 最大位数\n\t*/\nconst radixsort = (array, max) => {\n  console.time('计数排序耗时');\n  const buckets = [];\n  let unit = 10,\n    base = 1;\n  for (let i = 0; i < max; i++ , base *= 10, unit *= 10) {\n    for (let j = 0; j < array.length; j++) {\n      let index = ~~((array[j] % unit) / base); //依次过滤出个位，十位等等数字\n      if (buckets[index] == null) {\n        buckets[index] = []; //初始化桶\n      }\n      buckets[index].push(array[j]); //往不同桶里添加数据\n    }\n    let pos = 0,\n      value;\n    for (let j = 0, length = buckets.length; j < length; j++) {\n      if (buckets[j] != null) {\n        while ((value = buckets[j].shift()) != null) {\n          array[pos++] = value; //将不同桶里数据挨个捞出来，为下一轮高位排序做准备，由于靠近桶底的元素排名靠前，因此从桶底先捞\n        }\n      }\n    }\n  }\n  console.timeend('计数排序耗时');\n  return array;\n};\n\n// 测试\nconst array = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\nconsole.log('原始array:', array);\nconst newarr = radixsort(array, 2);\nconsole.log('newarr:', newarr);\n// 原始 array:  [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48]\n// 堆排序耗时:   0.064208984375ms\n// newarr:  \t [2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\n\n# 算法可视化工具\n\n * algorithm-visualizer\n * visualgo.net/en\n\n\n# 二分查找(binary search)\n\n> 二分查找，前提是数组为有序数组, 返回索引值, o(㏒n)复杂度\n\n * leetcode 704\n\nvar search = function(nums, target){\n  let left = 0, right = nums.length - 1;\n  while(left <= right){\n    const mid = math.floor((right-left)/2 + left)\n    const midval = nums[mid]\n    if(midval == target){\n      return mid\n    }else if(midval > target){\n      right = mid - 1\n    }else{\n      left = mid + 1\n    }\n  }\n  return -1\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 搜索插入位置\n\n * leetcode 35\n\nvar searchinsert = function(nums, target) {\n    const len = nums.length;\n    let left = 0, right=len-1, index = len;\n\n    while(left <= right){\n        let mid = math.floor((right - left) /2 + left)\n        if(target <= nums[mid]){\n            index = mid;\n            right = mid - 1;\n        }else{\n            left = mid + 1;\n        }\n    }\n    return index\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 有序数组合并为一个数组\n\nfunction mergearray (left, right) {\n  let result = [],\n       il = 0,\n       ir = 0;\n  while(il < left.length && ir < right.length) {\n    if (left[il] < right[ir]) {\n      result.push(left[il++]);\n    } else {\n      result.push(right[ir++]);\n    }\n  }\n  return result.concat(left[il] ? left.slice(il) : right.slice(ir));\n}\n\nmergearray([2,4,5], [1,3,6])\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * leetcode 88\n\nvar merge = function(nums1, m, nums2, n) {\n    // 初始化两个指针的指向，初始化 nums1 尾部索引k\n    let i = m - 1, j = n - 1, k = m + n - 1\n    // 当两个数组都没遍历完时，指针同步移动\n    while(i >= 0 && j >= 0) {\n        // 取较大的值，从末尾往前填补\n        if(nums1[i] >= nums2[j]) {\n            nums1[k] = nums1[i] // <-\n            i--\n            k--\n        } else {\n            nums1[k] = nums2[j]\n            j--\n            k--\n        }\n    }\n    // nums2 留下的情况，特殊处理一下\n    while(j>=0) {\n        nums1[k] = nums2[j]\n        k--\n        j--\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 数组去重\n\n * 方法1\n\nfunction unique(arr) {\n  var result = [];\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var arri = arr[i];\n    if (result.indexof(arri) < 0) {\n      result.push(arri);\n    }\n\n  }\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 方法2\n\nfunction unique(arr) {\n  for (let i = 0, len = arr.length; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] == arr[j]) {\n        arr.splice(j, 1)\n        len--;\n        j--\n      }\n    }\n  }\n  return arr\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 方法3\n\nfunction unique(arr) {\n  return arr.filter((item, index) => {\n    return arr.indexof(item) === index\n  })\n}\n\n\n1\n2\n3\n4\n5\n\n * 方法4\n\nfunction unique(arr) {\n  return [...new set(arr)]\n}\n\n\n1\n2\n3\n",charsets:{cjk:!0},lastUpdated:"3/23/2022",lastUpdatedTimestamp:1648018006e3,createdTime:1647517837e3},{title:"栈与队列",frontmatter:{title:"栈与队列",date:"2022-03-18T00:00:00.000Z",sidebar:"auto",autoSort:886,tags:["stack","queue"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/algorithm/stack-base.html",relativePath:"frontend/algorithm/stack-base.md",key:"v-9bb5e86a",path:"/frontend/algorithm/stack-base.html",headers:[{level:2,title:"栈（Stack）",slug:"栈-stack",normalizedTitle:"栈（stack）",charIndex:2},{level:3,title:"栈-数组",slug:"栈-数组",normalizedTitle:"栈-数组",charIndex:40},{level:3,title:"栈-对象",slug:"栈-对象",normalizedTitle:"栈-对象",charIndex:890},{level:2,title:"队列（Queue）",slug:"队列-queue",normalizedTitle:"队列（queue）",charIndex:2136},{level:3,title:"普通队列",slug:"普通队列",normalizedTitle:"普通队列",charIndex:2150},{level:3,title:"双端队列",slug:"双端队列",normalizedTitle:"双端队列",charIndex:3415},{level:2,title:"用栈实现队列",slug:"用栈实现队列",normalizedTitle:"用栈实现队列",charIndex:5410},{level:2,title:"用队列实现栈",slug:"用队列实现栈",normalizedTitle:"用队列实现栈",charIndex:6582}],headersStr:"栈（Stack） 栈-数组 栈-对象 队列（Queue） 普通队列 双端队列 用栈实现队列 用队列实现栈",content:"# 栈（Stack）\n\n先进后出（First In Last Out）\n\n\n# 栈-数组\n\n//栈：First In Last out\nconst _stackItem = Symbol(\"stack array\");\nexport default class Stack {\n  constructor() {\n    // 存储栈元素\n    this[_stackItem] = [];\n  }\n  // 添加一个栈顶元素\n  push(value) {\n    this[_stackItem].push(value);\n  }\n  // 移除栈顶元素, 并返回\n  pop() {\n    return this[_stackItem].pop();\n  }\n  // 返回栈顶元素\n  peek() {\n    const len = this[_stackItem].length;\n    return this[_stackItem][len - 1];\n  }\n  // 判断栈是否为空\n  isEmpty() {\n    return this[_stackItem].length === 0;\n  }\n  // 清空栈\n  clear() {\n    this[_stackItem] = [];\n  }\n  // 返回栈里的元素个数\n  size() {\n    return this[_stackItem].length;\n  }\n}\n\n// var stack = new Stack();\n\n// stack.push(110);\n// stack.push(120);\n\n// console.log(stack.clear());\n// console.log(stack.isEmpty());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\n# 栈-对象\n\n//栈：First In Last out\nconst _stackItem = Symbol('stack object')\nexport default class Stack{\n  constructor(){\n    this[_stackItem] = {}\n    this.index = 0\n  }\n\n  // 添加一个栈顶元素\n  push(value){\n    this[_stackItem][this.index] = value;\n    this.index++;\n  }\n  // 移除栈顶元素, 并返回\n  pop(){\n    if(this.isEmpty()){\n      return undefined\n    }\n    this.index --;\n    const result = this[_stackItem][this.index]\n    delete this[_stackItem][this.index]\n    return result;\n  }\n  // 返回栈顶元素\n  peek(){\n    if(this.isEmpty()){\n      return undefined\n    }\n    return this[_stackItem][this.index-1]\n  }\n  // 判断栈是否为空\n  isEmpty(){\n    return this.index === 0\n  }\n  // 清空栈\n  clear(){\n    this[_stackItem] = {}\n    this.index = 0\n  }\n  // 返回栈里的元素个数\n  size(){\n    return this.index;\n  }\n\n  toString(){\n    if(this.isEmpty()){\n      return ''\n    }\n    let str = `${this[_stackItem][0]}`\n    for(let i=1; i< this.index; i++){\n      str = `${str}, ${this[_stackItem][i]}`\n    }\n    return str\n  }\n}\n\nvar stack = new Stack()\n\nstack.push(110)\nstack.push(120)\n\nconsole.log(stack.size())\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n\n\n\n# 队列（Queue）\n\n\n# 普通队列\n\n先进先出 (First In First Out)\n\n// 队列：first in first out\nexport default class Queue {\n  constructor() {\n    this.count=0; // 记录数据大小\n    this.lowestCount=0 // 第一个元素\n    this.items = {}\n  }\n\n  add(value) {\n    this.items[this.count] = value;\n    this.count ++;\n  }\n\n  remove() {\n    if(this.isEmpty()){\n      return undefined\n    }\n    const result = this.items[this.count]\n    delete this.items[this.count]\n    this.lowestCount++\n    return result\n  }\n\n  peek() {\n    if(this.isEmpty()){\n      return undefined\n    }\n\n    return this.items[this.lowestCount];\n  }\n\n  isEmpty() {\n    return this.size() === 0\n  }\n\n  clear() {\n    this.items = {}\n    this.count = 0\n    this.lowestCount = 0\n  }\n\n  size() {\n    return this.count - this.lowestCount\n  }\n\n  toString() {\n    if(this.isEmpty()){\n      return ''\n    }\n\n    let str = `${this.items[this.lowestCount]}`\n    for(let i=this.lowestCount+1; i<this.count; i++){\n      str = `${str}, ${this.items[i]}`\n    }\n    return str\n  }\n}\n\n\n// const queue = new Queue()\n// queue.add(12)\n// queue.add(23)\n// console.log(queue.toString())\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n\n\n\n# 双端队列\n\n// 双端队列\nexport default class Deque {\n  constructor() {\n    this.count = 0;\n    this.lowestCount = 0;\n    this.items = {};\n  }\n\n  addFront(value) {\n    if(this.isEmpty()){\n      this.addBack(value)\n    }else if(this.lowestCount > 0){\n      this.lowestCount --;\n      this.items[this.lowestCount] = value;\n    }else{\n      for (let i = this.count; i > 0; i--) {\n        this.items[i] = this.items[i - 1];\n      }\n      this.count++;\n      this.items[0] = value;\n    }\n  }\n\n  addBack(value) {\n    this.items[this.count] = value;\n    this.count ++\n  }\n\n  removeFront() {\n    if(this.isEmpty()){\n      return void 0\n    }\n    const result = this.items[this.lowestCount]\n    delete this.items[this.lowestCount]\n    this.lowestCount ++\n    return result;\n  }\n\n  removeBack() {\n    if(this.isEmpty()){\n      return void 0\n    }\n    this.count --;\n    const result = this.items[this.count];\n    delete this.items[this.count]\n    return result;\n  }\n\n  peekFront() {\n    if(this.isEmpty()){\n      return void 0\n    }\n\n    return this.items[this.lowestCount]\n  }\n\n  peekBack() {\n    if(this.isEmpty()){\n      return void 0\n    }\n    return this.items[this.count-1]\n  }\n\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  clear() {\n    this.items = {};\n    this.count = 0;\n    this.lowestCount = 0;\n  }\n\n  size() {\n    return this.count - this.lowestCount;\n  }\n\n  toString() {\n    if(this.isEmpty()){\n      return ''\n    }\n\n    let str = `${this.items[this.lowestCount]}`\n\n    for(let i=this.lowestCount+1; i<this.count; i++){\n      str = `${str}, ${this.items[i]}`\n    }\n    return str;\n  }\n}\n\n// const deque = new Deque()\n// deque.addBack(12);\n// deque.addBack(21);\n\n// deque.addFront(45)\n// console.log(deque)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n\n\n\n# 用栈实现队列\n\n * 代码实现 leetcode 232\n\nvar MyQueue = function() {\n    this.stack1 = []\n    this.stack2 = []\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n    this.stack1.push(x)\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n    if(!this.stack2.length){\n        while(this.stack1.length){\n            this.stack2.push(this.stack1.pop())\n        }\n    }\n    return this.stack2.pop()\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n    if(!this.stack2.length){\n        while(this.stack1.length){\n            this.stack2.push(this.stack1.pop())\n        }\n    }\n    return this.stack2[this.stack2.length-1]\n};\n\n/**\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n    return this.stack1.length == 0 && this.stack2.length == 0\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n\n# 用队列实现栈\n\n * 代码实现 leetcode 225\n\nvar MyStack = function() {\n    this.queue1 = [];\n    this.queue2 = [];\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nMyStack.prototype.push = function(x) {\n    this.queue1.push(x);\n};\n\n/**\n * @return {number}\n */\nMyStack.prototype.pop = function() {\n    // 减少两个队列交换的次数， 只有当queue1为空时，交换两个队列\n    if(!this.queue1.length) {\n        [this.queue1, this.queue2] = [this.queue2, this.queue1];\n    }\n    while(this.queue1.length > 1) {\n        this.queue2.push(this.queue1.shift());\n    }\n    return this.queue1.shift();\n};\n\n/**\n * @return {number}\n */\nMyStack.prototype.top = function() {\n    const x = this.pop();\n    this.queue1.push(x);\n    return x;\n};\n\n/**\n * @return {boolean}\n */\nMyStack.prototype.empty = function() {\n    return !this.queue1.length && !this.queue2.length;\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n * 使用一个队列实现 leetcode题解地址\n\n/**\n * Initialize your data structure here.\n */\nvar MyStack = function() {\n    this.queue = [];\n};\n\n/**\n * Push element x onto stack.\n * @param {number} x\n * @return {void}\n */\nMyStack.prototype.push = function(x) {\n    this.queue.push(x);\n};\n\n/**\n * Removes the element on top of the stack and returns that element.\n * @return {number}\n */\nMyStack.prototype.pop = function() {\n    let size = this.queue.length;\n    while(size-- > 1) {\n        this.queue.push(this.queue.shift());\n    }\n    return this.queue.shift();\n};\n\n/**\n * Get the top element.\n * @return {number}\n */\nMyStack.prototype.top = function() {\n    const x = this.pop();\n    this.queue.push(x);\n    return x;\n};\n\n/**\n * Returns whether the stack is empty.\n * @return {boolean}\n */\nMyStack.prototype.empty = function() {\n    return !this.queue.length;\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n",normalizedContent:"# 栈（stack）\n\n先进后出（first in last out）\n\n\n# 栈-数组\n\n//栈：first in last out\nconst _stackitem = symbol(\"stack array\");\nexport default class stack {\n  constructor() {\n    // 存储栈元素\n    this[_stackitem] = [];\n  }\n  // 添加一个栈顶元素\n  push(value) {\n    this[_stackitem].push(value);\n  }\n  // 移除栈顶元素, 并返回\n  pop() {\n    return this[_stackitem].pop();\n  }\n  // 返回栈顶元素\n  peek() {\n    const len = this[_stackitem].length;\n    return this[_stackitem][len - 1];\n  }\n  // 判断栈是否为空\n  isempty() {\n    return this[_stackitem].length === 0;\n  }\n  // 清空栈\n  clear() {\n    this[_stackitem] = [];\n  }\n  // 返回栈里的元素个数\n  size() {\n    return this[_stackitem].length;\n  }\n}\n\n// var stack = new stack();\n\n// stack.push(110);\n// stack.push(120);\n\n// console.log(stack.clear());\n// console.log(stack.isempty());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\n# 栈-对象\n\n//栈：first in last out\nconst _stackitem = symbol('stack object')\nexport default class stack{\n  constructor(){\n    this[_stackitem] = {}\n    this.index = 0\n  }\n\n  // 添加一个栈顶元素\n  push(value){\n    this[_stackitem][this.index] = value;\n    this.index++;\n  }\n  // 移除栈顶元素, 并返回\n  pop(){\n    if(this.isempty()){\n      return undefined\n    }\n    this.index --;\n    const result = this[_stackitem][this.index]\n    delete this[_stackitem][this.index]\n    return result;\n  }\n  // 返回栈顶元素\n  peek(){\n    if(this.isempty()){\n      return undefined\n    }\n    return this[_stackitem][this.index-1]\n  }\n  // 判断栈是否为空\n  isempty(){\n    return this.index === 0\n  }\n  // 清空栈\n  clear(){\n    this[_stackitem] = {}\n    this.index = 0\n  }\n  // 返回栈里的元素个数\n  size(){\n    return this.index;\n  }\n\n  tostring(){\n    if(this.isempty()){\n      return ''\n    }\n    let str = `${this[_stackitem][0]}`\n    for(let i=1; i< this.index; i++){\n      str = `${str}, ${this[_stackitem][i]}`\n    }\n    return str\n  }\n}\n\nvar stack = new stack()\n\nstack.push(110)\nstack.push(120)\n\nconsole.log(stack.size())\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n\n\n\n# 队列（queue）\n\n\n# 普通队列\n\n先进先出 (first in first out)\n\n// 队列：first in first out\nexport default class queue {\n  constructor() {\n    this.count=0; // 记录数据大小\n    this.lowestcount=0 // 第一个元素\n    this.items = {}\n  }\n\n  add(value) {\n    this.items[this.count] = value;\n    this.count ++;\n  }\n\n  remove() {\n    if(this.isempty()){\n      return undefined\n    }\n    const result = this.items[this.count]\n    delete this.items[this.count]\n    this.lowestcount++\n    return result\n  }\n\n  peek() {\n    if(this.isempty()){\n      return undefined\n    }\n\n    return this.items[this.lowestcount];\n  }\n\n  isempty() {\n    return this.size() === 0\n  }\n\n  clear() {\n    this.items = {}\n    this.count = 0\n    this.lowestcount = 0\n  }\n\n  size() {\n    return this.count - this.lowestcount\n  }\n\n  tostring() {\n    if(this.isempty()){\n      return ''\n    }\n\n    let str = `${this.items[this.lowestcount]}`\n    for(let i=this.lowestcount+1; i<this.count; i++){\n      str = `${str}, ${this.items[i]}`\n    }\n    return str\n  }\n}\n\n\n// const queue = new queue()\n// queue.add(12)\n// queue.add(23)\n// console.log(queue.tostring())\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n\n\n\n# 双端队列\n\n// 双端队列\nexport default class deque {\n  constructor() {\n    this.count = 0;\n    this.lowestcount = 0;\n    this.items = {};\n  }\n\n  addfront(value) {\n    if(this.isempty()){\n      this.addback(value)\n    }else if(this.lowestcount > 0){\n      this.lowestcount --;\n      this.items[this.lowestcount] = value;\n    }else{\n      for (let i = this.count; i > 0; i--) {\n        this.items[i] = this.items[i - 1];\n      }\n      this.count++;\n      this.items[0] = value;\n    }\n  }\n\n  addback(value) {\n    this.items[this.count] = value;\n    this.count ++\n  }\n\n  removefront() {\n    if(this.isempty()){\n      return void 0\n    }\n    const result = this.items[this.lowestcount]\n    delete this.items[this.lowestcount]\n    this.lowestcount ++\n    return result;\n  }\n\n  removeback() {\n    if(this.isempty()){\n      return void 0\n    }\n    this.count --;\n    const result = this.items[this.count];\n    delete this.items[this.count]\n    return result;\n  }\n\n  peekfront() {\n    if(this.isempty()){\n      return void 0\n    }\n\n    return this.items[this.lowestcount]\n  }\n\n  peekback() {\n    if(this.isempty()){\n      return void 0\n    }\n    return this.items[this.count-1]\n  }\n\n  isempty() {\n    return this.size() === 0;\n  }\n\n  clear() {\n    this.items = {};\n    this.count = 0;\n    this.lowestcount = 0;\n  }\n\n  size() {\n    return this.count - this.lowestcount;\n  }\n\n  tostring() {\n    if(this.isempty()){\n      return ''\n    }\n\n    let str = `${this.items[this.lowestcount]}`\n\n    for(let i=this.lowestcount+1; i<this.count; i++){\n      str = `${str}, ${this.items[i]}`\n    }\n    return str;\n  }\n}\n\n// const deque = new deque()\n// deque.addback(12);\n// deque.addback(21);\n\n// deque.addfront(45)\n// console.log(deque)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n\n\n\n# 用栈实现队列\n\n * 代码实现 leetcode 232\n\nvar myqueue = function() {\n    this.stack1 = []\n    this.stack2 = []\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nmyqueue.prototype.push = function(x) {\n    this.stack1.push(x)\n};\n\n/**\n * @return {number}\n */\nmyqueue.prototype.pop = function() {\n    if(!this.stack2.length){\n        while(this.stack1.length){\n            this.stack2.push(this.stack1.pop())\n        }\n    }\n    return this.stack2.pop()\n};\n\n/**\n * @return {number}\n */\nmyqueue.prototype.peek = function() {\n    if(!this.stack2.length){\n        while(this.stack1.length){\n            this.stack2.push(this.stack1.pop())\n        }\n    }\n    return this.stack2[this.stack2.length-1]\n};\n\n/**\n * @return {boolean}\n */\nmyqueue.prototype.empty = function() {\n    return this.stack1.length == 0 && this.stack2.length == 0\n};\n\n/**\n * your myqueue object will be instantiated and called as such:\n * var obj = new myqueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n\n\n\n# 用队列实现栈\n\n * 代码实现 leetcode 225\n\nvar mystack = function() {\n    this.queue1 = [];\n    this.queue2 = [];\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nmystack.prototype.push = function(x) {\n    this.queue1.push(x);\n};\n\n/**\n * @return {number}\n */\nmystack.prototype.pop = function() {\n    // 减少两个队列交换的次数， 只有当queue1为空时，交换两个队列\n    if(!this.queue1.length) {\n        [this.queue1, this.queue2] = [this.queue2, this.queue1];\n    }\n    while(this.queue1.length > 1) {\n        this.queue2.push(this.queue1.shift());\n    }\n    return this.queue1.shift();\n};\n\n/**\n * @return {number}\n */\nmystack.prototype.top = function() {\n    const x = this.pop();\n    this.queue1.push(x);\n    return x;\n};\n\n/**\n * @return {boolean}\n */\nmystack.prototype.empty = function() {\n    return !this.queue1.length && !this.queue2.length;\n};\n\n/**\n * your mystack object will be instantiated and called as such:\n * var obj = new mystack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n * 使用一个队列实现 leetcode题解地址\n\n/**\n * initialize your data structure here.\n */\nvar mystack = function() {\n    this.queue = [];\n};\n\n/**\n * push element x onto stack.\n * @param {number} x\n * @return {void}\n */\nmystack.prototype.push = function(x) {\n    this.queue.push(x);\n};\n\n/**\n * removes the element on top of the stack and returns that element.\n * @return {number}\n */\nmystack.prototype.pop = function() {\n    let size = this.queue.length;\n    while(size-- > 1) {\n        this.queue.push(this.queue.shift());\n    }\n    return this.queue.shift();\n};\n\n/**\n * get the top element.\n * @return {number}\n */\nmystack.prototype.top = function() {\n    const x = this.pop();\n    this.queue.push(x);\n    return x;\n};\n\n/**\n * returns whether the stack is empty.\n * @return {boolean}\n */\nmystack.prototype.empty = function() {\n    return !this.queue.length;\n};\n\n/**\n * your mystack object will be instantiated and called as such:\n * var obj = new mystack()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.empty()\n */\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n",charsets:{cjk:!0},lastUpdated:"3/23/2022",lastUpdatedTimestamp:164801325e4,createdTime:164801325e4},{title:"链表",frontmatter:{title:"链表",date:"2022-03-18T00:00:00.000Z",sidebar:"auto",autoSort:888,tags:["LinkedList"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/algorithm/linkedList-base.html",relativePath:"frontend/algorithm/linkedList-base.md",key:"v-87c13ffa",path:"/frontend/algorithm/linkedList-base.html",headers:[{level:2,title:"单链表",slug:"单链表",normalizedTitle:"单链表",charIndex:2},{level:2,title:"双链表",slug:"双链表",normalizedTitle:"双链表",charIndex:2989},{level:2,title:"单链表中间结点(876)",slug:"单链表中间结点-876",normalizedTitle:"单链表中间结点(876)",charIndex:9874},{level:2,title:"反转链表(206)",slug:"反转链表-206",normalizedTitle:"反转链表(206)",charIndex:10124}],headersStr:"单链表 双链表 单链表中间结点(876) 反转链表(206)",content:"# 单链表\n\nexport function defaultEquals(a, b) {\n  return a === b;\n}\n\nexport class Node {\n  constructor(element, next) {\n    this.element = element;\n    this.next = next;\n  }\n}\n\nexport default class LinkedList {\n  constructor(equalsFn = defaultEquals) {\n    this.equalsFn = equalsFn;\n    this.count = 0;\n    this.head = undefined;\n  }\n\n  push(element) {\n    const node = new Node(element);\n    let current;\n    if (this.head == null) {\n      // catches null && undefined\n      this.head = node;\n    } else {\n      current = this.head;\n      while (current.next != null) {\n        current = current.next;\n      }\n      current.next = node;\n    }\n    this.count++;\n  }\n\n  getElementAt(index) {\n    if (index >= 0 && index <= this.count) {\n      let node = this.head;\n      for (let i = 0; i < index && node != null; i++) {\n        node = node.next;\n      }\n      return node;\n    }\n    return undefined;\n  }\n\n  insert(element, index) {\n    if (index >= 0 && index <= this.count) {\n      const node = new Node(element);\n      if (index === 0) {\n        const current = this.head;\n        node.next = current;\n        this.head = node;\n      } else {\n        const previous = this.getElementAt(index - 1);\n        node.next = previous.next;\n        previous.next = node;\n      }\n      this.count++;\n      return true;\n    }\n    return false;\n  }\n\n  removeAt(index) {\n    if (index >= 0 && index < this.count) {\n      let current = this.head;\n      if (index === 0) {\n        this.head = current.next;\n      } else {\n        const previous = this.getElementAt(index - 1);\n        current = previous.next;\n        previous.next = current.next;\n      }\n      this.count--;\n      return current.element;\n    }\n    return undefined;\n  }\n\n  remove(element) {\n    const index = this.indexOf(element);\n    return this.removeAt(index);\n  }\n\n  indexOf(element) {\n    let current = this.head;\n    for (let i = 0; i < this.size() && current != null; i++) {\n      if (this.equalsFn(element, current.element)) {\n        return i;\n      }\n      current = current.next;\n    }\n    return -1;\n  }\n\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  size() {\n    return this.count;\n  }\n\n  getHead() {\n    return this.head;\n  }\n\n  clear() {\n    this.head = undefined;\n    this.count = 0;\n  }\n\n  toString() {\n    if (this.head == null) {\n      return \"\";\n    }\n    let objString = `${this.head.element}`;\n    let current = this.head.next;\n    for (let i = 1; i < this.size() && current != null; i++) {\n      objString = `${objString},${current.element}`;\n      current = current.next;\n    }\n    return objString;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n\n\n\n# 双链表\n\n * linkedList.js\n\nexport function defaultEquals(a, b) {\n  return a === b;\n}\n\nexport class Node {\n  constructor(element, next) {\n    this.element = element;\n    this.next = next;\n  }\n}\n\nexport default class LinkedList {\n  constructor(equalsFn = defaultEquals) {\n    this.equalsFn = equalsFn;\n    this.count = 0;\n    this.head = undefined;\n  }\n\n  push(element) {\n    const node = new Node(element);\n    let current;\n    if (this.head == null) {\n      // catches null && undefined\n      this.head = node;\n    } else {\n      current = this.head;\n      while (current.next != null) {\n        current = current.next;\n      }\n      current.next = node;\n    }\n    this.count++;\n  }\n\n  getElementAt(index) {\n    if (index >= 0 && index <= this.count) {\n      let node = this.head;\n      for (let i = 0; i < index && node != null; i++) {\n        node = node.next;\n      }\n      return node;\n    }\n    return undefined;\n  }\n\n  insert(element, index) {\n    if (index >= 0 && index <= this.count) {\n      const node = new Node(element);\n      if (index === 0) {\n        const current = this.head;\n        node.next = current;\n        this.head = node;\n      } else {\n        const previous = this.getElementAt(index - 1);\n        node.next = previous.next;\n        previous.next = node;\n      }\n      this.count++;\n      return true;\n    }\n    return false;\n  }\n\n  removeAt(index) {\n    if (index >= 0 && index < this.count) {\n      let current = this.head;\n      if (index === 0) {\n        this.head = current.next;\n      } else {\n        const previous = this.getElementAt(index - 1);\n        current = previous.next;\n        previous.next = current.next;\n      }\n      this.count--;\n      return current.element;\n    }\n    return undefined;\n  }\n\n  remove(element) {\n    const index = this.indexOf(element);\n    return this.removeAt(index);\n  }\n\n  indexOf(element) {\n    let current = this.head;\n    for (let i = 0; i < this.size() && current != null; i++) {\n      if (this.equalsFn(element, current.element)) {\n        return i;\n      }\n      current = current.next;\n    }\n    return -1;\n  }\n\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  size() {\n    return this.count;\n  }\n\n  getHead() {\n    return this.head;\n  }\n\n  clear() {\n    this.head = undefined;\n    this.count = 0;\n  }\n\n  toString() {\n    if (this.head == null) {\n      return \"\";\n    }\n    let objString = `${this.head.element}`;\n    let current = this.head.next;\n    for (let i = 1; i < this.size() && current != null; i++) {\n      objString = `${objString},${current.element}`;\n      current = current.next;\n    }\n    return objString;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n\n\nimport LinkedList,{defaultEquals, Node} from './linkedList.js';\n\nclass DoublyNode extends Node {\n  constructor(element, next, prev) {\n    super(element, next);\n    this.prev = prev;\n  }\n}\n\nexport default class DoublyLinkedList extends LinkedList {\n  constructor(equalsFn = defaultEquals) {\n    super(equalsFn);\n    this.tail = undefined;\n  }\n\n  push(element) {\n    const node = new DoublyNode(element);\n    if (this.head == null) {\n      this.head = node;\n      this.tail = node; // NEW\n    } else {\n      // attach to the tail node // NEW\n      this.tail.next = node;\n      node.prev = this.tail;\n      this.tail = node;\n    }\n    this.count++;\n  }\n\n  insert(element, index) {\n    if (index >= 0 && index <= this.count) {\n      const node = new DoublyNode(element);\n      let current = this.head;\n      if (index === 0) {\n        if (this.head == null) { // NEW\n          this.head = node;\n          this.tail = node; // NEW\n        } else {\n          node.next = this.head;\n          this.head.prev = node; // NEW\n          this.head = node;\n        }\n      } else if (index === this.count) { // last item NEW\n        current = this.tail;\n        current.next = node;\n        node.prev = current;\n        this.tail = node;\n      } else {\n        const previous = this.getElementAt(index - 1);\n        current = previous.next;\n        node.next = current;\n        previous.next = node;\n        current.prev = node; // NEW\n        node.prev = previous; // NEW\n      }\n      this.count++;\n      return true;\n    }\n    return false;\n  }\n\n  removeAt(index) {\n    if (index >= 0 && index < this.count) {\n      let current = this.head;\n      if (index === 0) {\n        this.head = this.head.next;\n        // if there is only one item, then we update tail as well //NEW\n        if (this.count === 1) {\n          // {2}\n          this.tail = undefined;\n        } else {\n          this.head.prev = undefined;\n        }\n      } else if (index === this.count - 1) {\n        // last item //NEW\n        current = this.tail;\n        this.tail = current.prev;\n        this.tail.next = undefined;\n      } else {\n        current = this.getElementAt(index);\n        const previous = current.prev;\n        // link previous with current's next - skip it to remove\n        previous.next = current.next;\n        current.next.prev = previous; // NEW\n      }\n      this.count--;\n      return current.element;\n    }\n    return undefined;\n  }\n\n  indexOf(element) {\n    let current = this.head;\n    let index = 0;\n    while (current != null) {\n      if (this.equalsFn(element, current.element)) {\n        return index;\n      }\n      index++;\n      current = current.next;\n    }\n    return -1;\n  }\n\n  getHead() {\n    return this.head;\n  }\n\n  getTail() {\n    return this.tail;\n  }\n\n  clear() {\n    super.clear();\n    this.tail = undefined;\n  }\n\n  toString() {\n    if (this.head == null) {\n      return '';\n    }\n    let objString = `${this.head.element}`;\n    let current = this.head.next;\n    while (current != null) {\n      objString = `${objString},${current.element}`;\n      current = current.next;\n    }\n    return objString;\n  }\n\n  inverseToString() {\n    if (this.tail == null) {\n      return '';\n    }\n    let objString = `${this.tail.element}`;\n    let previous = this.tail.prev;\n    while (previous != null) {\n      objString = `${objString},${previous.element}`;\n      previous = previous.prev;\n    }\n    return objString;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n\n\n\n# 单链表中间结点(876)\n\n * leetcode 876\n\nvar middleNode = function(head) {\n\tlet fast = head, slow = head;\n\n  while(fast !=null && fast.next !=null){\n   \tfast = fast.next.next  // 每次走2步\n    slow = slow.next // 每次走1步\n  }\n  return slow\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 反转链表(206)\n\n * leetcode 206\n\nvar reverseList = function(head) {\n\tlet pre = null, cur = head\n\n  while(cur != null){\n  \tlet tmp = cur.next\n    cur.next = pre\n    pre = cur\n    cur = tmp\n  }\n  return pre\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",normalizedContent:"# 单链表\n\nexport function defaultequals(a, b) {\n  return a === b;\n}\n\nexport class node {\n  constructor(element, next) {\n    this.element = element;\n    this.next = next;\n  }\n}\n\nexport default class linkedlist {\n  constructor(equalsfn = defaultequals) {\n    this.equalsfn = equalsfn;\n    this.count = 0;\n    this.head = undefined;\n  }\n\n  push(element) {\n    const node = new node(element);\n    let current;\n    if (this.head == null) {\n      // catches null && undefined\n      this.head = node;\n    } else {\n      current = this.head;\n      while (current.next != null) {\n        current = current.next;\n      }\n      current.next = node;\n    }\n    this.count++;\n  }\n\n  getelementat(index) {\n    if (index >= 0 && index <= this.count) {\n      let node = this.head;\n      for (let i = 0; i < index && node != null; i++) {\n        node = node.next;\n      }\n      return node;\n    }\n    return undefined;\n  }\n\n  insert(element, index) {\n    if (index >= 0 && index <= this.count) {\n      const node = new node(element);\n      if (index === 0) {\n        const current = this.head;\n        node.next = current;\n        this.head = node;\n      } else {\n        const previous = this.getelementat(index - 1);\n        node.next = previous.next;\n        previous.next = node;\n      }\n      this.count++;\n      return true;\n    }\n    return false;\n  }\n\n  removeat(index) {\n    if (index >= 0 && index < this.count) {\n      let current = this.head;\n      if (index === 0) {\n        this.head = current.next;\n      } else {\n        const previous = this.getelementat(index - 1);\n        current = previous.next;\n        previous.next = current.next;\n      }\n      this.count--;\n      return current.element;\n    }\n    return undefined;\n  }\n\n  remove(element) {\n    const index = this.indexof(element);\n    return this.removeat(index);\n  }\n\n  indexof(element) {\n    let current = this.head;\n    for (let i = 0; i < this.size() && current != null; i++) {\n      if (this.equalsfn(element, current.element)) {\n        return i;\n      }\n      current = current.next;\n    }\n    return -1;\n  }\n\n  isempty() {\n    return this.size() === 0;\n  }\n\n  size() {\n    return this.count;\n  }\n\n  gethead() {\n    return this.head;\n  }\n\n  clear() {\n    this.head = undefined;\n    this.count = 0;\n  }\n\n  tostring() {\n    if (this.head == null) {\n      return \"\";\n    }\n    let objstring = `${this.head.element}`;\n    let current = this.head.next;\n    for (let i = 1; i < this.size() && current != null; i++) {\n      objstring = `${objstring},${current.element}`;\n      current = current.next;\n    }\n    return objstring;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n\n\n\n# 双链表\n\n * linkedlist.js\n\nexport function defaultequals(a, b) {\n  return a === b;\n}\n\nexport class node {\n  constructor(element, next) {\n    this.element = element;\n    this.next = next;\n  }\n}\n\nexport default class linkedlist {\n  constructor(equalsfn = defaultequals) {\n    this.equalsfn = equalsfn;\n    this.count = 0;\n    this.head = undefined;\n  }\n\n  push(element) {\n    const node = new node(element);\n    let current;\n    if (this.head == null) {\n      // catches null && undefined\n      this.head = node;\n    } else {\n      current = this.head;\n      while (current.next != null) {\n        current = current.next;\n      }\n      current.next = node;\n    }\n    this.count++;\n  }\n\n  getelementat(index) {\n    if (index >= 0 && index <= this.count) {\n      let node = this.head;\n      for (let i = 0; i < index && node != null; i++) {\n        node = node.next;\n      }\n      return node;\n    }\n    return undefined;\n  }\n\n  insert(element, index) {\n    if (index >= 0 && index <= this.count) {\n      const node = new node(element);\n      if (index === 0) {\n        const current = this.head;\n        node.next = current;\n        this.head = node;\n      } else {\n        const previous = this.getelementat(index - 1);\n        node.next = previous.next;\n        previous.next = node;\n      }\n      this.count++;\n      return true;\n    }\n    return false;\n  }\n\n  removeat(index) {\n    if (index >= 0 && index < this.count) {\n      let current = this.head;\n      if (index === 0) {\n        this.head = current.next;\n      } else {\n        const previous = this.getelementat(index - 1);\n        current = previous.next;\n        previous.next = current.next;\n      }\n      this.count--;\n      return current.element;\n    }\n    return undefined;\n  }\n\n  remove(element) {\n    const index = this.indexof(element);\n    return this.removeat(index);\n  }\n\n  indexof(element) {\n    let current = this.head;\n    for (let i = 0; i < this.size() && current != null; i++) {\n      if (this.equalsfn(element, current.element)) {\n        return i;\n      }\n      current = current.next;\n    }\n    return -1;\n  }\n\n  isempty() {\n    return this.size() === 0;\n  }\n\n  size() {\n    return this.count;\n  }\n\n  gethead() {\n    return this.head;\n  }\n\n  clear() {\n    this.head = undefined;\n    this.count = 0;\n  }\n\n  tostring() {\n    if (this.head == null) {\n      return \"\";\n    }\n    let objstring = `${this.head.element}`;\n    let current = this.head.next;\n    for (let i = 1; i < this.size() && current != null; i++) {\n      objstring = `${objstring},${current.element}`;\n      current = current.next;\n    }\n    return objstring;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n\n\nimport linkedlist,{defaultequals, node} from './linkedlist.js';\n\nclass doublynode extends node {\n  constructor(element, next, prev) {\n    super(element, next);\n    this.prev = prev;\n  }\n}\n\nexport default class doublylinkedlist extends linkedlist {\n  constructor(equalsfn = defaultequals) {\n    super(equalsfn);\n    this.tail = undefined;\n  }\n\n  push(element) {\n    const node = new doublynode(element);\n    if (this.head == null) {\n      this.head = node;\n      this.tail = node; // new\n    } else {\n      // attach to the tail node // new\n      this.tail.next = node;\n      node.prev = this.tail;\n      this.tail = node;\n    }\n    this.count++;\n  }\n\n  insert(element, index) {\n    if (index >= 0 && index <= this.count) {\n      const node = new doublynode(element);\n      let current = this.head;\n      if (index === 0) {\n        if (this.head == null) { // new\n          this.head = node;\n          this.tail = node; // new\n        } else {\n          node.next = this.head;\n          this.head.prev = node; // new\n          this.head = node;\n        }\n      } else if (index === this.count) { // last item new\n        current = this.tail;\n        current.next = node;\n        node.prev = current;\n        this.tail = node;\n      } else {\n        const previous = this.getelementat(index - 1);\n        current = previous.next;\n        node.next = current;\n        previous.next = node;\n        current.prev = node; // new\n        node.prev = previous; // new\n      }\n      this.count++;\n      return true;\n    }\n    return false;\n  }\n\n  removeat(index) {\n    if (index >= 0 && index < this.count) {\n      let current = this.head;\n      if (index === 0) {\n        this.head = this.head.next;\n        // if there is only one item, then we update tail as well //new\n        if (this.count === 1) {\n          // {2}\n          this.tail = undefined;\n        } else {\n          this.head.prev = undefined;\n        }\n      } else if (index === this.count - 1) {\n        // last item //new\n        current = this.tail;\n        this.tail = current.prev;\n        this.tail.next = undefined;\n      } else {\n        current = this.getelementat(index);\n        const previous = current.prev;\n        // link previous with current's next - skip it to remove\n        previous.next = current.next;\n        current.next.prev = previous; // new\n      }\n      this.count--;\n      return current.element;\n    }\n    return undefined;\n  }\n\n  indexof(element) {\n    let current = this.head;\n    let index = 0;\n    while (current != null) {\n      if (this.equalsfn(element, current.element)) {\n        return index;\n      }\n      index++;\n      current = current.next;\n    }\n    return -1;\n  }\n\n  gethead() {\n    return this.head;\n  }\n\n  gettail() {\n    return this.tail;\n  }\n\n  clear() {\n    super.clear();\n    this.tail = undefined;\n  }\n\n  tostring() {\n    if (this.head == null) {\n      return '';\n    }\n    let objstring = `${this.head.element}`;\n    let current = this.head.next;\n    while (current != null) {\n      objstring = `${objstring},${current.element}`;\n      current = current.next;\n    }\n    return objstring;\n  }\n\n  inversetostring() {\n    if (this.tail == null) {\n      return '';\n    }\n    let objstring = `${this.tail.element}`;\n    let previous = this.tail.prev;\n    while (previous != null) {\n      objstring = `${objstring},${previous.element}`;\n      previous = previous.prev;\n    }\n    return objstring;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n\n\n\n# 单链表中间结点(876)\n\n * leetcode 876\n\nvar middlenode = function(head) {\n\tlet fast = head, slow = head;\n\n  while(fast !=null && fast.next !=null){\n   \tfast = fast.next.next  // 每次走2步\n    slow = slow.next // 每次走1步\n  }\n  return slow\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 反转链表(206)\n\n * leetcode 206\n\nvar reverselist = function(head) {\n\tlet pre = null, cur = head\n\n  while(cur != null){\n  \tlet tmp = cur.next\n    cur.next = pre\n    pre = cur\n    cur = tmp\n  }\n  return pre\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",charsets:{cjk:!0},lastUpdated:"3/23/2022",lastUpdatedTimestamp:1648018006e3,createdTime:164801325e4},{title:"二叉搜索树",frontmatter:{title:"二叉搜索树",date:"2022-02-20T00:00:00.000Z",sidebar:"auto",autoSort:887,tags:["tree","heap"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/algorithm/binaryTree.html",relativePath:"frontend/algorithm/binaryTree.md",key:"v-737352ab",path:"/frontend/algorithm/binaryTree.html",headers:[{level:2,title:"Tree基本结构",slug:"tree基本结构",normalizedTitle:"tree基本结构",charIndex:2},{level:2,title:"前序排列查询",slug:"前序排列查询",normalizedTitle:"前序排列查询",charIndex:1008},{level:2,title:"中序排列查询",slug:"中序排列查询",normalizedTitle:"中序排列查询",charIndex:2172},{level:2,title:"后序排列查询",slug:"后序排列查询",normalizedTitle:"后序排列查询",charIndex:3935},{level:2,title:"最大值",slug:"最大值",normalizedTitle:"最大值",charIndex:5230},{level:2,title:"最小值",slug:"最小值",normalizedTitle:"最小值",charIndex:5591},{level:2,title:"查询节点",slug:"查询节点",normalizedTitle:"查询节点",charIndex:5928},{level:2,title:"移除节点",slug:"移除节点",normalizedTitle:"移除节点",charIndex:6347},{level:2,title:"广度优先",slug:"广度优先",normalizedTitle:"广度优先",charIndex:7661},{level:2,title:"翻转二叉树",slug:"翻转二叉树",normalizedTitle:"翻转二叉树",charIndex:8189},{level:2,title:"相同的树",slug:"相同的树",normalizedTitle:"相同的树",charIndex:8433},{level:2,title:"其他方法",slug:"其他方法",normalizedTitle:"其他方法",charIndex:8728},{level:2,title:"Trie (前缀树)",slug:"trie-前缀树",normalizedTitle:"trie (前缀树)",charIndex:9389},{level:2,title:"将有序数组转换为二叉搜索树",slug:"将有序数组转换为二叉搜索树",normalizedTitle:"将有序数组转换为二叉搜索树",charIndex:10691},{level:2,title:"最小堆与最大堆（heap）",slug:"最小堆与最大堆-heap",normalizedTitle:"最小堆与最大堆（heap）",charIndex:11505}],headersStr:"Tree基本结构 前序排列查询 中序排列查询 后序排列查询 最大值 最小值 查询节点 移除节点 广度优先 翻转二叉树 相同的树 其他方法 Trie (前缀树) 将有序数组转换为二叉搜索树 最小堆与最大堆（heap）",content:"# Tree基本结构\n\nfunction BinaryTree(data, left, right) {\n  this.data = data; // 节点的值\n  this.left = left; // 左节点\n  this.right = right; // 右节点\n}\n\nfunction BST() {\n  this.root = null;\n}\n\n/**\n * 定义插入属性\n * @param key int|float 要插入的值\n */\nBST.prototype.insert = function(data) {\n  var newNode = new BinaryTree(data, null, null);\n  // 如果没有root节点\n  if (this.root === null) {\n    this.root = newNode;\n  } else {\n    this.insertNode(this.root, newNode);\n  }\n};\n\n/**\n * 插入数据 left小 ，right大\n * @param node obj 节点数据\n * @param newNode obj 要插入的节点数据\n */\nBST.prototype.insertNode = function(node, newNode) {\n  if (newNode.data < node.data) {\n    if (node.left === null) {\n      node.left = newNode;\n    } else {\n      this.insertNode(node.left, newNode);\n    }\n  } else {\n    if (node.right === null) {\n      node.right = newNode;\n    } else {\n      this.insertNode(node.right, newNode);\n    }\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n\n# 前序排列查询\n\n> val -> 左 -> 右\n\n * 示例图\n   \n   \n\n * 递归实现\n\n/**\n * 前序查询\n * @param node obj 节点\n * @returns {Array}\n */\nBST.prototype.preOrder = function(node) {\n  var nodeArr = [];\n  var node = this.root;\n  if (node !== null) {\n    this.preOrderNode(node, nodeArr);\n  }\n  return nodeArr;\n};\n\n/**\n * 前序(中->左->右)\n * @param node obj 节点\n * @param nodeArr 存储查询的值\n */\nBST.prototype.preOrderNode = function(node, nodeArr) {\n  if (node !== null) {\n    nodeArr.push(node.data);  // <- there\n    this.preOrderNode(node.left, nodeArr);\n    this.preOrderNode(node.right, nodeArr);\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n * 使用栈实现 leetcode 144\n\nvar preOrderNode = function(root) {\n    let result = []\n    if(!root) return result\n\n    const stack = [] // 栈结构\n    stack.push(root)\n\n    while(stack.length){\n        const cur = stack.pop();\n        result.push(cur.val)\n        // 若栈顶结点有右孩子，则将右孩子入栈\n        if(cur.right){\n            stack.push(cur.right)\n        }\n        // 若栈顶结点有左孩子，则将左孩子入栈\n        if(cur.left){\n            stack.push(cur.left)\n        }\n\n    }\n    return result\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 中序排列查询\n\n> 左 -> val -> 右\n\n * 示例图\n   \n   \n\n * 递归实现\n\n/**\n * 中序排列查询\n * @param node obj 节点\n * @returns {Array}\n */\nBST.prototype.inOrder = function(sort = \"ASC\") {\n  var nodeArr = [];\n  var node = this.root;\n  if (node !== null) {\n    if (sort.toUpperCase() == \"DESC\") {\n      this.inOrderDescNode(node, nodeArr);\n    } else {\n      this.inOrderAscNode(node, nodeArr);\n    }\n  }\n  return nodeArr;\n};\n\n/**\n * 中序查询-升序(左->中->右)\n * @param node obj 节点\n * @param nodeArr array 存储排序的值\n */\nBST.prototype.inOrderAscNode = function(node, nodeArr) {\n  if (node !== null) {\n    this.inOrderAscNode(node.left, nodeArr);\n    nodeArr.push(node.data);  // <- there\n    this.inOrderAscNode(node.right, nodeArr);\n  }\n};\n\n/**\n * 中序查询-降序(右->中->左)\n * @param node obj 节点\n * @param nodeArr array 存储排序的值\n */\nBST.prototype.inOrderDescNode = function(node, nodeArr) {\n  if (node !== null) {\n    this.inOrderDescNode(node.right, nodeArr);\n    nodeArr.push(node.data); // <- there\n    this.inOrderDescNode(node.left, nodeArr);\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n * 使用栈实现 leetcode 94\n\nconst inorderTraversal = function(root) {\n  // 定义结果数组\n  const res = []\n  // 初始化栈结构\n  const stack = []\n  // 用一个 cur 结点充当游标\n  let cur = root\n  // 当 cur 不为空、或者 stack 不为空时，重复以下逻辑\n  while(cur || stack.length) {\n      // 这个 while 的作用是把寻找最左叶子结点的过程中，途径的所有结点都记录下来\n      while(cur) {\n          // 将途径的结点入栈\n          stack.push(cur)\n          // 继续搜索当前结点的左孩子\n          cur = cur.left\n      }\n      // 取出栈顶元素\n      cur = stack.pop()\n      // 将栈顶元素入栈\n      res.push(cur.val)\n      // 尝试读取 cur 结点的右孩子\n      cur = cur.right\n  }\n  // 返回结果数组\n  return res\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 后序排列查询\n\n> 左 -> 右 -> val\n\n * 示例图\n   \n   \n\n * 递归实现\n\n/**\n * 后序查询\n * @param node obj 节点\n * @returns {Array}\n */\nBST.prototype.reOrder = function(node) {\n  var nodeArr = [];\n  var node = this.root;\n  if (node !== null) {\n    this.reOrderNode(node, nodeArr);\n  }\n  return nodeArr;\n};\n\n/**\n * 后序(左->右->中)\n * @param node obj 节点\n * @param nodeArr 存储查询的值\n */\nBST.prototype.reOrderNode = function(node, nodeArr) {\n  if (node !== null) {\n    this.reOrderNode(node.left, nodeArr);\n    this.reOrderNode(node.right, nodeArr);\n    nodeArr.push(node.data);  // <- there\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n * 非递归实现 leetcode 145\n\nconst postOrder = function(root) {\n  // 定义结果数组\n  const res = []\n  // 处理边界条件\n  if(!root) {\n      return res\n  }\n  // 初始化栈结构\n  const stack = []\n  // 首先将根结点入栈\n  stack.push(root)\n  // 若栈不为空，则重复出栈、入栈操作\n  while(stack.length) {\n      // 将栈顶结点记为当前结点\n      const cur = stack.pop()\n      // 当前结点就是当前子树的根结点，把这个结点放在结果数组的(头部)\n      res.unshift(cur.val)   //\n      // 若当前子树根结点有左孩子，则将左孩子入栈\n      if(cur.left) {\n        stack.push(cur.left)\n      }\n      // 若当前子树根结点有右孩子，则将右孩子入栈\n      if(cur.right) {\n        stack.push(cur.right)\n      }\n  }\n  // 返回结果数组\n  return res\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 最大值\n\nBST.prototype.max = function(node) {\n  var node = this.root;\n  var newNode = this.maxNode(node);\n  return newNode === null ? null : newNode.data;\n};\n\nBST.prototype.maxNode = function(node) {\n  if (node === null) return null;\n  while (node !== null && node.right !== null) {\n    node = node.right;\n  }\n  return node;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 最小值\n\nBST.prototype.min = function(node) {\n  var node = this.root;\n  var newNode = this.minNode(node);\n  return newNode === null ? null : newNode.data;\n};\n\nBST.prototype.minNode = function(node) {\n  if (node === null) return null;\n  if (node.left !== null) return this.minNode(node.left);\n  return node;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 查询节点\n\nBST.prototype.searchNode = function(node, data) {\n  if (node === null) {\n    return false;\n  }\n  if (data < node.data) {\n    return this.searchNode(node.left, data);\n  } else if (data > node.data) {\n    return this.searchNode(node.right, data);\n  } else {\n    return true;\n  }\n};\n\nBST.prototype.search = function(data) {\n  return this.searchNode(this.root, data);\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 移除节点\n\n/**\n * 移除一个节点\n * @param data int|float 要移除的节点值\n * @param node obj 节点\n * @returns {*}\n */\nBST.prototype.remove = function(data) {\n  var node = this.root;\n  return this.removeNode(node, data);\n};\n\n/**\n * 移除节点\n * @param data int|float 要移除的节点值\n * @param node obj 节点\n * @returns {*}\n */\nBST.prototype.removeNode = function(node, data) {\n  if (node === null) return null;\n  if (data < node.data) {\n    node.left = this.removeNode(node.left, data);\n    return node;\n  } else if (data > node.data) {\n    node.right = this.removeNode(node.right, data);\n    return node;\n  } else {\n    // 这事判断第一种情况,没有左右分支的情况下,\n    if (node.left === null && node.right === null) {\n      node = null;\n      return node;\n    }\n    // 这是左子树为空的情况\n    if (node.left === null) {\n      node = node.right;\n      return node;\n    } else if (node.right === null) {\n      // 这是右子树为空的情况\n      node = node.left;\n      return node;\n    } else {\n      // 如果左右两个分支都存在的时候\n      // 寻找该节点的右节点的最小节点\n      var aux = this.minNode(node.right);\n      // 将改节点与找到的最小节点值互换\n      node.data = aux.data;\n      // 删掉替换后的最小节点\n      node.right = this.removeNode(node.right, aux.data);\n      return node;\n    }\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\n\n# 广度优先\n\n * 层序遍历\n\nfunction BFS(root) {\n    const queue = [] // 初始化队列queue\n    // 根结点首先入队\n    queue.push(root)\n    // 队列不为空，说明没有遍历完全\n    while(queue.length) {\n        const top = queue[0] // 取出队头元素\n        // 访问 top\n        console.log(top.val)\n        // 如果左子树存在，左子树入队\n        if(top.left) {\n            queue.push(top.left)\n        }\n        // 如果右子树存在，右子树入队\n        if(top.right) {\n            queue.push(top.right)\n        }\n        queue.shift() // 访问完毕，队头元素出队\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 翻转二叉树\n\n * leetcode 226\n\nvar invertTree = function(root) {\n\tif(!root) return root\n\n  let left = invertTree(root.left)\n  let right = invertTree(root.right)\n\n  root.left = right;\n  root.right = left\n\n  return root\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 相同的树\n\n * leetcode 100\n\nvar isSameTree = function(p, q) {\n    if(p ==null && q == null) return true\n    if(p == null || q == null) return false\n    if(p.val != q.val) return false\n\n\t\t// 分别比较左子树 和 右子树\n    return isSameTree(p.left, q.left) && isSameTree(p.right, q.right)\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 其他方法\n\n// 求二叉树节点个数\nconst sizeOfNode = function(node) {\n  if (!node) {\n    return 0;\n  }\n  return 1 + sizeOfNode(node.left) + sizeOfNode(node.right);\n};\n\n// 求二叉树层级\nconst levelOfNode = function(node) {\n  if (!node) {\n    return 0;\n  }\n  return (\n    Math.max(levelOfNode(node.left), levelOfNode(node.right)) + 1\n  );\n};\n\n// 求二叉树第K层的节点个数\nconst numKLevel = function(node, k) {\n  if (k < 0) {\n    return 0;\n  }\n  if (node === null) {\n    return 0;\n  }\n  if (node !== null && k === 1) {\n    return 1;\n  }\n  return numKLevel(node.left, k - 1) + numKLevel(node.right, k - 1);\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# Trie (前缀树)\n\n> 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查\n\n * leetcode 208\n\nvar Trie = function() {\n    this.children = {}\n};\n\n/**\n * @param {string} word\n * @return {void}\n */\nTrie.prototype.insert = function(word) {\n    let node = this.children\n    for(const ch of word){\n        if(!node[ch]){\n           node[ch]={}\n        }\n        node = node[ch]\n    }\n    node.isEnd = true\n};\n\nTrie.prototype.searchPrefix = function(word) {\n    let node = this.children\n    for(const ch of word){\n        if(!node[ch]) {\n            return false\n        }\n        node = node[ch]\n    }\n    return node\n};\n\n/**\n * @param {string} word\n * @return {boolean}\n */\nTrie.prototype.search = function(word) {\n    const node = this.searchPrefix(word)\n    return node !== undefined && node.isEnd != undefined\n};\n\n/**\n * @param {string} prefix\n * @return {boolean}\n */\nTrie.prototype.startsWith = function(prefix) {\n    return this.searchPrefix(prefix)\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n\n\n\n# 将有序数组转换为二叉搜索树\n\n * 实现代码 leetcode 108\n\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} nums\n * @return {TreeNode}\n */\nvar sortedArrayToBST = function(nums) {\n    if(nums.length == 0) return null;\n    return dfs(nums, 0, nums.length-1)\n};\n\nfunction dfs(nums, left, right){\n    if(left > right){\n        return null\n    }\n    let mid = Math.floor(left + (right - left) / 2);\n    let root = new TreeNode(nums[mid])\n    root.left = dfs(nums, left, mid -1)\n    root.right = dfs(nums, mid+1, right)\n\n    return root\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 最小堆与最大堆（heap）\n\n> 来源：学习javascript数据结构与算法（第三版）\n\n * util.js\n\nexport const Compare = {\n  LESS_THAN: -1,\n  BIGGER_THAN: 1,\n  EQUALS: 0\n};\n\nexport function defaultCompare(a, b) {\n  if (a === b) {\n    return Compare.EQUALS;\n  }\n  return a < b ? Compare.LESS_THAN : Compare.BIGGER_THAN;\n}\n\nexport function swap(array, a, b) {\n  /* const temp = array[a];\n  array[a] = array[b];\n  array[b] = temp; */\n  [array[a], array[b]] = [array[b], array[a]];\n}\n\nexport function reverseCompare(compareFn) {\n  return (a, b) => compareFn(b, a);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n * Heap.js\n\nimport { Compare, defaultCompare, reverseCompare, swap } from '../util';\n\nexport class MinHeap {\n  constructor(compareFn = defaultCompare) {\n    this.compareFn = compareFn;\n    this.heap = [];\n  }\n  getLeftIndex(index) {\n    return (2 * index) + 1;\n  }\n  getRightIndex(index) {\n    return (2 * index) + 2;\n  }\n  getParentIndex(index) {\n    if (index === 0) {\n      return undefined;\n    }\n    return Math.floor((index - 1) / 2);\n  }\n  size() {\n    return this.heap.length;\n  }\n  isEmpty() {\n    return this.size() <= 0;\n  }\n  clear() {\n    this.heap = [];\n  }\n  findMinimum() {\n    return this.isEmpty() ? undefined : this.heap[0];\n  }\n  insert(value) {\n    if (value != null) {\n      const index = this.heap.length;\n      this.heap.push(value);\n      this.siftUp(index);\n      return true;\n    }\n    return false;\n  }\n  siftDown(index) {\n    let element = index;\n    const left = this.getLeftIndex(index);\n    const right = this.getRightIndex(index);\n    const size = this.size();\n    if (\n      left < size &&\n      this.compareFn(this.heap[element], this.heap[left]) === Compare.BIGGER_THAN\n    ) {\n      element = left;\n    }\n    if (\n      right < size &&\n      this.compareFn(this.heap[element], this.heap[right]) === Compare.BIGGER_THAN\n    ) {\n      element = right;\n    }\n    if (index !== element) {\n      swap(this.heap, index, element);\n      this.siftDown(element);\n    }\n  }\n  siftUp(index) {\n    let parent = this.getParentIndex(index);\n    while (\n      index > 0 &&\n      this.compareFn(this.heap[parent], this.heap[index]) === Compare.BIGGER_THAN\n    ) {\n      swap(this.heap, parent, index);\n      index = parent;\n      parent = this.getParentIndex(index);\n    }\n  }\n  extract() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    if (this.size() === 1) {\n      return this.heap.shift();\n    }\n    const removedValue = this.heap[0];\n    this.heap[0] = this.heap.pop();\n    this.siftDown(0);\n    return removedValue;\n  }\n  heapify(array) {\n    if (array) {\n      this.heap = array;\n    }\n    const maxIndex = Math.floor(this.size() / 2) - 1;\n    for (let i = maxIndex; i >= 0; i--) {\n      this.siftDown(i);\n    }\n    return this.heap;\n  }\n  getAsArray() {\n    return this.heap;\n  }\n}\n\nexport class MaxHeap extends MinHeap {\n  constructor(compareFn = defaultCompare) {\n    super(compareFn);\n    this.compareFn = compareFn;\n    this.compareFn = reverseCompare(compareFn);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n\n * 使用MinHeap\n\nlet heap = new MinHeap();\n\nheap.insert(2);\nheap.insert(3);\nheap.insert(4);\nheap.insert(5);\n\nheap.insert(2);\n\nconsole.log(heap.getAsArray());\n\nconsole.log('Heap size: ', heap.size()); // 5\nconsole.log('Heap is empty: ', heap.isEmpty()); // false\nconsole.log('Heap min value: ', heap.findMinimum()); // 1\n\nheap = new MinHeap();\nfor (let i = 1; i < 10; i++) {\n  heap.insert(i);\n}\n\nconsole.log(heap.getAsArray());\n\nconsole.log('Extract minimum: ', heap.extract()); // 1\nconsole.log(heap.getAsArray()); // [2, 4, 3, 8, 5, 6, 7, 9]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * 使用MaxHeap\n\nconst maxHeap = new MaxHeap();\n\nmaxHeap.insert(2);\nmaxHeap.insert(3);\nmaxHeap.insert(4);\nmaxHeap.insert(5);\n\nmaxHeap.insert(1);\n\nconsole.log(maxHeap.getAsArray());\n\nconsole.log('Heap size: ', maxHeap.size()); // 5\nconsole.log('Heap is empty: ', maxHeap.isEmpty()); // false\nconsole.log('Heap min value: ', maxHeap.findMinimum()); // 5\n\nmaxHeap.insert(6);\nmaxHeap.insert(9);\nmaxHeap.insert(10);\nmaxHeap.insert(14);\n\nconsole.log(maxHeap.getAsArray());\n\nconsole.log('Extract minimum: ', maxHeap.extract());\nconsole.log(maxHeap.getAsArray());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n",normalizedContent:"# tree基本结构\n\nfunction binarytree(data, left, right) {\n  this.data = data; // 节点的值\n  this.left = left; // 左节点\n  this.right = right; // 右节点\n}\n\nfunction bst() {\n  this.root = null;\n}\n\n/**\n * 定义插入属性\n * @param key int|float 要插入的值\n */\nbst.prototype.insert = function(data) {\n  var newnode = new binarytree(data, null, null);\n  // 如果没有root节点\n  if (this.root === null) {\n    this.root = newnode;\n  } else {\n    this.insertnode(this.root, newnode);\n  }\n};\n\n/**\n * 插入数据 left小 ，right大\n * @param node obj 节点数据\n * @param newnode obj 要插入的节点数据\n */\nbst.prototype.insertnode = function(node, newnode) {\n  if (newnode.data < node.data) {\n    if (node.left === null) {\n      node.left = newnode;\n    } else {\n      this.insertnode(node.left, newnode);\n    }\n  } else {\n    if (node.right === null) {\n      node.right = newnode;\n    } else {\n      this.insertnode(node.right, newnode);\n    }\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n\n# 前序排列查询\n\n> val -> 左 -> 右\n\n * 示例图\n   \n   \n\n * 递归实现\n\n/**\n * 前序查询\n * @param node obj 节点\n * @returns {array}\n */\nbst.prototype.preorder = function(node) {\n  var nodearr = [];\n  var node = this.root;\n  if (node !== null) {\n    this.preordernode(node, nodearr);\n  }\n  return nodearr;\n};\n\n/**\n * 前序(中->左->右)\n * @param node obj 节点\n * @param nodearr 存储查询的值\n */\nbst.prototype.preordernode = function(node, nodearr) {\n  if (node !== null) {\n    nodearr.push(node.data);  // <- there\n    this.preordernode(node.left, nodearr);\n    this.preordernode(node.right, nodearr);\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n * 使用栈实现 leetcode 144\n\nvar preordernode = function(root) {\n    let result = []\n    if(!root) return result\n\n    const stack = [] // 栈结构\n    stack.push(root)\n\n    while(stack.length){\n        const cur = stack.pop();\n        result.push(cur.val)\n        // 若栈顶结点有右孩子，则将右孩子入栈\n        if(cur.right){\n            stack.push(cur.right)\n        }\n        // 若栈顶结点有左孩子，则将左孩子入栈\n        if(cur.left){\n            stack.push(cur.left)\n        }\n\n    }\n    return result\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 中序排列查询\n\n> 左 -> val -> 右\n\n * 示例图\n   \n   \n\n * 递归实现\n\n/**\n * 中序排列查询\n * @param node obj 节点\n * @returns {array}\n */\nbst.prototype.inorder = function(sort = \"asc\") {\n  var nodearr = [];\n  var node = this.root;\n  if (node !== null) {\n    if (sort.touppercase() == \"desc\") {\n      this.inorderdescnode(node, nodearr);\n    } else {\n      this.inorderascnode(node, nodearr);\n    }\n  }\n  return nodearr;\n};\n\n/**\n * 中序查询-升序(左->中->右)\n * @param node obj 节点\n * @param nodearr array 存储排序的值\n */\nbst.prototype.inorderascnode = function(node, nodearr) {\n  if (node !== null) {\n    this.inorderascnode(node.left, nodearr);\n    nodearr.push(node.data);  // <- there\n    this.inorderascnode(node.right, nodearr);\n  }\n};\n\n/**\n * 中序查询-降序(右->中->左)\n * @param node obj 节点\n * @param nodearr array 存储排序的值\n */\nbst.prototype.inorderdescnode = function(node, nodearr) {\n  if (node !== null) {\n    this.inorderdescnode(node.right, nodearr);\n    nodearr.push(node.data); // <- there\n    this.inorderdescnode(node.left, nodearr);\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n * 使用栈实现 leetcode 94\n\nconst inordertraversal = function(root) {\n  // 定义结果数组\n  const res = []\n  // 初始化栈结构\n  const stack = []\n  // 用一个 cur 结点充当游标\n  let cur = root\n  // 当 cur 不为空、或者 stack 不为空时，重复以下逻辑\n  while(cur || stack.length) {\n      // 这个 while 的作用是把寻找最左叶子结点的过程中，途径的所有结点都记录下来\n      while(cur) {\n          // 将途径的结点入栈\n          stack.push(cur)\n          // 继续搜索当前结点的左孩子\n          cur = cur.left\n      }\n      // 取出栈顶元素\n      cur = stack.pop()\n      // 将栈顶元素入栈\n      res.push(cur.val)\n      // 尝试读取 cur 结点的右孩子\n      cur = cur.right\n  }\n  // 返回结果数组\n  return res\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 后序排列查询\n\n> 左 -> 右 -> val\n\n * 示例图\n   \n   \n\n * 递归实现\n\n/**\n * 后序查询\n * @param node obj 节点\n * @returns {array}\n */\nbst.prototype.reorder = function(node) {\n  var nodearr = [];\n  var node = this.root;\n  if (node !== null) {\n    this.reordernode(node, nodearr);\n  }\n  return nodearr;\n};\n\n/**\n * 后序(左->右->中)\n * @param node obj 节点\n * @param nodearr 存储查询的值\n */\nbst.prototype.reordernode = function(node, nodearr) {\n  if (node !== null) {\n    this.reordernode(node.left, nodearr);\n    this.reordernode(node.right, nodearr);\n    nodearr.push(node.data);  // <- there\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n * 非递归实现 leetcode 145\n\nconst postorder = function(root) {\n  // 定义结果数组\n  const res = []\n  // 处理边界条件\n  if(!root) {\n      return res\n  }\n  // 初始化栈结构\n  const stack = []\n  // 首先将根结点入栈\n  stack.push(root)\n  // 若栈不为空，则重复出栈、入栈操作\n  while(stack.length) {\n      // 将栈顶结点记为当前结点\n      const cur = stack.pop()\n      // 当前结点就是当前子树的根结点，把这个结点放在结果数组的(头部)\n      res.unshift(cur.val)   //\n      // 若当前子树根结点有左孩子，则将左孩子入栈\n      if(cur.left) {\n        stack.push(cur.left)\n      }\n      // 若当前子树根结点有右孩子，则将右孩子入栈\n      if(cur.right) {\n        stack.push(cur.right)\n      }\n  }\n  // 返回结果数组\n  return res\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 最大值\n\nbst.prototype.max = function(node) {\n  var node = this.root;\n  var newnode = this.maxnode(node);\n  return newnode === null ? null : newnode.data;\n};\n\nbst.prototype.maxnode = function(node) {\n  if (node === null) return null;\n  while (node !== null && node.right !== null) {\n    node = node.right;\n  }\n  return node;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 最小值\n\nbst.prototype.min = function(node) {\n  var node = this.root;\n  var newnode = this.minnode(node);\n  return newnode === null ? null : newnode.data;\n};\n\nbst.prototype.minnode = function(node) {\n  if (node === null) return null;\n  if (node.left !== null) return this.minnode(node.left);\n  return node;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 查询节点\n\nbst.prototype.searchnode = function(node, data) {\n  if (node === null) {\n    return false;\n  }\n  if (data < node.data) {\n    return this.searchnode(node.left, data);\n  } else if (data > node.data) {\n    return this.searchnode(node.right, data);\n  } else {\n    return true;\n  }\n};\n\nbst.prototype.search = function(data) {\n  return this.searchnode(this.root, data);\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 移除节点\n\n/**\n * 移除一个节点\n * @param data int|float 要移除的节点值\n * @param node obj 节点\n * @returns {*}\n */\nbst.prototype.remove = function(data) {\n  var node = this.root;\n  return this.removenode(node, data);\n};\n\n/**\n * 移除节点\n * @param data int|float 要移除的节点值\n * @param node obj 节点\n * @returns {*}\n */\nbst.prototype.removenode = function(node, data) {\n  if (node === null) return null;\n  if (data < node.data) {\n    node.left = this.removenode(node.left, data);\n    return node;\n  } else if (data > node.data) {\n    node.right = this.removenode(node.right, data);\n    return node;\n  } else {\n    // 这事判断第一种情况,没有左右分支的情况下,\n    if (node.left === null && node.right === null) {\n      node = null;\n      return node;\n    }\n    // 这是左子树为空的情况\n    if (node.left === null) {\n      node = node.right;\n      return node;\n    } else if (node.right === null) {\n      // 这是右子树为空的情况\n      node = node.left;\n      return node;\n    } else {\n      // 如果左右两个分支都存在的时候\n      // 寻找该节点的右节点的最小节点\n      var aux = this.minnode(node.right);\n      // 将改节点与找到的最小节点值互换\n      node.data = aux.data;\n      // 删掉替换后的最小节点\n      node.right = this.removenode(node.right, aux.data);\n      return node;\n    }\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n\n\n# 广度优先\n\n * 层序遍历\n\nfunction bfs(root) {\n    const queue = [] // 初始化队列queue\n    // 根结点首先入队\n    queue.push(root)\n    // 队列不为空，说明没有遍历完全\n    while(queue.length) {\n        const top = queue[0] // 取出队头元素\n        // 访问 top\n        console.log(top.val)\n        // 如果左子树存在，左子树入队\n        if(top.left) {\n            queue.push(top.left)\n        }\n        // 如果右子树存在，右子树入队\n        if(top.right) {\n            queue.push(top.right)\n        }\n        queue.shift() // 访问完毕，队头元素出队\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 翻转二叉树\n\n * leetcode 226\n\nvar inverttree = function(root) {\n\tif(!root) return root\n\n  let left = inverttree(root.left)\n  let right = inverttree(root.right)\n\n  root.left = right;\n  root.right = left\n\n  return root\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 相同的树\n\n * leetcode 100\n\nvar issametree = function(p, q) {\n    if(p ==null && q == null) return true\n    if(p == null || q == null) return false\n    if(p.val != q.val) return false\n\n\t\t// 分别比较左子树 和 右子树\n    return issametree(p.left, q.left) && issametree(p.right, q.right)\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 其他方法\n\n// 求二叉树节点个数\nconst sizeofnode = function(node) {\n  if (!node) {\n    return 0;\n  }\n  return 1 + sizeofnode(node.left) + sizeofnode(node.right);\n};\n\n// 求二叉树层级\nconst levelofnode = function(node) {\n  if (!node) {\n    return 0;\n  }\n  return (\n    math.max(levelofnode(node.left), levelofnode(node.right)) + 1\n  );\n};\n\n// 求二叉树第k层的节点个数\nconst numklevel = function(node, k) {\n  if (k < 0) {\n    return 0;\n  }\n  if (node === null) {\n    return 0;\n  }\n  if (node !== null && k === 1) {\n    return 1;\n  }\n  return numklevel(node.left, k - 1) + numklevel(node.right, k - 1);\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# trie (前缀树)\n\n> 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查\n\n * leetcode 208\n\nvar trie = function() {\n    this.children = {}\n};\n\n/**\n * @param {string} word\n * @return {void}\n */\ntrie.prototype.insert = function(word) {\n    let node = this.children\n    for(const ch of word){\n        if(!node[ch]){\n           node[ch]={}\n        }\n        node = node[ch]\n    }\n    node.isend = true\n};\n\ntrie.prototype.searchprefix = function(word) {\n    let node = this.children\n    for(const ch of word){\n        if(!node[ch]) {\n            return false\n        }\n        node = node[ch]\n    }\n    return node\n};\n\n/**\n * @param {string} word\n * @return {boolean}\n */\ntrie.prototype.search = function(word) {\n    const node = this.searchprefix(word)\n    return node !== undefined && node.isend != undefined\n};\n\n/**\n * @param {string} prefix\n * @return {boolean}\n */\ntrie.prototype.startswith = function(prefix) {\n    return this.searchprefix(prefix)\n};\n\n/**\n * your trie object will be instantiated and called as such:\n * var obj = new trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startswith(prefix)\n */\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n\n\n\n# 将有序数组转换为二叉搜索树\n\n * 实现代码 leetcode 108\n\n/**\n * definition for a binary tree node.\n * function treenode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {number[]} nums\n * @return {treenode}\n */\nvar sortedarraytobst = function(nums) {\n    if(nums.length == 0) return null;\n    return dfs(nums, 0, nums.length-1)\n};\n\nfunction dfs(nums, left, right){\n    if(left > right){\n        return null\n    }\n    let mid = math.floor(left + (right - left) / 2);\n    let root = new treenode(nums[mid])\n    root.left = dfs(nums, left, mid -1)\n    root.right = dfs(nums, mid+1, right)\n\n    return root\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 最小堆与最大堆（heap）\n\n> 来源：学习javascript数据结构与算法（第三版）\n\n * util.js\n\nexport const compare = {\n  less_than: -1,\n  bigger_than: 1,\n  equals: 0\n};\n\nexport function defaultcompare(a, b) {\n  if (a === b) {\n    return compare.equals;\n  }\n  return a < b ? compare.less_than : compare.bigger_than;\n}\n\nexport function swap(array, a, b) {\n  /* const temp = array[a];\n  array[a] = array[b];\n  array[b] = temp; */\n  [array[a], array[b]] = [array[b], array[a]];\n}\n\nexport function reversecompare(comparefn) {\n  return (a, b) => comparefn(b, a);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n * heap.js\n\nimport { compare, defaultcompare, reversecompare, swap } from '../util';\n\nexport class minheap {\n  constructor(comparefn = defaultcompare) {\n    this.comparefn = comparefn;\n    this.heap = [];\n  }\n  getleftindex(index) {\n    return (2 * index) + 1;\n  }\n  getrightindex(index) {\n    return (2 * index) + 2;\n  }\n  getparentindex(index) {\n    if (index === 0) {\n      return undefined;\n    }\n    return math.floor((index - 1) / 2);\n  }\n  size() {\n    return this.heap.length;\n  }\n  isempty() {\n    return this.size() <= 0;\n  }\n  clear() {\n    this.heap = [];\n  }\n  findminimum() {\n    return this.isempty() ? undefined : this.heap[0];\n  }\n  insert(value) {\n    if (value != null) {\n      const index = this.heap.length;\n      this.heap.push(value);\n      this.siftup(index);\n      return true;\n    }\n    return false;\n  }\n  siftdown(index) {\n    let element = index;\n    const left = this.getleftindex(index);\n    const right = this.getrightindex(index);\n    const size = this.size();\n    if (\n      left < size &&\n      this.comparefn(this.heap[element], this.heap[left]) === compare.bigger_than\n    ) {\n      element = left;\n    }\n    if (\n      right < size &&\n      this.comparefn(this.heap[element], this.heap[right]) === compare.bigger_than\n    ) {\n      element = right;\n    }\n    if (index !== element) {\n      swap(this.heap, index, element);\n      this.siftdown(element);\n    }\n  }\n  siftup(index) {\n    let parent = this.getparentindex(index);\n    while (\n      index > 0 &&\n      this.comparefn(this.heap[parent], this.heap[index]) === compare.bigger_than\n    ) {\n      swap(this.heap, parent, index);\n      index = parent;\n      parent = this.getparentindex(index);\n    }\n  }\n  extract() {\n    if (this.isempty()) {\n      return undefined;\n    }\n    if (this.size() === 1) {\n      return this.heap.shift();\n    }\n    const removedvalue = this.heap[0];\n    this.heap[0] = this.heap.pop();\n    this.siftdown(0);\n    return removedvalue;\n  }\n  heapify(array) {\n    if (array) {\n      this.heap = array;\n    }\n    const maxindex = math.floor(this.size() / 2) - 1;\n    for (let i = maxindex; i >= 0; i--) {\n      this.siftdown(i);\n    }\n    return this.heap;\n  }\n  getasarray() {\n    return this.heap;\n  }\n}\n\nexport class maxheap extends minheap {\n  constructor(comparefn = defaultcompare) {\n    super(comparefn);\n    this.comparefn = comparefn;\n    this.comparefn = reversecompare(comparefn);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n\n * 使用minheap\n\nlet heap = new minheap();\n\nheap.insert(2);\nheap.insert(3);\nheap.insert(4);\nheap.insert(5);\n\nheap.insert(2);\n\nconsole.log(heap.getasarray());\n\nconsole.log('heap size: ', heap.size()); // 5\nconsole.log('heap is empty: ', heap.isempty()); // false\nconsole.log('heap min value: ', heap.findminimum()); // 1\n\nheap = new minheap();\nfor (let i = 1; i < 10; i++) {\n  heap.insert(i);\n}\n\nconsole.log(heap.getasarray());\n\nconsole.log('extract minimum: ', heap.extract()); // 1\nconsole.log(heap.getasarray()); // [2, 4, 3, 8, 5, 6, 7, 9]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * 使用maxheap\n\nconst maxheap = new maxheap();\n\nmaxheap.insert(2);\nmaxheap.insert(3);\nmaxheap.insert(4);\nmaxheap.insert(5);\n\nmaxheap.insert(1);\n\nconsole.log(maxheap.getasarray());\n\nconsole.log('heap size: ', maxheap.size()); // 5\nconsole.log('heap is empty: ', maxheap.isempty()); // false\nconsole.log('heap min value: ', maxheap.findminimum()); // 5\n\nmaxheap.insert(6);\nmaxheap.insert(9);\nmaxheap.insert(10);\nmaxheap.insert(14);\n\nconsole.log(maxheap.getasarray());\n\nconsole.log('extract minimum: ', maxheap.extract());\nconsole.log(maxheap.getasarray());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n",charsets:{cjk:!0},lastUpdated:"3/23/2022",lastUpdatedTimestamp:1648016894e3,createdTime:1647517837e3},{title:"ajax和cors",frontmatter:{title:"ajax和cors",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["cors","XMLHttpRequest"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/ajax.html",relativePath:"frontend/issues/ajax.md",key:"v-7844a1b2",path:"/frontend/issues/ajax.html",headers:[{level:2,title:"XMLHttpRequest",slug:"xmlhttprequest",normalizedTitle:"xmlhttprequest",charIndex:2},{level:2,title:"XMLHttpRequest兼容性",slug:"xmlhttprequest兼容性",normalizedTitle:"xmlhttprequest兼容性",charIndex:891},{level:2,title:"GET 请求",slug:"get-请求",normalizedTitle:"get 请求",charIndex:1048},{level:2,title:"POST 请求",slug:"post-请求",normalizedTitle:"post 请求",charIndex:1420},{level:2,title:"JSONP",slug:"jsonp",normalizedTitle:"jsonp",charIndex:1815},{level:2,title:"cors",slug:"cors",normalizedTitle:"cors",charIndex:2675},{level:3,title:"withCredentials 属性",slug:"withcredentials-属性",normalizedTitle:"withcredentials 属性",charIndex:2986},{level:2,title:"相关链接",slug:"相关链接",normalizedTitle:"相关链接",charIndex:3308}],headersStr:"XMLHttpRequest XMLHttpRequest兼容性 GET 请求 POST 请求 JSONP cors withCredentials 属性 相关链接",content:"# XMLHttpRequest\n\n// 1.实例化\nvar xhr = new XMLHttpRequest();\n// 2.请求行\n//第三个参数：true 为 异步 ; false 为同步\n// GET传参\nxhr.open('get', 'index.php?name=xiaoming&&age=10', true);\n//POST\nxhr.open('post', 'index.php', true);\n// 3.请求头:\n//GET方式可以不设请求头\nxhr.setRequestHeader('Content-Type', 'text/html');\n// POST方式必须要设置请求头\nxhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n// 4.请求主体\n// GET方式\nxhr.send(null);\n// POST参数放到请求主体里\nxhr.send('name=xiaoming&age=10');\n// 5.响应状态 ：request.responseText或者request.responseXML\n// 事件的监听，来监听状态的变化\nxhr.onreadystatechange = function () {\n  // console.log(xhr.readyState);\n  // console.log(xhr.status);\n\n  // 此状态则为响应结果完成\n  if (xhr.readyState == 4 && xhr.status == 200) {\n    // 通过DOM操作将内容放到页面上\n    document.getElementById('result').innerHTML = xhr.responseText;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# XMLHttpRequest兼容性\n\nvar xhr;\nif (XMLHttpRequest) {\n  xhr = new XMLHttpRequest();\n} else {\n  xhr = new ActiveObject(\"Microsoft.XMLHTTP\");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# GET 请求\n\nvar xhr = new XMLHttpRequest();\n// 请求行\nxhr.open(\"get\", \"/get\");\n// 请求头\nxhr.setRequestHeader(\"Content-Type\", \"text/html\");\n// 请求主体\nxhr.send(null);\n// 事件的监听，来监听状态的变化\nxhr.onreadystatechange = function() {\n  //console.log(xhr.status);\n  if (xhr.readyState == 4 && xhr.status === 200) {\n    console.log(xhr.responseText);\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# POST 请求\n\nvar xhr = new XMLHttpRequest();\n// 请求行\nxhr.open(\"post\", \"/post\");\n// 请求头  POST\nxhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n// 请求主体\nxhr.send(\"name=xiaowang&age=30\");\n\n// 事件的监听，来监听状态的变化\nxhr.onreadystatechange = function() {\n  if (xhr.readyState == 4 && xhr.status === 200) {\n    console.log(xhr.responseText);\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# JSONP\n\nfunction jsonp({ url, params, cb }) {\n  return new Promise((resolve, reject) => {\n    let script = document.createElement('script')\n    window[cb] = function (data) {\n      resolve(data);\n      document.body.removeChild(script)\n    }\n    params = { ...params, cb }\n    let queries = [];\n    for (let key in params) {\n      queries.push(`${key}=${params[key]}`)\n    }\n    script.src = `${url}?${queries.join('&')}`\n    document.body.appendChild(script)\n  })\n}\n\n// node server\napp.get('/get',function(req,res){\n    let { cb } = req.query; // 定义好的字段\n    const data = {\"message\": \"data jsonp\"}\n    res.send( `${cb}(${JSON.stringify(data)})` );\n})\n\n// web 使用\njsonp({\n  url: 'http://localhost:3000/get',\n  cb: 'show' // 定义好的字段\n}).then(data => {\n  console.log(data)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# cors\n\n * 对比cors， JSONP 只能实现 GET 请求，而 CORS 支持所有类型的 HTTP 请求\n * 如果 Origin 指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段\n\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Credentials: true  # 表示是否允许发送 Cookie, 默认跨域不支持\nAccess-Control-Expose-Headers: FooBar\nContent-Type: text/html; charset=utf-8\n\n\n1\n2\n3\n4\n\n\n\n# withCredentials 属性\n\n * CORS 请求默认不发送 Cookie 和 HTTP 认证信息。如果要把 Cookie 发到服务器， 需要指定Access-Control-Allow-Credentials字段\n\nAccess-Control-Allow-Credentials: true\n\n\n1\n\n * 在 AJAX 请求中打开withCredentials属性\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\n\n1\n2\n\n * 否则，即使服务器同意发送 Cookie，浏览器也不会发送。或者，服务器要求设置 Cookie，浏览器也不会处理\n\n\n# 相关链接\n\n * XMLHttpRequest2 新技巧\n * 浏览器跨域方法与基于 Fetch 的 Web 请求最佳实践\n * fetch-jsonp\n * 前端常见跨域解决方案（全）\n * navigator.sendBeacon\n * Web sendBeacon 刷新/关闭页面之前发送请求",normalizedContent:"# xmlhttprequest\n\n// 1.实例化\nvar xhr = new xmlhttprequest();\n// 2.请求行\n//第三个参数：true 为 异步 ; false 为同步\n// get传参\nxhr.open('get', 'index.php?name=xiaoming&&age=10', true);\n//post\nxhr.open('post', 'index.php', true);\n// 3.请求头:\n//get方式可以不设请求头\nxhr.setrequestheader('content-type', 'text/html');\n// post方式必须要设置请求头\nxhr.setrequestheader('content-type', 'application/x-www-form-urlencoded');\n// 4.请求主体\n// get方式\nxhr.send(null);\n// post参数放到请求主体里\nxhr.send('name=xiaoming&age=10');\n// 5.响应状态 ：request.responsetext或者request.responsexml\n// 事件的监听，来监听状态的变化\nxhr.onreadystatechange = function () {\n  // console.log(xhr.readystate);\n  // console.log(xhr.status);\n\n  // 此状态则为响应结果完成\n  if (xhr.readystate == 4 && xhr.status == 200) {\n    // 通过dom操作将内容放到页面上\n    document.getelementbyid('result').innerhtml = xhr.responsetext;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# xmlhttprequest兼容性\n\nvar xhr;\nif (xmlhttprequest) {\n  xhr = new xmlhttprequest();\n} else {\n  xhr = new activeobject(\"microsoft.xmlhttp\");\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# get 请求\n\nvar xhr = new xmlhttprequest();\n// 请求行\nxhr.open(\"get\", \"/get\");\n// 请求头\nxhr.setrequestheader(\"content-type\", \"text/html\");\n// 请求主体\nxhr.send(null);\n// 事件的监听，来监听状态的变化\nxhr.onreadystatechange = function() {\n  //console.log(xhr.status);\n  if (xhr.readystate == 4 && xhr.status === 200) {\n    console.log(xhr.responsetext);\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# post 请求\n\nvar xhr = new xmlhttprequest();\n// 请求行\nxhr.open(\"post\", \"/post\");\n// 请求头  post\nxhr.setrequestheader(\"content-type\", \"application/x-www-form-urlencoded\");\n// 请求主体\nxhr.send(\"name=xiaowang&age=30\");\n\n// 事件的监听，来监听状态的变化\nxhr.onreadystatechange = function() {\n  if (xhr.readystate == 4 && xhr.status === 200) {\n    console.log(xhr.responsetext);\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# jsonp\n\nfunction jsonp({ url, params, cb }) {\n  return new promise((resolve, reject) => {\n    let script = document.createelement('script')\n    window[cb] = function (data) {\n      resolve(data);\n      document.body.removechild(script)\n    }\n    params = { ...params, cb }\n    let queries = [];\n    for (let key in params) {\n      queries.push(`${key}=${params[key]}`)\n    }\n    script.src = `${url}?${queries.join('&')}`\n    document.body.appendchild(script)\n  })\n}\n\n// node server\napp.get('/get',function(req,res){\n    let { cb } = req.query; // 定义好的字段\n    const data = {\"message\": \"data jsonp\"}\n    res.send( `${cb}(${json.stringify(data)})` );\n})\n\n// web 使用\njsonp({\n  url: 'http://localhost:3000/get',\n  cb: 'show' // 定义好的字段\n}).then(data => {\n  console.log(data)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# cors\n\n * 对比cors， jsonp 只能实现 get 请求，而 cors 支持所有类型的 http 请求\n * 如果 origin 指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段\n\naccess-control-allow-origin: http://api.bob.com\naccess-control-allow-credentials: true  # 表示是否允许发送 cookie, 默认跨域不支持\naccess-control-expose-headers: foobar\ncontent-type: text/html; charset=utf-8\n\n\n1\n2\n3\n4\n\n\n\n# withcredentials 属性\n\n * cors 请求默认不发送 cookie 和 http 认证信息。如果要把 cookie 发到服务器， 需要指定access-control-allow-credentials字段\n\naccess-control-allow-credentials: true\n\n\n1\n\n * 在 ajax 请求中打开withcredentials属性\n\nvar xhr = new xmlhttprequest();\nxhr.withcredentials = true;\n\n\n1\n2\n\n * 否则，即使服务器同意发送 cookie，浏览器也不会发送。或者，服务器要求设置 cookie，浏览器也不会处理\n\n\n# 相关链接\n\n * xmlhttprequest2 新技巧\n * 浏览器跨域方法与基于 fetch 的 web 请求最佳实践\n * fetch-jsonp\n * 前端常见跨域解决方案（全）\n * navigator.sendbeacon\n * web sendbeacon 刷新/关闭页面之前发送请求",charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647922573e3,createdTime:1643899953e3},{title:"导航目录",frontmatter:{title:"导航目录",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["blog"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/",relativePath:"frontend/issues/README.md",key:"v-6c84e740",path:"/frontend/issues/",headersStr:null,content:"> The Article Total （ 29 ）\n\n * ajax和cors\n * 资源列表\n * angular1.x的使用\n * axios请求封装\n * 基本数据类型\n * 使用commitizen格式化提交规范\n * 文档属性兼容\n * BOM与DOM事件\n * 使用eslint和prettier代码校验\n * 常见的事件封装\n * 常见手写函数整理（一）\n * 常见问题整理（一）\n * 常见问题整理（二）\n * 常见问题整理（三）\n * github的graphql使用\n * 如何处理前端异常\n * Learn jest.js note\n * css预处理器less使用\n * micro frontend\n * 设计模式/构造函数\n * 实现Promise\n * 使用rem和viewport的注意事项\n * URL到页面加载过程\n * css预处理器sass使用\n * typescript\n * css常见问题\n * html常见布局\n * web安全防范\n * webpack",normalizedContent:"> the article total （ 29 ）\n\n * ajax和cors\n * 资源列表\n * angular1.x的使用\n * axios请求封装\n * 基本数据类型\n * 使用commitizen格式化提交规范\n * 文档属性兼容\n * bom与dom事件\n * 使用eslint和prettier代码校验\n * 常见的事件封装\n * 常见手写函数整理（一）\n * 常见问题整理（一）\n * 常见问题整理（二）\n * 常见问题整理（三）\n * github的graphql使用\n * 如何处理前端异常\n * learn jest.js note\n * css预处理器less使用\n * micro frontend\n * 设计模式/构造函数\n * 实现promise\n * 使用rem和viewport的注意事项\n * url到页面加载过程\n * css预处理器sass使用\n * typescript\n * css常见问题\n * html常见布局\n * web安全防范\n * webpack",charsets:{cjk:!0},lastUpdated:"11/9/2023",lastUpdatedTimestamp:1699495575e3,createdTime:1643899953e3},{title:"资源列表",frontmatter:{title:"资源列表",date:"2022-01-13T00:00:00.000Z",sidebar:"auto",categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/all-urls.html",relativePath:"frontend/issues/all-urls.md",key:"v-09e74572",path:"/frontend/issues/all-urls.html",headers:[{level:2,title:"参考文档",slug:"参考文档",normalizedTitle:"参考文档",charIndex:2},{level:2,title:"ie",slug:"ie",normalizedTitle:"ie",charIndex:31}],headersStr:"参考文档 ie",content:"# 参考文档\n\n * 30-seconds-of-interviews\n * 点击 form 只提交 form 中 input 的一部分\n * 阻止元素被选中及清除选中的方法\n * 移动端弹窗输入密码的那些事\n * 30-seconds-of-css 中文版\n * animate.css\n * ftlabs/fastclick\n * css-tricks: 常用 midea\n * 移动端页面输入底部被软键盘遮挡问题\n * iOS 下 Html 页面中 input 获取焦点弹出键盘时挡住 input 解决方案—scrollIntoView()\n * 移动端软键盘监听（弹出，收起），及影响定位布局的问题\n * input 光标位置设置至行末端\n * MDN\n * 30-seconds-of-code 中文版\n * 前端 awesomes-trend\n * stephentian/33-js-concepts\n * javascriptweekly\n * react.statuscode\n * medium\n * css-tricks\n * World Wide Web\n * electronjs\n * webcomponents\n * BRENDAN EICH Blog\n * webcomponents\n * hellogithub\n * 30-seconds-of-code 中文版\n * jsdoc\n * 自定义滚动条的实现思路与关键算法\n * You-Dont-Need-jQuery\n * es6.ruanyifeng\n * better-scroll 移动端滚动插件\n * select2\n * fullpage.js\n * instant.page\n * quicklink\n * 如何使用 Tween.js 各类原生动画运动缓动算法\n * 前端必备自定义滚动库——iScroll\n * 你不知道的 Blob\n * 前端图片 canvas，file，blob，DataURL 等格式转换\n * 为什么视频网站的视频链接地址是 blob？\n * FileSaver.js\n * 用好这 20 个 CSS 技巧快速提升你的技能\n * 2021 年 JS 烧脑面试题大赏\n\n\n# ie\n\n * CSS hack 是什么？IE6\\7\\8\\9\\10 浏览器的 CSS hack 大全介绍\n * IE6 下 png 背景不透明问题的综合拓展\n * IE6 PNG 透明终极解决方案\n * IE6 png 透明 (三种解决方法)\n * hjzheng/IE6-bugs\n * 通过 JS 判断浏览器类型，详细区分 IE 各版本浏览器\n * 一行代码解决各种 IE 兼容问题,IE6,IE7,IE8,IE9,IE10\n * ie6、7 margin 负值部分无法看到的解决方法\n * 浅析 CSS——元素重叠及 position 定位的 z-index 顺序\n * Centering in CSS: A Complete Guide\n * 去除 inline-block 元素间间距的 N 种方法",normalizedContent:"# 参考文档\n\n * 30-seconds-of-interviews\n * 点击 form 只提交 form 中 input 的一部分\n * 阻止元素被选中及清除选中的方法\n * 移动端弹窗输入密码的那些事\n * 30-seconds-of-css 中文版\n * animate.css\n * ftlabs/fastclick\n * css-tricks: 常用 midea\n * 移动端页面输入底部被软键盘遮挡问题\n * ios 下 html 页面中 input 获取焦点弹出键盘时挡住 input 解决方案—scrollintoview()\n * 移动端软键盘监听（弹出，收起），及影响定位布局的问题\n * input 光标位置设置至行末端\n * mdn\n * 30-seconds-of-code 中文版\n * 前端 awesomes-trend\n * stephentian/33-js-concepts\n * javascriptweekly\n * react.statuscode\n * medium\n * css-tricks\n * world wide web\n * electronjs\n * webcomponents\n * brendan eich blog\n * webcomponents\n * hellogithub\n * 30-seconds-of-code 中文版\n * jsdoc\n * 自定义滚动条的实现思路与关键算法\n * you-dont-need-jquery\n * es6.ruanyifeng\n * better-scroll 移动端滚动插件\n * select2\n * fullpage.js\n * instant.page\n * quicklink\n * 如何使用 tween.js 各类原生动画运动缓动算法\n * 前端必备自定义滚动库——iscroll\n * 你不知道的 blob\n * 前端图片 canvas，file，blob，dataurl 等格式转换\n * 为什么视频网站的视频链接地址是 blob？\n * filesaver.js\n * 用好这 20 个 css 技巧快速提升你的技能\n * 2021 年 js 烧脑面试题大赏\n\n\n# ie\n\n * css hack 是什么？ie6\\7\\8\\9\\10 浏览器的 css hack 大全介绍\n * ie6 下 png 背景不透明问题的综合拓展\n * ie6 png 透明终极解决方案\n * ie6 png 透明 (三种解决方法)\n * hjzheng/ie6-bugs\n * 通过 js 判断浏览器类型，详细区分 ie 各版本浏览器\n * 一行代码解决各种 ie 兼容问题,ie6,ie7,ie8,ie9,ie10\n * ie6、7 margin 负值部分无法看到的解决方法\n * 浅析 css——元素重叠及 position 定位的 z-index 顺序\n * centering in css: a complete guide\n * 去除 inline-block 元素间间距的 n 种方法",charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647945545e3,createdTime:1647945545e3},{title:"angular1.x的使用",frontmatter:{title:"angular1.x的使用",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["angular.js"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/angular1.x.html",relativePath:"frontend/issues/angular1.x.md",key:"v-8d01e796",path:"/frontend/issues/angular1.x.html",headers:[{level:2,title:"ng 指令",slug:"ng-指令",normalizedTitle:"ng 指令",charIndex:2},{level:3,title:"ng-module",slug:"ng-module",normalizedTitle:"ng-module",charIndex:1355},{level:3,title:"ng-init 用法",slug:"ng-init-用法",normalizedTitle:"ng-init 用法",charIndex:2949},{level:3,title:"ng-repeat 用法",slug:"ng-repeat-用法",normalizedTitle:"ng-repeat 用法",charIndex:3480},{level:3,title:"ng-switch 用法",slug:"ng-switch-用法",normalizedTitle:"ng-switch 用法",charIndex:5679},{level:2,title:"指令",slug:"指令",normalizedTitle:"指令",charIndex:5},{level:3,title:"ng-controller as 用法",slug:"ng-controller-as-用法",normalizedTitle:"ng-controller as 用法",charIndex:7824},{level:2,title:"事件",slug:"事件",normalizedTitle:"事件",charIndex:9726},{level:2,title:"样式",slug:"样式",normalizedTitle:"样式",charIndex:7512},{level:2,title:"from 表单",slug:"from-表单",normalizedTitle:"from 表单",charIndex:10534},{level:3,title:"ng-form 用法",slug:"ng-form-用法",normalizedTitle:"ng-form 用法",charIndex:12115},{level:3,title:"ng-model-options 用法",slug:"ng-model-options-用法",normalizedTitle:"ng-model-options 用法",charIndex:13063},{level:2,title:"angualr 方法",slug:"angualr-方法",normalizedTitle:"angualr 方法",charIndex:13979},{level:2,title:"自定义指令",slug:"自定义指令",normalizedTitle:"自定义指令",charIndex:15009},{level:3,title:"ng-transclude 用法",slug:"ng-transclude-用法",normalizedTitle:"ng-transclude 用法",charIndex:16808},{level:3,title:"Transclude fallback content",slug:"transclude-fallback-content",normalizedTitle:"transclude fallback content",charIndex:17778},{level:3,title:"directives controller 用法",slug:"directives-controller-用法",normalizedTitle:"directives controller 用法",charIndex:19852},{level:3,title:"directive scope &",slug:"directive-scope",normalizedTitle:"directive scope &amp;",charIndex:null},{level:3,title:"directive scope @ =",slug:"directive-scope-2",normalizedTitle:"directive scope @ =",charIndex:23298},{level:2,title:"过滤器(filter)",slug:"过滤器-filter",normalizedTitle:"过滤器(filter)",charIndex:24836},{level:3,title:"filter demo",slug:"filter-demo",normalizedTitle:"filter demo",charIndex:25644},{level:2,title:"angular 服务",slug:"angular-服务",normalizedTitle:"angular 服务",charIndex:27395},{level:3,title:"constant",slug:"constant",normalizedTitle:"constant",charIndex:27469},{level:3,title:"value",slug:"value",normalizedTitle:"value",charIndex:1901},{level:3,title:"decorator",slug:"decorator",normalizedTitle:"decorator",charIndex:27636},{level:3,title:"factory",slug:"factory",normalizedTitle:"factory",charIndex:27482},{level:3,title:"service",slug:"service",normalizedTitle:"service",charIndex:1881},{level:3,title:"provider",slug:"provider",normalizedTitle:"provider",charIndex:27423},{level:2,title:"扩展小知识",slug:"扩展小知识",normalizedTitle:"扩展小知识",charIndex:31587},{level:2,title:"相关链接",slug:"相关链接",normalizedTitle:"相关链接",charIndex:32314}],headersStr:"ng 指令 ng-module ng-init 用法 ng-repeat 用法 ng-switch 用法 指令 ng-controller as 用法 事件 样式 from 表单 ng-form 用法 ng-model-options 用法 angualr 方法 自定义指令 ng-transclude 用法 Transclude fallback content directives controller 用法 directive scope & directive scope @ = 过滤器(filter) filter demo angular 服务 constant value decorator factory service provider 扩展小知识 相关链接",content:'# ng 指令\n\n * 描述：ng-?指令表示 angular 框架对元素的操作，常见的有如下几种：\n\nng-app  # 定义应用程序的根元素,若不为""时需在js脚本中初始化。\nng-bind  # 把应用程序变量绑定到某个元素的 innerHTML。\nng-controller  # 定义应用的控制器对象，可以控制的服务有\n# $scope,$rootScope,$location,$http,$timeout,$interval,\n# 其中$scope.$watch(\'lastName\', function() {)); # 可以监控变量的变化\n\n$rootScope # 全局作用域，在任一controller之中都能够使用\n$scope # $scope都是$rootScope的子作用域\n$state # 路由中的一项服务\n$stateParams # 处理url的接收参数\n\nng-init  # 定义应用的初始化值,一般为angular变量值\n\nng-hide # 隐藏或显示 HTML 元素\nng-show # 显示或隐藏 HTML 元素\n\nng-href # 为<a>元素指定链接\n\nng-if # 如果条件为 false 移除 HTML 元素\nng-repeat # 定义集合中每项数据的模板,该参数还常与ng-click、ng-class配合使用\n  $index, $first, $middle, $last, $even, $odd\n\nng-switch # 规定显示或隐藏子元素的条件。常与ng-switch-when配合使用，类似于switch和case\n\nng-include # 在应用中包含 HTML 文件，如<div ng-include="\'myFile.htm\'"></div>,但不能执行js代码\n\nng-non-bindable # 规定元素或子元素不能绑定数据,\n# 如<p ng-non-bindable>不使用 AngularJS: {{ 5+5 }}</p>显示的是“5+5”而不是“10”\n\nng-open # 指定元素的 open 属性,可设值为true|false,常与details等具展开效果的元素配合使用\n\t<details ng-open=true>\n\t\t<summary>学的不仅是技术，更是梦想！</summary>\n\t\t<p> - 菜鸟教程</p>\n\t</details>\n\nng-src # 指定 <img> 元素的 src 属性\nng-srcset # 指定 <img> 元素的 srcset 属性。H5的新属性，允许输入多张图片地址以匹配不同w像素值宽度的容器\n\t<img ng-src="source.jpg" width="100%" ng-srcset="source_400.jpg 400w, source_600.jpg 600w, source_1280.jpg 1280w">\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n# ng-module\n\nvar myFilterModule = angular.module("myFilterApp", []);\n\n// configure the module.\n// in this example we will create a greeting filter\nmyFilterModule.filter("greet", function() {\n  return function(name) {\n    return "Hello, " + name + "!";\n  };\n});\n\nvar myApp = angular.module("myApp", ["myFilterApp"]);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n<div ng-app="myApp">\n  <div>\n    {{ \'World\' | greet }}\n  </div>\n</div>\n\n\n1\n2\n3\n4\n5\n\n\n<div ng-controller="XmplController">\n  {{ greeting }}\n</div>\n\n<script>\n  angular\n    .module("xmpl.service", [])\n\n    .value("greeter", {\n      salutation: "Hello",\n      localize: function(localization) {\n        this.salutation = localization.salutation;\n      },\n      greet: function(name) {\n        return this.salutation + " " + name + "!";\n      }\n    })\n\n    .value("user", {\n      load: function(name) {\n        this.name = name;\n      }\n    });\n\n  angular.module("xmpl.directive", []);\n\n  angular.module("xmpl.filter", []);\n\n  angular\n    .module("xmpl", ["xmpl.service", "xmpl.directive", "xmpl.filter"])\n\n    .run(function(greeter, user) {\n      // This is effectively part of the main method initialization code\n      greeter.localize({\n        salutation: "Bonjour"\n      });\n      user.load("World");\n    })\n\n    .controller("XmplController", [\n      "$scope",\n      "greeter",\n      "user",\n      function($scope, greeter, user) {\n        $scope.greeting = greeter.greet(user.name);\n      }\n    ]);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n\n# ng-init 用法\n\n<script>\n  angular.module(\'initExample\', [])\n    .controller(\'ExampleController\', [\'$scope\', function($scope) {\n      $scope.list = [[\'a\', \'b\'], [\'c\', \'d\']];\n    }]);\n<\/script>\n\n<div ng-controller="ExampleController">\n  <div ng-repeat="innerList in list" ng-init="outerIndex = $index">\n    <div ng-repeat="value in innerList" ng-init="innerIndex = $index">\n       <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>\n    </div>\n  </div>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# ng-repeat 用法\n\n<div ng-controller="repeatController">\n  I have {{friends.length}} friends. They are:\n  <input\n    type="search"\n    ng-model="q"\n    placeholder="filter friends..."\n    aria-label="filter friends"\n  />\n  <ul class="example-animate-container">\n    <li\n      class="animate-repeat"\n      ng-repeat="friend in friends | filter:q as results track by friend.name"\n    >\n      [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.\n    </li>\n    <li class="animate-repeat" ng-if="results.length === 0">\n      <strong>No results found...</strong>\n    </li>\n  </ul>\n</div>\n\n<style media="screen">\n  .example-animate-container {\n    background: white;\n    border: 1px solid black;\n    list-style: none;\n    margin: 0;\n    padding: 0 10px;\n  }\n\n  .animate-repeat {\n    line-height: 30px;\n    list-style: none;\n    box-sizing: border-box;\n  }\n\n  .animate-repeat.ng-move,\n  .animate-repeat.ng-enter,\n  .animate-repeat.ng-leave {\n    transition: all linear 0.5s;\n  }\n\n  .animate-repeat.ng-leave.ng-leave-active,\n  .animate-repeat.ng-move,\n  .animate-repeat.ng-enter {\n    opacity: 0;\n    max-height: 0;\n  }\n\n  .animate-repeat.ng-leave,\n  .animate-repeat.ng-move.ng-move-active,\n  .animate-repeat.ng-enter.ng-enter-active {\n    opacity: 1;\n    max-height: 30px;\n  }\n</style>\n\n<script>\n  angular\n    .module("ngRepeat", ["ngAnimate"])\n    .controller("repeatController", function($scope) {\n      $scope.friends = [\n        { name: "John", age: 25, gender: "boy" },\n        { name: "Jessie", age: 30, gender: "girl" },\n        { name: "Johanna", age: 28, gender: "girl" },\n        { name: "Joy", age: 15, gender: "girl" },\n        { name: "Mary", age: 28, gender: "girl" },\n        { name: "Peter", age: 95, gender: "boy" },\n        { name: "Sebastian", age: 50, gender: "boy" },\n        { name: "Erika", age: 27, gender: "girl" },\n        { name: "Patrick", age: 40, gender: "boy" },\n        { name: "Samantha", age: 60, gender: "girl" }\n      ];\n    });\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n\n\n\n# ng-switch 用法\n\n<div ng-controller="ExampleController">\n  <select ng-model="selection" ng-options="item for item in items"> </select>\n  <code>selection={{selection}}</code>\n  <hr />\n  <div class="animate-switch-container" ng-switch on="selection">\n    <div\n      class="animate-switch"\n      ng-switch-when="settings|options"\n      ng-switch-when-separator="|"\n    >\n      Settings Div\n    </div>\n    <div class="animate-switch" ng-switch-when="home">Home Span</div>\n    <div class="animate-switch" ng-switch-default>default</div>\n  </div>\n</div>\n\n<style media="screen">\n  .animate-switch-container {\n    position: relative;\n    background: white;\n    border: 1px solid black;\n    height: 40px;\n    overflow: hidden;\n  }\n\n  .animate-switch {\n    padding: 10px;\n  }\n\n  .animate-switch.ng-animate {\n    transition: all cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.5s;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n\n  .animate-switch.ng-leave.ng-leave-active,\n  .animate-switch.ng-enter {\n    top: -50px;\n  }\n  .animate-switch.ng-leave,\n  .animate-switch.ng-enter.ng-enter-active {\n    top: 0;\n  }\n</style>\n\n<script>\n  angular\n    .module("switchExample", ["ngAnimate"])\n    .controller("ExampleController", [\n      "$scope",\n      function($scope) {\n        $scope.items = ["settings", "home", "options", "other"];\n        $scope.selection = $scope.items[0];\n      }\n    ]);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n\n\n\n# 指令\n\nng-app # 相当于一个入，告诉angular来管理ng-app指令所在的元素及其子元素。\nng-controller # 指定了一个控制来管理页面的数据模型/行为模型。\nng-model # 主要是用来进行双向数据绑定。\nng-click # 类似于onclick,指定一个方法就能运行。\n\nng-repeat # 渲染数组中的元素。\nng-bind # 为了解决表达式闪烁问题；只能使用在有双标签的元素上。\nng-cloak # 利用了anuglar加载后会移动类样式名为ng-cloak的特性。\nng-bind-html\n\nng-show/ng-hide # 控制页面元素的显示与否,需要提供一个布尔值。\nng-if # 类似于ng-show,区别是ng-if会彻底删除元素。\nng-switch:ng-switch-when\n\nng-class:\n   多选一：<div ng-class="{\'A\':\'classA\',\'B\':classB}["A"]"></div>\n   多选多：<div ng-class="{\'classA\':布尔值,\'classB\':布尔值}"></div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# ng-controller as 用法\n\n<div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">\n  <label>Name: <input type="text" ng-model="settings.name"/></label>\n  <button ng-click="settings.greet()">greet</button><br />\n  Contact:\n  <ul>\n    <li ng-repeat="contact in settings.contacts">\n      <select\n        ng-model="contact.type"\n        aria-label="Contact method"\n        id="select_{{$index}}"\n      >\n        <option>phone</option>\n        <option>email</option>\n      </select>\n      <input\n        type="text"\n        ng-model="contact.value"\n        aria-labelledby="select_{{$index}}"\n      />\n      <button ng-click="settings.clearContact(contact)">clear</button>\n      <button ng-click="settings.removeContact(contact)" aria-label="Remove">\n        X\n      </button>\n    </li>\n    <li><button ng-click="settings.addContact()">add</button></li>\n  </ul>\n</div>\n\n<script>\n  angular\n    .module("controllerAsExample", [])\n    .controller("SettingsController1", SettingsController1);\n\n  function SettingsController1() {\n    this.name = "John Smith";\n    this.contacts = [\n      { type: "phone", value: "408 555 1212" },\n      { type: "email", value: "john.smith@example.org" }\n    ];\n  }\n\n  SettingsController1.prototype.greet = function() {\n    alert(this.name);\n  };\n\n  SettingsController1.prototype.addContact = function() {\n    this.contacts.push({ type: "email", value: "yourname@example.org" });\n  };\n\n  SettingsController1.prototype.removeContact = function(contactToRemove) {\n    var index = this.contacts.indexOf(contactToRemove);\n    this.contacts.splice(index, 1);\n  };\n\n  SettingsController1.prototype.clearContact = function(contact) {\n    contact.type = "phone";\n    contact.value = "";\n  };\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\n\n\n# 事件\n\nng-copy # 用户触发拷贝事件时，规定拷贝事件的行为\nng-cut # 用户触发剪切事件时，规定剪切事件的行为\nng-paste # 用户触发粘贴事件时，规定粘贴事件的行为\n\nng-click # 规定click 事件的行为\nng-dblclick # 用户触发双击事件时，规定双击事件的行为\n\nng-blur # 规定 blur 事件的行为\nng-focus # 规定focus焦点事件的行为\n\nng-keydown # 规定按下按键事件的行为\nng-keypress # 规定按下按键事件的行为,通常情况下会用ng-keydown\nng-keyup # 规定松开按键事件的行为\n\nng-mousedown # 规定按下鼠标按键时的行为\nng-mouseenter # 规定鼠标指针穿过元素时的行为\nng-mouseleave # 规定鼠标指针离开元素时的行为\nng-mousemove # 规定鼠标指针在指定的元素中移动时的行为\nng-mouseover # 规定鼠标指针位于元素上方时的行为\nng-mouseup # 规定当在元素上松开鼠标按钮时的行为\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 样式\n\nng-class # 指定 HTML 元素使用的 CSS 类\nng-class-even # 类似 ng-class，但只在偶数行起作用,常用table/tr/td、ul/li等元素配合使用\nng-class-odd # 类似 ng-class，但只在奇数行起作用\n\nng-style # 指定元素的 style 属性,可在控制器中为ng-style所在变量赋值\n\n*ng-cloak # 在应用正要加载时防止其闪烁。如<p ng-cloak>{{ 5 + 5 }}</p>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# from 表单\n\nng-submit # 规定submit 事件的行为\nng-value # 规定 input 元素的值\nng-model # 绑定 HTML 控制器的值到应用数据,即angular变量值,变量值可以是字符串、对象甚至是对象属性\n\nng-selected # 指定元素的 selected 属性,表示当前选择项,常需与select元素配合使用，类似于ng-checked\nng-readonly # 指定元素的 readonly 属性\n\nng-disabled # 可设为true|false时，规定一个元素是否被禁用,但不会隐藏\n\nng-change # 规定在内容改变时要执行的表达式\nng-checked # 用于设置复选框(checkbox)或单选按钮(radio)的 checked 属性\n\nng-list # 输出时将文本转换为列表 (数组)，输入文本时用逗号隔开\n\t<input ng-model="customers" ng-list/>\n\t<pre>{{customers}}</pre>\n\nng-model-options # 规定如何更新模型,option\t指定了绑定数据的规则，规则如下:\n\t{updateOn: \'event\'} # 规则指定事件发生后绑定数据,如ng-model-options="{updateOn: \'blur\'}"\n\t{debounce : 1000} # 规定等待多少毫秒后绑定数据\n\t{allowInvalid : true|false} # 规定是否需要验证后绑定数据\n\t{getterSetter : true|false} # 规定是否作为 getters/setters 绑定到模型\n\t{timezone : \'0100\'} # 规则是否使用时区\n\nng-options:\n在 <select> 下拉列中指定 <options>,\n如<select ng-model="selectedName" ng-options="item for item in names"></select>\n\t数据格式为字符串数组["",""] 使用x for x in names\n\t数据格式为单独的对象{"a":1,"b":2} 使用x for (x,y) in names\n\t数据格式为对象数组[{},{}] 使用x.attr for x in names\n\n<option ng-repeat="x in address">{{x}}</option>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n * form 表单的系统检验指令\n\n$error.required # 唯一值验证\n$error.email # 文本输入内置电子邮件验证。\n$error.number # 带有数量验证的文本输入。也可以有最小和最大值的附加属性。\n$error.date # 带有输入日期文本输入。\n$error.url # 带有输入验证的URL文本输入。\n$error.minlength # 参数范围需从input中ng-minlength设置\n$error.maxlength # 参数范围需从input中ng-maxlength设置\n$error.pattern # 正则表达式需从input中ng-pattern设置\n$dirty # 表单有填写记录\n$pristine # 表单没有填写记录\n$valid # 字段内容合法的,如formname.$valid\n$invalid # 字段内容是非法的\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# ng-form 用法\n\n<form name="myForm" ng-controller="FormController" class="my-form">\n  userType: <input name="input" ng-model="userType" required />\n  <span class="error" ng-show="myForm.input.$error.required">Required!</span\n  ><br />\n  <code>userType = {{userType}}</code><br />\n  <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br />\n  <code>myForm.input.$error = {{myForm.input.$error}}</code><br />\n  <code>myForm.$valid = {{myForm.$valid}}</code><br />\n  <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br />\n</form>\n\n<style>\n  .my-form {\n    transition: all linear 0.5s;\n    background: transparent;\n  }\n  .my-form.ng-invalid {\n    background: red;\n  }\n</style>\n\n<script>\n  angular.module("formExample", []).controller("FormController", [\n    "$scope",\n    function($scope) {\n      $scope.userType = "guest";\n    }\n  ]);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# ng-model-options 用法\n\n<div ng-controller="ExampleController">\n  <form name="userForm">\n    <label>\n      Name:\n      <input\n        type="text"\n        name="userName"\n        ng-model="user.name"\n        ng-model-options="{ updateOn: \'blur\' }"\n        ng-keyup="cancel($event)"\n      /> </label\n    ><br />\n    <label>\n      Other data:\n      <input type="text" ng-model="user.data" /> </label\n    ><br />\n  </form>\n  <pre>user.name = <span ng-bind="user.name"></span></pre>\n</div>\n\n<script>\n  angular.module("optionsExample", []).controller("ExampleController", [\n    "$scope",\n    function($scope) {\n      $scope.user = { name: "say", data: "" };\n\n      $scope.cancel = function(e) {\n        if (e.keyCode === 27) {\n          $scope.userForm.userName.$rollbackViewValue();\n        }\n      };\n    }\n  ]);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# angualr 方法\n\nangular.isArray()\t# 如果引用的是数组返回 true\nangular.isDate()\t# 如果引用的是日期返回 true\nangular.isDefined()\t# 如果引用的已定义返回 true\nangular.isElement()\t# 如果引用的是 DOM 元素返回 true\nangular.isFunction()\t# 如果引用的是函数返回 true\nangular.isNumber()\t# 如果引用的是数字返回 true,如果输入框是input标签，要检测输入框内容是否为数字，则使用!isNaN($scope.myInput);\nangular.isObject()\t# 如果引用的是对象返回 true\nangular.isString()\t# 如果引用的是字符串返回 true\nangular.isUndefined()\t# 如果引用的未定义返回 true\nangular.equals(a,b)\t# 如果两个对象相等返回 true\n\n*angular.fromJson()\t# 反序列化 JSON 字符串\n*angular.toJson()\t# 序列化 JSON 字符串\n\nangular.lowercase()\t# 将字符串转换为小写\nangular.uppercase()\t# 将字符串转换为大写\n\nangular.copy()\t# 数组或对象深度拷贝\n\n*angular.forEach()\t# 对象或数组的迭代函数\n\nvar objs = [{a: 1}, {a: 2}];\nangular.forEach(objs, function(data, index, array) {\n\t//data等价于array[index]\n\tconsole.log(data.a + \'=\' + array[index].a);\n});\n\nvar objs = {"a":1,"b":2}\nangular.forEach(objs, function(data, index, array) {\n\t//1 "a" {a: 1, b: 2}\n\tconsole.log(data,index,array);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 自定义指令\n\n-  template:\n指定了一个字符，最终会被加入自定义指令所有标签的innerHTML位置\n\n-  templateUrl:\n    + 指定了一个文件路径，最终angular会发一个异步请求\n      把文件内容加入到自定义指令所在标签的innerHTML位置。\n    + 也可以指定一个script标签的id,`templateUrl:\'id值\'` ,\n      会将这个script标签中的内容以字符串的形式加入到页面，\n      需要更改script标签中的type属性：type="text/ng-template"\n\n- replace:告诉angular,用template对应的字符串替换自定义指令所在的标签。\n\n- restrict:限制自定义指令的使用方式：\n    +\'A\':attribue :需要以属性的形式书写自定义指令。\'<div my-zhiling></div>\'\n    +\'C\':class :以类样式名的形式来书指令。   \'<div class="my-zhiling"></div>\'\n    +\'E\':element:以自定义标签的形式来书写指令 \'<my-zhiling></my-zhiling>\'\n    +\'M\':comment:以注释的形式来书写指令  \x3c!-- directive: my-zhiling --\x3e\n\n- controller：控制器里的数据在多个实例中公用\n\n- transclude:需要提供一个布尔，为true会把自定义指令\n    所在标签的innerHTML插入到模板中拥有ng-transclude指令的元素的innerHTML位置。\n    *注意：不能够与replace共用(指的是transclude为true时，replace不能为true)*\n\n- scope:属性\n    第一种写法：`scope:{aaa:\'@myclass\'}` 可以获得自定义指令所在标签中名为myclass的属性值\n    第二种写法：`scope:{myclass:\'@\'}` //第一种的简写方式;\n\n    `@` : 接收外部传入的字符串\n    `=` : 接收外部传入的变量\n    `&` : 将内部的信息通过function函数传递给外部使用\n\n- link：这个属性指向的是function(scope,element,attributes,controllers),\n有三个参数\n    scope: 这里的scope下的属性值只能用在模板中, 一定要与控制器中$scope的使用范围区分\n    element: 自定义指令所在标签的jqLite对象\n    attributes: 是一个object对象，通过它可以获取所有自定义指令所在标签\n    controllers: 控制器，与require一起使用\n\nangular.module(\'docsTabsExample\', [])\n.directive(\'myPane\', function() {\n  return {\n    require: [\'^^myTabs\', \'ngModel\'],\n    restrict: \'E\',\n    transclude: true,\n    scope: {\n      title: \'@\'\n    },\n    link: function(scope, element, attrs, controllers) {\n      var tabsCtrl = controllers[0],\n          modelCtrl = controllers[1];\n\n      tabsCtrl.addPane(scope);\n    },\n    templateUrl: \'my-pane.html\'\n  };\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n\n# ng-transclude 用法\n\n<script>\n  angular\n    .module("transcludeExample", [])\n    .directive("pane", function() {\n      return {\n        restrict: "E",\n        transclude: true,\n        scope: { title: "@" },\n        template:\n          \'<div style="border: 1px solid black;">\' +\n          \'<div style="background-color: gray">{{title}}</div>\' +\n          "<ng-transclude></ng-transclude>" +\n          "</div>"\n      };\n    })\n    .controller("ExampleController", [\n      "$scope",\n      function($scope) {\n        $scope.title = "Lorem Ipsum";\n        $scope.text =\n          "Neque porro quisquam est qui dolorem ipsum quia dolor...";\n      }\n    ]);\n<\/script>\n\n<div ng-controller="ExampleController">\n  <input ng-model="title" aria-label="title" /> <br />\n  <textarea ng-model="text" aria-label="text"></textarea> <br />\n  <pane title="{{title}}"><span>{{text}}</span></pane>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# Transclude fallback content\n\n<script>\n  angular\n    .module("transcludeFallbackContentExample", [])\n    .directive("myButton", function() {\n      return {\n        restrict: "E",\n        transclude: true,\n        scope: true,\n        template:\n          \'<button style="cursor: pointer;">\' +\n          "<ng-transclude>" +\n          \'<b style="color: red;">Button1</b>\' +\n          "</ng-transclude>" +\n          "</button>"\n      };\n    });\n<\/script>\n\n\x3c!-- fallback button content --\x3e\n<my-button id="fallback"></my-button>\n\x3c!-- modified button content --\x3e\n<my-button id="modified">\n  <i style="color: green;">Button2</i>\n</my-button>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * Multi-slot transclusion\n\n<style>\n  .title,\n  .footer {\n    background-color: gray;\n  }\n</style>\n<div ng-controller="ExampleController">\n  <input ng-model="title" aria-label="title" /> <br />\n  <textarea ng-model="text" aria-label="text"></textarea> <br />\n  <pane>\n    <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>\n    <pane-body><p>{{text}}</p></pane-body>\n  </pane>\n</div>\n\n<script>\n  angular\n    .module("multiSlotTranscludeExample", [])\n    .directive("pane", function() {\n      return {\n        restrict: "E",\n        transclude: {\n          title: "?paneTitle",\n          body: "paneBody",\n          footer: "?paneFooter"\n        },\n        template:\n          \'<div style="border: 1px solid black;">\' +\n          \'<div class="title" ng-transclude="title">Fallback Title</div>\' +\n          \'<div ng-transclude="body"></div>\' +\n          \'<div class="footer" ng-transclude="footer">Fallback Footer</div>\' +\n          "</div>"\n      };\n    })\n    .controller("ExampleController", [\n      "$scope",\n      function($scope) {\n        $scope.title = "Lorem Ipsum";\n        $scope.link = "https://google.com";\n        $scope.text =\n          "Neque porro quisquam est qui dolorem ipsum quia dolor...";\n      }\n    ]);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n\n# directives controller 用法\n\nangular\n  .module("docsTabsExample", [])\n  .directive("myTabs", function() {\n    return {\n      restrict: "E",\n      transclude: true,\n      scope: {},\n      controller: [\n        "$scope",\n        function MyTabsController($scope) {\n          var panes = ($scope.panes = []);\n          // title在多个实例中公用\n          $scope.title = "controller tab panel";\n          $scope.select = function(pane) {\n            angular.forEach(panes, function(pane) {\n              pane.selected = false;\n            });\n            pane.selected = true;\n          };\n\n          this.addPane = function(pane) {\n            if (panes.length === 0) {\n              $scope.select(pane);\n            }\n            panes.push(pane);\n          };\n        }\n      ],\n      templateUrl: "my-tabs.html"\n    };\n  })\n  .directive("myPane", function() {\n    return {\n      require: "^^myTabs",\n      restrict: "E",\n      transclude: true,\n      scope: {\n        title: "@"\n      },\n      link: function(scope, element, attrs, tabsCtrl) {\n        tabsCtrl.addPane(scope);\n      },\n      templateUrl: "my-pane.html"\n    };\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\x3c!-- index.html --\x3e\n<my-tabs>\n  <my-pane title="Hello">\n    <p>Lorem ipsum dolor sit amet</p>\n  </my-pane>\n  <my-pane title="World">\n    <em>Mauris elementum elementum enim at suscipit.</em>\n    <p><a href ng-click="i = i + 1">counter: {{i || 0}}</a></p>\n  </my-pane>\n</my-tabs>\n<p>-------------------------</p>\n<my-tabs>\n  <my-pane title="Angular">\n    <p>Lorem ipsum</p>\n  </my-pane>\n  <my-pane title="Well">\n    <em>Mauris elementum .</em>\n    <p><a href ng-click="i = i + 1">counter: {{i || 0}}</a></p>\n  </my-pane>\n</my-tabs>\n\n\x3c!-- my-tab.html --\x3e\n<div class="tabbable">\n  <div>{{title}}</div>\n  <ul class="nav nav-tabs">\n    <li ng-repeat="pane in panes" ng-class="{active:pane.selected}">\n      <a href="" ng-click="select(pane)">{{pane.title}}</a>\n    </li>\n  </ul>\n  <div class="tab-content" ng-transclude></div>\n</div>\n\n\x3c!-- my-pane.html --\x3e\n<div class="tab-pane" ng-show="selected">\n  <h4>{{title}}</h4>\n  <div ng-transclude></div>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n\n# directive scope &\n\nangular\n  .module("docsIsoFnBindExample", [])\n  .controller("Controller", [\n    "$scope",\n    "$timeout",\n    function($scope, $timeout) {\n      $scope.name = "Tobias";\n      $scope.message = "";\n      $scope.hideDialog = function(message) {\n        $scope.message = message;\n        $scope.dialogIsHidden = true;\n        $timeout(function() {\n          $scope.message = "";\n          $scope.dialogIsHidden = false;\n        }, 2000);\n      };\n    }\n  ])\n  .directive("myDialog", function() {\n    return {\n      restrict: "E",\n      transclude: true,\n      scope: { close: "&onClose" },\n      templateUrl: "my-dialog-close.html"\n    };\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n# index.html\n<div ng-controller="Controller">\n  {{message}}\n  <my-dialog ng-hide="dialogIsHidden" on-close="hideDialog(message)">\n    Check out the contents, {{name}}!\n  </my-dialog>\n</div>\n\n# my-dialog-close.html\n<div class="alert">\n  <a href class="close" ng-click="close({message: \'closing for now\'})"\n    >&times;</a\n  >\n  <div ng-transclude></div>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# directive scope @ =\n\n// script.js\n(function(angular) {\n  "use strict";\n  angular\n    .module("docsIsolationExample", [])\n    .controller("Controller", [\n      "$scope",\n      function($scope) {\n        $scope.naomi = { name: "Naomi", address: "1600 Amphitheatre" };\n        $scope.vojta = { name: "Vojta", address: "3456 Somewhere Else" };\n      }\n    ])\n    .directive("myCustomer", function() {\n      return {\n        restrict: "E",\n        scope: {\n          customerInfo: "=info",\n          customVajta: "@info"\n        },\n        templateUrl: "my-customer-plus-vojta.html"\n      };\n    });\n})(window.angular);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\x3c!-- my-customer-plus-vojta.html --\x3e\nName: {{customerInfo.name}} Address: {{customerInfo.address}}\n<hr />\nName: {{vojta.name}} Address: {{vojta.address}}\n<hr />\nName: {{customerInfo}}\n\n<hr />\nName: {{customVajta}}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\x3c!-- index.html --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Example - example-directive-isolate-2-production</title>\n    <script src="//code.angularjs.org/1.7.7/angular.min.js"><\/script>\n    <script src="script.js"><\/script>\n  </head>\n  <body ng-app="docsIsolationExample">\n    <div ng-controller="Controller">\n      <p>--------------naomi---------------</p>\n      <my-customer info="naomi"></my-customer>\n      <p>--------------vojta---------------</p>\n      <my-customer info="aaaa"></my-customer>\n    </div>\n  </body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 过滤器(filter)\n\n * date : 格式化显示数据\n\n\x3c!-- 需要传递参数告诉它，要按照我们想要的格式去显示\n        yyyy 表示年\n        MM 表示月\n        dd 表示日\n        HH 表示小时\n        mm 表示分钟,\n        ss 表示秒数\n    --\x3e\n<p>{{9838232323 | date :\'yyyy年MM月dd日 HH:mm:ss\'}}</p>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n * orderBy: 对我们数据进行排序\n\n * 一般和 ng-repeat 一起使用，第一个参数，是个字符串： 字符串前加+或什么都不写时，会按照所对应的数据的属性正向排序，加上-就是逆向排序; <li ng-repeat="item in data |orderBy:\'+id\'"></li>\n\n * filter : 也需要一个参数\n   \n   * 可以传递一个布尔值，或者字符串，angular 进根据它对数据进行全局查找\n   * 也可以传递一个对象，angular 会按照对象的属性到数据中精确查找对应的属性。\n\n描述：过滤器\nuppercase:格式化字符串为大写\nlowercase:格式化字符串为小写\ncurrency:格式化为货币符号\nlimitTo　: 正数，表示从头开始截取；负数表示从尾巴开始截取\nnumber : 格式化为保留小数点\ndate : 格式化为时间\norderBy:"?":某属性按从小到大排序 ( orderBy:\'-id\' , id 降序排列   )  ( orderBy:\'id\',  id 升序排列   )\nfilter:"?":按条件过滤，如filter:{\'name\':\'iphone\'}为查找属性name值为iphone的对象\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# filter demo\n\n<div ng-app="myApp" ng-controller="myCtrl">\n  <input type="text" ng-model="name" />\n  <span>大写：{{name | uppercase}}</span>\n  <span>小写：{{name | lowercase}}</span>\n  <br />\n  <p>货币符号：{{ 250 | currency:"RMB" }}</p>\n  <p>正数截取4位：{{"1234567890" | limitTo :4}}</p>\n  <p>负数截取4位：{{"1234567890" | limitTo:-4}}</p>\n  <p>保留2位小数点：{{149016.1945000 | number:2}}</p>\n  <p>time转化为时间：{{1490161945000 | date:"yyyy-MM-dd HH:mm:ss"}}</p>\n  <p>排序及按条件筛选：</p>\n  <input type="text" ng-model="inData" />\n  <ul>\n    <li ng-repeat="x in names | orderBy:\'-country\' | filter : inData">\n      {{ x.name + \', \' + x.country }}\n    </li>\n  </ul>\n  <p>自定义过滤器，输入一个数值，得到该值+1结果：</p>\n  <input type="text" ng-model="inDIY" />\n  <p>{{inDIY|addOne}}</p>\n  <p>{{inDIY|addOneFilter}}</p>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\nvar app = angular.module("myApp", []);\napp.controller("myCtrl", function($scope) {\n  $scope.names = [\n    {\n      name: "Jani",\n      country: "Norway"\n    },\n    {\n      name: "Hege",\n      country: "Sweden"\n    },\n    {\n      name: "Kai",\n      country: "Denmark"\n    }\n  ];\n});\n//自定义过滤器\napp.filter("addOne", function() {\n  return function(i) {\n    var result = 0;\n    if (!isNaN(i)) {\n      result = 1 + parseInt(i);\n    }\n    return result;\n  };\n});\n//自定义过滤器带参数\napp.service("addOneService", function() {\n  this.add = function(i) {\n    var result = 0;\n    if (!isNaN(i)) {\n      result = 1 + parseInt(i);\n    }\n    return result;\n  };\n});\napp.filter("addOneFilter", [\n  "addOneService",\n  function(addOneService) {\n    return function(i) {\n      return addOneService.add(i);\n    };\n  }\n]);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# angular 服务\n\n * config 允许注入的是provider和constance(常量)\n\n * run 允许注入的是provider和constant,还可以是factory，service，value\n\n * angular.run 和 angular.config 有什么不同？config--\x3erun--\x3ecompile/link\n\n\n# constant\n\n * constant: 用于定义常量，一旦定义就不能被改变。可以被注入到任何地方，但是不能被装饰器(decorator)装饰\n\napp.constant("APP_KEY", "a1s2d3f4");\n\n\n1\n\n\n\n# value\n\n * value： 用来定义值。但与 constant 的区别是：可以被修改，可以被 decorator 装饰，不能被注入到 config 中\n\napp.value("version", "1.0");\n\n\n1\n\n\n\n# decorator\n\n * decorator: 用来装饰其他 provider 的，不过 constant 除外\n\nvar app = angular.module("myApp", []);\napp.value("version", "1.0");\napp.decorator("version", function($delegate) {\n  return $delegate + ".1";\n});\n\napp.service("myService", function() {\n  this.setA = function() {};\n  this.getA = function() {};\n  this.foo = function() {};\n});\n// 装饰myService\napp.decorator("myService", function($delegate) {\n  // $delegate 代表实际上的 service 实例\n  $delegate.greet = function() {\n    return "Hello, I am a new function of \'myService\'";\n  };\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# factory\n\n * factory: 需要返回一个包含数据，方法的对象\n\n// 创建\nangular.module("myApp.services").factory("User", function($http) {\n  // factory的名字和注入的方法\n  var url = "http://localhost:3000";\n  //把我们定义的方法和数据都放到一个对象中，并且返回这个对象，这就是factory\n  var service = {\n    user: {},\n    setName: function(newName) {\n      service.user["name"] = newName;\n    },\n    save: function() {\n      return $http.post(url + "/users", {\n        user: service.user\n      });\n    }\n  };\n  return service;\n});\n\n// 调用\n// 注意：需要使用.config()来配置service的时候不能使用factory的方法\nangular.module("myApp").controller("MainCtrl", function($scope, User) {\n  //User就是factory的名字\n  //我们将User这个factory中的一个叫做save()的function赋给我们controller中的变量\n  $scope.saveUser = User.save;\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# service\n\n * service\n\n// 创建\nangular.module("myApp.services").service("User", function($http) {\n  // 在这里注入我们需要的服务\n  var self = this;\n  // 由于service()是通过构造函数创建的，\n  // 那么service()中的function和data都要以this.data和this.function的方式进行声明\n  // service()方法会持有构造函数创建的对象\n  this.user = {};\n  this.url = "http://localhost:3000";\n  this.setName = function(newName) {\n    self.user["name"] = newName;\n  };\n  this.save = function() {\n    return $http.post(self.url + "/users", {\n      user: self.user\n    });\n  };\n});\n\n// 调用\n// 注意：需要使用.config()来配置service的时候不能使用service的方法\nangular.module("myApp").controller("MainCtrl", function($scope, User) {\n  //注入名字为User的service\n  //用User中名字叫做的save的function给本地变量赋值\n  $scope.saveUser = User.save;\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# provider\n\n * provider: 创建 provider，与 factory、service 不同的是，provider 需要使用 this.$get 来返回方法和数据, 可以在 config 中被调用和配置\n\nvar app = angular.module("myApp", []);\n\n// 在.config()中配置provider\napp.config(function (myFirstProvider) {\n  myFirstProvider.name = "zhangsan";\n});\n\n// 创建\napp.provider("myFirst", function () {\n  this.$get = function () {\n    var that = this;\n    var service = {};\n    service.console = function () {\n      return that.name;\n    }\n    return service;\n  }\n});\n\n// 调用\n// provider 可以在 config 中调用\napp.controller("CartController", ["myFirst", "$scope", function (a, b) {\n  console.log(a.console());\n  b.name = "lisi";\n}]);\n\n--------------\n// other 1\nvar myApp = angular.module(\'app\',[]);\n\nmyApp.provider(\'HelloAngular\',function(){\n\treturn {\n\t\t$get:function(){\n\t\t\tvar name = \'xiaowang\';\n\t\t\tfunction getName(){\n\t\t\t\treturn name;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tgetName:getName\n\t\t\t}\n\t\t}\n\t}\n})\n\nmyApp.controller(\'myCtrl\', [\'$scope\',\'HelloAngular\', function($scope,HelloAngular){\n\t$scope.name = HelloAngular.getName();\n}])\n\n-------------\n// other 2\nvar myApp = angular.module(\'app\',[],function($provide){\n\tconsole.log(\'1\');\n\t// 自定义服务\n\t$provide.provider(\'CustomService\',function(){\n\t\tthis.$get = function(){\n\t\t\treturn {\n\t\t\t\tmessage : \'CustomService Message\'\n\t\t\t}\n\t\t}\n\t})\n});\n\nmyApp.controller(\'ctrl\',[\'$scope\',\'CustomService\',function($scope,CustomService){\n\tconsole.log(\'2\');\n\t$scope.name = \'小明\';\n\tconsole.log(CustomService.message)\n}]);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n\n\n\n# 扩展小知识\n\n * track by $index 解决 ng-repeat 遍历数组时有重复问题\n\n * 使用$scope.$apply()通过 anuglar 监视数据模型的变化。\n   \n   * setInterval()\n   * setTimeout()\n\n * $route ,提供一个方法，用于更新路由参数\n   \n   * $route.updateParams({page:2})//需要传入一个对象：就路由中的参数名及新的参数值;\n\n * 在一个页面里创建多个 ng-app\n\n<div id="A1" ng-app="app1">\n\t<input ng-model="name" type="text" placeholder="请输入姓名">\n\t<p>我的姓名： {{name}}</p>\n</div>\n\n<div id="A2" ng-app="app2">\n\t<input ng-model="age" type="number" placeholder="请输入年龄">\n\t<p>我的年龄: {{age}}</p>\n</div>\n<script type="text/javascript">\n\tvar app1 = angular.module("app1", []); //自动加载\n\tvar app2 = angular.module("app2", []); //手动加载\n\tangular.bootstrap(document.getElementById("A2"), [\'app2\']); // 手动加载2\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 相关链接\n\n * docs angularjs\n * angularjs1.6.x 实例教程\n * AngularJS 学习笔记\n * AngularStrap\n * learning_angular doc\n * AngularJs 父子级 Controller 传递数据',normalizedContent:'# ng 指令\n\n * 描述：ng-?指令表示 angular 框架对元素的操作，常见的有如下几种：\n\nng-app  # 定义应用程序的根元素,若不为""时需在js脚本中初始化。\nng-bind  # 把应用程序变量绑定到某个元素的 innerhtml。\nng-controller  # 定义应用的控制器对象，可以控制的服务有\n# $scope,$rootscope,$location,$http,$timeout,$interval,\n# 其中$scope.$watch(\'lastname\', function() {)); # 可以监控变量的变化\n\n$rootscope # 全局作用域，在任一controller之中都能够使用\n$scope # $scope都是$rootscope的子作用域\n$state # 路由中的一项服务\n$stateparams # 处理url的接收参数\n\nng-init  # 定义应用的初始化值,一般为angular变量值\n\nng-hide # 隐藏或显示 html 元素\nng-show # 显示或隐藏 html 元素\n\nng-href # 为<a>元素指定链接\n\nng-if # 如果条件为 false 移除 html 元素\nng-repeat # 定义集合中每项数据的模板,该参数还常与ng-click、ng-class配合使用\n  $index, $first, $middle, $last, $even, $odd\n\nng-switch # 规定显示或隐藏子元素的条件。常与ng-switch-when配合使用，类似于switch和case\n\nng-include # 在应用中包含 html 文件，如<div ng-include="\'myfile.htm\'"></div>,但不能执行js代码\n\nng-non-bindable # 规定元素或子元素不能绑定数据,\n# 如<p ng-non-bindable>不使用 angularjs: {{ 5+5 }}</p>显示的是“5+5”而不是“10”\n\nng-open # 指定元素的 open 属性,可设值为true|false,常与details等具展开效果的元素配合使用\n\t<details ng-open=true>\n\t\t<summary>学的不仅是技术，更是梦想！</summary>\n\t\t<p> - 菜鸟教程</p>\n\t</details>\n\nng-src # 指定 <img> 元素的 src 属性\nng-srcset # 指定 <img> 元素的 srcset 属性。h5的新属性，允许输入多张图片地址以匹配不同w像素值宽度的容器\n\t<img ng-src="source.jpg" width="100%" ng-srcset="source_400.jpg 400w, source_600.jpg 600w, source_1280.jpg 1280w">\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n# ng-module\n\nvar myfiltermodule = angular.module("myfilterapp", []);\n\n// configure the module.\n// in this example we will create a greeting filter\nmyfiltermodule.filter("greet", function() {\n  return function(name) {\n    return "hello, " + name + "!";\n  };\n});\n\nvar myapp = angular.module("myapp", ["myfilterapp"]);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n<div ng-app="myapp">\n  <div>\n    {{ \'world\' | greet }}\n  </div>\n</div>\n\n\n1\n2\n3\n4\n5\n\n\n<div ng-controller="xmplcontroller">\n  {{ greeting }}\n</div>\n\n<script>\n  angular\n    .module("xmpl.service", [])\n\n    .value("greeter", {\n      salutation: "hello",\n      localize: function(localization) {\n        this.salutation = localization.salutation;\n      },\n      greet: function(name) {\n        return this.salutation + " " + name + "!";\n      }\n    })\n\n    .value("user", {\n      load: function(name) {\n        this.name = name;\n      }\n    });\n\n  angular.module("xmpl.directive", []);\n\n  angular.module("xmpl.filter", []);\n\n  angular\n    .module("xmpl", ["xmpl.service", "xmpl.directive", "xmpl.filter"])\n\n    .run(function(greeter, user) {\n      // this is effectively part of the main method initialization code\n      greeter.localize({\n        salutation: "bonjour"\n      });\n      user.load("world");\n    })\n\n    .controller("xmplcontroller", [\n      "$scope",\n      "greeter",\n      "user",\n      function($scope, greeter, user) {\n        $scope.greeting = greeter.greet(user.name);\n      }\n    ]);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n\n# ng-init 用法\n\n<script>\n  angular.module(\'initexample\', [])\n    .controller(\'examplecontroller\', [\'$scope\', function($scope) {\n      $scope.list = [[\'a\', \'b\'], [\'c\', \'d\']];\n    }]);\n<\/script>\n\n<div ng-controller="examplecontroller">\n  <div ng-repeat="innerlist in list" ng-init="outerindex = $index">\n    <div ng-repeat="value in innerlist" ng-init="innerindex = $index">\n       <span class="example-init">list[ {{outerindex}} ][ {{innerindex}} ] = {{value}};</span>\n    </div>\n  </div>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# ng-repeat 用法\n\n<div ng-controller="repeatcontroller">\n  i have {{friends.length}} friends. they are:\n  <input\n    type="search"\n    ng-model="q"\n    placeholder="filter friends..."\n    aria-label="filter friends"\n  />\n  <ul class="example-animate-container">\n    <li\n      class="animate-repeat"\n      ng-repeat="friend in friends | filter:q as results track by friend.name"\n    >\n      [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.\n    </li>\n    <li class="animate-repeat" ng-if="results.length === 0">\n      <strong>no results found...</strong>\n    </li>\n  </ul>\n</div>\n\n<style media="screen">\n  .example-animate-container {\n    background: white;\n    border: 1px solid black;\n    list-style: none;\n    margin: 0;\n    padding: 0 10px;\n  }\n\n  .animate-repeat {\n    line-height: 30px;\n    list-style: none;\n    box-sizing: border-box;\n  }\n\n  .animate-repeat.ng-move,\n  .animate-repeat.ng-enter,\n  .animate-repeat.ng-leave {\n    transition: all linear 0.5s;\n  }\n\n  .animate-repeat.ng-leave.ng-leave-active,\n  .animate-repeat.ng-move,\n  .animate-repeat.ng-enter {\n    opacity: 0;\n    max-height: 0;\n  }\n\n  .animate-repeat.ng-leave,\n  .animate-repeat.ng-move.ng-move-active,\n  .animate-repeat.ng-enter.ng-enter-active {\n    opacity: 1;\n    max-height: 30px;\n  }\n</style>\n\n<script>\n  angular\n    .module("ngrepeat", ["nganimate"])\n    .controller("repeatcontroller", function($scope) {\n      $scope.friends = [\n        { name: "john", age: 25, gender: "boy" },\n        { name: "jessie", age: 30, gender: "girl" },\n        { name: "johanna", age: 28, gender: "girl" },\n        { name: "joy", age: 15, gender: "girl" },\n        { name: "mary", age: 28, gender: "girl" },\n        { name: "peter", age: 95, gender: "boy" },\n        { name: "sebastian", age: 50, gender: "boy" },\n        { name: "erika", age: 27, gender: "girl" },\n        { name: "patrick", age: 40, gender: "boy" },\n        { name: "samantha", age: 60, gender: "girl" }\n      ];\n    });\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n\n\n\n# ng-switch 用法\n\n<div ng-controller="examplecontroller">\n  <select ng-model="selection" ng-options="item for item in items"> </select>\n  <code>selection={{selection}}</code>\n  <hr />\n  <div class="animate-switch-container" ng-switch on="selection">\n    <div\n      class="animate-switch"\n      ng-switch-when="settings|options"\n      ng-switch-when-separator="|"\n    >\n      settings div\n    </div>\n    <div class="animate-switch" ng-switch-when="home">home span</div>\n    <div class="animate-switch" ng-switch-default>default</div>\n  </div>\n</div>\n\n<style media="screen">\n  .animate-switch-container {\n    position: relative;\n    background: white;\n    border: 1px solid black;\n    height: 40px;\n    overflow: hidden;\n  }\n\n  .animate-switch {\n    padding: 10px;\n  }\n\n  .animate-switch.ng-animate {\n    transition: all cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.5s;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n\n  .animate-switch.ng-leave.ng-leave-active,\n  .animate-switch.ng-enter {\n    top: -50px;\n  }\n  .animate-switch.ng-leave,\n  .animate-switch.ng-enter.ng-enter-active {\n    top: 0;\n  }\n</style>\n\n<script>\n  angular\n    .module("switchexample", ["nganimate"])\n    .controller("examplecontroller", [\n      "$scope",\n      function($scope) {\n        $scope.items = ["settings", "home", "options", "other"];\n        $scope.selection = $scope.items[0];\n      }\n    ]);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n\n\n\n# 指令\n\nng-app # 相当于一个入，告诉angular来管理ng-app指令所在的元素及其子元素。\nng-controller # 指定了一个控制来管理页面的数据模型/行为模型。\nng-model # 主要是用来进行双向数据绑定。\nng-click # 类似于onclick,指定一个方法就能运行。\n\nng-repeat # 渲染数组中的元素。\nng-bind # 为了解决表达式闪烁问题；只能使用在有双标签的元素上。\nng-cloak # 利用了anuglar加载后会移动类样式名为ng-cloak的特性。\nng-bind-html\n\nng-show/ng-hide # 控制页面元素的显示与否,需要提供一个布尔值。\nng-if # 类似于ng-show,区别是ng-if会彻底删除元素。\nng-switch:ng-switch-when\n\nng-class:\n   多选一：<div ng-class="{\'a\':\'classa\',\'b\':classb}["a"]"></div>\n   多选多：<div ng-class="{\'classa\':布尔值,\'classb\':布尔值}"></div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# ng-controller as 用法\n\n<div id="ctrl-as-exmpl" ng-controller="settingscontroller1 as settings">\n  <label>name: <input type="text" ng-model="settings.name"/></label>\n  <button ng-click="settings.greet()">greet</button><br />\n  contact:\n  <ul>\n    <li ng-repeat="contact in settings.contacts">\n      <select\n        ng-model="contact.type"\n        aria-label="contact method"\n        id="select_{{$index}}"\n      >\n        <option>phone</option>\n        <option>email</option>\n      </select>\n      <input\n        type="text"\n        ng-model="contact.value"\n        aria-labelledby="select_{{$index}}"\n      />\n      <button ng-click="settings.clearcontact(contact)">clear</button>\n      <button ng-click="settings.removecontact(contact)" aria-label="remove">\n        x\n      </button>\n    </li>\n    <li><button ng-click="settings.addcontact()">add</button></li>\n  </ul>\n</div>\n\n<script>\n  angular\n    .module("controllerasexample", [])\n    .controller("settingscontroller1", settingscontroller1);\n\n  function settingscontroller1() {\n    this.name = "john smith";\n    this.contacts = [\n      { type: "phone", value: "408 555 1212" },\n      { type: "email", value: "john.smith@example.org" }\n    ];\n  }\n\n  settingscontroller1.prototype.greet = function() {\n    alert(this.name);\n  };\n\n  settingscontroller1.prototype.addcontact = function() {\n    this.contacts.push({ type: "email", value: "yourname@example.org" });\n  };\n\n  settingscontroller1.prototype.removecontact = function(contacttoremove) {\n    var index = this.contacts.indexof(contacttoremove);\n    this.contacts.splice(index, 1);\n  };\n\n  settingscontroller1.prototype.clearcontact = function(contact) {\n    contact.type = "phone";\n    contact.value = "";\n  };\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\n\n\n# 事件\n\nng-copy # 用户触发拷贝事件时，规定拷贝事件的行为\nng-cut # 用户触发剪切事件时，规定剪切事件的行为\nng-paste # 用户触发粘贴事件时，规定粘贴事件的行为\n\nng-click # 规定click 事件的行为\nng-dblclick # 用户触发双击事件时，规定双击事件的行为\n\nng-blur # 规定 blur 事件的行为\nng-focus # 规定focus焦点事件的行为\n\nng-keydown # 规定按下按键事件的行为\nng-keypress # 规定按下按键事件的行为,通常情况下会用ng-keydown\nng-keyup # 规定松开按键事件的行为\n\nng-mousedown # 规定按下鼠标按键时的行为\nng-mouseenter # 规定鼠标指针穿过元素时的行为\nng-mouseleave # 规定鼠标指针离开元素时的行为\nng-mousemove # 规定鼠标指针在指定的元素中移动时的行为\nng-mouseover # 规定鼠标指针位于元素上方时的行为\nng-mouseup # 规定当在元素上松开鼠标按钮时的行为\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 样式\n\nng-class # 指定 html 元素使用的 css 类\nng-class-even # 类似 ng-class，但只在偶数行起作用,常用table/tr/td、ul/li等元素配合使用\nng-class-odd # 类似 ng-class，但只在奇数行起作用\n\nng-style # 指定元素的 style 属性,可在控制器中为ng-style所在变量赋值\n\n*ng-cloak # 在应用正要加载时防止其闪烁。如<p ng-cloak>{{ 5 + 5 }}</p>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# from 表单\n\nng-submit # 规定submit 事件的行为\nng-value # 规定 input 元素的值\nng-model # 绑定 html 控制器的值到应用数据,即angular变量值,变量值可以是字符串、对象甚至是对象属性\n\nng-selected # 指定元素的 selected 属性,表示当前选择项,常需与select元素配合使用，类似于ng-checked\nng-readonly # 指定元素的 readonly 属性\n\nng-disabled # 可设为true|false时，规定一个元素是否被禁用,但不会隐藏\n\nng-change # 规定在内容改变时要执行的表达式\nng-checked # 用于设置复选框(checkbox)或单选按钮(radio)的 checked 属性\n\nng-list # 输出时将文本转换为列表 (数组)，输入文本时用逗号隔开\n\t<input ng-model="customers" ng-list/>\n\t<pre>{{customers}}</pre>\n\nng-model-options # 规定如何更新模型,option\t指定了绑定数据的规则，规则如下:\n\t{updateon: \'event\'} # 规则指定事件发生后绑定数据,如ng-model-options="{updateon: \'blur\'}"\n\t{debounce : 1000} # 规定等待多少毫秒后绑定数据\n\t{allowinvalid : true|false} # 规定是否需要验证后绑定数据\n\t{gettersetter : true|false} # 规定是否作为 getters/setters 绑定到模型\n\t{timezone : \'0100\'} # 规则是否使用时区\n\nng-options:\n在 <select> 下拉列中指定 <options>,\n如<select ng-model="selectedname" ng-options="item for item in names"></select>\n\t数据格式为字符串数组["",""] 使用x for x in names\n\t数据格式为单独的对象{"a":1,"b":2} 使用x for (x,y) in names\n\t数据格式为对象数组[{},{}] 使用x.attr for x in names\n\n<option ng-repeat="x in address">{{x}}</option>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n * form 表单的系统检验指令\n\n$error.required # 唯一值验证\n$error.email # 文本输入内置电子邮件验证。\n$error.number # 带有数量验证的文本输入。也可以有最小和最大值的附加属性。\n$error.date # 带有输入日期文本输入。\n$error.url # 带有输入验证的url文本输入。\n$error.minlength # 参数范围需从input中ng-minlength设置\n$error.maxlength # 参数范围需从input中ng-maxlength设置\n$error.pattern # 正则表达式需从input中ng-pattern设置\n$dirty # 表单有填写记录\n$pristine # 表单没有填写记录\n$valid # 字段内容合法的,如formname.$valid\n$invalid # 字段内容是非法的\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# ng-form 用法\n\n<form name="myform" ng-controller="formcontroller" class="my-form">\n  usertype: <input name="input" ng-model="usertype" required />\n  <span class="error" ng-show="myform.input.$error.required">required!</span\n  ><br />\n  <code>usertype = {{usertype}}</code><br />\n  <code>myform.input.$valid = {{myform.input.$valid}}</code><br />\n  <code>myform.input.$error = {{myform.input.$error}}</code><br />\n  <code>myform.$valid = {{myform.$valid}}</code><br />\n  <code>myform.$error.required = {{!!myform.$error.required}}</code><br />\n</form>\n\n<style>\n  .my-form {\n    transition: all linear 0.5s;\n    background: transparent;\n  }\n  .my-form.ng-invalid {\n    background: red;\n  }\n</style>\n\n<script>\n  angular.module("formexample", []).controller("formcontroller", [\n    "$scope",\n    function($scope) {\n      $scope.usertype = "guest";\n    }\n  ]);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# ng-model-options 用法\n\n<div ng-controller="examplecontroller">\n  <form name="userform">\n    <label>\n      name:\n      <input\n        type="text"\n        name="username"\n        ng-model="user.name"\n        ng-model-options="{ updateon: \'blur\' }"\n        ng-keyup="cancel($event)"\n      /> </label\n    ><br />\n    <label>\n      other data:\n      <input type="text" ng-model="user.data" /> </label\n    ><br />\n  </form>\n  <pre>user.name = <span ng-bind="user.name"></span></pre>\n</div>\n\n<script>\n  angular.module("optionsexample", []).controller("examplecontroller", [\n    "$scope",\n    function($scope) {\n      $scope.user = { name: "say", data: "" };\n\n      $scope.cancel = function(e) {\n        if (e.keycode === 27) {\n          $scope.userform.username.$rollbackviewvalue();\n        }\n      };\n    }\n  ]);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# angualr 方法\n\nangular.isarray()\t# 如果引用的是数组返回 true\nangular.isdate()\t# 如果引用的是日期返回 true\nangular.isdefined()\t# 如果引用的已定义返回 true\nangular.iselement()\t# 如果引用的是 dom 元素返回 true\nangular.isfunction()\t# 如果引用的是函数返回 true\nangular.isnumber()\t# 如果引用的是数字返回 true,如果输入框是input标签，要检测输入框内容是否为数字，则使用!isnan($scope.myinput);\nangular.isobject()\t# 如果引用的是对象返回 true\nangular.isstring()\t# 如果引用的是字符串返回 true\nangular.isundefined()\t# 如果引用的未定义返回 true\nangular.equals(a,b)\t# 如果两个对象相等返回 true\n\n*angular.fromjson()\t# 反序列化 json 字符串\n*angular.tojson()\t# 序列化 json 字符串\n\nangular.lowercase()\t# 将字符串转换为小写\nangular.uppercase()\t# 将字符串转换为大写\n\nangular.copy()\t# 数组或对象深度拷贝\n\n*angular.foreach()\t# 对象或数组的迭代函数\n\nvar objs = [{a: 1}, {a: 2}];\nangular.foreach(objs, function(data, index, array) {\n\t//data等价于array[index]\n\tconsole.log(data.a + \'=\' + array[index].a);\n});\n\nvar objs = {"a":1,"b":2}\nangular.foreach(objs, function(data, index, array) {\n\t//1 "a" {a: 1, b: 2}\n\tconsole.log(data,index,array);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 自定义指令\n\n-  template:\n指定了一个字符，最终会被加入自定义指令所有标签的innerhtml位置\n\n-  templateurl:\n    + 指定了一个文件路径，最终angular会发一个异步请求\n      把文件内容加入到自定义指令所在标签的innerhtml位置。\n    + 也可以指定一个script标签的id,`templateurl:\'id值\'` ,\n      会将这个script标签中的内容以字符串的形式加入到页面，\n      需要更改script标签中的type属性：type="text/ng-template"\n\n- replace:告诉angular,用template对应的字符串替换自定义指令所在的标签。\n\n- restrict:限制自定义指令的使用方式：\n    +\'a\':attribue :需要以属性的形式书写自定义指令。\'<div my-zhiling></div>\'\n    +\'c\':class :以类样式名的形式来书指令。   \'<div class="my-zhiling"></div>\'\n    +\'e\':element:以自定义标签的形式来书写指令 \'<my-zhiling></my-zhiling>\'\n    +\'m\':comment:以注释的形式来书写指令  \x3c!-- directive: my-zhiling --\x3e\n\n- controller：控制器里的数据在多个实例中公用\n\n- transclude:需要提供一个布尔，为true会把自定义指令\n    所在标签的innerhtml插入到模板中拥有ng-transclude指令的元素的innerhtml位置。\n    *注意：不能够与replace共用(指的是transclude为true时，replace不能为true)*\n\n- scope:属性\n    第一种写法：`scope:{aaa:\'@myclass\'}` 可以获得自定义指令所在标签中名为myclass的属性值\n    第二种写法：`scope:{myclass:\'@\'}` //第一种的简写方式;\n\n    `@` : 接收外部传入的字符串\n    `=` : 接收外部传入的变量\n    `&` : 将内部的信息通过function函数传递给外部使用\n\n- link：这个属性指向的是function(scope,element,attributes,controllers),\n有三个参数\n    scope: 这里的scope下的属性值只能用在模板中, 一定要与控制器中$scope的使用范围区分\n    element: 自定义指令所在标签的jqlite对象\n    attributes: 是一个object对象，通过它可以获取所有自定义指令所在标签\n    controllers: 控制器，与require一起使用\n\nangular.module(\'docstabsexample\', [])\n.directive(\'mypane\', function() {\n  return {\n    require: [\'^^mytabs\', \'ngmodel\'],\n    restrict: \'e\',\n    transclude: true,\n    scope: {\n      title: \'@\'\n    },\n    link: function(scope, element, attrs, controllers) {\n      var tabsctrl = controllers[0],\n          modelctrl = controllers[1];\n\n      tabsctrl.addpane(scope);\n    },\n    templateurl: \'my-pane.html\'\n  };\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n\n\n\n# ng-transclude 用法\n\n<script>\n  angular\n    .module("transcludeexample", [])\n    .directive("pane", function() {\n      return {\n        restrict: "e",\n        transclude: true,\n        scope: { title: "@" },\n        template:\n          \'<div style="border: 1px solid black;">\' +\n          \'<div style="background-color: gray">{{title}}</div>\' +\n          "<ng-transclude></ng-transclude>" +\n          "</div>"\n      };\n    })\n    .controller("examplecontroller", [\n      "$scope",\n      function($scope) {\n        $scope.title = "lorem ipsum";\n        $scope.text =\n          "neque porro quisquam est qui dolorem ipsum quia dolor...";\n      }\n    ]);\n<\/script>\n\n<div ng-controller="examplecontroller">\n  <input ng-model="title" aria-label="title" /> <br />\n  <textarea ng-model="text" aria-label="text"></textarea> <br />\n  <pane title="{{title}}"><span>{{text}}</span></pane>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# transclude fallback content\n\n<script>\n  angular\n    .module("transcludefallbackcontentexample", [])\n    .directive("mybutton", function() {\n      return {\n        restrict: "e",\n        transclude: true,\n        scope: true,\n        template:\n          \'<button style="cursor: pointer;">\' +\n          "<ng-transclude>" +\n          \'<b style="color: red;">button1</b>\' +\n          "</ng-transclude>" +\n          "</button>"\n      };\n    });\n<\/script>\n\n\x3c!-- fallback button content --\x3e\n<my-button id="fallback"></my-button>\n\x3c!-- modified button content --\x3e\n<my-button id="modified">\n  <i style="color: green;">button2</i>\n</my-button>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * multi-slot transclusion\n\n<style>\n  .title,\n  .footer {\n    background-color: gray;\n  }\n</style>\n<div ng-controller="examplecontroller">\n  <input ng-model="title" aria-label="title" /> <br />\n  <textarea ng-model="text" aria-label="text"></textarea> <br />\n  <pane>\n    <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>\n    <pane-body><p>{{text}}</p></pane-body>\n  </pane>\n</div>\n\n<script>\n  angular\n    .module("multislottranscludeexample", [])\n    .directive("pane", function() {\n      return {\n        restrict: "e",\n        transclude: {\n          title: "?panetitle",\n          body: "panebody",\n          footer: "?panefooter"\n        },\n        template:\n          \'<div style="border: 1px solid black;">\' +\n          \'<div class="title" ng-transclude="title">fallback title</div>\' +\n          \'<div ng-transclude="body"></div>\' +\n          \'<div class="footer" ng-transclude="footer">fallback footer</div>\' +\n          "</div>"\n      };\n    })\n    .controller("examplecontroller", [\n      "$scope",\n      function($scope) {\n        $scope.title = "lorem ipsum";\n        $scope.link = "https://google.com";\n        $scope.text =\n          "neque porro quisquam est qui dolorem ipsum quia dolor...";\n      }\n    ]);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n\n# directives controller 用法\n\nangular\n  .module("docstabsexample", [])\n  .directive("mytabs", function() {\n    return {\n      restrict: "e",\n      transclude: true,\n      scope: {},\n      controller: [\n        "$scope",\n        function mytabscontroller($scope) {\n          var panes = ($scope.panes = []);\n          // title在多个实例中公用\n          $scope.title = "controller tab panel";\n          $scope.select = function(pane) {\n            angular.foreach(panes, function(pane) {\n              pane.selected = false;\n            });\n            pane.selected = true;\n          };\n\n          this.addpane = function(pane) {\n            if (panes.length === 0) {\n              $scope.select(pane);\n            }\n            panes.push(pane);\n          };\n        }\n      ],\n      templateurl: "my-tabs.html"\n    };\n  })\n  .directive("mypane", function() {\n    return {\n      require: "^^mytabs",\n      restrict: "e",\n      transclude: true,\n      scope: {\n        title: "@"\n      },\n      link: function(scope, element, attrs, tabsctrl) {\n        tabsctrl.addpane(scope);\n      },\n      templateurl: "my-pane.html"\n    };\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\x3c!-- index.html --\x3e\n<my-tabs>\n  <my-pane title="hello">\n    <p>lorem ipsum dolor sit amet</p>\n  </my-pane>\n  <my-pane title="world">\n    <em>mauris elementum elementum enim at suscipit.</em>\n    <p><a href ng-click="i = i + 1">counter: {{i || 0}}</a></p>\n  </my-pane>\n</my-tabs>\n<p>-------------------------</p>\n<my-tabs>\n  <my-pane title="angular">\n    <p>lorem ipsum</p>\n  </my-pane>\n  <my-pane title="well">\n    <em>mauris elementum .</em>\n    <p><a href ng-click="i = i + 1">counter: {{i || 0}}</a></p>\n  </my-pane>\n</my-tabs>\n\n\x3c!-- my-tab.html --\x3e\n<div class="tabbable">\n  <div>{{title}}</div>\n  <ul class="nav nav-tabs">\n    <li ng-repeat="pane in panes" ng-class="{active:pane.selected}">\n      <a href="" ng-click="select(pane)">{{pane.title}}</a>\n    </li>\n  </ul>\n  <div class="tab-content" ng-transclude></div>\n</div>\n\n\x3c!-- my-pane.html --\x3e\n<div class="tab-pane" ng-show="selected">\n  <h4>{{title}}</h4>\n  <div ng-transclude></div>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n\n# directive scope &\n\nangular\n  .module("docsisofnbindexample", [])\n  .controller("controller", [\n    "$scope",\n    "$timeout",\n    function($scope, $timeout) {\n      $scope.name = "tobias";\n      $scope.message = "";\n      $scope.hidedialog = function(message) {\n        $scope.message = message;\n        $scope.dialogishidden = true;\n        $timeout(function() {\n          $scope.message = "";\n          $scope.dialogishidden = false;\n        }, 2000);\n      };\n    }\n  ])\n  .directive("mydialog", function() {\n    return {\n      restrict: "e",\n      transclude: true,\n      scope: { close: "&onclose" },\n      templateurl: "my-dialog-close.html"\n    };\n  });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n# index.html\n<div ng-controller="controller">\n  {{message}}\n  <my-dialog ng-hide="dialogishidden" on-close="hidedialog(message)">\n    check out the contents, {{name}}!\n  </my-dialog>\n</div>\n\n# my-dialog-close.html\n<div class="alert">\n  <a href class="close" ng-click="close({message: \'closing for now\'})"\n    >&times;</a\n  >\n  <div ng-transclude></div>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# directive scope @ =\n\n// script.js\n(function(angular) {\n  "use strict";\n  angular\n    .module("docsisolationexample", [])\n    .controller("controller", [\n      "$scope",\n      function($scope) {\n        $scope.naomi = { name: "naomi", address: "1600 amphitheatre" };\n        $scope.vojta = { name: "vojta", address: "3456 somewhere else" };\n      }\n    ])\n    .directive("mycustomer", function() {\n      return {\n        restrict: "e",\n        scope: {\n          customerinfo: "=info",\n          customvajta: "@info"\n        },\n        templateurl: "my-customer-plus-vojta.html"\n      };\n    });\n})(window.angular);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\x3c!-- my-customer-plus-vojta.html --\x3e\nname: {{customerinfo.name}} address: {{customerinfo.address}}\n<hr />\nname: {{vojta.name}} address: {{vojta.address}}\n<hr />\nname: {{customerinfo}}\n\n<hr />\nname: {{customvajta}}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\x3c!-- index.html --\x3e\n<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <title>example - example-directive-isolate-2-production</title>\n    <script src="//code.angularjs.org/1.7.7/angular.min.js"><\/script>\n    <script src="script.js"><\/script>\n  </head>\n  <body ng-app="docsisolationexample">\n    <div ng-controller="controller">\n      <p>--------------naomi---------------</p>\n      <my-customer info="naomi"></my-customer>\n      <p>--------------vojta---------------</p>\n      <my-customer info="aaaa"></my-customer>\n    </div>\n  </body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 过滤器(filter)\n\n * date : 格式化显示数据\n\n\x3c!-- 需要传递参数告诉它，要按照我们想要的格式去显示\n        yyyy 表示年\n        mm 表示月\n        dd 表示日\n        hh 表示小时\n        mm 表示分钟,\n        ss 表示秒数\n    --\x3e\n<p>{{9838232323 | date :\'yyyy年mm月dd日 hh:mm:ss\'}}</p>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n * orderby: 对我们数据进行排序\n\n * 一般和 ng-repeat 一起使用，第一个参数，是个字符串： 字符串前加+或什么都不写时，会按照所对应的数据的属性正向排序，加上-就是逆向排序; <li ng-repeat="item in data |orderby:\'+id\'"></li>\n\n * filter : 也需要一个参数\n   \n   * 可以传递一个布尔值，或者字符串，angular 进根据它对数据进行全局查找\n   * 也可以传递一个对象，angular 会按照对象的属性到数据中精确查找对应的属性。\n\n描述：过滤器\nuppercase:格式化字符串为大写\nlowercase:格式化字符串为小写\ncurrency:格式化为货币符号\nlimitto　: 正数，表示从头开始截取；负数表示从尾巴开始截取\nnumber : 格式化为保留小数点\ndate : 格式化为时间\norderby:"?":某属性按从小到大排序 ( orderby:\'-id\' , id 降序排列   )  ( orderby:\'id\',  id 升序排列   )\nfilter:"?":按条件过滤，如filter:{\'name\':\'iphone\'}为查找属性name值为iphone的对象\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# filter demo\n\n<div ng-app="myapp" ng-controller="myctrl">\n  <input type="text" ng-model="name" />\n  <span>大写：{{name | uppercase}}</span>\n  <span>小写：{{name | lowercase}}</span>\n  <br />\n  <p>货币符号：{{ 250 | currency:"rmb" }}</p>\n  <p>正数截取4位：{{"1234567890" | limitto :4}}</p>\n  <p>负数截取4位：{{"1234567890" | limitto:-4}}</p>\n  <p>保留2位小数点：{{149016.1945000 | number:2}}</p>\n  <p>time转化为时间：{{1490161945000 | date:"yyyy-mm-dd hh:mm:ss"}}</p>\n  <p>排序及按条件筛选：</p>\n  <input type="text" ng-model="indata" />\n  <ul>\n    <li ng-repeat="x in names | orderby:\'-country\' | filter : indata">\n      {{ x.name + \', \' + x.country }}\n    </li>\n  </ul>\n  <p>自定义过滤器，输入一个数值，得到该值+1结果：</p>\n  <input type="text" ng-model="indiy" />\n  <p>{{indiy|addone}}</p>\n  <p>{{indiy|addonefilter}}</p>\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\nvar app = angular.module("myapp", []);\napp.controller("myctrl", function($scope) {\n  $scope.names = [\n    {\n      name: "jani",\n      country: "norway"\n    },\n    {\n      name: "hege",\n      country: "sweden"\n    },\n    {\n      name: "kai",\n      country: "denmark"\n    }\n  ];\n});\n//自定义过滤器\napp.filter("addone", function() {\n  return function(i) {\n    var result = 0;\n    if (!isnan(i)) {\n      result = 1 + parseint(i);\n    }\n    return result;\n  };\n});\n//自定义过滤器带参数\napp.service("addoneservice", function() {\n  this.add = function(i) {\n    var result = 0;\n    if (!isnan(i)) {\n      result = 1 + parseint(i);\n    }\n    return result;\n  };\n});\napp.filter("addonefilter", [\n  "addoneservice",\n  function(addoneservice) {\n    return function(i) {\n      return addoneservice.add(i);\n    };\n  }\n]);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# angular 服务\n\n * config 允许注入的是provider和constance(常量)\n\n * run 允许注入的是provider和constant,还可以是factory，service，value\n\n * angular.run 和 angular.config 有什么不同？config--\x3erun--\x3ecompile/link\n\n\n# constant\n\n * constant: 用于定义常量，一旦定义就不能被改变。可以被注入到任何地方，但是不能被装饰器(decorator)装饰\n\napp.constant("app_key", "a1s2d3f4");\n\n\n1\n\n\n\n# value\n\n * value： 用来定义值。但与 constant 的区别是：可以被修改，可以被 decorator 装饰，不能被注入到 config 中\n\napp.value("version", "1.0");\n\n\n1\n\n\n\n# decorator\n\n * decorator: 用来装饰其他 provider 的，不过 constant 除外\n\nvar app = angular.module("myapp", []);\napp.value("version", "1.0");\napp.decorator("version", function($delegate) {\n  return $delegate + ".1";\n});\n\napp.service("myservice", function() {\n  this.seta = function() {};\n  this.geta = function() {};\n  this.foo = function() {};\n});\n// 装饰myservice\napp.decorator("myservice", function($delegate) {\n  // $delegate 代表实际上的 service 实例\n  $delegate.greet = function() {\n    return "hello, i am a new function of \'myservice\'";\n  };\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# factory\n\n * factory: 需要返回一个包含数据，方法的对象\n\n// 创建\nangular.module("myapp.services").factory("user", function($http) {\n  // factory的名字和注入的方法\n  var url = "http://localhost:3000";\n  //把我们定义的方法和数据都放到一个对象中，并且返回这个对象，这就是factory\n  var service = {\n    user: {},\n    setname: function(newname) {\n      service.user["name"] = newname;\n    },\n    save: function() {\n      return $http.post(url + "/users", {\n        user: service.user\n      });\n    }\n  };\n  return service;\n});\n\n// 调用\n// 注意：需要使用.config()来配置service的时候不能使用factory的方法\nangular.module("myapp").controller("mainctrl", function($scope, user) {\n  //user就是factory的名字\n  //我们将user这个factory中的一个叫做save()的function赋给我们controller中的变量\n  $scope.saveuser = user.save;\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# service\n\n * service\n\n// 创建\nangular.module("myapp.services").service("user", function($http) {\n  // 在这里注入我们需要的服务\n  var self = this;\n  // 由于service()是通过构造函数创建的，\n  // 那么service()中的function和data都要以this.data和this.function的方式进行声明\n  // service()方法会持有构造函数创建的对象\n  this.user = {};\n  this.url = "http://localhost:3000";\n  this.setname = function(newname) {\n    self.user["name"] = newname;\n  };\n  this.save = function() {\n    return $http.post(self.url + "/users", {\n      user: self.user\n    });\n  };\n});\n\n// 调用\n// 注意：需要使用.config()来配置service的时候不能使用service的方法\nangular.module("myapp").controller("mainctrl", function($scope, user) {\n  //注入名字为user的service\n  //用user中名字叫做的save的function给本地变量赋值\n  $scope.saveuser = user.save;\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# provider\n\n * provider: 创建 provider，与 factory、service 不同的是，provider 需要使用 this.$get 来返回方法和数据, 可以在 config 中被调用和配置\n\nvar app = angular.module("myapp", []);\n\n// 在.config()中配置provider\napp.config(function (myfirstprovider) {\n  myfirstprovider.name = "zhangsan";\n});\n\n// 创建\napp.provider("myfirst", function () {\n  this.$get = function () {\n    var that = this;\n    var service = {};\n    service.console = function () {\n      return that.name;\n    }\n    return service;\n  }\n});\n\n// 调用\n// provider 可以在 config 中调用\napp.controller("cartcontroller", ["myfirst", "$scope", function (a, b) {\n  console.log(a.console());\n  b.name = "lisi";\n}]);\n\n--------------\n// other 1\nvar myapp = angular.module(\'app\',[]);\n\nmyapp.provider(\'helloangular\',function(){\n\treturn {\n\t\t$get:function(){\n\t\t\tvar name = \'xiaowang\';\n\t\t\tfunction getname(){\n\t\t\t\treturn name;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tgetname:getname\n\t\t\t}\n\t\t}\n\t}\n})\n\nmyapp.controller(\'myctrl\', [\'$scope\',\'helloangular\', function($scope,helloangular){\n\t$scope.name = helloangular.getname();\n}])\n\n-------------\n// other 2\nvar myapp = angular.module(\'app\',[],function($provide){\n\tconsole.log(\'1\');\n\t// 自定义服务\n\t$provide.provider(\'customservice\',function(){\n\t\tthis.$get = function(){\n\t\t\treturn {\n\t\t\t\tmessage : \'customservice message\'\n\t\t\t}\n\t\t}\n\t})\n});\n\nmyapp.controller(\'ctrl\',[\'$scope\',\'customservice\',function($scope,customservice){\n\tconsole.log(\'2\');\n\t$scope.name = \'小明\';\n\tconsole.log(customservice.message)\n}]);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n\n\n\n# 扩展小知识\n\n * track by $index 解决 ng-repeat 遍历数组时有重复问题\n\n * 使用$scope.$apply()通过 anuglar 监视数据模型的变化。\n   \n   * setinterval()\n   * settimeout()\n\n * $route ,提供一个方法，用于更新路由参数\n   \n   * $route.updateparams({page:2})//需要传入一个对象：就路由中的参数名及新的参数值;\n\n * 在一个页面里创建多个 ng-app\n\n<div id="a1" ng-app="app1">\n\t<input ng-model="name" type="text" placeholder="请输入姓名">\n\t<p>我的姓名： {{name}}</p>\n</div>\n\n<div id="a2" ng-app="app2">\n\t<input ng-model="age" type="number" placeholder="请输入年龄">\n\t<p>我的年龄: {{age}}</p>\n</div>\n<script type="text/javascript">\n\tvar app1 = angular.module("app1", []); //自动加载\n\tvar app2 = angular.module("app2", []); //手动加载\n\tangular.bootstrap(document.getelementbyid("a2"), [\'app2\']); // 手动加载2\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 相关链接\n\n * docs angularjs\n * angularjs1.6.x 实例教程\n * angularjs 学习笔记\n * angularstrap\n * learning_angular doc\n * angularjs 父子级 controller 传递数据',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647945545e3,createdTime:1643899953e3},{title:"axios请求封装",frontmatter:{title:"axios请求封装",date:"2022-01-30T00:00:00.000Z",sidebar:"auto",tags:["axios"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/axios.html",relativePath:"frontend/issues/axios.md",key:"v-7493ab2a",path:"/frontend/issues/axios.html",headers:[{level:2,title:"axios的cancelToken",slug:"axios的canceltoken",normalizedTitle:"axios的canceltoken",charIndex:2},{level:2,title:"axios超时重发",slug:"axios超时重发",normalizedTitle:"axios超时重发",charIndex:2665},{level:2,title:"axios配置",slug:"axios配置",normalizedTitle:"axios配置",charIndex:4515}],headersStr:"axios的cancelToken axios超时重发 axios配置",content:"# axios的cancelToken\n\n> 原文出处: https://segmentfault.com/a/1190000021290514\n\n * 通过axios.CancelToken.source生成取消令牌token和取消方法cancel\n\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function(thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n * 通过axios.CancelToken构造函数生成取消函数\n\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 封装取消请求逻辑\n\n// 声明一个 Map 用于存储每个请求的标识 和 取消函数\nconst pending = new Map()\n/**\n * 添加请求\n * @param {Object} config\n */\nconst addPending = (config) => {\n  const url = [\n    config.method,\n    config.url,\n    qs.stringify(config.params),\n    qs.stringify(config.data)\n  ].join('&')\n  config.cancelToken = config.cancelToken || new axios.CancelToken(cancel => {\n    if (!pending.has(url)) { // 如果 pending 中不存在当前请求，则添加进去\n      pending.set(url, cancel)\n    }\n  })\n}\n/**\n * 移除请求\n * @param {Object} config\n */\nconst removePending = (config) => {\n  const url = [\n    config.method,\n    config.url,\n    qs.stringify(config.params),\n    qs.stringify(config.data)\n  ].join('&')\n  if (pending.has(url)) { // 如果在 pending 中存在当前请求标识，需要取消当前请求，并且移除\n    const cancel = pending.get(url)\n    cancel(url)\n    pending.delete(url)\n  }\n}\n/**\n * 清空 pending 中的请求（在路由跳转时调用）\n */\nexport const clearPending = () => {\n  for (const [url, cancel] of pending) {\n    cancel(url)\n  }\n  pending.clear()\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n * 在 axios 拦截器中使用\n\naxios.interceptors.request.use(config => {\n  removePending(options) // 在请求开始前，对之前的请求做检查取消操作\n  addPending(options) // 将当前请求添加到 pending 中\n  // other code before request\n  return config\n}, error => {\n  return Promise.reject(error)\n})\n\naxios.interceptors.response.use(response => {\n  removePending(response) // 在请求结束后，移除本次请求\n  return response\n}, error => {\n  if (axios.isCancel(error)) {\n    console.log('repeated request: ' + error.message)\n  } else {\n    // handle error code\n  }\n  return Promise.reject(error)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# axios超时重发\n\n> 出处：https://github.com/axios/axios/issues/164#issuecomment-327837467\n\n * axios 的超时是在 response 中处理的，所以要在 response 中添加拦截器：\n\nconst RETRY_TIMEOUTS = [1, 3, 5, 10]; // seconds\nconst delay = RETRY_TIMEOUTS[config.retryCount] * 1000;\n\naxios.interceptors.response.use(undefined, function axiosRetryInterceptor(err) {\n    var config = err.config;\n    // If config does not exist or the retry option is not set, reject\n    if(!config || !config.retry) return Promise.reject(err);\n\n    // Set the variable for keeping track of the retry count\n    config.__retryCount = config.__retryCount || 0;\n\n    // Check if we've maxed out the total number of retries\n    if(config.__retryCount >= config.retry) {\n        // Reject with the error\n        return Promise.reject(err);\n    }\n\n    // Increase the retry count\n    config.__retryCount += 1;\n\n    // Create new promise to handle exponential backoff\n    var backoff = new Promise(function(resolve) {\n        setTimeout(function() {\n            resolve();\n        }, config.retryDelay || delay);\n    });\n\n    // Return the promise in which recalls axios to retry the request\n    return backoff.then(function() {\n        return axios(config);\n    });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n * 使用\n\naxios.get('/some/endpoint', { retry: 5, retryDelay: 1000 })\n    .then(function(res) {\n        console.log('success', res.data);\n    })\n    .catch(function(err) {\n        console.log('failed', err);\n    });\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 重新请求1次\n\naxios.interceptors.response.use(function(response){\n// ....\n}, function(error){\n\tvar originalRequest = error.config;\n\tif(error.code == 'ECONNABORTED' && error.message.indexOf('timeout')!=-1 && !originalRequest._retry){\n\t\t\toriginalRequest._retry = true\n\t\t\treturn axios(originalRequest);\n\t}\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# axios配置\n\n// 封装axios请求\nimport axios from \"axios\"\nimport qs from \"qs\"\nimport router from \"../../router\"\n// 声明一个 Map 用于存储每个请求的标识 和 取消函数\nconst pending = new Map()\n/**\n * 添加请求\n * @param {Object} config\n */\nconst addPending = (config) => {\n\tconst url = [\n\t\tconfig.method,\n\t\tconfig.url,\n\t\tqs.stringify(config.params),\n\t\tqs.stringify(config.data),\n\t].join(\"&\")\n\tconfig.cancelToken =\n\t\tconfig.cancelToken ||\n\t\tnew axios.CancelToken((cancel) => {\n\t\t\tif (!pending.has(url)) {\n\t\t\t\t// 如果 pending 中不存在当前请求，则添加进去\n\t\t\t\tpending.set(url, cancel)\n\t\t\t}\n\t\t})\n}\n/**\n * 移除请求\n * @param {Object} config\n */\nconst removePending = (config) => {\n\tconst url = [\n\t\tconfig.method,\n\t\tconfig.url,\n\t\tqs.stringify(config.params),\n\t\tqs.stringify(config.data),\n\t].join(\"&\")\n\tif (pending.has(url)) {\n\t\t// 如果在 pending 中存在当前请求标识，需要取消当前请求，并且移除\n\t\tconst cancel = pending.get(url)\n\t\tcancel(url)\n\t\tpending.delete(url)\n\t}\n}\n/**\n * 清空 pending 中的请求（在路由跳转时调用）\n * @param {Object} config\n */\nexport const clearPending = () => {\n\tfor (const [url, cancel] of pending) {\n\t\tcancel(url)\n\t}\n\tpending.clear()\n}\n\nconst request = axios.create({\n\ttimeout: 10000,\n\twithCredentials: false,\n})\n\nconst CONFIG = {\n\tretry: 3,\n\tretryDelay: 1000,\n}\n\n// 添加请求拦截器\nrequest.interceptors.request.use(\n\t(config) => {\n\t\tremovePending(config)\n\t\taddPending(config)\n\t\treturn config\n\t},\n\t(error) => {\n\t\treturn Promise.reject(error)\n\t},\n)\n\n// 添加响应拦截器\nrequest.interceptors.response.use(\n\t(response) => {\n\t\t// 请求返回结果，移除pending\n\t\tremovePending(response.config)\n\t\tif (\n\t\t\tNumber(response.data.stat) === 1 ||\n\t\t\t(response.data.result && Number(response.data.result.status) === 1)\n\t\t) {\n\t\t\treturn Promise.resolve(response.data)\n\t\t} else {\n\t\t\t// 未登录\n\t\t\tif (response.data.stat == 9) {\n\t\t\t\trouter.push({ name: \"home\" })\n\t\t\t}\n\t\t\treturn Promise.reject(response)\n\t\t}\n\t},\n\t(error) => {\n\t\t// retry request: https://github.com/axios/axios/issues/164#issuecomment-327837467\n\t\tlet config = error.config\n\n\t\t// If config does not exist or the retry option is not set, reject\n\t\tif (!config || !CONFIG.retry) return Promise.reject(error)\n\n\t\t// Set the variable for keeping track of the retry count\n\t\tconfig.__retryCount = config.__retryCount || 0\n\n\t\t// Check if we've maxed out the total number of retries\n\t\tif (config.__retryCount >= CONFIG.retry) {\n\t\t\t// Reject with the error\n\t\t\treturn Promise.reject(error)\n\t\t}\n\n\t\t// Increase the retry count\n\t\tconfig.__retryCount += 1\n\n\t\t// Create new promise to handle exponential backoff\n\t\tlet backoff = new Promise(function (resolve) {\n\t\t\tsetTimeout(function () {\n\t\t\t\tresolve()\n\t\t\t}, CONFIG.retryDelay)\n\t\t})\n\n\t\t// Return the promise in which recalls axios to retry the request\n\t\treturn backoff.then(function () {\n\t\t\treturn request(config)\n\t\t})\n\t},\n)\n\nexport default request\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n",normalizedContent:"# axios的canceltoken\n\n> 原文出处: https://segmentfault.com/a/1190000021290514\n\n * 通过axios.canceltoken.source生成取消令牌token和取消方法cancel\n\nconst canceltoken = axios.canceltoken;\nconst source = canceltoken.source();\n\naxios.get('/user/12345', {\n  canceltoken: source.token\n}).catch(function(thrown) {\n  if (axios.iscancel(thrown)) {\n    console.log('request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  canceltoken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('operation canceled by the user.');\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n * 通过axios.canceltoken构造函数生成取消函数\n\nconst canceltoken = axios.canceltoken;\nlet cancel;\n\naxios.get('/user/12345', {\n  canceltoken: new canceltoken(function executor(c) {\n    // an executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 封装取消请求逻辑\n\n// 声明一个 map 用于存储每个请求的标识 和 取消函数\nconst pending = new map()\n/**\n * 添加请求\n * @param {object} config\n */\nconst addpending = (config) => {\n  const url = [\n    config.method,\n    config.url,\n    qs.stringify(config.params),\n    qs.stringify(config.data)\n  ].join('&')\n  config.canceltoken = config.canceltoken || new axios.canceltoken(cancel => {\n    if (!pending.has(url)) { // 如果 pending 中不存在当前请求，则添加进去\n      pending.set(url, cancel)\n    }\n  })\n}\n/**\n * 移除请求\n * @param {object} config\n */\nconst removepending = (config) => {\n  const url = [\n    config.method,\n    config.url,\n    qs.stringify(config.params),\n    qs.stringify(config.data)\n  ].join('&')\n  if (pending.has(url)) { // 如果在 pending 中存在当前请求标识，需要取消当前请求，并且移除\n    const cancel = pending.get(url)\n    cancel(url)\n    pending.delete(url)\n  }\n}\n/**\n * 清空 pending 中的请求（在路由跳转时调用）\n */\nexport const clearpending = () => {\n  for (const [url, cancel] of pending) {\n    cancel(url)\n  }\n  pending.clear()\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n * 在 axios 拦截器中使用\n\naxios.interceptors.request.use(config => {\n  removepending(options) // 在请求开始前，对之前的请求做检查取消操作\n  addpending(options) // 将当前请求添加到 pending 中\n  // other code before request\n  return config\n}, error => {\n  return promise.reject(error)\n})\n\naxios.interceptors.response.use(response => {\n  removepending(response) // 在请求结束后，移除本次请求\n  return response\n}, error => {\n  if (axios.iscancel(error)) {\n    console.log('repeated request: ' + error.message)\n  } else {\n    // handle error code\n  }\n  return promise.reject(error)\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# axios超时重发\n\n> 出处：https://github.com/axios/axios/issues/164#issuecomment-327837467\n\n * axios 的超时是在 response 中处理的，所以要在 response 中添加拦截器：\n\nconst retry_timeouts = [1, 3, 5, 10]; // seconds\nconst delay = retry_timeouts[config.retrycount] * 1000;\n\naxios.interceptors.response.use(undefined, function axiosretryinterceptor(err) {\n    var config = err.config;\n    // if config does not exist or the retry option is not set, reject\n    if(!config || !config.retry) return promise.reject(err);\n\n    // set the variable for keeping track of the retry count\n    config.__retrycount = config.__retrycount || 0;\n\n    // check if we've maxed out the total number of retries\n    if(config.__retrycount >= config.retry) {\n        // reject with the error\n        return promise.reject(err);\n    }\n\n    // increase the retry count\n    config.__retrycount += 1;\n\n    // create new promise to handle exponential backoff\n    var backoff = new promise(function(resolve) {\n        settimeout(function() {\n            resolve();\n        }, config.retrydelay || delay);\n    });\n\n    // return the promise in which recalls axios to retry the request\n    return backoff.then(function() {\n        return axios(config);\n    });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n * 使用\n\naxios.get('/some/endpoint', { retry: 5, retrydelay: 1000 })\n    .then(function(res) {\n        console.log('success', res.data);\n    })\n    .catch(function(err) {\n        console.log('failed', err);\n    });\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 重新请求1次\n\naxios.interceptors.response.use(function(response){\n// ....\n}, function(error){\n\tvar originalrequest = error.config;\n\tif(error.code == 'econnaborted' && error.message.indexof('timeout')!=-1 && !originalrequest._retry){\n\t\t\toriginalrequest._retry = true\n\t\t\treturn axios(originalrequest);\n\t}\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# axios配置\n\n// 封装axios请求\nimport axios from \"axios\"\nimport qs from \"qs\"\nimport router from \"../../router\"\n// 声明一个 map 用于存储每个请求的标识 和 取消函数\nconst pending = new map()\n/**\n * 添加请求\n * @param {object} config\n */\nconst addpending = (config) => {\n\tconst url = [\n\t\tconfig.method,\n\t\tconfig.url,\n\t\tqs.stringify(config.params),\n\t\tqs.stringify(config.data),\n\t].join(\"&\")\n\tconfig.canceltoken =\n\t\tconfig.canceltoken ||\n\t\tnew axios.canceltoken((cancel) => {\n\t\t\tif (!pending.has(url)) {\n\t\t\t\t// 如果 pending 中不存在当前请求，则添加进去\n\t\t\t\tpending.set(url, cancel)\n\t\t\t}\n\t\t})\n}\n/**\n * 移除请求\n * @param {object} config\n */\nconst removepending = (config) => {\n\tconst url = [\n\t\tconfig.method,\n\t\tconfig.url,\n\t\tqs.stringify(config.params),\n\t\tqs.stringify(config.data),\n\t].join(\"&\")\n\tif (pending.has(url)) {\n\t\t// 如果在 pending 中存在当前请求标识，需要取消当前请求，并且移除\n\t\tconst cancel = pending.get(url)\n\t\tcancel(url)\n\t\tpending.delete(url)\n\t}\n}\n/**\n * 清空 pending 中的请求（在路由跳转时调用）\n * @param {object} config\n */\nexport const clearpending = () => {\n\tfor (const [url, cancel] of pending) {\n\t\tcancel(url)\n\t}\n\tpending.clear()\n}\n\nconst request = axios.create({\n\ttimeout: 10000,\n\twithcredentials: false,\n})\n\nconst config = {\n\tretry: 3,\n\tretrydelay: 1000,\n}\n\n// 添加请求拦截器\nrequest.interceptors.request.use(\n\t(config) => {\n\t\tremovepending(config)\n\t\taddpending(config)\n\t\treturn config\n\t},\n\t(error) => {\n\t\treturn promise.reject(error)\n\t},\n)\n\n// 添加响应拦截器\nrequest.interceptors.response.use(\n\t(response) => {\n\t\t// 请求返回结果，移除pending\n\t\tremovepending(response.config)\n\t\tif (\n\t\t\tnumber(response.data.stat) === 1 ||\n\t\t\t(response.data.result && number(response.data.result.status) === 1)\n\t\t) {\n\t\t\treturn promise.resolve(response.data)\n\t\t} else {\n\t\t\t// 未登录\n\t\t\tif (response.data.stat == 9) {\n\t\t\t\trouter.push({ name: \"home\" })\n\t\t\t}\n\t\t\treturn promise.reject(response)\n\t\t}\n\t},\n\t(error) => {\n\t\t// retry request: https://github.com/axios/axios/issues/164#issuecomment-327837467\n\t\tlet config = error.config\n\n\t\t// if config does not exist or the retry option is not set, reject\n\t\tif (!config || !config.retry) return promise.reject(error)\n\n\t\t// set the variable for keeping track of the retry count\n\t\tconfig.__retrycount = config.__retrycount || 0\n\n\t\t// check if we've maxed out the total number of retries\n\t\tif (config.__retrycount >= config.retry) {\n\t\t\t// reject with the error\n\t\t\treturn promise.reject(error)\n\t\t}\n\n\t\t// increase the retry count\n\t\tconfig.__retrycount += 1\n\n\t\t// create new promise to handle exponential backoff\n\t\tlet backoff = new promise(function (resolve) {\n\t\t\tsettimeout(function () {\n\t\t\t\tresolve()\n\t\t\t}, config.retrydelay)\n\t\t})\n\n\t\t// return the promise in which recalls axios to retry the request\n\t\treturn backoff.then(function () {\n\t\t\treturn request(config)\n\t\t})\n\t},\n)\n\nexport default request\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n",charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647945545e3,createdTime:1647945545e3},{title:"基本数据类型",frontmatter:{title:"基本数据类型",date:"2020-05-20T00:00:00.000Z",sidebar:"auto",categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/basic.html",relativePath:"frontend/issues/basic.md",key:"v-71afeb6b",path:"/frontend/issues/basic.html",headers:[{level:2,title:"基本数据类型",slug:"基本数据类型",normalizedTitle:"基本数据类型",charIndex:2},{level:2,title:"引用类型",slug:"引用类型",normalizedTitle:"引用类型",charIndex:112},{level:2,title:"Boolean布尔",slug:"boolean布尔",normalizedTitle:"boolean布尔",charIndex:175},{level:2,title:"JavaScript 中的包装类型",slug:"javascript-中的包装类型",normalizedTitle:"javascript 中的包装类型",charIndex:533},{level:2,title:"数据类型检测的方式有哪些",slug:"数据类型检测的方式有哪些",normalizedTitle:"数据类型检测的方式有哪些",charIndex:673},{level:2,title:"栈和队列(LIFO/FIFO)",slug:"栈和队列-lifo-fifo",normalizedTitle:"栈和队列(lifo/fifo)",charIndex:1221},{level:2,title:"script标签async与defer的区别",slug:"script标签async与defer的区别",normalizedTitle:"script标签async与defer的区别",charIndex:1331},{level:2,title:"script标签module",slug:"script标签module",normalizedTitle:"script标签module",charIndex:1495},{level:2,title:"define module",slug:"define-module",normalizedTitle:"define module",charIndex:2976},{level:2,title:"amd-requirejs",slug:"amd-requirejs",normalizedTitle:"amd-requirejs",charIndex:3551},{level:2,title:"cmd-seajs",slug:"cmd-seajs",normalizedTitle:"cmd-seajs",charIndex:3912},{level:2,title:"UMD",slug:"umd",normalizedTitle:"umd",charIndex:4318},{level:2,title:"ES6 module",slug:"es6-module",normalizedTitle:"es6 module",charIndex:4815},{level:2,title:"commonJS",slug:"commonjs",normalizedTitle:"commonjs",charIndex:4335}],headersStr:"基本数据类型 引用类型 Boolean布尔 JavaScript 中的包装类型 数据类型检测的方式有哪些 栈和队列(LIFO/FIFO) script标签async与defer的区别 script标签module define module amd-requirejs cmd-seajs UMD ES6 module commonJS",content:'# 基本数据类型\n\n * Number: 最大数字是 253-1\n * String\n * Boolean\n * null\n * undefined\n * Symbol\n * BigInt: 大于 253的所有数字\n\n\n# 引用类型\n\n * Object 、Array 、Function 、Date 、Math 、Regexp 、JSON\n\n\n# Boolean布尔\n\n * 类型转换：!!undefined --\x3e false\n * 布尔类型的值的转换规则\n\nundefined,null,false,0,NaN,""  // 返回 false\n\n// 过滤数组中的这些值\n[ (undefined, null, false, 0, NaN, "", "", "hello")].filter(item => item); // [\'hello\']\n\ntypeof null; // 返回 object\ntype undefined // 返回 undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * null是一个表示“空”的对象，转为数值时为 0\n * undefined是一个表示”此处无定义”的原始值，转为数值时为NaN\n * void 0\n\n\n# JavaScript 中的包装类型\n\ntypeof new String(\'abc\')  // object\ntypeof new Object(\'xxx\')  // object\ntypeof new Boolean(false) // object\n\n\n1\n2\n3\n\n\n\n# 数据类型检测的方式有哪些\n\n * typeof, 可用于基本数据类型判断\n\ntypeof [];     // object\ntypeof {};     // object\ntypeof null;   // object\n\n\n1\n2\n3\n\n * instanceof, 只能正确判断引用数据类型，而不能判断基本数据类型\n\n2 instanceof Number;     // false\ntrue instanceof Boolean; // false\n\'str\' instanceof String; // false\n\n\n1\n2\n3\n\n * constructor, 不能判断 null与undefined, 也不能判断修改原型链后的数据类型\n\nfunction Fn(){};\n// 修改原型链\nFn.prototype = new Array();\nvar f = new Fn();\n\nf.constructor===Fn;    // false\nf.constructor===Array; // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * Object.prototype.toString.call, 使用对象的原型方法 toString 来判断数据类型\n\n\n# 栈和队列(LIFO/FIFO)\n\n * 栈数据结构的访问规则是LIFO(Last-in-First-Out,后进先出)\n * 队列数据结构的访问规则是FIFO(First-In-First-Out, 先进先出)\n\n\n# script标签async与defer的区别\n\n * 原文：彻底搞懂 async & defer\n * 两者都不会阻止 document 的解析\n * defer 会在 DOMContentLoaded 前依次执行\n * async 则是 onload 下载完立即执行，不一定是在 DOMContentLoaded 前\n\n\n# script标签module\n\n * 原文\n * 标签使用<script type="module"><\/script>\n * 模块路径\n\n\x3c!-- hd.js --\x3e\nexport let hd = { name: "后盾人" };\n\x3c!-- html --\x3e\n<script type="module">\n  import { hd } from "./hd.js";\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n\n * 延迟解析\n\n<body>\n  <script type="module">\n    console.log(document.querySelector("button")); //Button\n  <\/script>\n  <script>\n    console.log(document.querySelector("button")); //undefined\n  <\/script>\n  <button>后盾人</button>\n</body>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 严格模式\n\n\x3c!-- 模块默认运行在严格模式，以下代码没有使用声明语句将报错 --\x3e\n<script type="module">\n  hd = "houdunren"; // Error\n<\/script>\n\n<script>\n  console.log(this); //Window\n<\/script>\n<script type="module">\n  console.log(this); //undefiend\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 作用域\n\n\x3c!-- 模块都有独立的顶级作用域，下面的模块不能互相访问 --\x3e\n<script type="module">\n  let hd = "houdunren.com";\n<\/script>\n\n<script type="module">\n  alert(hd); // Error\n<\/script>\n\n\x3c!-- 单独文件作用域也是独立的 --\x3e\n<script type="module" src="1.1.js"><\/script>\n<script type="module" src="1.2.js"><\/script>\n\n\x3c!-- # 1.1.js --\x3e\nlet hd = "houdunren";\n\n\x3c!-- # 1.2.js --\x3e\nconsole.log(hd)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 预解析\n\n\x3c!-- 引入多入hd.js 脚本时只执行一次 --\x3e\n<script type="module" src="hd.js"><\/script>\n<script type="module" src="hd.js"><\/script>\n\n\x3c!-- #hd.js内容如下 --\x3e\nconsole.log("houdunren.com");\n\n\x3c!-- 导入多次 hd.js 时只解析一次 --\x3e\n<script type="module">\n  import "./hd.js";\n  import "./hd.js";\n<\/script>\n\n\x3c!-- # hd.js内容如下 --\x3e\nconsole.log("houdunren.com");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# define module\n\n * 原文\n\nlet module = (function() {\n  //模块列表集合\n  const moduleLists = {};\n  function define(name, modules, action) {\n    modules.map((m, i) => {\n      modules[i] = moduleLists[m];\n    });\n    //执行并保存模块\n    moduleLists[name] = action.apply(null, modules);\n  }\n\n  return { define };\n})();\n\n//声明模块不依赖其它模块\nmodule.define("a", [], function() {\n  return {\n    show() {\n      console.log("A module func");\n    }\n  };\n});\n\n//声明模块时依赖其它模块\nmodule.define("b", ["a"], function(f) {\n  f.show();\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# amd-requirejs\n\n * 异步加载模块,依赖前置,提前执行\n * define 定义模块define([\'require\',\'foo\'],function(){return foo;});\n * require 加载模块(依赖前置) require([\'foo\',\'bar\'],function(foo,bar){});\n\n// a.js\ndefine(function() {\n  return {\n    a: "hello world"\n  };\n});\n// b.js\nrequire(["./a.js"], function(moduleA) {\n  console.log(moduleA.a); // 打印出：hello world\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# cmd-seajs\n\n * define 定义 exports 导出 define(function(require,exports,module){});moduel 上存储了当前模块上的一些对象。\n * requre(./a)直接导入。require.async 异步导入。\n * 同步加载,依赖就近,延迟执行。\n\n// a.js\ndefine(function(require, exports, module) {\n  exports.a = "hello world";\n});\n// b.js\ndefine(function(require, exports, module) {\n  var moduleA = require("./a.js");\n  console.log(moduleA.a); // 打印出：hello world\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# UMD\n\n * 兼容 AMD 和 commonJS 规范的同时\n\n(function(root, factory) {\n  if (typeof define === "function" && define.amd) {\n    //AMD\n    define(["jquery"], factory);\n  } else if (typeof exports === "object") {\n    //Node, CommonJS之类的\n    module.exports = factory(require("jquery"));\n  } else {\n    //浏览器全局变量(root 即 window)\n    root.returnExports = factory(root.jQuery);\n  }\n})(this, function($) {\n  //方法\n  function myFunc() {}\n  //暴露公共方法\n  return myFunc;\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# ES6 module\n\n// a.js\nexport var m = 1;\nexport {};\nexport { n as m };\nexport default n;\n\n// b.js\nimport "./a.js";\nimport * as m from "./a.js";\nimport { n as v } from "./a.js";\nimport { n } from "./a.js";\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# commonJS\n\nmodule.export = {};\n\nlet fn = reqiure("");\n\n\n1\n2\n3\n',normalizedContent:'# 基本数据类型\n\n * number: 最大数字是 253-1\n * string\n * boolean\n * null\n * undefined\n * symbol\n * bigint: 大于 253的所有数字\n\n\n# 引用类型\n\n * object 、array 、function 、date 、math 、regexp 、json\n\n\n# boolean布尔\n\n * 类型转换：!!undefined --\x3e false\n * 布尔类型的值的转换规则\n\nundefined,null,false,0,nan,""  // 返回 false\n\n// 过滤数组中的这些值\n[ (undefined, null, false, 0, nan, "", "", "hello")].filter(item => item); // [\'hello\']\n\ntypeof null; // 返回 object\ntype undefined // 返回 undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * null是一个表示“空”的对象，转为数值时为 0\n * undefined是一个表示”此处无定义”的原始值，转为数值时为nan\n * void 0\n\n\n# javascript 中的包装类型\n\ntypeof new string(\'abc\')  // object\ntypeof new object(\'xxx\')  // object\ntypeof new boolean(false) // object\n\n\n1\n2\n3\n\n\n\n# 数据类型检测的方式有哪些\n\n * typeof, 可用于基本数据类型判断\n\ntypeof [];     // object\ntypeof {};     // object\ntypeof null;   // object\n\n\n1\n2\n3\n\n * instanceof, 只能正确判断引用数据类型，而不能判断基本数据类型\n\n2 instanceof number;     // false\ntrue instanceof boolean; // false\n\'str\' instanceof string; // false\n\n\n1\n2\n3\n\n * constructor, 不能判断 null与undefined, 也不能判断修改原型链后的数据类型\n\nfunction fn(){};\n// 修改原型链\nfn.prototype = new array();\nvar f = new fn();\n\nf.constructor===fn;    // false\nf.constructor===array; // true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * object.prototype.tostring.call, 使用对象的原型方法 tostring 来判断数据类型\n\n\n# 栈和队列(lifo/fifo)\n\n * 栈数据结构的访问规则是lifo(last-in-first-out,后进先出)\n * 队列数据结构的访问规则是fifo(first-in-first-out, 先进先出)\n\n\n# script标签async与defer的区别\n\n * 原文：彻底搞懂 async & defer\n * 两者都不会阻止 document 的解析\n * defer 会在 domcontentloaded 前依次执行\n * async 则是 onload 下载完立即执行，不一定是在 domcontentloaded 前\n\n\n# script标签module\n\n * 原文\n * 标签使用<script type="module"><\/script>\n * 模块路径\n\n\x3c!-- hd.js --\x3e\nexport let hd = { name: "后盾人" };\n\x3c!-- html --\x3e\n<script type="module">\n  import { hd } from "./hd.js";\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n\n * 延迟解析\n\n<body>\n  <script type="module">\n    console.log(document.queryselector("button")); //button\n  <\/script>\n  <script>\n    console.log(document.queryselector("button")); //undefined\n  <\/script>\n  <button>后盾人</button>\n</body>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 严格模式\n\n\x3c!-- 模块默认运行在严格模式，以下代码没有使用声明语句将报错 --\x3e\n<script type="module">\n  hd = "houdunren"; // error\n<\/script>\n\n<script>\n  console.log(this); //window\n<\/script>\n<script type="module">\n  console.log(this); //undefiend\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 作用域\n\n\x3c!-- 模块都有独立的顶级作用域，下面的模块不能互相访问 --\x3e\n<script type="module">\n  let hd = "houdunren.com";\n<\/script>\n\n<script type="module">\n  alert(hd); // error\n<\/script>\n\n\x3c!-- 单独文件作用域也是独立的 --\x3e\n<script type="module" src="1.1.js"><\/script>\n<script type="module" src="1.2.js"><\/script>\n\n\x3c!-- # 1.1.js --\x3e\nlet hd = "houdunren";\n\n\x3c!-- # 1.2.js --\x3e\nconsole.log(hd)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 预解析\n\n\x3c!-- 引入多入hd.js 脚本时只执行一次 --\x3e\n<script type="module" src="hd.js"><\/script>\n<script type="module" src="hd.js"><\/script>\n\n\x3c!-- #hd.js内容如下 --\x3e\nconsole.log("houdunren.com");\n\n\x3c!-- 导入多次 hd.js 时只解析一次 --\x3e\n<script type="module">\n  import "./hd.js";\n  import "./hd.js";\n<\/script>\n\n\x3c!-- # hd.js内容如下 --\x3e\nconsole.log("houdunren.com");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# define module\n\n * 原文\n\nlet module = (function() {\n  //模块列表集合\n  const modulelists = {};\n  function define(name, modules, action) {\n    modules.map((m, i) => {\n      modules[i] = modulelists[m];\n    });\n    //执行并保存模块\n    modulelists[name] = action.apply(null, modules);\n  }\n\n  return { define };\n})();\n\n//声明模块不依赖其它模块\nmodule.define("a", [], function() {\n  return {\n    show() {\n      console.log("a module func");\n    }\n  };\n});\n\n//声明模块时依赖其它模块\nmodule.define("b", ["a"], function(f) {\n  f.show();\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# amd-requirejs\n\n * 异步加载模块,依赖前置,提前执行\n * define 定义模块define([\'require\',\'foo\'],function(){return foo;});\n * require 加载模块(依赖前置) require([\'foo\',\'bar\'],function(foo,bar){});\n\n// a.js\ndefine(function() {\n  return {\n    a: "hello world"\n  };\n});\n// b.js\nrequire(["./a.js"], function(modulea) {\n  console.log(modulea.a); // 打印出：hello world\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# cmd-seajs\n\n * define 定义 exports 导出 define(function(require,exports,module){});moduel 上存储了当前模块上的一些对象。\n * requre(./a)直接导入。require.async 异步导入。\n * 同步加载,依赖就近,延迟执行。\n\n// a.js\ndefine(function(require, exports, module) {\n  exports.a = "hello world";\n});\n// b.js\ndefine(function(require, exports, module) {\n  var modulea = require("./a.js");\n  console.log(modulea.a); // 打印出：hello world\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# umd\n\n * 兼容 amd 和 commonjs 规范的同时\n\n(function(root, factory) {\n  if (typeof define === "function" && define.amd) {\n    //amd\n    define(["jquery"], factory);\n  } else if (typeof exports === "object") {\n    //node, commonjs之类的\n    module.exports = factory(require("jquery"));\n  } else {\n    //浏览器全局变量(root 即 window)\n    root.returnexports = factory(root.jquery);\n  }\n})(this, function($) {\n  //方法\n  function myfunc() {}\n  //暴露公共方法\n  return myfunc;\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# es6 module\n\n// a.js\nexport var m = 1;\nexport {};\nexport { n as m };\nexport default n;\n\n// b.js\nimport "./a.js";\nimport * as m from "./a.js";\nimport { n as v } from "./a.js";\nimport { n } from "./a.js";\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# commonjs\n\nmodule.export = {};\n\nlet fn = reqiure("");\n\n\n1\n2\n3\n',charsets:{cjk:!0},lastUpdated:"3/11/2023",lastUpdatedTimestamp:1678525665e3,createdTime:1647945545e3},{title:"使用commitizen格式化提交规范",frontmatter:{title:"使用commitizen格式化提交规范",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["commitizen"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/commitizen.html",relativePath:"frontend/issues/commitizen.md",key:"v-0c938f45",path:"/frontend/issues/commitizen.html",headers:[{level:2,title:"commitizen",slug:"commitizen",normalizedTitle:"commitizen",charIndex:71},{level:3,title:"Adapter",slug:"adapter",normalizedTitle:"adapter",charIndex:86},{level:3,title:"自定义 Adapter",slug:"自定义-adapter",normalizedTitle:"自定义 adapter",charIndex:1095},{level:2,title:"changelog",slug:"changelog",normalizedTitle:"changelog",charIndex:215},{level:2,title:"standard-version",slug:"standard-version",normalizedTitle:"standard-version",charIndex:2815},{level:2,title:"集成 npm",slug:"集成-npm",normalizedTitle:"集成 npm",charIndex:3811},{level:2,title:"Commitlint",slug:"commitlint",normalizedTitle:"commitlint",charIndex:4517},{level:2,title:"husky",slug:"husky",normalizedTitle:"husky",charIndex:6300},{level:2,title:"参考示例",slug:"参考示例",normalizedTitle:"参考示例",charIndex:6649},{level:3,title:"默认Adapter",slug:"默认adapter",normalizedTitle:"默认adapter",charIndex:6658},{level:3,title:"自定义校验",slug:"自定义校验",normalizedTitle:"自定义校验",charIndex:8974}],headersStr:"commitizen Adapter 自定义 Adapter changelog standard-version 集成 npm Commitlint husky 参考示例 默认Adapter 自定义校验",content:' * git commit 、CHANGELOG 和版本发布的标准自动化\n * 优雅的提交你的 Git Commit Message\n\n\n# commitizen\n\n\n# Adapter\n\n * Commitizen: 替代你的 git commit\n\nnpm install -g commitizen\n\n\n1\n\n * 方式一：在全局安装适配器（Adapter)\n\nnpm install -g cz-conventional-changelog\n\n# 项目根目录下添加 .czrc 配置文件\n{ "path": "cz-conventional-changelog" }\n\n# 使用 git commit 替换为 git cz\ngit cz\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 方式二：在项目安装适配器（Adapter)\n\ncommitizen init cz-conventional-changelog --save-dev --save-exact --force\n\n# commitizen 工具会自动在package.json中添加配置相应的配置\n\n  "config": {\n      "commitizen": {\n          "path": "cz-conventional-changelog"\n      }\n  }\n\n# 使用： package.json配置\n\n  "script": {\n      "commit": "git-cz",\n  },\n  "config": {\n      "commitizen": {\n        "path": "node_modules/cz-conventional-changelog"\n      }\n  }\n\n# 命令运行\nnpm run commit\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n * Adapter options\n\nfeat    # 新功能\nfix Bug   # 修复\ndocs    # 文档更新\nstyle     # 代码的格式，标点符号的更新\nrefactor  # 代码重构\nperf    # 性能优化\ntest    # 测试更新\nbuild   # 构建系统或者包依赖更新\nci CI   # 配置，脚本文件等更新\nchore   # 非 src 或者 测试文件的更新\nrevert  # commit 回退\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 自定义 Adapter\n\n * 安装 cz-customizable\n\nnpm i -g cz-customizable / npm i -D cz-customizable\n\n\n1\n\n * 修改 .czrc 或 package.json 中的 config 为\n\n# .czrc\n{ "path": "cz-customizable" }\n\n# package.json\n"config": {\n    "commitizen": {\n      "path": "node_modules/cz-customizable"\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 同时在~/ 或项目目录下创建 .cz-config.js 文件\n\n"use strict";\n\nmodule.exports = {\n  types: [\n    {\n      value: "feat",\n      name: "✨  feat:     A new feature"\n    },\n    {\n      value: "fix",\n      name: "🐞  fix:      A bug fix"\n    },\n    {\n      value: "refactor",\n      name:\n        "🛠  refactor: A code change that neither fixes a bug nor adds a feature"\n    },\n    {\n      value: "docs",\n      name: "📚  docs:     Documentation only changes"\n    },\n    {\n      value: "test",\n      name: "🏁  test:     Add missing tests or correcting existing tests"\n    },\n    {\n      value: "chore",\n      name:\n        "🗯  chore:    Changes that don\'t modify src or test files. Such as updating build tasks, package manager"\n    },\n    {\n      value: "style",\n      name:\n        "💅  style:    Code Style, Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"\n    },\n    {\n      value: "revert",\n      name: "⏪  revert:   Revert to a commit"\n    }\n  ],\n  scopes: [],\n  allowCustomScopes: true,\n  allowBreakingChanges: ["feat", "fix"]\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n\n# changelog\n\n * 安装 conventional-changelog-cli\n\nnpm install -g conventional-changelog-cli\n\n\n1\n\n * use\n\nconventional-changelog -p angular -i CHANGELOG.md -s\nconventional-changelog -p angular -i CHANGELOG.md -s -r 0\n\n\n1\n2\n\n\n\n# standard-version\n\n * standard-version\n * local\n\nnpm i --save-dev standard-version\n\n{\n  "scripts": {\n    "release": "standard-version"\n  }\n}\n\nnpm run release\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * global\n\nnpm i -g standard-version\n\nstandard-version\n\n\n1\n2\n3\n\n * release-as, -r 指定版本号\n\n主版本（major）,次版本（ minor） or 修订版（patch）\n\n$ standard-version -r minor\n# output 1.1.0\n$ standard-version -r 2.0.0\n# output 2.0.0\n$ standard-version -r 2.0.0-test\n# output 2.0.0-test\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * prerelease, -p 预发版本命名\n\n用来生成预发版本, 如果当期的版本号是 2.0.0，例如\n\n$ standard-version --prerelease alpha\n# output 2.0.0-alpha.0\n\n\n1\n2\n3\n4\n\n * tag-prefix, -t 版本 tag 前缀\n\n用来给生成 tag 标签添加前缀，例如如果前版本号为 2.0.0，则：\n\n$ standard-version --tag-prefix "stable-"\n# output tag: stable-v2.0.0\n\n\n1\n2\n3\n4\n\n * example\n\n"scripts": {\n  "publish:release": "standard-version",\n  "publish:minor": "standard-version --release-as minor",\n  "publish:major": "standard-version --release-as major",\n  "publish:beta": "standard-version --prerelease beta"\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 集成 npm\n\n * package\n\n"scripts": {\n    "release": "./scripts/release.sh",\n    "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s -r 0 && git add CHANGELOG.md && npm run changeissueurl",\n    "changeissueurl": "replace \'https://github.com/myproject/issues/\' \'https://redmine.example.com/\' CHANGELOG.md"\n},\n\n\n1\n2\n3\n4\n5\n\n * release.sh\n\n#!/bin/bash\n\n# Release branch\nmaster="master"\nprefix="DTinsight_v"\n\ngit pull origin $master\necho "Current pull origin $master."\n\n# Auto generate version number and tag\nstandard-version -r $release --tag-prefix $prefix\n\ngit push --follow-tags origin $master\n\necho "Git push origin $master"\necho "Release finished."\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# Commitlint\n\n * Commitlint: 校验你的 message\n * 安装 @commitlint/config-conventional\n\nnpm i -D @commitlint/config-conventional @commitlint/cli\n\n\n1\n\n * 在项目目录下创建配置文件 .commitlintrc.js\n\nmodule.exports = {\n  extends: ["@commitlint/config-conventional"],\n  rules: {\n    "body-leading-blank": [1, "always"],\n    "footer-leading-blank": [1, "always"],\n    "header-max-length": [2, "always", 72],\n    "scope-case": [2, "always", "lower-case"],\n    "subject-case": [\n      2,\n      "never",\n      ["sentence-case", "start-case", "pascal-case", "upper-case"]\n    ],\n    "subject-empty": [2, "never"],\n    "subject-full-stop": [2, "never", "."],\n    "type-case": [2, "always", "lower-case"],\n    "type-empty": [2, "never"],\n    "type-enum": [\n      2,\n      "always",\n      [\n        "build",\n        "chore",\n        "ci",\n        "docs",\n        "feat",\n        "fix",\n        "perf",\n        "refactor",\n        "revert",\n        "style",\n        "test"\n      ]\n    ]\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n * 针对自定义的 Adapter 进行 Lint\n\nnpm i -D @commitlint/cli\n\n# .commitlintrc.js 中写入\nmodule.exports = {\n\trules: {\n\t\t\'body-leading-blank\': [1, \'always\'],\n\t\t\'footer-leading-blank\': [1, \'always\'],\n\t\t\'header-max-length\': [2, \'always\', 72],\n\t\t\'scope-case\': [2, \'always\', \'lower-case\'],\n\t\t\'subject-case\': [\n\t\t\t2,\n\t\t\t\'never\',\n\t\t\t[\'sentence-case\', \'start-case\', \'pascal-case\', \'upper-case\'],\n\t\t],\n\t\t\'subject-empty\': [2, \'never\'],\n\t\t\'subject-full-stop\': [2, \'never\', \'.\'],\n\t\t\'type-case\': [2, \'always\', \'lower-case\'],\n\t\t\'type-empty\': [2, \'never\'],\n\t\t\'type-enum\': [\n\t\t\t2,\n\t\t\t\'always\',\n\t\t\t[\'feat\', \'fix\', \'refactor\', \'docs\', \'test\', \'chore\', \'style\', \'revert\'],\n\t\t],\n\t},\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# husky\n\n * husky\n * 安装 npm install husky --save-dev\n * 使用\n\n// package.json\n{\n  "husky": {\n    "hooks": {\n      "pre-commit": "npm test",\n      "pre-push": "npm test",\n    }\n  }\n}\n\n// 例如：\n"husky": {\n  "hooks": {\n    "pre-commit": "lint-staged",\n    "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 参考示例\n\n\n# 默认Adapter\n\n * package.json\n\n{\n  "name": "demo",\n  "version": "1.0.1",\n  "main": "index.js",\n  "scripts": {\n    "lint": "eslint --debug src/**/*.js",\n    "lint:write": "eslint src/**/*.js --fix",\n    "prettier": "prettier --write src/**/*.js",\n    "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s -r 0 && git add CHANGELOG.md",\n    "release": "standard-version"\n  },\n  "devDependencies": {\n    "@commitlint/cli": "^7.2.1",\n    "@commitlint/config-conventional": "^7.1.2",\n    "cz-conventional-changelog": "^2.1.0",\n    "eslint": "^5.12.0",\n    "eslint-config-standard": "^12.0.0",\n    "eslint-plugin-import": "^2.14.0",\n    "eslint-plugin-node": "^8.0.1",\n    "eslint-plugin-promise": "^4.0.1",\n    "eslint-plugin-standard": "^4.0.0",\n    "prettier": "^1.15.3",\n    "eslint-plugin-prettier": "^3.0.1",\n    "eslint-config-prettier": "^3.5.0",\n    "husky": "^1.3.1",\n    "lint-staged": "^8.1.0"\n  },\n  "config": {\n    "commitizen": {\n      "path": "./node_modules/cz-conventional-changelog"\n    }\n  },\n  "lint-staged": {\n    "*.(js|jsx)": ["npm run lint:write", "git add"]\n  },\n  "husky": {\n    "hooks": {\n      "pre-commit": "lint-staged",\n      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"\n    }\n  },\n  "dependencies": {\n    "standard-version": "^4.4.0"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n * .commitlintrc.js\n\nmodule.exports = {\n  extends: ["@commitlint/config-conventional"],\n  rules: {\n    "body-leading-blank": [1, "always"],\n    "footer-leading-blank": [1, "always"],\n    "header-max-length": [2, "always", 72],\n    "scope-case": [2, "always", "lower-case"],\n    "subject-case": [\n      2,\n      "never",\n      ["sentence-case", "start-case", "pascal-case", "upper-case"]\n    ],\n    "subject-empty": [2, "never"],\n    "subject-full-stop": [2, "never", "."],\n    "type-case": [2, "always", "lower-case"],\n    "type-empty": [2, "never"],\n    "type-enum": [\n      2,\n      "always",\n      [\n        "build",\n        "chore",\n        "ci",\n        "docs",\n        "feat",\n        "fix",\n        "perf",\n        "refactor",\n        "revert",\n        "style",\n        "test"\n      ]\n    ]\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 自定义校验\n\n * package.json\n\n{\n  "name": "demo",\n  "version": "1.0.4",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo dev branch",\n    "lint": "eslint --debug src/**/*.js",\n    "lint:write": "eslint src/**/*.js --fix",\n    "prettier": "prettier --write src/**/*.js",\n    "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s -r 0 && git add CHANGELOG.md",\n    "release": "standard-version"\n  },\n  "devDependencies": {\n    "@commitlint/cli": "^7.2.1",\n    "cz-customizable": "^5.3.0",\n    "eslint": "^5.12.0",\n    "eslint-config-prettier": "^3.5.0",\n    "eslint-config-standard": "^12.0.0",\n    "eslint-plugin-import": "^2.14.0",\n    "eslint-plugin-node": "^8.0.1",\n    "eslint-plugin-prettier": "^3.0.1",\n    "eslint-plugin-promise": "^4.0.1",\n    "eslint-plugin-standard": "^4.0.0",\n    "husky": "^1.3.1",\n    "lint-staged": "^8.1.0",\n    "prettier": "^1.15.3"\n  },\n  "config": {\n    "commitizen": {\n      "path": "node_modules/cz-customizable"\n    }\n  },\n  "lint-staged": {\n    "*.(js|jsx)": ["npm run lint:write", "git add"]\n  },\n  "husky": {\n    "hooks": {\n      "pre-commit": "lint-staged",\n      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n * .cz-config.js\n\n"use strict";\n\nmodule.exports = {\n  types: [\n    {\n      value: "feat",\n      name: "✨  feat:     A new feature"\n    },\n    {\n      value: "fix",\n      name: "🐞  fix:      A bug fix"\n    },\n    {\n      value: "refactor",\n      name:\n        "🛠  refactor: A code change that neither fixes a bug nor adds a feature"\n    },\n    {\n      value: "docs",\n      name: "📚  docs:     Documentation only changes"\n    },\n    {\n      value: "test",\n      name: "🏁  test:     Add missing tests or correcting existing tests"\n    },\n    {\n      value: "chore",\n      name:\n        "🗯  chore:    Changes that don\'t modify src or test files. Such as updating build tasks, package manager"\n    },\n    {\n      value: "style",\n      name:\n        "💅  style:    Code Style, Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"\n    },\n    {\n      value: "revert",\n      name: "⏪  revert:   Revert to a commit"\n    }\n  ],\n  allowCustomScopes: true\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n * .commitlintrc.js\n\nmodule.exports = {\n  rules: {\n    "body-leading-blank": [1, "always"],\n    "footer-leading-blank": [1, "always"],\n    "header-max-length": [2, "always", 72],\n    "scope-case": [2, "always", "lower-case"],\n    "subject-case": [\n      2,\n      "never",\n      ["sentence-case", "start-case", "pascal-case", "upper-case"]\n    ],\n    "subject-empty": [2, "never"],\n    "subject-full-stop": [2, "never", "."],\n    "type-case": [2, "always", "lower-case"],\n    "type-empty": [2, "never"],\n    "type-enum": [\n      2,\n      "always",\n      ["feat", "fix", "refactor", "docs", "test", "chore", "style", "revert"]\n    ]\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n',normalizedContent:' * git commit 、changelog 和版本发布的标准自动化\n * 优雅的提交你的 git commit message\n\n\n# commitizen\n\n\n# adapter\n\n * commitizen: 替代你的 git commit\n\nnpm install -g commitizen\n\n\n1\n\n * 方式一：在全局安装适配器（adapter)\n\nnpm install -g cz-conventional-changelog\n\n# 项目根目录下添加 .czrc 配置文件\n{ "path": "cz-conventional-changelog" }\n\n# 使用 git commit 替换为 git cz\ngit cz\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 方式二：在项目安装适配器（adapter)\n\ncommitizen init cz-conventional-changelog --save-dev --save-exact --force\n\n# commitizen 工具会自动在package.json中添加配置相应的配置\n\n  "config": {\n      "commitizen": {\n          "path": "cz-conventional-changelog"\n      }\n  }\n\n# 使用： package.json配置\n\n  "script": {\n      "commit": "git-cz",\n  },\n  "config": {\n      "commitizen": {\n        "path": "node_modules/cz-conventional-changelog"\n      }\n  }\n\n# 命令运行\nnpm run commit\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n * adapter options\n\nfeat    # 新功能\nfix bug   # 修复\ndocs    # 文档更新\nstyle     # 代码的格式，标点符号的更新\nrefactor  # 代码重构\nperf    # 性能优化\ntest    # 测试更新\nbuild   # 构建系统或者包依赖更新\nci ci   # 配置，脚本文件等更新\nchore   # 非 src 或者 测试文件的更新\nrevert  # commit 回退\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 自定义 adapter\n\n * 安装 cz-customizable\n\nnpm i -g cz-customizable / npm i -d cz-customizable\n\n\n1\n\n * 修改 .czrc 或 package.json 中的 config 为\n\n# .czrc\n{ "path": "cz-customizable" }\n\n# package.json\n"config": {\n    "commitizen": {\n      "path": "node_modules/cz-customizable"\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 同时在~/ 或项目目录下创建 .cz-config.js 文件\n\n"use strict";\n\nmodule.exports = {\n  types: [\n    {\n      value: "feat",\n      name: "✨  feat:     a new feature"\n    },\n    {\n      value: "fix",\n      name: "🐞  fix:      a bug fix"\n    },\n    {\n      value: "refactor",\n      name:\n        "🛠  refactor: a code change that neither fixes a bug nor adds a feature"\n    },\n    {\n      value: "docs",\n      name: "📚  docs:     documentation only changes"\n    },\n    {\n      value: "test",\n      name: "🏁  test:     add missing tests or correcting existing tests"\n    },\n    {\n      value: "chore",\n      name:\n        "🗯  chore:    changes that don\'t modify src or test files. such as updating build tasks, package manager"\n    },\n    {\n      value: "style",\n      name:\n        "💅  style:    code style, changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"\n    },\n    {\n      value: "revert",\n      name: "⏪  revert:   revert to a commit"\n    }\n  ],\n  scopes: [],\n  allowcustomscopes: true,\n  allowbreakingchanges: ["feat", "fix"]\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n\n# changelog\n\n * 安装 conventional-changelog-cli\n\nnpm install -g conventional-changelog-cli\n\n\n1\n\n * use\n\nconventional-changelog -p angular -i changelog.md -s\nconventional-changelog -p angular -i changelog.md -s -r 0\n\n\n1\n2\n\n\n\n# standard-version\n\n * standard-version\n * local\n\nnpm i --save-dev standard-version\n\n{\n  "scripts": {\n    "release": "standard-version"\n  }\n}\n\nnpm run release\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * global\n\nnpm i -g standard-version\n\nstandard-version\n\n\n1\n2\n3\n\n * release-as, -r 指定版本号\n\n主版本（major）,次版本（ minor） or 修订版（patch）\n\n$ standard-version -r minor\n# output 1.1.0\n$ standard-version -r 2.0.0\n# output 2.0.0\n$ standard-version -r 2.0.0-test\n# output 2.0.0-test\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * prerelease, -p 预发版本命名\n\n用来生成预发版本, 如果当期的版本号是 2.0.0，例如\n\n$ standard-version --prerelease alpha\n# output 2.0.0-alpha.0\n\n\n1\n2\n3\n4\n\n * tag-prefix, -t 版本 tag 前缀\n\n用来给生成 tag 标签添加前缀，例如如果前版本号为 2.0.0，则：\n\n$ standard-version --tag-prefix "stable-"\n# output tag: stable-v2.0.0\n\n\n1\n2\n3\n4\n\n * example\n\n"scripts": {\n  "publish:release": "standard-version",\n  "publish:minor": "standard-version --release-as minor",\n  "publish:major": "standard-version --release-as major",\n  "publish:beta": "standard-version --prerelease beta"\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 集成 npm\n\n * package\n\n"scripts": {\n    "release": "./scripts/release.sh",\n    "changelog": "conventional-changelog -p angular -i changelog.md -s -r 0 && git add changelog.md && npm run changeissueurl",\n    "changeissueurl": "replace \'https://github.com/myproject/issues/\' \'https://redmine.example.com/\' changelog.md"\n},\n\n\n1\n2\n3\n4\n5\n\n * release.sh\n\n#!/bin/bash\n\n# release branch\nmaster="master"\nprefix="dtinsight_v"\n\ngit pull origin $master\necho "current pull origin $master."\n\n# auto generate version number and tag\nstandard-version -r $release --tag-prefix $prefix\n\ngit push --follow-tags origin $master\n\necho "git push origin $master"\necho "release finished."\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# commitlint\n\n * commitlint: 校验你的 message\n * 安装 @commitlint/config-conventional\n\nnpm i -d @commitlint/config-conventional @commitlint/cli\n\n\n1\n\n * 在项目目录下创建配置文件 .commitlintrc.js\n\nmodule.exports = {\n  extends: ["@commitlint/config-conventional"],\n  rules: {\n    "body-leading-blank": [1, "always"],\n    "footer-leading-blank": [1, "always"],\n    "header-max-length": [2, "always", 72],\n    "scope-case": [2, "always", "lower-case"],\n    "subject-case": [\n      2,\n      "never",\n      ["sentence-case", "start-case", "pascal-case", "upper-case"]\n    ],\n    "subject-empty": [2, "never"],\n    "subject-full-stop": [2, "never", "."],\n    "type-case": [2, "always", "lower-case"],\n    "type-empty": [2, "never"],\n    "type-enum": [\n      2,\n      "always",\n      [\n        "build",\n        "chore",\n        "ci",\n        "docs",\n        "feat",\n        "fix",\n        "perf",\n        "refactor",\n        "revert",\n        "style",\n        "test"\n      ]\n    ]\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n * 针对自定义的 adapter 进行 lint\n\nnpm i -d @commitlint/cli\n\n# .commitlintrc.js 中写入\nmodule.exports = {\n\trules: {\n\t\t\'body-leading-blank\': [1, \'always\'],\n\t\t\'footer-leading-blank\': [1, \'always\'],\n\t\t\'header-max-length\': [2, \'always\', 72],\n\t\t\'scope-case\': [2, \'always\', \'lower-case\'],\n\t\t\'subject-case\': [\n\t\t\t2,\n\t\t\t\'never\',\n\t\t\t[\'sentence-case\', \'start-case\', \'pascal-case\', \'upper-case\'],\n\t\t],\n\t\t\'subject-empty\': [2, \'never\'],\n\t\t\'subject-full-stop\': [2, \'never\', \'.\'],\n\t\t\'type-case\': [2, \'always\', \'lower-case\'],\n\t\t\'type-empty\': [2, \'never\'],\n\t\t\'type-enum\': [\n\t\t\t2,\n\t\t\t\'always\',\n\t\t\t[\'feat\', \'fix\', \'refactor\', \'docs\', \'test\', \'chore\', \'style\', \'revert\'],\n\t\t],\n\t},\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# husky\n\n * husky\n * 安装 npm install husky --save-dev\n * 使用\n\n// package.json\n{\n  "husky": {\n    "hooks": {\n      "pre-commit": "npm test",\n      "pre-push": "npm test",\n    }\n  }\n}\n\n// 例如：\n"husky": {\n  "hooks": {\n    "pre-commit": "lint-staged",\n    "commit-msg": "commitlint -e husky_git_params"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 参考示例\n\n\n# 默认adapter\n\n * package.json\n\n{\n  "name": "demo",\n  "version": "1.0.1",\n  "main": "index.js",\n  "scripts": {\n    "lint": "eslint --debug src/**/*.js",\n    "lint:write": "eslint src/**/*.js --fix",\n    "prettier": "prettier --write src/**/*.js",\n    "changelog": "conventional-changelog -p angular -i changelog.md -s -r 0 && git add changelog.md",\n    "release": "standard-version"\n  },\n  "devdependencies": {\n    "@commitlint/cli": "^7.2.1",\n    "@commitlint/config-conventional": "^7.1.2",\n    "cz-conventional-changelog": "^2.1.0",\n    "eslint": "^5.12.0",\n    "eslint-config-standard": "^12.0.0",\n    "eslint-plugin-import": "^2.14.0",\n    "eslint-plugin-node": "^8.0.1",\n    "eslint-plugin-promise": "^4.0.1",\n    "eslint-plugin-standard": "^4.0.0",\n    "prettier": "^1.15.3",\n    "eslint-plugin-prettier": "^3.0.1",\n    "eslint-config-prettier": "^3.5.0",\n    "husky": "^1.3.1",\n    "lint-staged": "^8.1.0"\n  },\n  "config": {\n    "commitizen": {\n      "path": "./node_modules/cz-conventional-changelog"\n    }\n  },\n  "lint-staged": {\n    "*.(js|jsx)": ["npm run lint:write", "git add"]\n  },\n  "husky": {\n    "hooks": {\n      "pre-commit": "lint-staged",\n      "commit-msg": "commitlint -e husky_git_params"\n    }\n  },\n  "dependencies": {\n    "standard-version": "^4.4.0"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n * .commitlintrc.js\n\nmodule.exports = {\n  extends: ["@commitlint/config-conventional"],\n  rules: {\n    "body-leading-blank": [1, "always"],\n    "footer-leading-blank": [1, "always"],\n    "header-max-length": [2, "always", 72],\n    "scope-case": [2, "always", "lower-case"],\n    "subject-case": [\n      2,\n      "never",\n      ["sentence-case", "start-case", "pascal-case", "upper-case"]\n    ],\n    "subject-empty": [2, "never"],\n    "subject-full-stop": [2, "never", "."],\n    "type-case": [2, "always", "lower-case"],\n    "type-empty": [2, "never"],\n    "type-enum": [\n      2,\n      "always",\n      [\n        "build",\n        "chore",\n        "ci",\n        "docs",\n        "feat",\n        "fix",\n        "perf",\n        "refactor",\n        "revert",\n        "style",\n        "test"\n      ]\n    ]\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 自定义校验\n\n * package.json\n\n{\n  "name": "demo",\n  "version": "1.0.4",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo dev branch",\n    "lint": "eslint --debug src/**/*.js",\n    "lint:write": "eslint src/**/*.js --fix",\n    "prettier": "prettier --write src/**/*.js",\n    "changelog": "conventional-changelog -p angular -i changelog.md -s -r 0 && git add changelog.md",\n    "release": "standard-version"\n  },\n  "devdependencies": {\n    "@commitlint/cli": "^7.2.1",\n    "cz-customizable": "^5.3.0",\n    "eslint": "^5.12.0",\n    "eslint-config-prettier": "^3.5.0",\n    "eslint-config-standard": "^12.0.0",\n    "eslint-plugin-import": "^2.14.0",\n    "eslint-plugin-node": "^8.0.1",\n    "eslint-plugin-prettier": "^3.0.1",\n    "eslint-plugin-promise": "^4.0.1",\n    "eslint-plugin-standard": "^4.0.0",\n    "husky": "^1.3.1",\n    "lint-staged": "^8.1.0",\n    "prettier": "^1.15.3"\n  },\n  "config": {\n    "commitizen": {\n      "path": "node_modules/cz-customizable"\n    }\n  },\n  "lint-staged": {\n    "*.(js|jsx)": ["npm run lint:write", "git add"]\n  },\n  "husky": {\n    "hooks": {\n      "pre-commit": "lint-staged",\n      "commit-msg": "commitlint -e husky_git_params"\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n * .cz-config.js\n\n"use strict";\n\nmodule.exports = {\n  types: [\n    {\n      value: "feat",\n      name: "✨  feat:     a new feature"\n    },\n    {\n      value: "fix",\n      name: "🐞  fix:      a bug fix"\n    },\n    {\n      value: "refactor",\n      name:\n        "🛠  refactor: a code change that neither fixes a bug nor adds a feature"\n    },\n    {\n      value: "docs",\n      name: "📚  docs:     documentation only changes"\n    },\n    {\n      value: "test",\n      name: "🏁  test:     add missing tests or correcting existing tests"\n    },\n    {\n      value: "chore",\n      name:\n        "🗯  chore:    changes that don\'t modify src or test files. such as updating build tasks, package manager"\n    },\n    {\n      value: "style",\n      name:\n        "💅  style:    code style, changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"\n    },\n    {\n      value: "revert",\n      name: "⏪  revert:   revert to a commit"\n    }\n  ],\n  allowcustomscopes: true\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n * .commitlintrc.js\n\nmodule.exports = {\n  rules: {\n    "body-leading-blank": [1, "always"],\n    "footer-leading-blank": [1, "always"],\n    "header-max-length": [2, "always", 72],\n    "scope-case": [2, "always", "lower-case"],\n    "subject-case": [\n      2,\n      "never",\n      ["sentence-case", "start-case", "pascal-case", "upper-case"]\n    ],\n    "subject-empty": [2, "never"],\n    "subject-full-stop": [2, "never", "."],\n    "type-case": [2, "always", "lower-case"],\n    "type-empty": [2, "never"],\n    "type-enum": [\n      2,\n      "always",\n      ["feat", "fix", "refactor", "docs", "test", "chore", "style", "revert"]\n    ]\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647945545e3,createdTime:1647945545e3},{title:"文档属性兼容",frontmatter:{title:"文档属性兼容",date:"2022-02-20T00:00:00.000Z",sidebar:"auto",tags:["dom"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/document.html",relativePath:"frontend/issues/document.md",key:"v-5900f271",path:"/frontend/issues/document.html",headers:[{level:2,title:"getComputedStyle",slug:"getcomputedstyle",normalizedTitle:"getcomputedstyle",charIndex:2},{level:2,title:"pageX/pageY",slug:"pagex-pagey",normalizedTitle:"pagex/pagey",charIndex:709},{level:2,title:"screenX/screenY",slug:"screenx-screeny",normalizedTitle:"screenx/screeny",charIndex:1247},{level:2,title:"screen",slug:"screen",normalizedTitle:"screen",charIndex:1247},{level:2,title:"IntersectionObserver",slug:"intersectionobserver",normalizedTitle:"intersectionobserver",charIndex:1503},{level:2,title:"getBoundingClientRect",slug:"getboundingclientrect",normalizedTitle:"getboundingclientrect",charIndex:1870},{level:2,title:"clientHeight/clientWidth",slug:"clientheight-clientwidth",normalizedTitle:"clientheight/clientwidth",charIndex:2784},{level:2,title:"offsetHeight/offsetWidth",slug:"offsetheight-offsetwidth",normalizedTitle:"offsetheight/offsetwidth",charIndex:4300},{level:2,title:"offsetLeft/offsetTop",slug:"offsetleft-offsettop",normalizedTitle:"offsetleft/offsettop",charIndex:5508},{level:2,title:"scrollHeight/scrollWidth",slug:"scrollheight-scrollwidth",normalizedTitle:"scrollheight/scrollwidth",charIndex:6507},{level:2,title:"scrollTop/scrollLeft",slug:"scrolltop-scrollleft",normalizedTitle:"scrolltop/scrollleft",charIndex:7833},{level:2,title:"visibilityChange 判断页面可见状态",slug:"visibilitychange-判断页面可见状态",normalizedTitle:"visibilitychange 判断页面可见状态",charIndex:9786},{level:2,title:"监听屏幕旋转变化接口: orientationchange",slug:"监听屏幕旋转变化接口-orientationchange",normalizedTitle:"监听屏幕旋转变化接口: orientationchange",charIndex:11329},{level:2,title:"电池状态：navigator.getBattery",slug:"电池状态-navigator-getbattery",normalizedTitle:"电池状态：navigator.getbattery",charIndex:11895},{level:2,title:"让你的手机震动: window.navigator.vibrate",slug:"让你的手机震动-window-navigator-vibrate",normalizedTitle:"让你的手机震动: window.navigator.vibrate",charIndex:12555},{level:2,title:"当前语言：navigator.language",slug:"当前语言-navigator-language",normalizedTitle:"当前语言：navigator.language",charIndex:12945},{level:2,title:"联网状态：navigator.onLine",slug:"联网状态-navigator-online",normalizedTitle:"联网状态：navigator.online",charIndex:13388},{level:2,title:"页面可编辑：contentEditable",slug:"页面可编辑-contenteditable",normalizedTitle:"页面可编辑：contenteditable",charIndex:13767},{level:2,title:"浏览器活跃窗口监听: window.onblur & window.onfocus",slug:"浏览器活跃窗口监听-window-onblur-window-onfocus",normalizedTitle:"浏览器活跃窗口监听: window.onblur &amp; window.onfocus",charIndex:null},{level:2,title:"全屏 API（Fullscreen API）",slug:"全屏-api-fullscreen-api",normalizedTitle:"全屏 api（fullscreen api）",charIndex:14509},{level:2,title:"asyncToGenerator",slug:"asynctogenerator",normalizedTitle:"asynctogenerator",charIndex:15612},{level:2,title:"js在textarea和input光标处",slug:"js在textarea和input光标处",normalizedTitle:"js在textarea和input光标处",charIndex:16361},{level:2,title:"js在div中的光标处插入",slug:"js在div中的光标处插入",normalizedTitle:"js在div中的光标处插入",charIndex:17980}],headersStr:"getComputedStyle pageX/pageY screenX/screenY screen IntersectionObserver getBoundingClientRect clientHeight/clientWidth offsetHeight/offsetWidth offsetLeft/offsetTop scrollHeight/scrollWidth scrollTop/scrollLeft visibilityChange 判断页面可见状态 监听屏幕旋转变化接口: orientationchange 电池状态：navigator.getBattery 让你的手机震动: window.navigator.vibrate 当前语言：navigator.language 联网状态：navigator.onLine 页面可编辑：contentEditable 浏览器活跃窗口监听: window.onblur & window.onfocus 全屏 API（Fullscreen API） asyncToGenerator js在textarea和input光标处 js在div中的光标处插入",content:'# getComputedStyle\n\n * 访问属性的两种方式: div.style.width, 只能得到行内样式\n * 另外一种写法: div.style["width"] 引号内写属性的名字\n * 计算后样式的获取:\n\n// IE678:\n// element.currentStyle.属性名 或 element.currentStyle["属性名"]\ndemo.currentStyle.left;\ndemo.currentStyle["left"];\n\n\n1\n2\n3\n4\n\n * 兼容写法\n\n//window.getComputedStyle(element,伪元素)["属性名"]\n// 第二个参数：\n//    表示指定节点的伪元素（比如:before、:after、:first-line、:first-letter等）\nvar result = window.getComputedStyle(div, \':before\');\n// 一般情况下没有伪元素,我们用 null 来替代.\nwindow.getComputedStyle(demo, null)["left"]\n\nfunction getStyle(obj, attr) {\n  if (obj.currentStyle) {\n    return obj.currentStyle[attr]; //ie678\n  } else {\n    return getComputedStyle(obj, null)[attr]; //正常浏览器\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# pageX/pageY\n\n * 以当前文档的左上角为基准点\n\nvar pageY = event.pageY || event.clientY + document.documentElement.scrollTop;\n\nvar pageX = event.pageX || event.clientX + document.documentElement.scrollLeft;\n\n\n1\n2\n3\n\n * example\n\nlet doc = document.documentElement || document.body;\ndoc.addEventListener("click", function(event) {\n  var pageY = event.pageY || event.clientY + document.documentElement.scrollTop;\n  var pageX =\n    event.pageX || event.clientX + document.documentElement.scrollLeft;\n  console.log({ pageX, pageY });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# screenX/screenY\n\n * 当前屏幕的左上角为基准点\n\nlet doc = document.documentElement || document.body;\ndoc.addEventListener("click", function(event) {\n  console.log(event.screenX, event.screenY);\n});\n\n\n1\n2\n3\n4\n\n\n\n# screen\n\n// screen object\nconsole.log(screen);\n\n\n1\n2\n\n\n\n# IntersectionObserver\n\n * IntersectionObserver\n\nconst options = {\n  threshold: 1.0\n};\nconst target = document.querySelector(".target");\nconst callback = function(entries, observer) {\n  entries.forEach(entry => {\n    console.log(entry);\n  });\n};\n\nconst observer = new IntersectionObserver(callback, options);\nobserver.observe(target);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# getBoundingClientRect\n\n * example\n\n<div class="client"></div>\n<script>\n  let client = document.querySelector(".client");\n  client.getBoundingClientRect();\n<\/script>\n\n\n1\n2\n3\n4\n5\n\n\n// 网页元素左上角的视口横坐标\nElement.getBoundingClientRect().left\n// Element.offsetLeft\n\n// 网页元素左上角的视口纵坐标\nElement.getBoundingClientRect().top\n// Element.offsetTop\n\n// 网页元素左上角的网页横坐标\nElement.getBoundingClientRect().left + document.documentElement.scrollLeft\n// Element.offsetLeft + document.documentElement.scrollLeft\n\n// 网页元素左上角的网页纵坐标\nElement.getBoundingClientRect().top + document.documentElement.scrollTop\n// Element.offsetTop + document.documentElement.scrollTop\n\n// 视口高度\nwindow.innerHeight // 包括滚动条\ndocument.documentElement.clientHeight // 不包括滚动条\n\n// 视口宽度\nwindow.innerWidth // 包括滚动条\ndocument.documentElement.clientWidth // 不包括滚动条\n\nwindow.outerHeight\nwindow.outerWidth\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# clientHeight/clientWidth\n\n * clientHeight：表示的是可视区域的高度，不包含border和滚动条\n * clientTop：表示边框 border 的厚度，在未指定的情况下一般为 0\n\n\n\n * element example\n\n\x3c!-- css --\x3e\n.client{ width: 200px; height: 150px; border: 10px solid #cccccc; margin: 50px;\npadding: 30px; background-color: aqua; }\n\x3c!-- dom --\x3e\n<div class="client"></div>\n\x3c!-- js --\x3e\nlet dom = document.querySelector(".client");\nlet {clientHeight, clientWidth,clientLeft, clientTop} = dom;\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nDOM CLIENT     VALUE   EXPR\nclientWidth    260     width + 2* padding\nclientHeight   210     height + 2* padding\nclientLeft     10      border\nclientTop      10      boder\n\n * document 兼容写法\n\n// 正常浏览器（包括IE9+）\nwindow.innerWidth\n// 标准模式\ndocument.documentElement.clientWidth\n// 怪异模式\ndocument.body.clientWidth\n\n// client 兼容写法\nfunction client() {\n  if (window.innerWidth != null) {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight\n    }\n    // document.compatMode 用来判断当前浏览器采用的渲染方式\n  } else if (document.compatMode == "CSS1Compat") {\n    return {\n      width: document.documentElement.clientWidth,\n      height: document.documentElement.clientHeight\n    }\n  } else {\n    return {\n      width: document.body.clientWidth,\n      height: document.body.clientHeight\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n * document example\n\nlet doc = document.documentElement || document.body;\nlet { clientHeight, clientWidth } = doc;\nconsole.table({ clientHeight, clientWidth, clientLeft, clientTop });\n\n\n1\n2\n3\n\n\n\n# offsetHeight/offsetWidth\n\n * offsetHeight 和 style.height 的区别: style.height是字符串,offsetHeight是数值\n * demo.style.height是用来获取和设置行内样式的,offsetHeight是只读属性\n * demo.style.height只能获取和设置行内样式\n * offsetHeight = height+padding+border,包括 自身高度 内边距 边框 不包括 外边距\n * example\n\n\x3c!-- css --\x3e\nhtml,body{padding:0;margin:0} .client{ width: 200px; height: 150px; border: 10px\nsolid #cccccc; margin: 50px; padding: 30px; background-color: aqua; }\n\x3c!-- dom --\x3e\n<div class="client"></div>\n\x3c!-- js --\x3e\nlet dom = document.querySelector(".client"); let {offsetWidth, offsetHeight,\noffsetLeft, offsetTop} = dom;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nOFFSET         VALUE   EXPR\noffsetWidth    280     width + 2padding + 2 border\noffsetHeight   230     height + 2padding + 2 border\noffsetLeft     50      margin\noffsetTop      50      margin\n\n * 兼容写法\n\n// 网页内容实际宽高 (不包括工具栏和滚动条等边线）\nvar offsetWidth = document.documentElement.offsetWidth || document.body.offsetWidth;\nvar offsetHeight = document.documentElement.offsetHeight || document.body.offsetHeight;\n\n\n1\n2\n3\n\n * document example\n\n// css\nhtml{height: 500px;width: 1000px;border: 1px solid red;}\n// js\nlet doc = document.documentElement || document.body\nlet {offsetWidth , offsetHeight} = doc;\n\n\n1\n2\n3\n4\n5\n\n\n\n# offsetLeft/offsetTop\n\n * offsetLeft和style.left的区别:\n   \n   * 最大区别在于offsetLeft可以计算没有定位的盒子到左侧的距离,而style.left可能会出问题\n   * 如果没有给 HTML 元素指定 left 样式,则style.left返回的是空字符串.\n   * offsetLeft只读,而style.left可读写.\n   * offsetLeft返回的是数字,而style.left返回的是字符串,除了数字外还带有单位：px.\n\n * offsetLeft的构成:\n   \n   * 到最近的（带有定位的）父元素的 左侧/顶部 的距离\n   * 如果所有父级都没有定位则以 body 为准\n   * offsetLeft 是到父亲的padding左侧的距离（不是border更不是margin）\n\n * example\n\n\x3c!-- css --\x3e\nhtml,body{padding:0;margin:0} .client { width: 200px; height: 150px; margin:\n100px; background-color: pink; /* position: relative; */ } .box{\nbackground-color: red; width: 100px; height: 100px; }\n\x3c!-- html --\x3e\n<div class="client">\n  <div class="box"></div>\n</div>\n\x3c!-- js --\x3e\nlet dom = document.querySelector(".box"); let {offsetLeft, offsetTop} = dom;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * 父级无定位\n\nOFFSET       VALUE   EXPR\noffsetLeft   100     margin\noffsetTop    100     margin\n\n\n\n * 父级有定位\n\nOFFSET       VALUE   EXPR\noffsetLeft   100     margin\noffsetTop    100     margin\n\n\n\n * offset img\n\n\n\n\n# scrollHeight/scrollWidth\n\n * event window.onscroll = function () { //code }\n\n * dom 对象内部实际内容的高度/宽度\n\n<style>\n  html,\n  body {\n    padding: 0;\n    margin: 0;\n  }\n  .client {\n    width: 200px;\n    height: 150px;\n    margin: 100px;\n    background-color: pink;\n    overflow: auto;\n    padding: 10px;\n  }\n  .box {\n    background-color: red;\n    width: 300px;\n    height: 1000px;\n    padding: 50px;\n    border: 40px;\n  }\n</style>\n\x3c!-- html --\x3e\n<div class="client">\n  <div class="box"></div>\n</div>\n\x3c!-- js --\x3e\n<script>\n  let dom = document.querySelector(".box");\n  let { scrollWidth, scrollHeight } = dom;\n  console.table({ scrollWidth, scrollHeight });\n  // => 400 , 1100\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\nSCROLL         VALUE   EXPR\nscrollWidth    400     width + padding * 2\nscrollHeight   1100    width + padding *2\n\n * document\n\n// 网页内容实际宽高（包括工具栏和滚动条等边线）\nvar scrollWidth = document.documentElement.scrollWidth || document.body.scrollWidth;\nvar scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight;\n\n\n1\n2\n3\n\n\n// css\nhtml{height: 5000px;width: 2000px;}\n// js\nlet doc = document.documentElement || document.body\nlet {scrollHeight, scrollWidth} = doc;\nconsole.table({scrollHeight, scrollWidth});\n// 5000 , 2000\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# scrollTop/scrollLeft\n\n * scrollTop和scrollLeft 被卷去部分的 顶部/左侧 到可视区域 顶部/左侧 的距离\n\n// 正常浏览器（除了ie678之外的浏览器）\nwindow.pageYOffset\n// 已经声明DTD（标准模式）\ndocument.documentElement.scrollTop\n// 未声明 DTD（怪异模式）\ndocument.body.scrollTop\n\n//页面滚动座标onscroll\n//scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\nfunction scroll() {\n  if (window.pageYOffset != null) {\n    //正常浏览器\n    return {\n      top: window.pageYOffset,\n      left: window.pageXOffset\n    }\n  } else if (document.compatMode == "CSS1Compat") {\n    //有DTD的网页\n    return {\n      top: document.documentElement.scrollTop,\n      left: document.documentElement.scrollLeft\n    }\n  } else {\n    //没有DTD的\n    return {\n      top: document.body.scrollTop,\n      left: document.body.scrollLeft\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n\n * document example\n\nlet doc = document.documentElement || document.body;\nwindow.addEventListener("scroll", function() {\n  let { scrollTop, scrollLeft } = doc;\n  console.table({ scrollTop, scrollLeft });\n});\n\n\n1\n2\n3\n4\n5\n\n * dom example\n\n<style>\n  html,\n  body {\n    padding: 0;\n    margin: 0;\n  }\n  .client {\n    width: 200px;\n    height: 150px;\n    margin: 100px;\n    background-color: pink;\n    overflow: auto;\n    padding: 10px;\n  }\n  .box {\n    background-color: red;\n    width: 300px;\n    height: 1000px;\n    padding: 50px;\n    border: 40px;\n  }\n</style>\n<div class="client">\n  <div class="box"></div>\n</div>\n<script>\n  let client = document.querySelector(".client");\n  client.addEventListener("scroll", function() {\n    let { scrollWidth, scrollHeight, scrollTop, scrollLeft } = client;\n    console.table({\n      scrollWidth,\n      scrollHeight,\n      scrollTop,\n      scrollLeft\n    });\n  });\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n * 页面滚动座标: window.scrollTo(xpos,ypos)窗体（左上角）滚动到页面这个座标position\n\n\n# visibilityChange 判断页面可见状态\n\n * 原文\n\nvar hidden, state, visibilityChange;\nif (typeof document.hidden !== "undefined") {\n  hidden = "hidden";\n  visibilityChange = "visibilitychange";\n  state = "visibilityState";\n} else if (typeof document.mozHidden !== "undefined") {\n  hidden = "mozHidden";\n  visibilityChange = "mozvisibilitychange";\n  state = "mozVisibilityState";\n} else if (typeof document.msHidden !== "undefined") {\n  hidden = "msHidden";\n  visibilityChange = "msvisibilitychange";\n  state = "msVisibilityState";\n} else if (typeof document.webkitHidden !== "undefined") {\n  hidden = "webkitHidden";\n  visibilityChange = "webkitvisibilitychange";\n  state = "webkitVisibilityState";\n}\n\n// 添加监听器，在title里显示状态变化\ndocument.addEventListener(\n  visibilityChange,\n  function() {\n    document.title = document[state];\n  },\n  false\n);\n\n// 初始化\ndocument.title = document[state];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n * js\n\nfunction getHidden (){\n    let prefixs = [\'webkit\',\'moz\',\'mos\',\'o\'];\n    if (\'hidden\' in document) return document.hidden;\n    for (let i = 0; i < prefixs.length; i++) {\n        if (`${prefixs[i]}Hidden` in document){\n            return document[`${prefixs[i]}Hidden`];\n        }\n    }\n    // not support\n    return null;\n}\n\nfunction pageHiddenHandler () {\n    let isHidden = getHidden();\n    // 改变页面title用户观察状态\n    document.title = isHidden ? \'藏起来了\' : \'闪现\';\n}\ndocument.addEventListener(\'visibilitychange\',pageHiddenHandler,false);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 监听屏幕旋转变化接口: orientationchange\n\n * js\n\nvar screenOrientation = function() {\n  let self = this;\n  let orientation =\n    screen.orientation || screen.mozOrientation || screen.msOrientation;\n  window.addEventListener(\n    "onorientationchange" in window ? "orientationchange" : "resize",\n    function() {\n      self.angle = orientation.angle;\n    }\n  );\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * css\n\n/* 竖屏 */\n@media screen and (orientation: portrait) {\n  /* some css code */\n}\n/* 横屏 */\n@media screen and (orientation: landscape) {\n  /* some css code */\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 电池状态：navigator.getBattery\n\nlet getBatteryInfo = function() {\n  let self = this;\n  if (navigator.getBattery) {\n    navigator.getBattery().then(function(battery) {\n      // 判断是否在充电\n      self.batteryInfo = battery.charging\n        ? `在充电 : 剩余 ${battery.level * 100}%`\n        : `没充电 : 剩余 ${battery.level * 100}%`;\n      // 电池充电状态改变事件\n      battery.addEventListener("chargingchange", function() {\n        self.batteryInfo = battery.charging\n          ? `在充电 : 剩余 ${battery.level * 100}%`\n          : `没充电 : 剩余 ${battery.level * 100}%`;\n      });\n    });\n  } else {\n    self.batteryInfo = "不支持电池状态接口";\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 让你的手机震动: window.navigator.vibrate\n\nlet vibrateFun = function() {\n  let self = this;\n  if (navigator.vibrate) {\n    navigator.vibrate([500, 500, 500, 500, 500, 500, 500, 500, 500, 500]);\n  } else {\n    self.vibrateInfo = "您的设备不支持震动";\n  }\n  // 清除震动\n  navigator.vibrate(0);\n  // 持续震动\n  setInterval(function() {\n    navigator.vibrate(200);\n  }, 500);\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 当前语言：navigator.language\n\nfunction getThisLang() {\n  const langList = ["cn", "hk", "tw", "en", "fr"];\n  const langListLen = langList.length;\n  const thisLang = (\n    navigator.language || navigator.browserLanguage\n  ).toLowerCase();\n  for (let i = 0; i < langListLen; i++) {\n    let lang = langList[i];\n    if (thisLang.includes(lang)) {\n      return lang;\n    } else {\n      return "en";\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 联网状态：navigator.onLine\n\nmounted(){\n    let self = this;\n    window.addEventListener(\'online\',  self.updateOnlineStatus, true);\n    window.addEventListener(\'offline\', self.updateOnlineStatus, true);\n},\nmethods: {\n    updateOnlineStatus: function(){\n        var self = this;\n        self.onLineInfo = navigator.onLine ? "online" : "offline";\n    },\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 页面可编辑：contentEditable\n\ndata:text/html, <html contenteditable>\n\n\n1\n\n\n\n# 浏览器活跃窗口监听: window.onblur & window.onfocus\n\nmounted(){\n  let self = this;\n  window.addEventListener(\'blur\',  self.doFlashTitle, true);\n  window.addEventListener(\'focus\', function () {\n      clearInterval(self.timer);\n      document.title = \'微信网页版\';\n  }, true);\n},\nmethods: {\n    doFlashTitle: function(){\n        var self = this;\n        self.timer = setInterval( () => {\n            if (!self.flashFlag) {\n                document.title = "微信网页版";\n            } else {\n                document.title = `微信（${self.infoNum}）`;\n            }\n            self.flashFlag = ! self.flashFlag\n        }, 500)\n    },\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 全屏 API（Fullscreen API）\n\nlet fullScreenFun = function() {\n  let self = this;\n  var fullscreenEnabled =\n    document.fullscreenEnabled ||\n    document.mozFullScreenEnabled ||\n    document.webkitFullscreenEnabled ||\n    document.msFullscreenEnabled;\n\n  if (fullscreenEnabled) {\n    let de = document.documentElement;\n    if (self.fullScreenInfo === "打开全屏") {\n      if (de.requestFullscreen) {\n        de.requestFullscreen();\n      } else if (de.mozRequestFullScreen) {\n        de.mozRequestFullScreen();\n      } else if (de.webkitRequestFullScreen) {\n        de.webkitRequestFullScreen();\n      }\n      self.fullScreenInfo = "退出全屏";\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen();\n      }\n      self.fullScreenInfo = "打开全屏";\n    }\n  } else {\n    self.fullScreenInfo = "浏览器当前不能全屏";\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# asyncToGenerator\n\nfunction asyncToGenerator(generatorFunc) {\n  return function() {\n    const gen = generatorFunc.apply(this, arguments);\n    return new Promise((resolve, reject) => {\n      function step(key, arg) {\n        let generatorResult;\n        try {\n          generatorResult = gen[key](arg);\n        } catch (error) {\n          return reject(error);\n        }\n        const { value, done } = generatorResult;\n        if (done) {\n          return resolve(value);\n        } else {\n          return Promise.resolve(value).then(\n            val => step("next", val),\n            err => step("throw", err)\n          );\n        }\n      }\n      step("next");\n    });\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# js在textarea和input光标处\n\n1.How to insert text into the textarea at the current cursor position? 2.Javascript实现点击插入内容到textarea光标处\n\n * html\n\n<form id="form1" name="form1" method="post" action="">\n    <label>\n        <textarea name="text" id="text" cols="45" rows="10">\n        这是测试内容，请在任意位置插入内容。\n        这是测试内容，请在任意位置插入内容。\n        这是测试内容，请在任意位置插入内容。\n        这是测试内容，请在任意位置插入内容。\n        这是测试内容，请在任意位置插入内容。\n        这是测试内容，请在任意位置插入内容。\n        </textarea>\n\n        <a id="insert" href="javascript:void(0);">code</a>\n    </label>\n</form>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * js\n\nvar text = document.getElementById(\'text\');\nvar insert = document.getElementById(\'insert\');\ninsert.onclick = function () {\n    insertAtCursor(text, this.innerHTML);\n};\n\nfunction insertAtCursor(myField, myValue) {\n    if (document.selection) {\n\n        myField.focus();\n        sel = document.selection.createRange();\n        sel.text = myValue;\n        sel.select();\n    } else if (myField.selectionStart || myField.selectionStart == \'0\') {\n\n        var startPos = myField.selectionStart;\n        var endPos = myField.selectionEnd;\n        var beforeValue = myField.value.substring(0, startPos);\n        var afterValue = myField.value.substring(endPos, myField.value.length);\n\n        myField.value = beforeValue + myValue + afterValue;\n\n        myField.selectionStart = startPos + myValue.length;\n        myField.selectionEnd = startPos + myValue.length;\n        myField.focus();\n    } else {\n        myField.value += myValue;\n        myField.focus();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# js在div中的光标处插入\n\n * html\n\n<div @input="input" ref="edit" class="edit" id="send-edit-box" contenteditable="true"></div>\n\n\n1\n\n * js\n\n/**\n * 支持 div 自定义的编辑框\n * @param {String} type  参考execCommand参数\n * @param {String} content 插入内容\n * @param {String} limitID 限制插入元素的ID\n */\nexport function insertAtCursor (type, content, limitID) {\n  let selection = window.getSelection();\n  let anchorNode = selection.anchorNode;\n  if (!limitID || anchorNode.id === limitID || anchorNode.parentNode.id === limitID) {\n    return document.execCommand(type, false, content);\n  }\n  return false;\n}\n\n/**\n * 支持 div 自定义的编辑框\n * @param {*} text\n */\nexport function insertTextAtCaret (text) {\n  var sel, range;\n  if (window.getSelection) {\n    sel = window.getSelection();\n    if (sel.getRangeAt && sel.rangeCount) {\n      range = sel.getRangeAt(0);\n      range.deleteContents();\n      range.insertNode( document.createTextNode(text) );\n    }\n  } else if (document.selection && document.selection.createRange) {\n    document.selection.createRange().text = text;\n  }\n}\n\n/**\n * 仅支持 input textarea\n * @param {dom} dom\n * @param {*} myValue\n */\nexport function insertAtCursorInput (dom, myValue) {\n  if (document.selection) {\n    // IE support\n    dom.focus();\n    var sel = document.selection.createRange();\n    sel.text = myValue;\n    sel.select();\n  } else if (dom.selectionStart || dom.selectionStart == \'0\') {\n    // MOZILLA/NETSCAPE support\n    var startPos = dom.selectionStart;\n    var endPos = dom.selectionEnd;\n    var beforeValue = dom.value.substring(0, startPos);\n    var afterValue = dom.value.substring(endPos, dom.value.length);\n    dom.value = beforeValue + myValue + afterValue;\n\n    dom.selectionStart = startPos + myValue.length;\n    dom.selectionEnd = startPos + myValue.length;\n    // dom.setSelectionRange(startPos, startPos + myValue.length);\n    dom.focus();\n  } else {\n    dom.value += myValue;\n    dom.focus();\n  }\n}\n\n/**\n * 支持 div 自定义的编辑框\n * @param {*} html\n */\nexport function pasteHtmlAtCaret  (html) {\n  var sel, range;\n  if (window.getSelection) {\n    // IE9 and non-IE\n    sel = window.getSelection();\n    if (sel.getRangeAt && sel.rangeCount) {\n      range = sel.getRangeAt(0);\n      range.deleteContents();\n\n      // Range.createContextualFragment() would be useful here but is\n      // only relatively recently standardized and is not supported in\n      // some browsers (IE9, for one)\n      var el = document.createElement(\'div\');\n      el.innerHTML = html;\n      var frag = document.createDocumentFragment(); var node; var lastNode;\n      while ((node = el.firstChild)) {\n        lastNode = frag.appendChild(node);\n      }\n      range.insertNode(frag);\n\n      // Preserve the selection\n      if (lastNode) {\n        range = range.cloneRange();\n        range.setStartAfter(lastNode);\n        range.collapse(true);\n        sel.removeAllRanges();\n        sel.addRange(range);\n      }\n    }\n  } else if (document.selection && document.selection.type !== \'Control\') {\n    // IE < 9\n    document.selection.createRange().pasteHTML(html);\n  }\n}\n\nfunction saveSelection() {\n    if (window.getSelection) {\n        sel = window.getSelection();\n        if (sel.getRangeAt && sel.rangeCount) {\n            return sel.getRangeAt(0);\n        }\n    } else if (document.selection && document.selection.createRange) {\n        return document.selection.createRange();\n    }\n    return null;\n}\n\nfunction restoreSelection(range) {\n    if (range) {\n        if (window.getSelection) {\n            sel = window.getSelection();\n            sel.removeAllRanges();\n            sel.addRange(range);\n        } else if (document.selection && range.select) {\n            range.select();\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n',normalizedContent:'# getcomputedstyle\n\n * 访问属性的两种方式: div.style.width, 只能得到行内样式\n * 另外一种写法: div.style["width"] 引号内写属性的名字\n * 计算后样式的获取:\n\n// ie678:\n// element.currentstyle.属性名 或 element.currentstyle["属性名"]\ndemo.currentstyle.left;\ndemo.currentstyle["left"];\n\n\n1\n2\n3\n4\n\n * 兼容写法\n\n//window.getcomputedstyle(element,伪元素)["属性名"]\n// 第二个参数：\n//    表示指定节点的伪元素（比如:before、:after、:first-line、:first-letter等）\nvar result = window.getcomputedstyle(div, \':before\');\n// 一般情况下没有伪元素,我们用 null 来替代.\nwindow.getcomputedstyle(demo, null)["left"]\n\nfunction getstyle(obj, attr) {\n  if (obj.currentstyle) {\n    return obj.currentstyle[attr]; //ie678\n  } else {\n    return getcomputedstyle(obj, null)[attr]; //正常浏览器\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# pagex/pagey\n\n * 以当前文档的左上角为基准点\n\nvar pagey = event.pagey || event.clienty + document.documentelement.scrolltop;\n\nvar pagex = event.pagex || event.clientx + document.documentelement.scrollleft;\n\n\n1\n2\n3\n\n * example\n\nlet doc = document.documentelement || document.body;\ndoc.addeventlistener("click", function(event) {\n  var pagey = event.pagey || event.clienty + document.documentelement.scrolltop;\n  var pagex =\n    event.pagex || event.clientx + document.documentelement.scrollleft;\n  console.log({ pagex, pagey });\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# screenx/screeny\n\n * 当前屏幕的左上角为基准点\n\nlet doc = document.documentelement || document.body;\ndoc.addeventlistener("click", function(event) {\n  console.log(event.screenx, event.screeny);\n});\n\n\n1\n2\n3\n4\n\n\n\n# screen\n\n// screen object\nconsole.log(screen);\n\n\n1\n2\n\n\n\n# intersectionobserver\n\n * intersectionobserver\n\nconst options = {\n  threshold: 1.0\n};\nconst target = document.queryselector(".target");\nconst callback = function(entries, observer) {\n  entries.foreach(entry => {\n    console.log(entry);\n  });\n};\n\nconst observer = new intersectionobserver(callback, options);\nobserver.observe(target);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# getboundingclientrect\n\n * example\n\n<div class="client"></div>\n<script>\n  let client = document.queryselector(".client");\n  client.getboundingclientrect();\n<\/script>\n\n\n1\n2\n3\n4\n5\n\n\n// 网页元素左上角的视口横坐标\nelement.getboundingclientrect().left\n// element.offsetleft\n\n// 网页元素左上角的视口纵坐标\nelement.getboundingclientrect().top\n// element.offsettop\n\n// 网页元素左上角的网页横坐标\nelement.getboundingclientrect().left + document.documentelement.scrollleft\n// element.offsetleft + document.documentelement.scrollleft\n\n// 网页元素左上角的网页纵坐标\nelement.getboundingclientrect().top + document.documentelement.scrolltop\n// element.offsettop + document.documentelement.scrolltop\n\n// 视口高度\nwindow.innerheight // 包括滚动条\ndocument.documentelement.clientheight // 不包括滚动条\n\n// 视口宽度\nwindow.innerwidth // 包括滚动条\ndocument.documentelement.clientwidth // 不包括滚动条\n\nwindow.outerheight\nwindow.outerwidth\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# clientheight/clientwidth\n\n * clientheight：表示的是可视区域的高度，不包含border和滚动条\n * clienttop：表示边框 border 的厚度，在未指定的情况下一般为 0\n\n\n\n * element example\n\n\x3c!-- css --\x3e\n.client{ width: 200px; height: 150px; border: 10px solid #cccccc; margin: 50px;\npadding: 30px; background-color: aqua; }\n\x3c!-- dom --\x3e\n<div class="client"></div>\n\x3c!-- js --\x3e\nlet dom = document.queryselector(".client");\nlet {clientheight, clientwidth,clientleft, clienttop} = dom;\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\ndom client     value   expr\nclientwidth    260     width + 2* padding\nclientheight   210     height + 2* padding\nclientleft     10      border\nclienttop      10      boder\n\n * document 兼容写法\n\n// 正常浏览器（包括ie9+）\nwindow.innerwidth\n// 标准模式\ndocument.documentelement.clientwidth\n// 怪异模式\ndocument.body.clientwidth\n\n// client 兼容写法\nfunction client() {\n  if (window.innerwidth != null) {\n    return {\n      width: window.innerwidth,\n      height: window.innerheight\n    }\n    // document.compatmode 用来判断当前浏览器采用的渲染方式\n  } else if (document.compatmode == "css1compat") {\n    return {\n      width: document.documentelement.clientwidth,\n      height: document.documentelement.clientheight\n    }\n  } else {\n    return {\n      width: document.body.clientwidth,\n      height: document.body.clientheight\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n * document example\n\nlet doc = document.documentelement || document.body;\nlet { clientheight, clientwidth } = doc;\nconsole.table({ clientheight, clientwidth, clientleft, clienttop });\n\n\n1\n2\n3\n\n\n\n# offsetheight/offsetwidth\n\n * offsetheight 和 style.height 的区别: style.height是字符串,offsetheight是数值\n * demo.style.height是用来获取和设置行内样式的,offsetheight是只读属性\n * demo.style.height只能获取和设置行内样式\n * offsetheight = height+padding+border,包括 自身高度 内边距 边框 不包括 外边距\n * example\n\n\x3c!-- css --\x3e\nhtml,body{padding:0;margin:0} .client{ width: 200px; height: 150px; border: 10px\nsolid #cccccc; margin: 50px; padding: 30px; background-color: aqua; }\n\x3c!-- dom --\x3e\n<div class="client"></div>\n\x3c!-- js --\x3e\nlet dom = document.queryselector(".client"); let {offsetwidth, offsetheight,\noffsetleft, offsettop} = dom;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\noffset         value   expr\noffsetwidth    280     width + 2padding + 2 border\noffsetheight   230     height + 2padding + 2 border\noffsetleft     50      margin\noffsettop      50      margin\n\n * 兼容写法\n\n// 网页内容实际宽高 (不包括工具栏和滚动条等边线）\nvar offsetwidth = document.documentelement.offsetwidth || document.body.offsetwidth;\nvar offsetheight = document.documentelement.offsetheight || document.body.offsetheight;\n\n\n1\n2\n3\n\n * document example\n\n// css\nhtml{height: 500px;width: 1000px;border: 1px solid red;}\n// js\nlet doc = document.documentelement || document.body\nlet {offsetwidth , offsetheight} = doc;\n\n\n1\n2\n3\n4\n5\n\n\n\n# offsetleft/offsettop\n\n * offsetleft和style.left的区别:\n   \n   * 最大区别在于offsetleft可以计算没有定位的盒子到左侧的距离,而style.left可能会出问题\n   * 如果没有给 html 元素指定 left 样式,则style.left返回的是空字符串.\n   * offsetleft只读,而style.left可读写.\n   * offsetleft返回的是数字,而style.left返回的是字符串,除了数字外还带有单位：px.\n\n * offsetleft的构成:\n   \n   * 到最近的（带有定位的）父元素的 左侧/顶部 的距离\n   * 如果所有父级都没有定位则以 body 为准\n   * offsetleft 是到父亲的padding左侧的距离（不是border更不是margin）\n\n * example\n\n\x3c!-- css --\x3e\nhtml,body{padding:0;margin:0} .client { width: 200px; height: 150px; margin:\n100px; background-color: pink; /* position: relative; */ } .box{\nbackground-color: red; width: 100px; height: 100px; }\n\x3c!-- html --\x3e\n<div class="client">\n  <div class="box"></div>\n</div>\n\x3c!-- js --\x3e\nlet dom = document.queryselector(".box"); let {offsetleft, offsettop} = dom;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * 父级无定位\n\noffset       value   expr\noffsetleft   100     margin\noffsettop    100     margin\n\n\n\n * 父级有定位\n\noffset       value   expr\noffsetleft   100     margin\noffsettop    100     margin\n\n\n\n * offset img\n\n\n\n\n# scrollheight/scrollwidth\n\n * event window.onscroll = function () { //code }\n\n * dom 对象内部实际内容的高度/宽度\n\n<style>\n  html,\n  body {\n    padding: 0;\n    margin: 0;\n  }\n  .client {\n    width: 200px;\n    height: 150px;\n    margin: 100px;\n    background-color: pink;\n    overflow: auto;\n    padding: 10px;\n  }\n  .box {\n    background-color: red;\n    width: 300px;\n    height: 1000px;\n    padding: 50px;\n    border: 40px;\n  }\n</style>\n\x3c!-- html --\x3e\n<div class="client">\n  <div class="box"></div>\n</div>\n\x3c!-- js --\x3e\n<script>\n  let dom = document.queryselector(".box");\n  let { scrollwidth, scrollheight } = dom;\n  console.table({ scrollwidth, scrollheight });\n  // => 400 , 1100\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\nscroll         value   expr\nscrollwidth    400     width + padding * 2\nscrollheight   1100    width + padding *2\n\n * document\n\n// 网页内容实际宽高（包括工具栏和滚动条等边线）\nvar scrollwidth = document.documentelement.scrollwidth || document.body.scrollwidth;\nvar scrollheight = document.documentelement.scrollheight || document.body.scrollheight;\n\n\n1\n2\n3\n\n\n// css\nhtml{height: 5000px;width: 2000px;}\n// js\nlet doc = document.documentelement || document.body\nlet {scrollheight, scrollwidth} = doc;\nconsole.table({scrollheight, scrollwidth});\n// 5000 , 2000\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# scrolltop/scrollleft\n\n * scrolltop和scrollleft 被卷去部分的 顶部/左侧 到可视区域 顶部/左侧 的距离\n\n// 正常浏览器（除了ie678之外的浏览器）\nwindow.pageyoffset\n// 已经声明dtd（标准模式）\ndocument.documentelement.scrolltop\n// 未声明 dtd（怪异模式）\ndocument.body.scrolltop\n\n//页面滚动座标onscroll\n//scrolltop = window.pageyoffset || document.documentelement.scrolltop || document.body.scrolltop || 0;\nfunction scroll() {\n  if (window.pageyoffset != null) {\n    //正常浏览器\n    return {\n      top: window.pageyoffset,\n      left: window.pagexoffset\n    }\n  } else if (document.compatmode == "css1compat") {\n    //有dtd的网页\n    return {\n      top: document.documentelement.scrolltop,\n      left: document.documentelement.scrollleft\n    }\n  } else {\n    //没有dtd的\n    return {\n      top: document.body.scrolltop,\n      left: document.body.scrollleft\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n\n * document example\n\nlet doc = document.documentelement || document.body;\nwindow.addeventlistener("scroll", function() {\n  let { scrolltop, scrollleft } = doc;\n  console.table({ scrolltop, scrollleft });\n});\n\n\n1\n2\n3\n4\n5\n\n * dom example\n\n<style>\n  html,\n  body {\n    padding: 0;\n    margin: 0;\n  }\n  .client {\n    width: 200px;\n    height: 150px;\n    margin: 100px;\n    background-color: pink;\n    overflow: auto;\n    padding: 10px;\n  }\n  .box {\n    background-color: red;\n    width: 300px;\n    height: 1000px;\n    padding: 50px;\n    border: 40px;\n  }\n</style>\n<div class="client">\n  <div class="box"></div>\n</div>\n<script>\n  let client = document.queryselector(".client");\n  client.addeventlistener("scroll", function() {\n    let { scrollwidth, scrollheight, scrolltop, scrollleft } = client;\n    console.table({\n      scrollwidth,\n      scrollheight,\n      scrolltop,\n      scrollleft\n    });\n  });\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n * 页面滚动座标: window.scrollto(xpos,ypos)窗体（左上角）滚动到页面这个座标position\n\n\n# visibilitychange 判断页面可见状态\n\n * 原文\n\nvar hidden, state, visibilitychange;\nif (typeof document.hidden !== "undefined") {\n  hidden = "hidden";\n  visibilitychange = "visibilitychange";\n  state = "visibilitystate";\n} else if (typeof document.mozhidden !== "undefined") {\n  hidden = "mozhidden";\n  visibilitychange = "mozvisibilitychange";\n  state = "mozvisibilitystate";\n} else if (typeof document.mshidden !== "undefined") {\n  hidden = "mshidden";\n  visibilitychange = "msvisibilitychange";\n  state = "msvisibilitystate";\n} else if (typeof document.webkithidden !== "undefined") {\n  hidden = "webkithidden";\n  visibilitychange = "webkitvisibilitychange";\n  state = "webkitvisibilitystate";\n}\n\n// 添加监听器，在title里显示状态变化\ndocument.addeventlistener(\n  visibilitychange,\n  function() {\n    document.title = document[state];\n  },\n  false\n);\n\n// 初始化\ndocument.title = document[state];\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n * js\n\nfunction gethidden (){\n    let prefixs = [\'webkit\',\'moz\',\'mos\',\'o\'];\n    if (\'hidden\' in document) return document.hidden;\n    for (let i = 0; i < prefixs.length; i++) {\n        if (`${prefixs[i]}hidden` in document){\n            return document[`${prefixs[i]}hidden`];\n        }\n    }\n    // not support\n    return null;\n}\n\nfunction pagehiddenhandler () {\n    let ishidden = gethidden();\n    // 改变页面title用户观察状态\n    document.title = ishidden ? \'藏起来了\' : \'闪现\';\n}\ndocument.addeventlistener(\'visibilitychange\',pagehiddenhandler,false);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 监听屏幕旋转变化接口: orientationchange\n\n * js\n\nvar screenorientation = function() {\n  let self = this;\n  let orientation =\n    screen.orientation || screen.mozorientation || screen.msorientation;\n  window.addeventlistener(\n    "onorientationchange" in window ? "orientationchange" : "resize",\n    function() {\n      self.angle = orientation.angle;\n    }\n  );\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * css\n\n/* 竖屏 */\n@media screen and (orientation: portrait) {\n  /* some css code */\n}\n/* 横屏 */\n@media screen and (orientation: landscape) {\n  /* some css code */\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 电池状态：navigator.getbattery\n\nlet getbatteryinfo = function() {\n  let self = this;\n  if (navigator.getbattery) {\n    navigator.getbattery().then(function(battery) {\n      // 判断是否在充电\n      self.batteryinfo = battery.charging\n        ? `在充电 : 剩余 ${battery.level * 100}%`\n        : `没充电 : 剩余 ${battery.level * 100}%`;\n      // 电池充电状态改变事件\n      battery.addeventlistener("chargingchange", function() {\n        self.batteryinfo = battery.charging\n          ? `在充电 : 剩余 ${battery.level * 100}%`\n          : `没充电 : 剩余 ${battery.level * 100}%`;\n      });\n    });\n  } else {\n    self.batteryinfo = "不支持电池状态接口";\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 让你的手机震动: window.navigator.vibrate\n\nlet vibratefun = function() {\n  let self = this;\n  if (navigator.vibrate) {\n    navigator.vibrate([500, 500, 500, 500, 500, 500, 500, 500, 500, 500]);\n  } else {\n    self.vibrateinfo = "您的设备不支持震动";\n  }\n  // 清除震动\n  navigator.vibrate(0);\n  // 持续震动\n  setinterval(function() {\n    navigator.vibrate(200);\n  }, 500);\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 当前语言：navigator.language\n\nfunction getthislang() {\n  const langlist = ["cn", "hk", "tw", "en", "fr"];\n  const langlistlen = langlist.length;\n  const thislang = (\n    navigator.language || navigator.browserlanguage\n  ).tolowercase();\n  for (let i = 0; i < langlistlen; i++) {\n    let lang = langlist[i];\n    if (thislang.includes(lang)) {\n      return lang;\n    } else {\n      return "en";\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 联网状态：navigator.online\n\nmounted(){\n    let self = this;\n    window.addeventlistener(\'online\',  self.updateonlinestatus, true);\n    window.addeventlistener(\'offline\', self.updateonlinestatus, true);\n},\nmethods: {\n    updateonlinestatus: function(){\n        var self = this;\n        self.onlineinfo = navigator.online ? "online" : "offline";\n    },\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 页面可编辑：contenteditable\n\ndata:text/html, <html contenteditable>\n\n\n1\n\n\n\n# 浏览器活跃窗口监听: window.onblur & window.onfocus\n\nmounted(){\n  let self = this;\n  window.addeventlistener(\'blur\',  self.doflashtitle, true);\n  window.addeventlistener(\'focus\', function () {\n      clearinterval(self.timer);\n      document.title = \'微信网页版\';\n  }, true);\n},\nmethods: {\n    doflashtitle: function(){\n        var self = this;\n        self.timer = setinterval( () => {\n            if (!self.flashflag) {\n                document.title = "微信网页版";\n            } else {\n                document.title = `微信（${self.infonum}）`;\n            }\n            self.flashflag = ! self.flashflag\n        }, 500)\n    },\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 全屏 api（fullscreen api）\n\nlet fullscreenfun = function() {\n  let self = this;\n  var fullscreenenabled =\n    document.fullscreenenabled ||\n    document.mozfullscreenenabled ||\n    document.webkitfullscreenenabled ||\n    document.msfullscreenenabled;\n\n  if (fullscreenenabled) {\n    let de = document.documentelement;\n    if (self.fullscreeninfo === "打开全屏") {\n      if (de.requestfullscreen) {\n        de.requestfullscreen();\n      } else if (de.mozrequestfullscreen) {\n        de.mozrequestfullscreen();\n      } else if (de.webkitrequestfullscreen) {\n        de.webkitrequestfullscreen();\n      }\n      self.fullscreeninfo = "退出全屏";\n    } else {\n      if (document.exitfullscreen) {\n        document.exitfullscreen();\n      } else if (document.mozcancelfullscreen) {\n        document.mozcancelfullscreen();\n      } else if (document.webkitcancelfullscreen) {\n        document.webkitcancelfullscreen();\n      }\n      self.fullscreeninfo = "打开全屏";\n    }\n  } else {\n    self.fullscreeninfo = "浏览器当前不能全屏";\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# asynctogenerator\n\nfunction asynctogenerator(generatorfunc) {\n  return function() {\n    const gen = generatorfunc.apply(this, arguments);\n    return new promise((resolve, reject) => {\n      function step(key, arg) {\n        let generatorresult;\n        try {\n          generatorresult = gen[key](arg);\n        } catch (error) {\n          return reject(error);\n        }\n        const { value, done } = generatorresult;\n        if (done) {\n          return resolve(value);\n        } else {\n          return promise.resolve(value).then(\n            val => step("next", val),\n            err => step("throw", err)\n          );\n        }\n      }\n      step("next");\n    });\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# js在textarea和input光标处\n\n1.how to insert text into the textarea at the current cursor position? 2.javascript实现点击插入内容到textarea光标处\n\n * html\n\n<form id="form1" name="form1" method="post" action="">\n    <label>\n        <textarea name="text" id="text" cols="45" rows="10">\n        这是测试内容，请在任意位置插入内容。\n        这是测试内容，请在任意位置插入内容。\n        这是测试内容，请在任意位置插入内容。\n        这是测试内容，请在任意位置插入内容。\n        这是测试内容，请在任意位置插入内容。\n        这是测试内容，请在任意位置插入内容。\n        </textarea>\n\n        <a id="insert" href="javascript:void(0);">code</a>\n    </label>\n</form>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * js\n\nvar text = document.getelementbyid(\'text\');\nvar insert = document.getelementbyid(\'insert\');\ninsert.onclick = function () {\n    insertatcursor(text, this.innerhtml);\n};\n\nfunction insertatcursor(myfield, myvalue) {\n    if (document.selection) {\n\n        myfield.focus();\n        sel = document.selection.createrange();\n        sel.text = myvalue;\n        sel.select();\n    } else if (myfield.selectionstart || myfield.selectionstart == \'0\') {\n\n        var startpos = myfield.selectionstart;\n        var endpos = myfield.selectionend;\n        var beforevalue = myfield.value.substring(0, startpos);\n        var aftervalue = myfield.value.substring(endpos, myfield.value.length);\n\n        myfield.value = beforevalue + myvalue + aftervalue;\n\n        myfield.selectionstart = startpos + myvalue.length;\n        myfield.selectionend = startpos + myvalue.length;\n        myfield.focus();\n    } else {\n        myfield.value += myvalue;\n        myfield.focus();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# js在div中的光标处插入\n\n * html\n\n<div @input="input" ref="edit" class="edit" id="send-edit-box" contenteditable="true"></div>\n\n\n1\n\n * js\n\n/**\n * 支持 div 自定义的编辑框\n * @param {string} type  参考execcommand参数\n * @param {string} content 插入内容\n * @param {string} limitid 限制插入元素的id\n */\nexport function insertatcursor (type, content, limitid) {\n  let selection = window.getselection();\n  let anchornode = selection.anchornode;\n  if (!limitid || anchornode.id === limitid || anchornode.parentnode.id === limitid) {\n    return document.execcommand(type, false, content);\n  }\n  return false;\n}\n\n/**\n * 支持 div 自定义的编辑框\n * @param {*} text\n */\nexport function inserttextatcaret (text) {\n  var sel, range;\n  if (window.getselection) {\n    sel = window.getselection();\n    if (sel.getrangeat && sel.rangecount) {\n      range = sel.getrangeat(0);\n      range.deletecontents();\n      range.insertnode( document.createtextnode(text) );\n    }\n  } else if (document.selection && document.selection.createrange) {\n    document.selection.createrange().text = text;\n  }\n}\n\n/**\n * 仅支持 input textarea\n * @param {dom} dom\n * @param {*} myvalue\n */\nexport function insertatcursorinput (dom, myvalue) {\n  if (document.selection) {\n    // ie support\n    dom.focus();\n    var sel = document.selection.createrange();\n    sel.text = myvalue;\n    sel.select();\n  } else if (dom.selectionstart || dom.selectionstart == \'0\') {\n    // mozilla/netscape support\n    var startpos = dom.selectionstart;\n    var endpos = dom.selectionend;\n    var beforevalue = dom.value.substring(0, startpos);\n    var aftervalue = dom.value.substring(endpos, dom.value.length);\n    dom.value = beforevalue + myvalue + aftervalue;\n\n    dom.selectionstart = startpos + myvalue.length;\n    dom.selectionend = startpos + myvalue.length;\n    // dom.setselectionrange(startpos, startpos + myvalue.length);\n    dom.focus();\n  } else {\n    dom.value += myvalue;\n    dom.focus();\n  }\n}\n\n/**\n * 支持 div 自定义的编辑框\n * @param {*} html\n */\nexport function pastehtmlatcaret  (html) {\n  var sel, range;\n  if (window.getselection) {\n    // ie9 and non-ie\n    sel = window.getselection();\n    if (sel.getrangeat && sel.rangecount) {\n      range = sel.getrangeat(0);\n      range.deletecontents();\n\n      // range.createcontextualfragment() would be useful here but is\n      // only relatively recently standardized and is not supported in\n      // some browsers (ie9, for one)\n      var el = document.createelement(\'div\');\n      el.innerhtml = html;\n      var frag = document.createdocumentfragment(); var node; var lastnode;\n      while ((node = el.firstchild)) {\n        lastnode = frag.appendchild(node);\n      }\n      range.insertnode(frag);\n\n      // preserve the selection\n      if (lastnode) {\n        range = range.clonerange();\n        range.setstartafter(lastnode);\n        range.collapse(true);\n        sel.removeallranges();\n        sel.addrange(range);\n      }\n    }\n  } else if (document.selection && document.selection.type !== \'control\') {\n    // ie < 9\n    document.selection.createrange().pastehtml(html);\n  }\n}\n\nfunction saveselection() {\n    if (window.getselection) {\n        sel = window.getselection();\n        if (sel.getrangeat && sel.rangecount) {\n            return sel.getrangeat(0);\n        }\n    } else if (document.selection && document.selection.createrange) {\n        return document.selection.createrange();\n    }\n    return null;\n}\n\nfunction restoreselection(range) {\n    if (range) {\n        if (window.getselection) {\n            sel = window.getselection();\n            sel.removeallranges();\n            sel.addrange(range);\n        } else if (document.selection && range.select) {\n            range.select();\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647925342e3,createdTime:1645441798e3},{title:"BOM与DOM事件",frontmatter:{title:"BOM与DOM事件",date:"2021-07-20T00:00:00.000Z",sidebar:"auto",tags:["element"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/dom.html",relativePath:"frontend/issues/dom.md",key:"v-3e8b35eb",path:"/frontend/issues/dom.html",headers:[{level:2,title:"浏览器内核",slug:"浏览器内核",normalizedTitle:"浏览器内核",charIndex:16},{level:2,title:"文档基本结构",slug:"文档基本结构",normalizedTitle:"文档基本结构",charIndex:231},{level:2,title:"文档兼容模式",slug:"文档兼容模式",normalizedTitle:"文档兼容模式",charIndex:705},{level:2,title:"document",slug:"document",normalizedTitle:"document",charIndex:239},{level:3,title:"节点集合属性",slug:"节点集合属性",normalizedTitle:"节点集合属性",charIndex:877},{level:3,title:"文档信息属性",slug:"文档信息属性",normalizedTitle:"文档信息属性",charIndex:1078},{level:2,title:"类型",slug:"类型",normalizedTitle:"类型",charIndex:733},{level:2,title:"获取 DOM 元素",slug:"获取-dom-元素",normalizedTitle:"获取 dom 元素",charIndex:2067},{level:2,title:"DOM常用属性",slug:"dom常用属性",normalizedTitle:"dom常用属性",charIndex:3203},{level:2,title:"节点对象属性",slug:"节点对象属性",normalizedTitle:"节点对象属性",charIndex:4419},{level:3,title:"Node.nodeValue",slug:"node-nodevalue",normalizedTitle:"node.nodevalue",charIndex:4430},{level:3,title:"Node.textContent",slug:"node-textcontent",normalizedTitle:"node.textcontent",charIndex:4481},{level:3,title:"Node.sibling 与 Node.previousSibling",slug:"node-sibling-与-node-previoussibling",normalizedTitle:"node.sibling 与 node.previoussibling",charIndex:4557},{level:3,title:"Node.parentNode",slug:"node-parentnode",normalizedTitle:"node.parentnode",charIndex:5704},{level:3,title:"Node.parentElement",slug:"node-parentelement",normalizedTitle:"node.parentelement",charIndex:5873},{level:3,title:"Node.childNodes",slug:"node-childnodes",normalizedTitle:"node.childnodes",charIndex:6072},{level:3,title:"Node.firstChild 与 Node.lastChild",slug:"node-firstchild-与-node-lastchild",normalizedTitle:"node.firstchild 与 node.lastchild",charIndex:6843},{level:3,title:"children",slug:"children",normalizedTitle:"children",charIndex:5524},{level:2,title:"DOM 节点对象的方法",slug:"dom-节点对象的方法",normalizedTitle:"dom 节点对象的方法",charIndex:8167},{level:3,title:"createElement",slug:"createelement",normalizedTitle:"createelement",charIndex:2677},{level:2,title:"节点的添加",slug:"节点的添加",normalizedTitle:"节点的添加",charIndex:8683},{level:3,title:"appendChild",slug:"appendchild",normalizedTitle:"appendchild",charIndex:2874},{level:3,title:"hasChildNodes",slug:"haschildnodes",normalizedTitle:"haschildnodes",charIndex:8925},{level:3,title:"insertBefore",slug:"insertbefore",normalizedTitle:"insertbefore",charIndex:2943},{level:3,title:"insertAdjacentHTML",slug:"insertadjacenthtml",normalizedTitle:"insertadjacenthtml",charIndex:2983},{level:3,title:"cloneNode",slug:"clonenode",normalizedTitle:"clonenode",charIndex:10869},{level:3,title:"removeChild",slug:"removechild",normalizedTitle:"removechild",charIndex:3171},{level:3,title:"replaceChild",slug:"replacechild",normalizedTitle:"replacechild",charIndex:11807},{level:3,title:"Node.contains",slug:"node-contains",normalizedTitle:"node.contains",charIndex:11915},{level:3,title:"isEqualNode",slug:"isequalnode",normalizedTitle:"isequalnode",charIndex:12142},{level:3,title:"节点的属性",slug:"节点的属性",normalizedTitle:"节点的属性",charIndex:12246},{level:3,title:"dataset 属性",slug:"dataset-属性",normalizedTitle:"dataset 属性",charIndex:12705},{level:2,title:"DocumentFragment",slug:"documentfragment",normalizedTitle:"documentfragment",charIndex:2040},{level:2,title:"Element.Node兼容",slug:"element-node兼容",normalizedTitle:"element.node兼容",charIndex:13741},{level:2,title:"BFC",slug:"bfc",normalizedTitle:"bfc",charIndex:15461},{level:3,title:"如何触发 BFC",slug:"如何触发-bfc",normalizedTitle:"如何触发 bfc",charIndex:15538},{level:2,title:"Flex",slug:"flex",normalizedTitle:"flex",charIndex:15721},{level:2,title:"position 定位",slug:"position-定位",normalizedTitle:"position 定位",charIndex:16375},{level:3,title:"盒子模型分类",slug:"盒子模型分类",normalizedTitle:"盒子模型分类",charIndex:16766},{level:3,title:"css3 盒模型属性",slug:"css3-盒模型属性",normalizedTitle:"css3 盒模型属性",charIndex:17017}],headersStr:"浏览器内核 文档基本结构 文档兼容模式 document 节点集合属性 文档信息属性 类型 获取 DOM 元素 DOM常用属性 节点对象属性 Node.nodeValue Node.textContent Node.sibling 与 Node.previousSibling Node.parentNode Node.parentElement Node.childNodes Node.firstChild 与 Node.lastChild children DOM 节点对象的方法 createElement 节点的添加 appendChild hasChildNodes insertBefore insertAdjacentHTML cloneNode removeChild replaceChild Node.contains isEqualNode 节点的属性 dataset 属性 DocumentFragment Element.Node兼容 BFC 如何触发 BFC Flex position 定位 盒子模型分类 css3 盒模型属性",content:'MDN/Element\n\n\n# 浏览器内核\n\nsafari    Webkit\nchrome    Blink (current) / Webkit (pre)   -webkit-\nchromium  Blink\nfirefox   Gecko   -moz-\nie        Trident -ms-\nedge      EdgeHTML\nOpera12.17及更早版本曾经采用的内核  Presto  -o-\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 文档基本结构\n\ndocument.head; // 文档的头标签\ntypeof document.head; // object\n\ndocument.title; // 文档标题\ntypeof document.title; // string\n\ndocument.body; // 文档的body标签\ntypeof document.body; // object\n\ndocument.documentElement; // 文档的根节点 注意：没有document.html这个东西\ntypeof document.documentElement; // object\n\ndocument.html; // 这个是错的!!!\n\ndocument.defaultView === window; // true\ndocument.activeElement; // 属性返回当前文档中获得焦点的那个元素\ndocument.defaultView;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 文档兼容模式\n\n * document type声明文档类型 DTD：<!DOCTYPE html>\n * BackCompat 未声明 DTD(怪异模式)firefox\n * CSS1Compat 已经声明 DTD(标准模式)chrome ,ie\n * document.compatMode 获取文档类型\n\n\n# document\n\n\n# 节点集合属性\n\n * document.links属性返回当前文档所有设定了 href 属性的 a 及 area 元素\n * document.images属性返回页面所有图片元素(即 img 标签)\n * document.scripts属性返回当前文档的所有脚本(即 script 标签)\n * document.styleSheets属性返回一个类似数组的对象,代表当前网页的所有样式表\n\n\n# 文档信息属性\n\n * document.documentURI属性和document.URL属性都返回一个字符串,表示当前文档的网址\n\n * documentURI属性可用于所有文档(包括 XML 文档),URL 属性只能用于 HTML 文档\n\n * document.domain属性返回当前文档的域名\n\n * document.lastModified属性返回当前文档最后修改的时间戳,格式为字符串\n\n * document.title属性返回当前文档的标题,该属性是可写的\n\n * document.referrer\n\n * document.characterSet属性返回渲染当前文档的字符集 //UTF-8\n\n * document.readyState属性返回当前文档的状态\n\n * 三种可能的值:\n   \n   * loading：加载 HTML 代码阶段(尚未完成解析)\n   * interactive：加载外部资源阶段时\n   * complete：加载完成时\n\n * document.designMode属性控制当前文档是否可编辑\n\n * document.implementation属性返回一个对象,用来甄别当前环境部署了哪些 DOM 相关接口\n\n * implementation属性的hasFeature方法,可以判断当前环境是否部署了特定版本的特定接口\n\ndocument.implementation.hasFeature("HTML", "2.0"); // true\n\ndocument.implementation.hasFeature("MutationEvents", "2.0"); // true\n\n\n1\n2\n3\n\n * document.cookie属性用来操作浏览器 Cookie\n\n\n# 类型\n\n * Document：整个文档树的顶层节点\n * DocumentType：doctype 标签(比如<!DOCTYPE html>)\n * Element：网页的各种 HTML 标签(比如<body>、<a>等)\n * Attribute：网页元素的属性(比如class="right")\n * Text：标签之间或标签包含的文本\n * Comment：注释\n * DocumentFragment：文档的片段\n\n\n# 获取 DOM 元素\n\n * 获取节点\n\ndocument.querySelector("#demo"); //只返回匹配的第一个元素dom  html5\n\ndocument.querySelectorAll(".test"); // html5\n\n// 通过id号来获取元素，返回一个元素对象\ndocument.getElementById(idName)\n\n// 通过name属性获取id号，返回元素对象数组\ndocument.getElementsByName(name)\n\n// 通过class来获取元素，返回元素对象数组\ndocument.getElementsByClassName(className)\n\n// 通过标签名获取元素，返回元素对象数组\ndocument.getElementsByTagName(tagName)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 获取/设置元素的属性值\n\n// 括号传入属性名，返回对应属性的属性值\nelement.getAttribute(attributeName)\n\n// 传入属性名及设置的值\nelement.setAttribute(attributeName,attributeValue)\n\n\n1\n2\n3\n4\n5\n\n * 创建节点Node\n\n// 创建一个html元素，这里以创建h3元素为例\ndocument.createElement("h3")\n\n// 创建一个文本节点；\ndocument.createTextNode(String);\n\n// 创建一个属性节点，这里以创建class属性为例\ndocument.createAttribute("class");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 增添节点\n\n// 往element内部最后面添加一个节点，参数是节点类型\nelement.appendChild(Node);\n\n// 在element内部的中在existingNode前面插入newNode\nelelment.insertBefore(newNode,existingNode);\n\n// insertAdjacentHTML: (beforebegin | afterbegin | beforeend | afterend)\nelement.insertAdjacentHTML(position, text)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 删除节点\n\n//删除当前节点下指定的子节点，删除成功返回该被删除的节点，否则返回null\nelement.removeChild(Node)\n\n\n\n1\n2\n3\n\n\n\n# DOM常用属性\n\n * 获取当前元素的父节点\n\n// 返回当前元素的父节点对象\nelement.parentNode\n\n\n1\n2\n\n * 获取当前元素的子节点\n\n// 返回当前元素所有子元素节点对象，只返回HTML节点\nelement.chlidren\n\n// 返回当前元素多有子节点，包括文本，HTML，属性节点。（回车也会当做一个节点）\nelement.chilidNodes\n\n// 返回当前元素的第一个子节点对象\nelement.firstChild\n\n// 返回当前元素的最后一个子节点对象\nelement.lastChild\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 获取当前元素的同级元素\n\n// 返回当前元素的下一个同级元素 没有就返回null\nelement.nextSibling\n\n// 返回当前元素上一个同级元素 没有就返回 null\nelement.previousSibling\n\n\n1\n2\n3\n4\n5\n\n * 获取当前元素的文本\n\n// 返回元素的所有文本，包括html代码\nelement.innerHTML\n\n// 返回当前元素的自身及子代所有文本值，只是文本内容，不包括html代码\nelement.innerText\n\n\n1\n2\n3\n4\n5\n\n * 获取当前节点的节点类型\n\n类型                       NODENAME             NODETYPE\nELEMENT_NODE             大写的 HTML 元素名         1\nATTRIBUTE_NODE           Attr.name            2\nTEXT_NODE                #text                3\nCOMMENT_NODE             #comment             8\nDOCUMENT_NODE            #document            9\nDOCUMENT_TYPE_NODE       DocumentType.name    10\nDOCUMENT_FRAGMENT_NODE   #document-fragment   11\n\ndocument.nodeName; // "#document"\ndocument.nodeType; // 9\ndocument.querySelector("a").nodeType === 1; // true\ndocument.querySelector("a").nodeType === Node.ELEMENT_NODE; // true\n\n\n1\n2\n3\n4\n\n * 设置样式\n\n// 设置元素的样式时使用style\nelement.style.color="#eea";\n\n\n1\n2\n\n\n\n# 节点对象属性\n\n\n# Node.nodeValue\n\n * 返回一个字符串,表示当前节点本身的文本值,该属性可读写\n\n\n# Node.textContent\n\n * 返回当前节点和它的所有后代节点的文本内容\n * 自动忽略当前节点内部的HTML标签,返回所有文本内容\n\n\n# Node.sibling 与 Node.previousSibling\n\n * Node.nextSibling属性返回紧跟在当前节点后面的第一个同级节点\n * Node.previousSibling属性返回当前节点前面的、距离最近的一个同级节点\n * nextSibling ：IE678 (下一个兄弟节点)\n * 在谷歌火狐中也有这个方法,只不过是得到换行.\n * nextElementSibling ：火狐谷歌 IE9-11 (下一个兄弟节点)\n * 兼容写法：b.nextElementSibling || b.nextSibling\n\n<div class="box"></div>\n<div class="box" id="box"></div>\n<div class="box"></div>\n//1.获取id名为box的盒子.\nvar b = document.getElementById("box");\n//2.通过兄弟节点的方式获得下盒子\nvar n = b.nextElementSibling || b.nextSibling;\n//3.更改背景色\nn.style.backgroundColor = "purple";\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * previousSibling ：IE678 (上一个兄弟节点)\n * 在谷歌火狐中也有这个方法,只不过是得到换行.\n * previousElementSibling ：火狐谷歌 IE9-11 (上一个兄弟节点)\n * 兼容写法：b.previousElementSibling || b.previousSibling\n\n//1.获取id名为box的盒子.\nvar b = document.getElementById("box");\n//2.兄弟节点的方式获得上盒子\nvar m = b.previousElementSibling || b.previousSibling;\n//3.更改背景色\nm.style.backgroundColor = "purple";\n\n// 获取所有的兄弟节点\nfunction siblings(elm) {\n  var a = [];\n  var p = elm.parentNode.children;\n  for (var i = 0, pl = p.length; i < pl; i++) {\n    if (p[i] !== elm) {\n      a.push(p[i]);\n    }\n    return a;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# Node.parentNode\n\n * 返回当前节点的父节点\n * 只可能是三种类型：element、 document和documentfragment\n\n//从父节点移除指定节点\nif (node.parentNode) {\n  node.parentNode.removeChild(node);\n}\n\n\n1\n2\n3\n4\n\n\n\n# Node.parentElement\n\n * 返回当前节点的父 Element 节点\n * 如果当前节点没有父节点,或者父节点类型不是 Element 节点,则返回null\n\n//设置指定节点的父Element节点的CSS属性\nif (node.parentElement) {\n  node.parentElement.style.color = "red";\n}\n\n\n1\n2\n3\n4\n\n\n\n# Node.childNodes\n\n * 火狐谷歌 IE9-11 (所有子节点)\n * nodeType 每一个标签都一个这个属性(有个三个值)\n * nodeType == 1 表示的是元素节点\n * nodeType == 2 表示是属性节点\n * nodeType == 3 是文本节点\n\n<div id="box">\n  <div class="box"></div>\n  <div class="box"></div>\n  <div class="box"></div>\n</div>\n<script>\n  //1.获取父盒子\n  var b = document.getElementById("box");\n  //2.通过父盒子获取所有子盒子\n  var bcArr = b.childNodes;\n  var arr = [];\n  //for循环遍历得到的所有自盒子数组\n  for (var i = 0; i < bcArr.length; i++) {\n    //如果自盒子的nodeType的值 == 1 ,说明他的是元素节点(标签)\n    if (bcArr[i].nodeType == 1) {\n      //把这个标签放入arr 这个数组.\n      arr.push(bcArr[i]);\n    }\n  }\n  //3.打印长度.()\n  console.log(bcArr);\n  console.log(bcArr.length);\n  console.log(arr);\n  console.log(arr.length);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# Node.firstChild 与 Node.lastChild\n\n * firstChild属性返回当前节点的第一个子节点,如果当前节点没有子节点,则返回null\n * Node.lastChild属性返回当前节点的最后一个子节点,如果当前节点没有子节点,则返回null\n * firstChild ：IE678 (第一个子节点)\n * 在谷歌火狐中也有这个方法,只不过是得到第一个换行.\n * firstElementChild ：火狐谷歌 IE9-11 (第一个子节点)\n * 兼容写法：b.firstElementChild || b.firstChild\n\n<div id="box">\n  <div class="box"></div>\n  <div class="box"></div>\n  <div class="box"></div>\n</div>\n<script>\n  //1.获取父盒子\n  var b = document.getElementById("box");\n  //2.通过父盒子获取第一个子盒子\n  var fc = b.firstElementChild || b.firstChild;\n  //3.更改背景色.\n  fc.style.backgroundColor = "purple";\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * lastChild ：IE678 (最后一个子节点)\n * 在谷歌火狐中也有这个方法,只不过是得到最后一个换行.\n * lastElementChild ：火狐谷歌 IE9-11 (最后一个子节点)\n * 兼容写法：b.lastElementChild || b.lastChild\n\n//1.获取父盒子\nvar b = document.getElementById("box");\n//2.通过父盒子获取最后一个子盒子\nvar lc = b.lastElementChild || b.lastChild;\n//3.更改背景色.\nlc.style.backgroundColor = "purple";\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# children\n\n * 在 IE678 中注释会被当做节点.解决方法：注释写到父节点外部\n\n<div id="box">\n  <div class="box"></div>\n  <div class="box"></div>\n  \x3c!--这个是第三个盒子--\x3e\n  <div class="box"></div>\n</div>\n<script>\n  //1.获取父盒子\n  var b = document.getElementById("box");\n  //2.通过父盒子获取所有子盒子\n  var bcArr = b.children;\n  //3.打印长度\n  console.log(bcArr);\n  console.log(bcArr.length);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# DOM 节点对象的方法\n\n\n# createElement\n\n * newNode = document.createElement(“标签名”)\n\n// 创建一个html元素，这里以创建h3元素为例\ndocument.createElement("h3")\n\n// 创建一个文本节点；\ndocument.createTextNode(String);\n\n// 创建一个属性节点，这里以创建class属性为例\ndocument.createAttribute("class");\n\n//demo\nnewel = document.createElement("h1");\nnewel.innerHTML = "<p>hello</p>"; //innerText不能转换HTML标签\ndocument.body.appendChild(newel);\n//demo2\nnewtext = document.createTextNode("hello world");\ndocument.body.appendChild(newtext);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 节点的添加\n\n\n# appendChild\n\n * Node.appendChild():接受一个节点对象作为参数,将其作为最后一个子节点,插入当前节点\n\n// 往element内部最后面添加一个节点，参数是节点类型\nelement.appendChild(Node);\n\n// 在element内部的中在existingNode前面插入newNode\nelelment.insertBefore(newNode,existingNode);\n\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# hasChildNodes\n\n * Node.hasChildNodes():返回一个布尔值,表示当前节点是否有子节点\n\nfunction DOMComb(parent, callback) {\n  if (parent.hasChildNodes()) {\n    for (var node = parent.firstChild; node; node = node.nextSibling) {\n      DOMComb(node, callback);\n    }\n  }\n  callback.call(parent);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# insertBefore\n\n * insertBefore(a,b)用于将某个节点插入当前节点的指定位置\n * 该方法接受 2 个参数,第一个是要插入的节点,第二个是参照节点\n * parentNode.insertBefore(newNode,targetNode)；\n\n// 往element内部最后面添加一个节点，参数是节点类型\nelement.appendChild(Node);\n\n// 在element内部的中在existingNode前面插入newNode\nelelment.insertBefore(newNode,existingNode);\n\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# insertAdjacentHTML\n\n * Element.insertAdjacentHTML方法解析HTML字符串;然后将生成的节点插入DOM树的指定位置\n   \n   * element.insertAdjacentHTML(position, text);第一个是指定位置;第二个是待解析的字符串\n   * beforebegin：插入到指定元素前面\n   \n   // <div id="parent"></div>\n   let parent = document.getElementById(\'parent\');\n   let node = document.createElement(\'span\');\n   // 等价于 $(parent).after(node);\n   parent.insertAdjacentElement(\'beforebegin\', node);\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   * afterbegin：插入到指定元素内部的头部\n   \n   // <div id="parent"></div>\n   let parent = document.getElementById(\'parent\');\n   let node = document.createElement(\'span\');\n   // 等价于 $(parent).prepend(node);\n   parent.insertAdjacentElement(\'afterbegin\', node);\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   * beforeend：插入到指定元素内部的尾部\n   \n   // <div id="parent"></div>\n   let parent = document.getElementById(\'parent\');\n   let node = document.createElement(\'span\');\n   // 等价于 $(parent).append(node);\n   parent.insertAdjacentElement(\'beforeend\', node);\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   * afterend：插入到指定元素后面\n   \n   // <div id="parent"></div>\n   let parent = document.getElementById(\'parent\');\n   let node = document.createElement(\'span\');\n   // 等价于 $(parent).after(node);\n   parent.insertAdjacentElement(\'afterend\', node);\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n * Element.remove方法用于将当前元素节点从DOM树删除\n\n * Element.focus方法用于将当前页面的焦点\n\n\n# cloneNode\n\n * cloneNode(参数) ；booblean类型的参数.\n * newNode = oldNode.cloneNode(boolean) ;用于复制节点, 接受一个布尔值参数\n   * true 表示深复制(复制节点及其所有子节点),\n   * false 表示浅复制(复制节点本身,不复制子节点\n\n<div id="box">\n  <div id="box1">\n    <div>1</div>\n    <div>2</div>\n  </div>\n</div>\n<script>\n  var box = document.getElementById("box");\n  var box1 = document.getElementById("box1");\n  var newBox = box1.cloneNode(true);\n  // var newBox = box1.cloneNode(false);\n  box.appendChild(newBox);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# removeChild\n\n * parentNode.removeChild(childNode)\n * currentNode.parentNode.removeChild(currentNode) 不知道父级的情况下移除自身 Node\n\n<div id="box">\n  <div id="box1"></div>\n  <div id="box2"></div>\n</div>\n<script>\n  var box = document.getElementById("box");\n  var box1 = document.getElementById("box1");\n  var box2 = document.getElementById("box2");\n  box.removeChild(box2);\n  box1.parentNode.removeChild(box1);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# replaceChild\n\n * 用于将一个新的节点(替换当前节点的某一个子节点\n * replacedNode = parentNode.replaceChild(newChild, oldChild);\n\n\n# Node.contains\n\n * 一个节点作为参数(返回一个布尔值(表示参数节点是否为当前节点的后代节点\n * nodeA.contains(nodeB)\n\n// 判断元素是否body元素且是否是body的子孙元素.\nfunction isInPage(node) {\n  return (node === document.body) ? false : document.body.contains(node);\n}\n\n\n1\n2\n3\n4\n\n\n\n# isEqualNode\n\n * 返回一个布尔值,用于检查两个节点是否相等\n * 所谓相等的节点,指的是两个节点的类型相同、属性相同、子节点相同\n * nodeA.isEqualNode(nodeB)\n\n\n# 节点的属性\n\n * Element.getAttribute 返回当前元素节点的指定属性.如果指定属性不存在;则返回null\n * Element.setAttribute 用于为当前元素节点新增属性.如果同名属性已存在;则相当于编辑已存在的属性\n * Element.hasAttribute 返回一个布尔值;表示当前元素节点是否包含指定属性\n * Element.removeAttribute 用于从当前元素节点移除属性\n\n<img id="pic" width="100px" height="100px" />;\n//1.获取节点.\nvar pic = document.getElementById("pic");\n//2.修改属性.\npic.setAttribute("width", "500px");\nvar a = pic.getAttribute("height");\n//3.删除属性\npic.removeAttribute("height");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# dataset 属性\n\n * data-后面的属性名有限制;只能包含字母、数字、连词线(-)、点(.)、冒号(:)和下划线(_)\n * 属性名不应该使用 A 到 Z 的大写字母;比如不能有data-helloWorld这样的属性名;而要写成data-hello-world\n\n// html\n<div id="mydiv" foo="bar"></div>\n// js\nvar n = document.getElementById(\'mydiv\');\nn.getAttribute(\'foo\') // bar\nn.setAttribute(\'foo\', \'baz\')\nn.removeAttribute(\'baz\')\n\n// html\n<div id="mydiv2" data-foo="bar"></div>\n// js\nvar n2 = document.getElementById(\'mydiv2\');\nn2.dataset.foo // bar\nn2.dataset.foo = \'baz\'\ndelete n2.dataset.foo;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# DocumentFragment\n\nDocumentFragment 节点代表一个文档的片段，本身就是一个完整的 DOM 树形结构。 它没有父节点，parentNode 返回 null，但是可以插入任意数量的子节点。 它不属于当前文档，操作 DocumentFragment 节点，要比直接操作 DOM 树快得多\n\n//var docFrag = document.createDocumentFragment();\n// or\nvar docFrag = new DocumentFragment();\n\nvar li = document.createElement("li");\nli.textContent = "Hello World";\ndocFrag.appendChild(li);\nconsole.log(docFrag.textContent); //Hello World\ndocument.querySelector("ul").appendChild(docFrag);\nconsole.log(docFrag.textContent); // \'\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# Element.Node兼容\n\n * 获取下一个紧邻的兄弟元素\n\n// 获取下一个紧邻的兄弟元素\nfunction getNextElement(element) {\n  var ele = element;\n  if (ele.nextElementSibling) return ele.nextElementSibling;\n  do {\n    ele = ele.nextSibling;\n  } while (ele && ele.nodeType !== 1);\n  return ele;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 获取上一个紧邻的兄弟元素\n\n// 获取上一个紧邻的兄弟元素\nfunction getPreviousElement(element) {\n  var ele = element;\n  if (ele.perviousElementSibling) return ele.perviousElementSibling;\n  do {\n    ele = ele.perviousSibling;\n  } while (ele && ele.nodeType !== 1);\n  return ele;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 获取第一个子元素\n\n// 获取第一个子元素\nfunction getFirstElement(parent) {\n  if (parent.firstElementChild) return parent.firstElementChild;\n  var ele = parent.firstChild;\n  while (ele && ele.nodeType !== 1) ele = ele.nextSibling;\n  return ele;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 获取最后一个子元素\n\n// 获取最后一个子元素\nfunction getLastElement(parent) {\n  if (parent.LastElementChild) return parent.LastElementChild;\n  var ele = parent.lastChild;\n  while (ele && ele.nodeType !== 1) ele = ele.perviousSibling;\n  return ele;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 取所有兄弟元素\n\n// 获取所有兄弟元素\nfunction getAllSibling(ele) {\n  if (!ele) return null;\n  var elements = [];\n  var el = ele.previousSibling;\n  while (el) {\n    if (el.nodeType === 1)\n      elements.push(el);\n    el = el.previousSibling;\n  }\n  el = element.nextSibling;\n  while (el) {\n    if (el.nodeType === 1)\n      elements.push(el);\n    el = el.nextSibling;\n  }\n  return elements;\n}\n\n// 查找所有兄弟节点\nfunction siblings(elm) {\n  var a = [];\n  var p = elm.parentNode.children;\n  for (var i = 0, pl = p.length; i < pl; i++) {\n    if (p[i] !== elm) {\n      a.push(p[i]);\n    }\n    return a;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# BFC\n\n * Block Formatting Context 块级格式化上下文,形成独立渲染区域\n * 前端精选文摘：BFC 神奇背后的原理\n\n\n# 如何触发 BFC\n\n * 根元素 : 在块格式化上下文中\n * float的值不为none\n * position为absolute或fixed\n * display的值为 inline-block, flex, inline-flex，table，table-cell，table-caption中的其中一个\n * overflow的值不为visible\n\n\n# Flex\n\n> https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n\n * flex-direction: row | row-reverse | column | column-reverse; 属性决定主轴的方向, 默认row\n * flex-wrap: nowrap | wrap | wrap-reverse;\n * flex-flow: flex-direction | flex-wrap;\n * justify-content: flex-start | flex-end | center | space-between | space-around; 属性定义了项目在主轴上的对齐方式\n * align-items: flex-start | flex-end | center | baseline | stretch; 属性定义项目在交叉轴上如何对齐\n * flex :flex-grow flex-shrink flex-basis\n\nflex: auto (1 1 auto) 和 none (0 0 auto)\n\nflex-grow 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大\nflex-shrink 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小\nflex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）\n\n\n1\n2\n3\n4\n5\n\n\n\n# position 定位\n\n * MDN/position\n\n * 静态定位(标准流) : position:static\n\n * 绝对定位 ：position：absolute\n   \n   * 绝对定位的盒子不占页面上的位置（脱离标准流）\n   * 绝对定位以后会影响元素的显示方式：display：inline-block\n\n * 相对定位 ：position:relative\n   \n   * 相对定位是占据标准流的位置\n   * 相对自身的位置进行定位\n\n * 固定定位 ： position:fixed;\n   \n   * 使用盒子显示浏览器的固定位置\n   * 固定定位会脱离标准流\n   * 固定定位会改变元素的显示方式\n\n * 粘性定位元素 ：position:stickily\n\n * z-index：用来设置当前盒子所在的层次 z-index：12；\n\n\n# 盒子模型分类\n\n * IE 盒子模型: IE的content部分包含了 border 和 padding;\n   \n   \n\n * 标准 W3C 盒子模型\n   \n   * width：border-left + padding-left + width + padding-right + border-right\n   * height: border-top + padding-top + height + padding-bottom + border-bottom\n   \n   \n\n\n# css3 盒模型属性\n\n * box-sizing: border-box: 计算方式为 width = border + padding + content\n\n * box-sizing: content-box: 计算方式为 width = content\n   \n   ',normalizedContent:'mdn/element\n\n\n# 浏览器内核\n\nsafari    webkit\nchrome    blink (current) / webkit (pre)   -webkit-\nchromium  blink\nfirefox   gecko   -moz-\nie        trident -ms-\nedge      edgehtml\nopera12.17及更早版本曾经采用的内核  presto  -o-\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 文档基本结构\n\ndocument.head; // 文档的头标签\ntypeof document.head; // object\n\ndocument.title; // 文档标题\ntypeof document.title; // string\n\ndocument.body; // 文档的body标签\ntypeof document.body; // object\n\ndocument.documentelement; // 文档的根节点 注意：没有document.html这个东西\ntypeof document.documentelement; // object\n\ndocument.html; // 这个是错的!!!\n\ndocument.defaultview === window; // true\ndocument.activeelement; // 属性返回当前文档中获得焦点的那个元素\ndocument.defaultview;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 文档兼容模式\n\n * document type声明文档类型 dtd：<!doctype html>\n * backcompat 未声明 dtd(怪异模式)firefox\n * css1compat 已经声明 dtd(标准模式)chrome ,ie\n * document.compatmode 获取文档类型\n\n\n# document\n\n\n# 节点集合属性\n\n * document.links属性返回当前文档所有设定了 href 属性的 a 及 area 元素\n * document.images属性返回页面所有图片元素(即 img 标签)\n * document.scripts属性返回当前文档的所有脚本(即 script 标签)\n * document.stylesheets属性返回一个类似数组的对象,代表当前网页的所有样式表\n\n\n# 文档信息属性\n\n * document.documenturi属性和document.url属性都返回一个字符串,表示当前文档的网址\n\n * documenturi属性可用于所有文档(包括 xml 文档),url 属性只能用于 html 文档\n\n * document.domain属性返回当前文档的域名\n\n * document.lastmodified属性返回当前文档最后修改的时间戳,格式为字符串\n\n * document.title属性返回当前文档的标题,该属性是可写的\n\n * document.referrer\n\n * document.characterset属性返回渲染当前文档的字符集 //utf-8\n\n * document.readystate属性返回当前文档的状态\n\n * 三种可能的值:\n   \n   * loading：加载 html 代码阶段(尚未完成解析)\n   * interactive：加载外部资源阶段时\n   * complete：加载完成时\n\n * document.designmode属性控制当前文档是否可编辑\n\n * document.implementation属性返回一个对象,用来甄别当前环境部署了哪些 dom 相关接口\n\n * implementation属性的hasfeature方法,可以判断当前环境是否部署了特定版本的特定接口\n\ndocument.implementation.hasfeature("html", "2.0"); // true\n\ndocument.implementation.hasfeature("mutationevents", "2.0"); // true\n\n\n1\n2\n3\n\n * document.cookie属性用来操作浏览器 cookie\n\n\n# 类型\n\n * document：整个文档树的顶层节点\n * documenttype：doctype 标签(比如<!doctype html>)\n * element：网页的各种 html 标签(比如<body>、<a>等)\n * attribute：网页元素的属性(比如class="right")\n * text：标签之间或标签包含的文本\n * comment：注释\n * documentfragment：文档的片段\n\n\n# 获取 dom 元素\n\n * 获取节点\n\ndocument.queryselector("#demo"); //只返回匹配的第一个元素dom  html5\n\ndocument.queryselectorall(".test"); // html5\n\n// 通过id号来获取元素，返回一个元素对象\ndocument.getelementbyid(idname)\n\n// 通过name属性获取id号，返回元素对象数组\ndocument.getelementsbyname(name)\n\n// 通过class来获取元素，返回元素对象数组\ndocument.getelementsbyclassname(classname)\n\n// 通过标签名获取元素，返回元素对象数组\ndocument.getelementsbytagname(tagname)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 获取/设置元素的属性值\n\n// 括号传入属性名，返回对应属性的属性值\nelement.getattribute(attributename)\n\n// 传入属性名及设置的值\nelement.setattribute(attributename,attributevalue)\n\n\n1\n2\n3\n4\n5\n\n * 创建节点node\n\n// 创建一个html元素，这里以创建h3元素为例\ndocument.createelement("h3")\n\n// 创建一个文本节点；\ndocument.createtextnode(string);\n\n// 创建一个属性节点，这里以创建class属性为例\ndocument.createattribute("class");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 增添节点\n\n// 往element内部最后面添加一个节点，参数是节点类型\nelement.appendchild(node);\n\n// 在element内部的中在existingnode前面插入newnode\nelelment.insertbefore(newnode,existingnode);\n\n// insertadjacenthtml: (beforebegin | afterbegin | beforeend | afterend)\nelement.insertadjacenthtml(position, text)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 删除节点\n\n//删除当前节点下指定的子节点，删除成功返回该被删除的节点，否则返回null\nelement.removechild(node)\n\n\n\n1\n2\n3\n\n\n\n# dom常用属性\n\n * 获取当前元素的父节点\n\n// 返回当前元素的父节点对象\nelement.parentnode\n\n\n1\n2\n\n * 获取当前元素的子节点\n\n// 返回当前元素所有子元素节点对象，只返回html节点\nelement.chlidren\n\n// 返回当前元素多有子节点，包括文本，html，属性节点。（回车也会当做一个节点）\nelement.chilidnodes\n\n// 返回当前元素的第一个子节点对象\nelement.firstchild\n\n// 返回当前元素的最后一个子节点对象\nelement.lastchild\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 获取当前元素的同级元素\n\n// 返回当前元素的下一个同级元素 没有就返回null\nelement.nextsibling\n\n// 返回当前元素上一个同级元素 没有就返回 null\nelement.previoussibling\n\n\n1\n2\n3\n4\n5\n\n * 获取当前元素的文本\n\n// 返回元素的所有文本，包括html代码\nelement.innerhtml\n\n// 返回当前元素的自身及子代所有文本值，只是文本内容，不包括html代码\nelement.innertext\n\n\n1\n2\n3\n4\n5\n\n * 获取当前节点的节点类型\n\n类型                       nodename             nodetype\nelement_node             大写的 html 元素名         1\nattribute_node           attr.name            2\ntext_node                #text                3\ncomment_node             #comment             8\ndocument_node            #document            9\ndocument_type_node       documenttype.name    10\ndocument_fragment_node   #document-fragment   11\n\ndocument.nodename; // "#document"\ndocument.nodetype; // 9\ndocument.queryselector("a").nodetype === 1; // true\ndocument.queryselector("a").nodetype === node.element_node; // true\n\n\n1\n2\n3\n4\n\n * 设置样式\n\n// 设置元素的样式时使用style\nelement.style.color="#eea";\n\n\n1\n2\n\n\n\n# 节点对象属性\n\n\n# node.nodevalue\n\n * 返回一个字符串,表示当前节点本身的文本值,该属性可读写\n\n\n# node.textcontent\n\n * 返回当前节点和它的所有后代节点的文本内容\n * 自动忽略当前节点内部的html标签,返回所有文本内容\n\n\n# node.sibling 与 node.previoussibling\n\n * node.nextsibling属性返回紧跟在当前节点后面的第一个同级节点\n * node.previoussibling属性返回当前节点前面的、距离最近的一个同级节点\n * nextsibling ：ie678 (下一个兄弟节点)\n * 在谷歌火狐中也有这个方法,只不过是得到换行.\n * nextelementsibling ：火狐谷歌 ie9-11 (下一个兄弟节点)\n * 兼容写法：b.nextelementsibling || b.nextsibling\n\n<div class="box"></div>\n<div class="box" id="box"></div>\n<div class="box"></div>\n//1.获取id名为box的盒子.\nvar b = document.getelementbyid("box");\n//2.通过兄弟节点的方式获得下盒子\nvar n = b.nextelementsibling || b.nextsibling;\n//3.更改背景色\nn.style.backgroundcolor = "purple";\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * previoussibling ：ie678 (上一个兄弟节点)\n * 在谷歌火狐中也有这个方法,只不过是得到换行.\n * previouselementsibling ：火狐谷歌 ie9-11 (上一个兄弟节点)\n * 兼容写法：b.previouselementsibling || b.previoussibling\n\n//1.获取id名为box的盒子.\nvar b = document.getelementbyid("box");\n//2.兄弟节点的方式获得上盒子\nvar m = b.previouselementsibling || b.previoussibling;\n//3.更改背景色\nm.style.backgroundcolor = "purple";\n\n// 获取所有的兄弟节点\nfunction siblings(elm) {\n  var a = [];\n  var p = elm.parentnode.children;\n  for (var i = 0, pl = p.length; i < pl; i++) {\n    if (p[i] !== elm) {\n      a.push(p[i]);\n    }\n    return a;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# node.parentnode\n\n * 返回当前节点的父节点\n * 只可能是三种类型：element、 document和documentfragment\n\n//从父节点移除指定节点\nif (node.parentnode) {\n  node.parentnode.removechild(node);\n}\n\n\n1\n2\n3\n4\n\n\n\n# node.parentelement\n\n * 返回当前节点的父 element 节点\n * 如果当前节点没有父节点,或者父节点类型不是 element 节点,则返回null\n\n//设置指定节点的父element节点的css属性\nif (node.parentelement) {\n  node.parentelement.style.color = "red";\n}\n\n\n1\n2\n3\n4\n\n\n\n# node.childnodes\n\n * 火狐谷歌 ie9-11 (所有子节点)\n * nodetype 每一个标签都一个这个属性(有个三个值)\n * nodetype == 1 表示的是元素节点\n * nodetype == 2 表示是属性节点\n * nodetype == 3 是文本节点\n\n<div id="box">\n  <div class="box"></div>\n  <div class="box"></div>\n  <div class="box"></div>\n</div>\n<script>\n  //1.获取父盒子\n  var b = document.getelementbyid("box");\n  //2.通过父盒子获取所有子盒子\n  var bcarr = b.childnodes;\n  var arr = [];\n  //for循环遍历得到的所有自盒子数组\n  for (var i = 0; i < bcarr.length; i++) {\n    //如果自盒子的nodetype的值 == 1 ,说明他的是元素节点(标签)\n    if (bcarr[i].nodetype == 1) {\n      //把这个标签放入arr 这个数组.\n      arr.push(bcarr[i]);\n    }\n  }\n  //3.打印长度.()\n  console.log(bcarr);\n  console.log(bcarr.length);\n  console.log(arr);\n  console.log(arr.length);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# node.firstchild 与 node.lastchild\n\n * firstchild属性返回当前节点的第一个子节点,如果当前节点没有子节点,则返回null\n * node.lastchild属性返回当前节点的最后一个子节点,如果当前节点没有子节点,则返回null\n * firstchild ：ie678 (第一个子节点)\n * 在谷歌火狐中也有这个方法,只不过是得到第一个换行.\n * firstelementchild ：火狐谷歌 ie9-11 (第一个子节点)\n * 兼容写法：b.firstelementchild || b.firstchild\n\n<div id="box">\n  <div class="box"></div>\n  <div class="box"></div>\n  <div class="box"></div>\n</div>\n<script>\n  //1.获取父盒子\n  var b = document.getelementbyid("box");\n  //2.通过父盒子获取第一个子盒子\n  var fc = b.firstelementchild || b.firstchild;\n  //3.更改背景色.\n  fc.style.backgroundcolor = "purple";\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * lastchild ：ie678 (最后一个子节点)\n * 在谷歌火狐中也有这个方法,只不过是得到最后一个换行.\n * lastelementchild ：火狐谷歌 ie9-11 (最后一个子节点)\n * 兼容写法：b.lastelementchild || b.lastchild\n\n//1.获取父盒子\nvar b = document.getelementbyid("box");\n//2.通过父盒子获取最后一个子盒子\nvar lc = b.lastelementchild || b.lastchild;\n//3.更改背景色.\nlc.style.backgroundcolor = "purple";\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# children\n\n * 在 ie678 中注释会被当做节点.解决方法：注释写到父节点外部\n\n<div id="box">\n  <div class="box"></div>\n  <div class="box"></div>\n  \x3c!--这个是第三个盒子--\x3e\n  <div class="box"></div>\n</div>\n<script>\n  //1.获取父盒子\n  var b = document.getelementbyid("box");\n  //2.通过父盒子获取所有子盒子\n  var bcarr = b.children;\n  //3.打印长度\n  console.log(bcarr);\n  console.log(bcarr.length);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# dom 节点对象的方法\n\n\n# createelement\n\n * newnode = document.createelement(“标签名”)\n\n// 创建一个html元素，这里以创建h3元素为例\ndocument.createelement("h3")\n\n// 创建一个文本节点；\ndocument.createtextnode(string);\n\n// 创建一个属性节点，这里以创建class属性为例\ndocument.createattribute("class");\n\n//demo\nnewel = document.createelement("h1");\nnewel.innerhtml = "<p>hello</p>"; //innertext不能转换html标签\ndocument.body.appendchild(newel);\n//demo2\nnewtext = document.createtextnode("hello world");\ndocument.body.appendchild(newtext);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 节点的添加\n\n\n# appendchild\n\n * node.appendchild():接受一个节点对象作为参数,将其作为最后一个子节点,插入当前节点\n\n// 往element内部最后面添加一个节点，参数是节点类型\nelement.appendchild(node);\n\n// 在element内部的中在existingnode前面插入newnode\nelelment.insertbefore(newnode,existingnode);\n\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# haschildnodes\n\n * node.haschildnodes():返回一个布尔值,表示当前节点是否有子节点\n\nfunction domcomb(parent, callback) {\n  if (parent.haschildnodes()) {\n    for (var node = parent.firstchild; node; node = node.nextsibling) {\n      domcomb(node, callback);\n    }\n  }\n  callback.call(parent);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# insertbefore\n\n * insertbefore(a,b)用于将某个节点插入当前节点的指定位置\n * 该方法接受 2 个参数,第一个是要插入的节点,第二个是参照节点\n * parentnode.insertbefore(newnode,targetnode)；\n\n// 往element内部最后面添加一个节点，参数是节点类型\nelement.appendchild(node);\n\n// 在element内部的中在existingnode前面插入newnode\nelelment.insertbefore(newnode,existingnode);\n\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# insertadjacenthtml\n\n * element.insertadjacenthtml方法解析html字符串;然后将生成的节点插入dom树的指定位置\n   \n   * element.insertadjacenthtml(position, text);第一个是指定位置;第二个是待解析的字符串\n   * beforebegin：插入到指定元素前面\n   \n   // <div id="parent"></div>\n   let parent = document.getelementbyid(\'parent\');\n   let node = document.createelement(\'span\');\n   // 等价于 $(parent).after(node);\n   parent.insertadjacentelement(\'beforebegin\', node);\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   * afterbegin：插入到指定元素内部的头部\n   \n   // <div id="parent"></div>\n   let parent = document.getelementbyid(\'parent\');\n   let node = document.createelement(\'span\');\n   // 等价于 $(parent).prepend(node);\n   parent.insertadjacentelement(\'afterbegin\', node);\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   * beforeend：插入到指定元素内部的尾部\n   \n   // <div id="parent"></div>\n   let parent = document.getelementbyid(\'parent\');\n   let node = document.createelement(\'span\');\n   // 等价于 $(parent).append(node);\n   parent.insertadjacentelement(\'beforeend\', node);\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n   * afterend：插入到指定元素后面\n   \n   // <div id="parent"></div>\n   let parent = document.getelementbyid(\'parent\');\n   let node = document.createelement(\'span\');\n   // 等价于 $(parent).after(node);\n   parent.insertadjacentelement(\'afterend\', node);\n   \n   \n   1\n   2\n   3\n   4\n   5\n   \n\n * element.remove方法用于将当前元素节点从dom树删除\n\n * element.focus方法用于将当前页面的焦点\n\n\n# clonenode\n\n * clonenode(参数) ；booblean类型的参数.\n * newnode = oldnode.clonenode(boolean) ;用于复制节点, 接受一个布尔值参数\n   * true 表示深复制(复制节点及其所有子节点),\n   * false 表示浅复制(复制节点本身,不复制子节点\n\n<div id="box">\n  <div id="box1">\n    <div>1</div>\n    <div>2</div>\n  </div>\n</div>\n<script>\n  var box = document.getelementbyid("box");\n  var box1 = document.getelementbyid("box1");\n  var newbox = box1.clonenode(true);\n  // var newbox = box1.clonenode(false);\n  box.appendchild(newbox);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# removechild\n\n * parentnode.removechild(childnode)\n * currentnode.parentnode.removechild(currentnode) 不知道父级的情况下移除自身 node\n\n<div id="box">\n  <div id="box1"></div>\n  <div id="box2"></div>\n</div>\n<script>\n  var box = document.getelementbyid("box");\n  var box1 = document.getelementbyid("box1");\n  var box2 = document.getelementbyid("box2");\n  box.removechild(box2);\n  box1.parentnode.removechild(box1);\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# replacechild\n\n * 用于将一个新的节点(替换当前节点的某一个子节点\n * replacednode = parentnode.replacechild(newchild, oldchild);\n\n\n# node.contains\n\n * 一个节点作为参数(返回一个布尔值(表示参数节点是否为当前节点的后代节点\n * nodea.contains(nodeb)\n\n// 判断元素是否body元素且是否是body的子孙元素.\nfunction isinpage(node) {\n  return (node === document.body) ? false : document.body.contains(node);\n}\n\n\n1\n2\n3\n4\n\n\n\n# isequalnode\n\n * 返回一个布尔值,用于检查两个节点是否相等\n * 所谓相等的节点,指的是两个节点的类型相同、属性相同、子节点相同\n * nodea.isequalnode(nodeb)\n\n\n# 节点的属性\n\n * element.getattribute 返回当前元素节点的指定属性.如果指定属性不存在;则返回null\n * element.setattribute 用于为当前元素节点新增属性.如果同名属性已存在;则相当于编辑已存在的属性\n * element.hasattribute 返回一个布尔值;表示当前元素节点是否包含指定属性\n * element.removeattribute 用于从当前元素节点移除属性\n\n<img id="pic" width="100px" height="100px" />;\n//1.获取节点.\nvar pic = document.getelementbyid("pic");\n//2.修改属性.\npic.setattribute("width", "500px");\nvar a = pic.getattribute("height");\n//3.删除属性\npic.removeattribute("height");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# dataset 属性\n\n * data-后面的属性名有限制;只能包含字母、数字、连词线(-)、点(.)、冒号(:)和下划线(_)\n * 属性名不应该使用 a 到 z 的大写字母;比如不能有data-helloworld这样的属性名;而要写成data-hello-world\n\n// html\n<div id="mydiv" foo="bar"></div>\n// js\nvar n = document.getelementbyid(\'mydiv\');\nn.getattribute(\'foo\') // bar\nn.setattribute(\'foo\', \'baz\')\nn.removeattribute(\'baz\')\n\n// html\n<div id="mydiv2" data-foo="bar"></div>\n// js\nvar n2 = document.getelementbyid(\'mydiv2\');\nn2.dataset.foo // bar\nn2.dataset.foo = \'baz\'\ndelete n2.dataset.foo;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# documentfragment\n\ndocumentfragment 节点代表一个文档的片段，本身就是一个完整的 dom 树形结构。 它没有父节点，parentnode 返回 null，但是可以插入任意数量的子节点。 它不属于当前文档，操作 documentfragment 节点，要比直接操作 dom 树快得多\n\n//var docfrag = document.createdocumentfragment();\n// or\nvar docfrag = new documentfragment();\n\nvar li = document.createelement("li");\nli.textcontent = "hello world";\ndocfrag.appendchild(li);\nconsole.log(docfrag.textcontent); //hello world\ndocument.queryselector("ul").appendchild(docfrag);\nconsole.log(docfrag.textcontent); // \'\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# element.node兼容\n\n * 获取下一个紧邻的兄弟元素\n\n// 获取下一个紧邻的兄弟元素\nfunction getnextelement(element) {\n  var ele = element;\n  if (ele.nextelementsibling) return ele.nextelementsibling;\n  do {\n    ele = ele.nextsibling;\n  } while (ele && ele.nodetype !== 1);\n  return ele;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 获取上一个紧邻的兄弟元素\n\n// 获取上一个紧邻的兄弟元素\nfunction getpreviouselement(element) {\n  var ele = element;\n  if (ele.perviouselementsibling) return ele.perviouselementsibling;\n  do {\n    ele = ele.pervioussibling;\n  } while (ele && ele.nodetype !== 1);\n  return ele;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 获取第一个子元素\n\n// 获取第一个子元素\nfunction getfirstelement(parent) {\n  if (parent.firstelementchild) return parent.firstelementchild;\n  var ele = parent.firstchild;\n  while (ele && ele.nodetype !== 1) ele = ele.nextsibling;\n  return ele;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 获取最后一个子元素\n\n// 获取最后一个子元素\nfunction getlastelement(parent) {\n  if (parent.lastelementchild) return parent.lastelementchild;\n  var ele = parent.lastchild;\n  while (ele && ele.nodetype !== 1) ele = ele.pervioussibling;\n  return ele;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 取所有兄弟元素\n\n// 获取所有兄弟元素\nfunction getallsibling(ele) {\n  if (!ele) return null;\n  var elements = [];\n  var el = ele.previoussibling;\n  while (el) {\n    if (el.nodetype === 1)\n      elements.push(el);\n    el = el.previoussibling;\n  }\n  el = element.nextsibling;\n  while (el) {\n    if (el.nodetype === 1)\n      elements.push(el);\n    el = el.nextsibling;\n  }\n  return elements;\n}\n\n// 查找所有兄弟节点\nfunction siblings(elm) {\n  var a = [];\n  var p = elm.parentnode.children;\n  for (var i = 0, pl = p.length; i < pl; i++) {\n    if (p[i] !== elm) {\n      a.push(p[i]);\n    }\n    return a;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# bfc\n\n * block formatting context 块级格式化上下文,形成独立渲染区域\n * 前端精选文摘：bfc 神奇背后的原理\n\n\n# 如何触发 bfc\n\n * 根元素 : 在块格式化上下文中\n * float的值不为none\n * position为absolute或fixed\n * display的值为 inline-block, flex, inline-flex，table，table-cell，table-caption中的其中一个\n * overflow的值不为visible\n\n\n# flex\n\n> https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n\n * flex-direction: row | row-reverse | column | column-reverse; 属性决定主轴的方向, 默认row\n * flex-wrap: nowrap | wrap | wrap-reverse;\n * flex-flow: flex-direction | flex-wrap;\n * justify-content: flex-start | flex-end | center | space-between | space-around; 属性定义了项目在主轴上的对齐方式\n * align-items: flex-start | flex-end | center | baseline | stretch; 属性定义项目在交叉轴上如何对齐\n * flex :flex-grow flex-shrink flex-basis\n\nflex: auto (1 1 auto) 和 none (0 0 auto)\n\nflex-grow 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大\nflex-shrink 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小\nflex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）\n\n\n1\n2\n3\n4\n5\n\n\n\n# position 定位\n\n * mdn/position\n\n * 静态定位(标准流) : position:static\n\n * 绝对定位 ：position：absolute\n   \n   * 绝对定位的盒子不占页面上的位置（脱离标准流）\n   * 绝对定位以后会影响元素的显示方式：display：inline-block\n\n * 相对定位 ：position:relative\n   \n   * 相对定位是占据标准流的位置\n   * 相对自身的位置进行定位\n\n * 固定定位 ： position:fixed;\n   \n   * 使用盒子显示浏览器的固定位置\n   * 固定定位会脱离标准流\n   * 固定定位会改变元素的显示方式\n\n * 粘性定位元素 ：position:stickily\n\n * z-index：用来设置当前盒子所在的层次 z-index：12；\n\n\n# 盒子模型分类\n\n * ie 盒子模型: ie的content部分包含了 border 和 padding;\n   \n   \n\n * 标准 w3c 盒子模型\n   \n   * width：border-left + padding-left + width + padding-right + border-right\n   * height: border-top + padding-top + height + padding-bottom + border-bottom\n   \n   \n\n\n# css3 盒模型属性\n\n * box-sizing: border-box: 计算方式为 width = border + padding + content\n\n * box-sizing: content-box: 计算方式为 width = content\n   \n   ',charsets:{cjk:!0},lastUpdated:"3/25/2022",lastUpdatedTimestamp:1648202994e3,createdTime:1647945545e3},{title:"使用eslint和prettier代码校验",frontmatter:{title:"使用eslint和prettier代码校验",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["eslint","vue"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/eslint.html",relativePath:"frontend/issues/eslint.md",key:"v-e6907df6",path:"/frontend/issues/eslint.html",headers:[{level:2,title:"eslint",slug:"eslint",normalizedTitle:"eslint",charIndex:2},{level:3,title:"rules",slug:"rules",normalizedTitle:"rules",charIndex:547},{level:3,title:"代码注释",slug:"代码注释",normalizedTitle:"代码注释",charIndex:733},{level:3,title:"eslintignore",slug:"eslintignore",normalizedTitle:"eslintignore",charIndex:1154},{level:2,title:"prettier",slug:"prettier",normalizedTitle:"prettier",charIndex:1594},{level:2,title:"editorconfig",slug:"editorconfig",normalizedTitle:"editorconfig",charIndex:3387}],headersStr:"eslint rules 代码注释 eslintignore prettier editorconfig",content:'# eslint\n\n * eslint 中文网\n\n * Eslint 从入门到放弃\n\n * ESLint 里的规则教会我，无规矩 不编程\n\n * 【AST 篇】教你如何编写 Eslint 插件\n\n * install npm install -g eslint\n\n * 查看帮助 eslint -h\n\n * 初始化 eslint --init\n\n * 运行 eslint\n\neslint [options] [file|dir|glob]*\n  # file : eslint file1.js file2.js\n  # dir :  eslint lib/**\n  # glob : eslint "lib/**"\n\n\n1\n2\n3\n4\n\n\n * 修复会保存到文件系统中 eslnt *.js --fix\n\n * 修复不会保存到文件系统中 eslint *.js --fix-dry-run\n\n * 文件后缀 eslint . --ext .js and .js2\n\n * 配置文件 eslint -c ~/my-eslint.json file.js\n\n * 禁用.eslintrc.*和package.json文件中的配置 eslint --no-eslintrc file.js\n\n\n# rules\n\n * 开启规则和发生错误时报告的等级\n\n * 规则的错误等级有三种：0 1 2 | off warn error\n\n * "off" 或 0 关闭规则\n\n * "warn" 或 1 开启规则，使用警告级别的错误：warn (不会导致程序退出)\n\n * "error" 或 2 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)\n\n\n# 代码注释\n\n# 例：忽略 no-undef 检查 在js文件中写入如下\n/* eslint-disable no-undef */\n\n# 例：设置 ===检查 在js文件中写入如下\n/* eslint eqeqeq: off */\n/* eslint eqeqeq: 0 */\n\n# 例：用注释指定全局变量 在js文件中写入如下\n/* global var 1, var2 */\n/* globael var1:false, var2:false */\n\n# 行内禁用\nconsole.log // eslint-disable-line\n\n# 代码块禁用\n/* eslint-disable */\nexport function func(a,b) {\n  return a+b\n}\n/* eslint-enable */\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# eslintignore\n\n * .eslintignore文件来避免检测处理\n * .eslintignore\n\n.vscode\n.git\nnode_modules\n\n\n1\n2\n3\n\n * webpack.config.js\n\nconst path = require(\'path\')\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|vue)$/,\n        loader: \'eslint-loader\',\n        enforce: \'pre\',\n        include: [path.join(__dirname, \'src\')],\n        options: {\n            fix: true\n        }\n      }\n    ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# prettier\n\n * prettier/prettier\n\n * prettier.io/playground\n\n * 安装\n\nnpm i -D prettier\nnpm i -D eslint-plugin-prettier\nnpm i -D eslint-config-prettier\n\n\n1\n2\n3\n\n * .eslintrc.js\n\nmodule.exports = {\n  root: true,\n  extends: ["standard", "prettier"],\n  env: {\n    es6: true,\n    browser: true,\n    node: true\n  },\n  plugins: ["prettier"],\n  parserOptions: {\n    sourceType: "module",\n    ecmaFeatures: {\n      jsx: true\n    },\n    parser: "babel-eslint"\n  },\n  rules: {\n    "prettier/prettier": "error"\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * webpack.config.js\n\nconst path = require(\'path\')\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|vue)$/,\n    \tloader: \'eslint-loader\',\n    \tenforce: \'pre\',\n    \tinclude: [path.join(__dirname, \'src\')],\n    \toptions: {\n          fix: true\n    \t}\n      }\n    ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * prettier.config.js\n\nmodule.exports = {\n  trailingComma: "all",\n  tabWidth: 2,\n  semi: false,\n  bracketSpacing: true,\n  singleQuote: true,\n  jsxBracketSameLine: true,\n  useTabs: true\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 配置说明\n\nmodule.exports = {\n  printWidth: 80, // 一行的字符数，如果超过会进行换行，默认为80\n  tabWidth: 2, // 一个tab代表几个空格数，默认为80\n  useTabs: false, // 是否使用tab进行缩进，默认为false，表示用空格进行缩减\n  singleQuote: false, // 字符串是否使用单引号，默认为false，使用双引号\n  semi: true, // 行位是否使用分号，默认为true\n  trailingComma: "none", // 是否使用尾逗号，有三个可选值"<none|es5|all>"\n  bracketSpacing: true, // 对象大括号直接是否有空格，默认为true，效果：{ foo: bar }\n  parser: "babylon", // 代码的解析引擎，默认为babylon，与babel相同。\n  jsxBracketSameLinte: "false", // 在多行JSX元素最后一行的末尾添加 > 而使 > 单独一行\n  alwaysParens: "always" // 为单行箭头函数的参数添加圆括号, 默认值"avoid"; 可选值"< avoid | always >", 示例： (x) => x\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * .prettierignore\n\npackage-lock.json\n.next\nnode_modules/\ndist\nbuild\n\n\n1\n2\n3\n4\n5\n\n\n\n# editorconfig\n\n * editorconfig\n * vscode 配合插件EditorConfig for VS Code一起使用\n * .editorconfig文件配置\n\n# 最顶层的配置文件\nroot = true\n# 指定作用文件格式\n[*]\n# 缩进的类型 [space | tab]\nindent_style = tab\n# 缩进的大小\nindent_size = 2\n# 定义换行符 [lf | cr | crlf]\nend_of_line = lf\n# 编码格式\ncharset = utf-8\n# 是否除去换行行首的任意空白字符\ntrim_trailing_whitespace = true\n# 文件是否以一个空白行结尾 [true | false]\ninsert_final_newline = true\n\n# Matches the exact files\n[{.*rc,*.yml,*.md,package.json,lerna.json,*.svg}]\nindent_style = space\n\n[*.md]\ntrim_trailing_whitespace = false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n * 通配符模式\n\n通配符            ARE\n*              匹配任意数量 string 类型的字符，\' / \' 除外\n**             匹配任意数量 string 类型的字符\n？              匹配任意单个字符\n[a-z]          匹配方括号规定范围内的任意单个字符\n[!a-z]         匹配不在方括号规定范围内的任意单个字符\n{s1,s2,s3}     匹配任意一个大括号内部美剧的字符(\',\'分隔)\n{num1..num2}   匹配 num1 和 num2 之间的任意一个整数，num1 和 num2 正负都可以\n\n * example\n\nroot = true\n\n[*]\nindent_style = tab\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{json,yml}]\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n',normalizedContent:'# eslint\n\n * eslint 中文网\n\n * eslint 从入门到放弃\n\n * eslint 里的规则教会我，无规矩 不编程\n\n * 【ast 篇】教你如何编写 eslint 插件\n\n * install npm install -g eslint\n\n * 查看帮助 eslint -h\n\n * 初始化 eslint --init\n\n * 运行 eslint\n\neslint [options] [file|dir|glob]*\n  # file : eslint file1.js file2.js\n  # dir :  eslint lib/**\n  # glob : eslint "lib/**"\n\n\n1\n2\n3\n4\n\n\n * 修复会保存到文件系统中 eslnt *.js --fix\n\n * 修复不会保存到文件系统中 eslint *.js --fix-dry-run\n\n * 文件后缀 eslint . --ext .js and .js2\n\n * 配置文件 eslint -c ~/my-eslint.json file.js\n\n * 禁用.eslintrc.*和package.json文件中的配置 eslint --no-eslintrc file.js\n\n\n# rules\n\n * 开启规则和发生错误时报告的等级\n\n * 规则的错误等级有三种：0 1 2 | off warn error\n\n * "off" 或 0 关闭规则\n\n * "warn" 或 1 开启规则，使用警告级别的错误：warn (不会导致程序退出)\n\n * "error" 或 2 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)\n\n\n# 代码注释\n\n# 例：忽略 no-undef 检查 在js文件中写入如下\n/* eslint-disable no-undef */\n\n# 例：设置 ===检查 在js文件中写入如下\n/* eslint eqeqeq: off */\n/* eslint eqeqeq: 0 */\n\n# 例：用注释指定全局变量 在js文件中写入如下\n/* global var 1, var2 */\n/* globael var1:false, var2:false */\n\n# 行内禁用\nconsole.log // eslint-disable-line\n\n# 代码块禁用\n/* eslint-disable */\nexport function func(a,b) {\n  return a+b\n}\n/* eslint-enable */\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# eslintignore\n\n * .eslintignore文件来避免检测处理\n * .eslintignore\n\n.vscode\n.git\nnode_modules\n\n\n1\n2\n3\n\n * webpack.config.js\n\nconst path = require(\'path\')\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|vue)$/,\n        loader: \'eslint-loader\',\n        enforce: \'pre\',\n        include: [path.join(__dirname, \'src\')],\n        options: {\n            fix: true\n        }\n      }\n    ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# prettier\n\n * prettier/prettier\n\n * prettier.io/playground\n\n * 安装\n\nnpm i -d prettier\nnpm i -d eslint-plugin-prettier\nnpm i -d eslint-config-prettier\n\n\n1\n2\n3\n\n * .eslintrc.js\n\nmodule.exports = {\n  root: true,\n  extends: ["standard", "prettier"],\n  env: {\n    es6: true,\n    browser: true,\n    node: true\n  },\n  plugins: ["prettier"],\n  parseroptions: {\n    sourcetype: "module",\n    ecmafeatures: {\n      jsx: true\n    },\n    parser: "babel-eslint"\n  },\n  rules: {\n    "prettier/prettier": "error"\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * webpack.config.js\n\nconst path = require(\'path\')\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|vue)$/,\n    \tloader: \'eslint-loader\',\n    \tenforce: \'pre\',\n    \tinclude: [path.join(__dirname, \'src\')],\n    \toptions: {\n          fix: true\n    \t}\n      }\n    ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * prettier.config.js\n\nmodule.exports = {\n  trailingcomma: "all",\n  tabwidth: 2,\n  semi: false,\n  bracketspacing: true,\n  singlequote: true,\n  jsxbracketsameline: true,\n  usetabs: true\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 配置说明\n\nmodule.exports = {\n  printwidth: 80, // 一行的字符数，如果超过会进行换行，默认为80\n  tabwidth: 2, // 一个tab代表几个空格数，默认为80\n  usetabs: false, // 是否使用tab进行缩进，默认为false，表示用空格进行缩减\n  singlequote: false, // 字符串是否使用单引号，默认为false，使用双引号\n  semi: true, // 行位是否使用分号，默认为true\n  trailingcomma: "none", // 是否使用尾逗号，有三个可选值"<none|es5|all>"\n  bracketspacing: true, // 对象大括号直接是否有空格，默认为true，效果：{ foo: bar }\n  parser: "babylon", // 代码的解析引擎，默认为babylon，与babel相同。\n  jsxbracketsamelinte: "false", // 在多行jsx元素最后一行的末尾添加 > 而使 > 单独一行\n  alwaysparens: "always" // 为单行箭头函数的参数添加圆括号, 默认值"avoid"; 可选值"< avoid | always >", 示例： (x) => x\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * .prettierignore\n\npackage-lock.json\n.next\nnode_modules/\ndist\nbuild\n\n\n1\n2\n3\n4\n5\n\n\n\n# editorconfig\n\n * editorconfig\n * vscode 配合插件editorconfig for vs code一起使用\n * .editorconfig文件配置\n\n# 最顶层的配置文件\nroot = true\n# 指定作用文件格式\n[*]\n# 缩进的类型 [space | tab]\nindent_style = tab\n# 缩进的大小\nindent_size = 2\n# 定义换行符 [lf | cr | crlf]\nend_of_line = lf\n# 编码格式\ncharset = utf-8\n# 是否除去换行行首的任意空白字符\ntrim_trailing_whitespace = true\n# 文件是否以一个空白行结尾 [true | false]\ninsert_final_newline = true\n\n# matches the exact files\n[{.*rc,*.yml,*.md,package.json,lerna.json,*.svg}]\nindent_style = space\n\n[*.md]\ntrim_trailing_whitespace = false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n * 通配符模式\n\n通配符            are\n*              匹配任意数量 string 类型的字符，\' / \' 除外\n**             匹配任意数量 string 类型的字符\n？              匹配任意单个字符\n[a-z]          匹配方括号规定范围内的任意单个字符\n[!a-z]         匹配不在方括号规定范围内的任意单个字符\n{s1,s2,s3}     匹配任意一个大括号内部美剧的字符(\',\'分隔)\n{num1..num2}   匹配 num1 和 num2 之间的任意一个整数，num1 和 num2 正负都可以\n\n * example\n\nroot = true\n\n[*]\nindent_style = tab\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{json,yml}]\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647945545e3,createdTime:1647945545e3},{title:"常见的事件封装",frontmatter:{title:"常见的事件封装",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["event"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/event.html",relativePath:"frontend/issues/event.md",key:"v-521a09eb",path:"/frontend/issues/event.html",headers:[{level:2,title:"获取键盘事件的键值",slug:"获取键盘事件的键值",normalizedTitle:"获取键盘事件的键值",charIndex:2},{level:2,title:"onmousewheel 兼容",slug:"onmousewheel-兼容",normalizedTitle:"onmousewheel 兼容",charIndex:145},{level:2,title:"禁止选中",slug:"禁止选中",normalizedTitle:"禁止选中",charIndex:663},{level:2,title:"requestAnimationFrame",slug:"requestanimationframe",normalizedTitle:"requestanimationframe",charIndex:1279},{level:2,title:"DOMContentLoaded",slug:"domcontentloaded",normalizedTitle:"domcontentloaded",charIndex:2322},{level:2,title:"stopPropagation(阻止冒泡)",slug:"stoppropagation-阻止冒泡",normalizedTitle:"stoppropagation(阻止冒泡)",charIndex:3430},{level:2,title:"preventDefault(阻止默认事件)",slug:"preventdefault-阻止默认事件",normalizedTitle:"preventdefault(阻止默认事件)",charIndex:3640},{level:2,title:"事件对象Event",slug:"事件对象event",normalizedTitle:"事件对象event",charIndex:3852},{level:2,title:"事件目标event.target",slug:"事件目标event-target",normalizedTitle:"事件目标event.target",charIndex:3909},{level:2,title:"addEventListener",slug:"addeventlistener",normalizedTitle:"addeventlistener",charIndex:446},{level:2,title:"removeEventListener",slug:"removeeventlistener",normalizedTitle:"removeeventlistener",charIndex:2570},{level:2,title:"dispatchDOMEvent",slug:"dispatchdomevent",normalizedTitle:"dispatchdomevent",charIndex:4660},{level:2,title:"EventEmitter（发布订阅模式）",slug:"eventemitter-发布订阅模式",normalizedTitle:"eventemitter（发布订阅模式）",charIndex:5025},{level:2,title:"自定义事件event",slug:"自定义事件event",normalizedTitle:"自定义事件event",charIndex:5976},{level:2,title:"事件循环(Event Loop)",slug:"事件循环-event-loop",normalizedTitle:"事件循环(event loop)",charIndex:6161},{level:2,title:"事件的传播(事件流)",slug:"事件的传播-事件流",normalizedTitle:"事件的传播(事件流)",charIndex:6316},{level:2,title:"事件委托",slug:"事件委托",normalizedTitle:"事件委托",charIndex:6541},{level:2,title:"touch长按事件",slug:"touch长按事件",normalizedTitle:"touch长按事件",charIndex:7161},{level:2,title:"touch双击事件",slug:"touch双击事件",normalizedTitle:"touch双击事件",charIndex:8103},{level:2,title:"touch向上滑动事件",slug:"touch向上滑动事件",normalizedTitle:"touch向上滑动事件",charIndex:10826},{level:2,title:"touch向下滑动事件",slug:"touch向下滑动事件",normalizedTitle:"touch向下滑动事件",charIndex:11884},{level:2,title:"touch向左滑动事件",slug:"touch向左滑动事件",normalizedTitle:"touch向左滑动事件",charIndex:12945},{level:2,title:"touch向右滑动事件",slug:"touch向右滑动事件",normalizedTitle:"touch向右滑动事件",charIndex:14006}],headersStr:"获取键盘事件的键值 onmousewheel 兼容 禁止选中 requestAnimationFrame DOMContentLoaded stopPropagation(阻止冒泡) preventDefault(阻止默认事件) 事件对象Event 事件目标event.target addEventListener removeEventListener dispatchDOMEvent EventEmitter（发布订阅模式） 自定义事件event 事件循环(Event Loop) 事件的传播(事件流) 事件委托 touch长按事件 touch双击事件 touch向上滑动事件 touch向下滑动事件 touch向左滑动事件 touch向右滑动事件",content:"# 获取键盘事件的键值\n\nfunction getKeyCode(e) {\n  e = e ? e : (window.event ? window.event : \"\")\n  return e.keyCode ? e.keyCode : e.which\n}\n\n\n1\n2\n3\n4\n\n\n\n# onmousewheel 兼容\n\n// 兼容onmousewheel\nfunction addMouseWheelEvent(element, func) {\n  if (typeof element.onmousewheel == \"object\") {\n    element.onmousewheel = function (ev) {\n      ev = ev || window.event;\n      //console.log(ev.wheelDelta);\n      func();\n    };\n  } else {\n    // 兼容 firefox\n    element.addEventListener(\"DOMMouseScroll\", function (ev) {\n      ev = ev || window.event;\n      //console.log('ev.detail : '+ev.detail);\n      func();\n    }, false);\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 禁止选中\n\n// 禁止选中\nfunction disabledSel() {\n  if (document.all) {\n    document.onselectstart = function () { return false; }; //for ie\n  } else {\n    document.onmousedown = function () { return false; };\n    document.onmouseup = function () { return true; };\n  }\n  document.onselectstart = new Function('event.returnValue=false;');\n  if (window.getSelector) {\n    var selection = window.getSelection();\n    selection.removeAllRanges();\n  } else if (document.selection && document.selection.empty) {\n    document.selection.empty();\n    // document.selection.clear();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# requestAnimationFrame\n\n(function () {\n  var lastTime = 0;\n  var vendors = ['webkit', 'moz', 'o', 'ms'];\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n      // name has changed in Webkit\n      window[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n\n  if (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = function (callback, element) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16.7 - (currTime - lastTime));\n      var id = window.setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  if (!window.cancelAnimationFrame) {\n    window.cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  }\n}());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# DOMContentLoaded\n\n// Javascript封装DOMContentLoaded事件\nfunction ready(callback) {\n  // 目前Mozilla、Opera和webkit 525+内核支持DOMContentLoaded事件\n  if (document.addEventListener) {\n    document.addEventListener('DOMContentLoaded', function () {\n      document.removeEventListener('DOMContentLoaded', arguments.callee, false);\n      callback && callback();\n    }, false);\n  }\n\n  // 如果IE\n  else if (document.attachEvent) {\n    // 确保当页面是在iframe中加载时，事件依旧会被安全触发\n    document.attachEvent('onreadystatechange', function () {\n      if (document.readyState == 'complete') {\n        document.detachEvent('onreadystatechange', arguments.callee);\n        callback && callback();\n      }\n    });\n\n    // 如果是IE且页面不在iframe中时，轮询调用doScroll 方法检测DOM是否加载完毕\n    if (document.documentElement.doScroll && typeof window.frameElement === \"undefined\") {\n      try {\n        document.documentElement.doScroll('left');\n      }\n      catch (error) {\n        return setTimeout(arguments.callee, 20);\n      };\n      callback && callback();\n    }\n  }\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# stopPropagation(阻止冒泡)\n\nconst stopPropagation = function (e) {\n  e = e || window.event;\n  if (document.all) { //只有ie识别\n    e.cancelBubble = true;\n  } else {\n    e.stopPropagation();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# preventDefault(阻止默认事件)\n\nconst stopDefault = function (e) {\n  e = e || window.event;\n  if (document.all) {\n    window.event.returnValue = false;\n  } else {\n    event.preventDefault();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 事件对象Event\n\nconst event = event || window.event;\n\n\n1\n\n\n\n# 事件目标event.target\n\nconst eventTarget = event.target || event.srcElement;\n\n\n1\n\n\n\n# addEventListener\n\nconst addEvent = function (element, type, handler) {\n  if (element.addEventListener) { //DOM2级\n    element.addEventListener(type, handler, false);\n  } else if (element.attachEvent) { //DOM1级\n    element.attachEvent(\"on\" + type, handler);\n  } else {\n    element[\"on\" + type] = handler; //DOM0级\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# removeEventListener\n\nconst  removeEvent = function (element, type, handler) {\n  if (element.removeEventListener) {\n    element.removeEventListener(type, handler, false);\n  } else if (element.detachEvent) {\n    element.detachEvent(\"on\" + type, handler);\n  } else {\n    element[\"on\" + type] = null;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# dispatchDOMEvent\n\n * dispatchDOMEvent\n\nfunction dispatchDOMEvent(el, payload, eventInit) {\n  let event;\n  if (void 0 !== Event) {\n    event = new Event(type, eventInit);\n  } else {\n    event = document.createEvent(\"HTMLEvents\");\n    event.initEvent(type, eventInit.bubbles, eventInit.cancelable);\n  }\n  return el.dispatchEvent(event);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# EventEmitter（发布订阅模式）\n\n> 36个手写题\n\nclass EventEmitter {\n    constructor() {\n        this.cache = {}\n    }\n    on(name, fn) {\n        if (this.cache[name]) {\n            this.cache[name].push(fn)\n        } else {\n            this.cache[name] = [fn]\n        }\n    }\n    off(name, fn) {\n        let tasks = this.cache[name]\n        if (tasks) {\n            const index = tasks.findIndex(f => f === fn || f.callback === fn)\n            if (index >= 0) {\n                tasks.splice(index, 1)\n            }\n        }\n    }\n    emit(name, once = false, ...args) {\n        if (this.cache[name]) {\n            // 创建副本，如果回调函数内继续注册相同事件，会造成死循环\n            let tasks = this.cache[name].slice()\n            for (let fn of tasks) {\n                fn(...args)\n            }\n            if (once) {\n                delete this.cache[name]\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 自定义事件event\n\n// 新建事件实例\nvar event = new Event('build');\n\n// 添加监听函数\nelem.addEventListener('build', function (e) { ... }, false);\n\n// 触发事件\nelem.dispatchEvent(event);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 事件循环(Event Loop)\n\n * 最后一次搞懂 Event Loop\n * 原地址：从 promise、process.nextTick、setTimeout 出发，谈谈 Event Loop 中的 Job queue #5\n * 执行顺序同步代码—>microTask—>macroTask\n\n\n# 事件的传播(事件流)\n\n * 什么是事件流：事件流描述的是从页面中接收事件的顺序,DOM2 级事件流包括下面几个阶段的三个阶段:\n * 第一阶段：从 window 对象传导到目标节点,称为\"捕获阶段\"(capture phase)\n * 第二阶段：在目标节点上触发,称为\"目标阶段\"(target phase)\n * 第三阶段：从目标节点传导回 window 对象,称为\"冒泡阶段\"(bubbling phase)\n * IE只支持事件冒泡\n\n\n# 事件委托\n\n * 利用事件冒泡的原理,将事件绑定在父容器中,让父容器代为触发\n\nvar ul = document.querySelector(\"ul\");\nul.addEventListener(\"click\", function(event) {\n  if (event.target.tagName.toLowerCase() === \"li\") {\n    // some code\n  }\n});\n\n// 阻止当前监听函数的传播\n//stopPropagation方法只会阻止当前监听函数的传播，\n//不会阻止<p>节点上的其他click事件的监听函数\np.addEventListener(\"click\", function(event) {\n  event.stopPropagation();\n});\n\n//如果想要不再触发那些监听函数，可以使用stopImmediatePropagation方法\np.addEventListener(\"click\", function(event) {\n  event.stopImmediatePropagation();\n});\n\np.addEventListener(\"click\", function(event) {\n  // 不会被触发\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# touch长按事件\n\nvar touch = {\n  /* 长按事件 */\n  longTap: function (dom, callback) {\n    if (dom && typeof dom == 'object') {\n      var startX, startY, startTime, isLongTime = false;\n      dom.addEventListener('touchstart', function (e) {\n        startTime = Date.now();\n        startX = e.touches[0].clientX;\n        startY = e.touches[0].clientY;\n      }, false);\n      dom.addEventListener('touchend', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        var endX = e.changedTouches[0].clientX;\n        var endY = e.changedTouches[0].clientY;\n        if (Math.abs(endX - startX) < 6 && Math.abs(endY - startY) < 6) {\n          isLongTime = true;\n        } else {\n          isLongTime = false;\n        }\n\n        if ((+new Date()) - startTime > 200 && isLongTime) {\n          callback && callback(e);\n        }\n      }, false);\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# touch双击事件\n\nvar touch = {\n  /* 双击事件 */\n  doubleTap: function (dom, callback) {\n    if (!dom) {\n      return false;\n    }\n    var isTouchEnd = false,\n      lastTime = 0,\n      lastTx = null,\n      lastTy = null,\n      firstTouchEnd = true,\n      body = document.body,\n      dTapTimer, startTx, startTy, startTime;\n    dom.addEventListener('touchstart', function (e) {\n      if (dTapTimer) {\n        clearTimeout(dTapTimer);\n        dTapTimer = null;\n      }\n      var touches = e.touches[0];\n      startTx = touches.clientX;\n      startTy = touches.clientY;\n    }, false);\n    dom.addEventListener('touchend', function (e) {\n      var touches = e.changedTouches[0],\n        endTx = touches.clientX,\n        endTy = touches.clientY,\n        now = Date.now(),\n        duration = now - lastTime;\n      // 首先要确保能触发单次的 tap 事件\n      if (Math.abs(startTx - endTx) < 6 && Math.abs(startTx - endTx) < 6) {\n        // 两次 tap 的间隔确保在 500 毫秒以内\n        if (duration < 301) {\n          // 本次的 tap 位置和上一次的 tap 的位置允许一定范围内的误差\n          if (lastTx !== null &&\n            Math.abs(lastTx - endTx) < 45 &&\n            Math.abs(lastTy - endTy) < 45) {\n            firstTouchEnd = true;\n            lastTx = lastTy = null;\n            callback && callback(e);\n          }\n        } else {\n          lastTx = endTx;\n          lastTy = endTy;\n        }\n      } else {\n        firstTouchEnd = true;\n        lastTx = lastTy = null;\n      }\n      lastTime = now;\n    }, false);\n    // 在 iOS 的 safari 上手指敲击屏幕的速度过快，\n    // 有一定的几率会导致第二次不会响应 touchstart 和 touchend 事件\n    // 同时手指长时间的touch不会触发click\n    if (~navigator.userAgent.toLowerCase().indexOf('iphone os')) {\n      body.addEventListener('touchstart', function (e) {\n        startTime = Date.now();\n      }, true);\n      body.addEventListener('touchend', function (e) {\n        var noLongTap = Date.now() - startTime < 501;\n        if (firstTouchEnd) {\n          firstTouchEnd = false;\n          if (noLongTap && e.target === dom) {\n            dTapTimer = setTimeout(function () {\n              firstTouchEnd = true;\n              lastTx = lastTy = null;\n              callback && callback(e);\n            }, 400);\n          }\n        } else {\n          firstTouchEnd = true;\n        }\n      }, true);\n      // iOS 上手指多次敲击屏幕时的速度过快不会触发 click 事件\n      dom.addEventListener('click', function (e) {\n        if (dTapTimer) {\n          clearTimeout(dTapTimer);\n          dTapTimer = null;\n          firstTouchEnd = true;\n        }\n      }, false);\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n\n\n\n# touch向上滑动事件\n\nvar touch = {\n  /*向上滑动事件*/\n  swipeUp: function (dom, callback) {\n    if (!dom) {\n      return false;\n    }\n    var isTouchMove, startTx, startTy;\n    dom.addEventListener('touchstart', function (e) {\n      var touches = e.touches[0];\n      startTx = touches.clientX;\n      startTy = touches.clientY;\n      isTouchMove = false;\n    }, false);\n    dom.addEventListener('touchmove', function (e) {\n      isTouchMove = true;\n      e.preventDefault();\n    }, false);\n    dom.addEventListener('touchend', function (e) {\n      if (!isTouchMove) {\n        return;\n      }\n      var touches = e.changedTouches[0],\n        endTx = touches.clientX,\n        endTy = touches.clientY,\n        distanceX = startTx - endTx\n      distanceY = startTy - endTy,\n        isSwipe = false;\n      if (Math.abs(distanceX) < Math.abs(distanceY)) {\n        if (distanceY > 20) {\n          callback();\n          isSwipe = true;\n        }\n      }\n    }, false);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# touch向下滑动事件\n\nvar touch = {\n  /*向下滑动事件*/\n  swipeDown: function (dom, callback) {\n    if (!dom) {\n      return false;\n    }\n    var isTouchMove, startTx, startTy;\n    dom.addEventListener('touchstart', function (e) {\n      var touches = e.touches[0];\n      startTx = touches.clientX;\n      startTy = touches.clientY;\n      isTouchMove = false;\n    }, false);\n    dom.addEventListener('touchmove', function (e) {\n      isTouchMove = true;\n      e.preventDefault();\n    }, false);\n    dom.addEventListener('touchend', function (e) {\n      if (!isTouchMove) {\n        return;\n      }\n      var touches = e.changedTouches[0],\n        endTx = touches.clientX,\n        endTy = touches.clientY,\n        distanceX = startTx - endTx\n      distanceY = startTy - endTy,\n        isSwipe = false;\n      if (Math.abs(distanceX) < Math.abs(distanceY)) {\n        if (distanceY < -20) {\n          callback();\n          isSwipe = true;\n        }\n      }\n    }, false);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# touch向左滑动事件\n\nvar touch = {\n  /*向左滑动事件*/\n  swipeLeft: function (dom, callback) {\n    if (!dom) {\n      return false;\n    }\n    var isTouchMove, startTx, startTy;\n    dom.addEventListener('touchstart', function (e) {\n      var touches = e.touches[0];\n      startTx = touches.clientX;\n      startTy = touches.clientY;\n      isTouchMove = false;\n    }, false);\n    dom.addEventListener('touchmove', function (e) {\n      isTouchMove = true;\n      e.preventDefault();\n    }, false);\n    dom.addEventListener('touchend', function (e) {\n      if (!isTouchMove) {\n        return;\n      }\n      var touches = e.changedTouches[0],\n        endTx = touches.clientX,\n        endTy = touches.clientY,\n        distanceX = startTx - endTx\n      distanceY = startTy - endTy,\n        isSwipe = false;\n      if (Math.abs(distanceX) >= Math.abs(distanceY)) {\n        if (distanceX > 20) {\n          callback();\n          isSwipe = true;\n        }\n      }\n    }, false);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# touch向右滑动事件\n\nvar touch = {\n  /*向右滑动事件*/\n  swipeRight: function (dom, callback) {\n    if (!dom) {\n      return false;\n    }\n    var isTouchMove, startTx, startTy;\n    dom.addEventListener('touchstart', function (e) {\n      var touches = e.touches[0];\n      startTx = touches.clientX;\n      startTy = touches.clientY;\n      isTouchMove = false;\n    }, false);\n    dom.addEventListener('touchmove', function (e) {\n      isTouchMove = true;\n      e.preventDefault();\n    }, false);\n    dom.addEventListener('touchend', function (e) {\n      if (!isTouchMove) {\n        return;\n      }\n      var touches = e.changedTouches[0],\n        endTx = touches.clientX,\n        endTy = touches.clientY,\n        distanceX = startTx - endTx\n      distanceY = startTy - endTy,\n        isSwipe = false;\n      if (Math.abs(distanceX) >= Math.abs(distanceY)) {\n        if (distanceX < -20) {\n          callback();\n          isSwipe = true;\n        }\n      }\n    }, false);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n",normalizedContent:"# 获取键盘事件的键值\n\nfunction getkeycode(e) {\n  e = e ? e : (window.event ? window.event : \"\")\n  return e.keycode ? e.keycode : e.which\n}\n\n\n1\n2\n3\n4\n\n\n\n# onmousewheel 兼容\n\n// 兼容onmousewheel\nfunction addmousewheelevent(element, func) {\n  if (typeof element.onmousewheel == \"object\") {\n    element.onmousewheel = function (ev) {\n      ev = ev || window.event;\n      //console.log(ev.wheeldelta);\n      func();\n    };\n  } else {\n    // 兼容 firefox\n    element.addeventlistener(\"dommousescroll\", function (ev) {\n      ev = ev || window.event;\n      //console.log('ev.detail : '+ev.detail);\n      func();\n    }, false);\n  }\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 禁止选中\n\n// 禁止选中\nfunction disabledsel() {\n  if (document.all) {\n    document.onselectstart = function () { return false; }; //for ie\n  } else {\n    document.onmousedown = function () { return false; };\n    document.onmouseup = function () { return true; };\n  }\n  document.onselectstart = new function('event.returnvalue=false;');\n  if (window.getselector) {\n    var selection = window.getselection();\n    selection.removeallranges();\n  } else if (document.selection && document.selection.empty) {\n    document.selection.empty();\n    // document.selection.clear();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# requestanimationframe\n\n(function () {\n  var lasttime = 0;\n  var vendors = ['webkit', 'moz', 'o', 'ms'];\n  for (var x = 0; x < vendors.length && !window.requestanimationframe; ++x) {\n    window.requestanimationframe = window[vendors[x] + 'requestanimationframe'];\n    window.cancelanimationframe = window[vendors[x] + 'cancelanimationframe'] ||\n      // name has changed in webkit\n      window[vendors[x] + 'cancelrequestanimationframe'];\n  }\n\n  if (!window.requestanimationframe) {\n    window.requestanimationframe = function (callback, element) {\n      var currtime = new date().gettime();\n      var timetocall = math.max(0, 16.7 - (currtime - lasttime));\n      var id = window.settimeout(function () {\n        callback(currtime + timetocall);\n      }, timetocall);\n      lasttime = currtime + timetocall;\n      return id;\n    };\n  }\n  if (!window.cancelanimationframe) {\n    window.cancelanimationframe = function (id) {\n      cleartimeout(id);\n    };\n  }\n}());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# domcontentloaded\n\n// javascript封装domcontentloaded事件\nfunction ready(callback) {\n  // 目前mozilla、opera和webkit 525+内核支持domcontentloaded事件\n  if (document.addeventlistener) {\n    document.addeventlistener('domcontentloaded', function () {\n      document.removeeventlistener('domcontentloaded', arguments.callee, false);\n      callback && callback();\n    }, false);\n  }\n\n  // 如果ie\n  else if (document.attachevent) {\n    // 确保当页面是在iframe中加载时，事件依旧会被安全触发\n    document.attachevent('onreadystatechange', function () {\n      if (document.readystate == 'complete') {\n        document.detachevent('onreadystatechange', arguments.callee);\n        callback && callback();\n      }\n    });\n\n    // 如果是ie且页面不在iframe中时，轮询调用doscroll 方法检测dom是否加载完毕\n    if (document.documentelement.doscroll && typeof window.frameelement === \"undefined\") {\n      try {\n        document.documentelement.doscroll('left');\n      }\n      catch (error) {\n        return settimeout(arguments.callee, 20);\n      };\n      callback && callback();\n    }\n  }\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# stoppropagation(阻止冒泡)\n\nconst stoppropagation = function (e) {\n  e = e || window.event;\n  if (document.all) { //只有ie识别\n    e.cancelbubble = true;\n  } else {\n    e.stoppropagation();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# preventdefault(阻止默认事件)\n\nconst stopdefault = function (e) {\n  e = e || window.event;\n  if (document.all) {\n    window.event.returnvalue = false;\n  } else {\n    event.preventdefault();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 事件对象event\n\nconst event = event || window.event;\n\n\n1\n\n\n\n# 事件目标event.target\n\nconst eventtarget = event.target || event.srcelement;\n\n\n1\n\n\n\n# addeventlistener\n\nconst addevent = function (element, type, handler) {\n  if (element.addeventlistener) { //dom2级\n    element.addeventlistener(type, handler, false);\n  } else if (element.attachevent) { //dom1级\n    element.attachevent(\"on\" + type, handler);\n  } else {\n    element[\"on\" + type] = handler; //dom0级\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# removeeventlistener\n\nconst  removeevent = function (element, type, handler) {\n  if (element.removeeventlistener) {\n    element.removeeventlistener(type, handler, false);\n  } else if (element.detachevent) {\n    element.detachevent(\"on\" + type, handler);\n  } else {\n    element[\"on\" + type] = null;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# dispatchdomevent\n\n * dispatchdomevent\n\nfunction dispatchdomevent(el, payload, eventinit) {\n  let event;\n  if (void 0 !== event) {\n    event = new event(type, eventinit);\n  } else {\n    event = document.createevent(\"htmlevents\");\n    event.initevent(type, eventinit.bubbles, eventinit.cancelable);\n  }\n  return el.dispatchevent(event);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# eventemitter（发布订阅模式）\n\n> 36个手写题\n\nclass eventemitter {\n    constructor() {\n        this.cache = {}\n    }\n    on(name, fn) {\n        if (this.cache[name]) {\n            this.cache[name].push(fn)\n        } else {\n            this.cache[name] = [fn]\n        }\n    }\n    off(name, fn) {\n        let tasks = this.cache[name]\n        if (tasks) {\n            const index = tasks.findindex(f => f === fn || f.callback === fn)\n            if (index >= 0) {\n                tasks.splice(index, 1)\n            }\n        }\n    }\n    emit(name, once = false, ...args) {\n        if (this.cache[name]) {\n            // 创建副本，如果回调函数内继续注册相同事件，会造成死循环\n            let tasks = this.cache[name].slice()\n            for (let fn of tasks) {\n                fn(...args)\n            }\n            if (once) {\n                delete this.cache[name]\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 自定义事件event\n\n// 新建事件实例\nvar event = new event('build');\n\n// 添加监听函数\nelem.addeventlistener('build', function (e) { ... }, false);\n\n// 触发事件\nelem.dispatchevent(event);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 事件循环(event loop)\n\n * 最后一次搞懂 event loop\n * 原地址：从 promise、process.nexttick、settimeout 出发，谈谈 event loop 中的 job queue #5\n * 执行顺序同步代码—>microtask—>macrotask\n\n\n# 事件的传播(事件流)\n\n * 什么是事件流：事件流描述的是从页面中接收事件的顺序,dom2 级事件流包括下面几个阶段的三个阶段:\n * 第一阶段：从 window 对象传导到目标节点,称为\"捕获阶段\"(capture phase)\n * 第二阶段：在目标节点上触发,称为\"目标阶段\"(target phase)\n * 第三阶段：从目标节点传导回 window 对象,称为\"冒泡阶段\"(bubbling phase)\n * ie只支持事件冒泡\n\n\n# 事件委托\n\n * 利用事件冒泡的原理,将事件绑定在父容器中,让父容器代为触发\n\nvar ul = document.queryselector(\"ul\");\nul.addeventlistener(\"click\", function(event) {\n  if (event.target.tagname.tolowercase() === \"li\") {\n    // some code\n  }\n});\n\n// 阻止当前监听函数的传播\n//stoppropagation方法只会阻止当前监听函数的传播，\n//不会阻止<p>节点上的其他click事件的监听函数\np.addeventlistener(\"click\", function(event) {\n  event.stoppropagation();\n});\n\n//如果想要不再触发那些监听函数，可以使用stopimmediatepropagation方法\np.addeventlistener(\"click\", function(event) {\n  event.stopimmediatepropagation();\n});\n\np.addeventlistener(\"click\", function(event) {\n  // 不会被触发\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# touch长按事件\n\nvar touch = {\n  /* 长按事件 */\n  longtap: function (dom, callback) {\n    if (dom && typeof dom == 'object') {\n      var startx, starty, starttime, islongtime = false;\n      dom.addeventlistener('touchstart', function (e) {\n        starttime = date.now();\n        startx = e.touches[0].clientx;\n        starty = e.touches[0].clienty;\n      }, false);\n      dom.addeventlistener('touchend', function (e) {\n        e.stoppropagation();\n        e.preventdefault();\n        var endx = e.changedtouches[0].clientx;\n        var endy = e.changedtouches[0].clienty;\n        if (math.abs(endx - startx) < 6 && math.abs(endy - starty) < 6) {\n          islongtime = true;\n        } else {\n          islongtime = false;\n        }\n\n        if ((+new date()) - starttime > 200 && islongtime) {\n          callback && callback(e);\n        }\n      }, false);\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# touch双击事件\n\nvar touch = {\n  /* 双击事件 */\n  doubletap: function (dom, callback) {\n    if (!dom) {\n      return false;\n    }\n    var istouchend = false,\n      lasttime = 0,\n      lasttx = null,\n      lastty = null,\n      firsttouchend = true,\n      body = document.body,\n      dtaptimer, starttx, startty, starttime;\n    dom.addeventlistener('touchstart', function (e) {\n      if (dtaptimer) {\n        cleartimeout(dtaptimer);\n        dtaptimer = null;\n      }\n      var touches = e.touches[0];\n      starttx = touches.clientx;\n      startty = touches.clienty;\n    }, false);\n    dom.addeventlistener('touchend', function (e) {\n      var touches = e.changedtouches[0],\n        endtx = touches.clientx,\n        endty = touches.clienty,\n        now = date.now(),\n        duration = now - lasttime;\n      // 首先要确保能触发单次的 tap 事件\n      if (math.abs(starttx - endtx) < 6 && math.abs(starttx - endtx) < 6) {\n        // 两次 tap 的间隔确保在 500 毫秒以内\n        if (duration < 301) {\n          // 本次的 tap 位置和上一次的 tap 的位置允许一定范围内的误差\n          if (lasttx !== null &&\n            math.abs(lasttx - endtx) < 45 &&\n            math.abs(lastty - endty) < 45) {\n            firsttouchend = true;\n            lasttx = lastty = null;\n            callback && callback(e);\n          }\n        } else {\n          lasttx = endtx;\n          lastty = endty;\n        }\n      } else {\n        firsttouchend = true;\n        lasttx = lastty = null;\n      }\n      lasttime = now;\n    }, false);\n    // 在 ios 的 safari 上手指敲击屏幕的速度过快，\n    // 有一定的几率会导致第二次不会响应 touchstart 和 touchend 事件\n    // 同时手指长时间的touch不会触发click\n    if (~navigator.useragent.tolowercase().indexof('iphone os')) {\n      body.addeventlistener('touchstart', function (e) {\n        starttime = date.now();\n      }, true);\n      body.addeventlistener('touchend', function (e) {\n        var nolongtap = date.now() - starttime < 501;\n        if (firsttouchend) {\n          firsttouchend = false;\n          if (nolongtap && e.target === dom) {\n            dtaptimer = settimeout(function () {\n              firsttouchend = true;\n              lasttx = lastty = null;\n              callback && callback(e);\n            }, 400);\n          }\n        } else {\n          firsttouchend = true;\n        }\n      }, true);\n      // ios 上手指多次敲击屏幕时的速度过快不会触发 click 事件\n      dom.addeventlistener('click', function (e) {\n        if (dtaptimer) {\n          cleartimeout(dtaptimer);\n          dtaptimer = null;\n          firsttouchend = true;\n        }\n      }, false);\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n\n\n\n# touch向上滑动事件\n\nvar touch = {\n  /*向上滑动事件*/\n  swipeup: function (dom, callback) {\n    if (!dom) {\n      return false;\n    }\n    var istouchmove, starttx, startty;\n    dom.addeventlistener('touchstart', function (e) {\n      var touches = e.touches[0];\n      starttx = touches.clientx;\n      startty = touches.clienty;\n      istouchmove = false;\n    }, false);\n    dom.addeventlistener('touchmove', function (e) {\n      istouchmove = true;\n      e.preventdefault();\n    }, false);\n    dom.addeventlistener('touchend', function (e) {\n      if (!istouchmove) {\n        return;\n      }\n      var touches = e.changedtouches[0],\n        endtx = touches.clientx,\n        endty = touches.clienty,\n        distancex = starttx - endtx\n      distancey = startty - endty,\n        isswipe = false;\n      if (math.abs(distancex) < math.abs(distancey)) {\n        if (distancey > 20) {\n          callback();\n          isswipe = true;\n        }\n      }\n    }, false);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# touch向下滑动事件\n\nvar touch = {\n  /*向下滑动事件*/\n  swipedown: function (dom, callback) {\n    if (!dom) {\n      return false;\n    }\n    var istouchmove, starttx, startty;\n    dom.addeventlistener('touchstart', function (e) {\n      var touches = e.touches[0];\n      starttx = touches.clientx;\n      startty = touches.clienty;\n      istouchmove = false;\n    }, false);\n    dom.addeventlistener('touchmove', function (e) {\n      istouchmove = true;\n      e.preventdefault();\n    }, false);\n    dom.addeventlistener('touchend', function (e) {\n      if (!istouchmove) {\n        return;\n      }\n      var touches = e.changedtouches[0],\n        endtx = touches.clientx,\n        endty = touches.clienty,\n        distancex = starttx - endtx\n      distancey = startty - endty,\n        isswipe = false;\n      if (math.abs(distancex) < math.abs(distancey)) {\n        if (distancey < -20) {\n          callback();\n          isswipe = true;\n        }\n      }\n    }, false);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# touch向左滑动事件\n\nvar touch = {\n  /*向左滑动事件*/\n  swipeleft: function (dom, callback) {\n    if (!dom) {\n      return false;\n    }\n    var istouchmove, starttx, startty;\n    dom.addeventlistener('touchstart', function (e) {\n      var touches = e.touches[0];\n      starttx = touches.clientx;\n      startty = touches.clienty;\n      istouchmove = false;\n    }, false);\n    dom.addeventlistener('touchmove', function (e) {\n      istouchmove = true;\n      e.preventdefault();\n    }, false);\n    dom.addeventlistener('touchend', function (e) {\n      if (!istouchmove) {\n        return;\n      }\n      var touches = e.changedtouches[0],\n        endtx = touches.clientx,\n        endty = touches.clienty,\n        distancex = starttx - endtx\n      distancey = startty - endty,\n        isswipe = false;\n      if (math.abs(distancex) >= math.abs(distancey)) {\n        if (distancex > 20) {\n          callback();\n          isswipe = true;\n        }\n      }\n    }, false);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# touch向右滑动事件\n\nvar touch = {\n  /*向右滑动事件*/\n  swiperight: function (dom, callback) {\n    if (!dom) {\n      return false;\n    }\n    var istouchmove, starttx, startty;\n    dom.addeventlistener('touchstart', function (e) {\n      var touches = e.touches[0];\n      starttx = touches.clientx;\n      startty = touches.clienty;\n      istouchmove = false;\n    }, false);\n    dom.addeventlistener('touchmove', function (e) {\n      istouchmove = true;\n      e.preventdefault();\n    }, false);\n    dom.addeventlistener('touchend', function (e) {\n      if (!istouchmove) {\n        return;\n      }\n      var touches = e.changedtouches[0],\n        endtx = touches.clientx,\n        endty = touches.clienty,\n        distancex = starttx - endtx\n      distancey = startty - endty,\n        isswipe = false;\n      if (math.abs(distancex) >= math.abs(distancey)) {\n        if (distancex < -20) {\n          callback();\n          isswipe = true;\n        }\n      }\n    }, false);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n",charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647925342e3,createdTime:1643899953e3},{title:"常见手写函数整理（一）",frontmatter:{title:"常见手写函数整理（一）",date:"2022-02-16T00:00:00.000Z",sidebar:"auto",tags:["function"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/fq-fn-01.html",relativePath:"frontend/issues/fq-fn-01.md",key:"v-dd7fb7c2",path:"/frontend/issues/fq-fn-01.html",headers:[{level:2,title:"手写typof",slug:"手写typof",normalizedTitle:"手写typof",charIndex:2},{level:2,title:"手写instanceof",slug:"手写instanceof",normalizedTitle:"手写instanceof",charIndex:214},{level:2,title:"手写Object.create",slug:"手写object-create",normalizedTitle:"手写object.create",charIndex:564},{level:2,title:"防抖函数debounce",slug:"防抖函数debounce",normalizedTitle:"防抖函数debounce",charIndex:1367},{level:2,title:"节流函数throttle",slug:"节流函数throttle",normalizedTitle:"节流函数throttle",charIndex:2575},{level:2,title:"手写new函数",slug:"手写new函数",normalizedTitle:"手写new函数",charIndex:4641},{level:2,title:"实现call",slug:"实现call",normalizedTitle:"实现call",charIndex:5474},{level:2,title:"实现apply",slug:"实现apply",normalizedTitle:"实现apply",charIndex:6171},{level:2,title:"实现bind",slug:"实现bind",normalizedTitle:"实现bind",charIndex:6984},{level:2,title:"实现浅拷贝shallowCopy",slug:"实现浅拷贝shallowcopy",normalizedTitle:"实现浅拷贝shallowcopy",charIndex:7464},{level:2,title:"实现深拷贝deepClone",slug:"实现深拷贝deepclone",normalizedTitle:"实现深拷贝deepclone",charIndex:7889},{level:2,title:"数组flat",slug:"数组flat",normalizedTitle:"数组flat",charIndex:9794},{level:2,title:"使用setTimeout实现setInterval",slug:"使用settimeout实现setinterval",normalizedTitle:"使用settimeout实现setinterval",charIndex:10897},{level:2,title:"实现数组forEach",slug:"实现数组foreach",normalizedTitle:"实现数组foreach",charIndex:11299},{level:2,title:"实现数组map",slug:"实现数组map",normalizedTitle:"实现数组map",charIndex:12177},{level:2,title:"实现数组filter",slug:"实现数组filter",normalizedTitle:"实现数组filter",charIndex:13052},{level:2,title:"实现数组reduce",slug:"实现数组reduce",normalizedTitle:"实现数组reduce",charIndex:14350},{level:2,title:"实现Object.assign",slug:"实现object-assign",normalizedTitle:"实现object.assign",charIndex:15794},{level:2,title:"柯里化curry",slug:"柯里化curry",normalizedTitle:"柯里化curry",charIndex:16304},{level:2,title:"偏函数partial",slug:"偏函数partial",normalizedTitle:"偏函数partial",charIndex:18190},{level:2,title:"实现字符串的repeat方法",slug:"实现字符串的repeat方法",normalizedTitle:"实现字符串的repeat方法",charIndex:18485},{level:2,title:"compose and pipe",slug:"compose-and-pipe",normalizedTitle:"compose and pipe",charIndex:18662},{level:2,title:"formateTime",slug:"formatetime",normalizedTitle:"formatetime",charIndex:18962},{level:2,title:"实现一个 JSON.stringify",slug:"实现一个-json-stringify",normalizedTitle:"实现一个 json.stringify",charIndex:19662},{level:2,title:"实现一个 JSON.parse",slug:"实现一个-json-parse",normalizedTitle:"实现一个 json.parse",charIndex:22799},{level:2,title:"AOP",slug:"aop",normalizedTitle:"aop",charIndex:23093}],headersStr:"手写typof 手写instanceof 手写Object.create 防抖函数debounce 节流函数throttle 手写new函数 实现call 实现apply 实现bind 实现浅拷贝shallowCopy 实现深拷贝deepClone 数组flat 使用setTimeout实现setInterval 实现数组forEach 实现数组map 实现数组filter 实现数组reduce 实现Object.assign 柯里化curry 偏函数partial 实现字符串的repeat方法 compose and pipe formateTime 实现一个 JSON.stringify 实现一个 JSON.parse AOP",content:"# 手写typof\n\nfunction typeOf(obj) {\n  return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase()\n}\ntypeOf([])        // 'array'\ntypeOf({})        // 'object'\ntypeOf(new Date)  // 'date'\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 手写instanceof\n\nfunction instanceOf(l, r) {\n  // let proto = l.__proto__;\n  let proto = Object.getPrototypeOf(l);\n  let prototype = r.prototype\n  while (true) {\n    if (proto == null) {\n      return false\n    }\n    if (proto == prototype) {\n      return true\n    }\n    proto = Object.getPrototypeOf(proto)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 手写Object.create\n\n * MDN: Object.create Polyfill\n\nif (typeof Object.create !== \"function\") {\n  Object.create = function(proto, propertiesObject) {\n    if (typeof proto !== \"object\" && typeof proto !== \"function\") {\n      throw new TypeError(\"Object prototype may only be an Object: \" + proto);\n    } else if (proto === null) {\n      throw new Error(\n        \"This browser's implementation of Object.create is a shim and doesn't support 'null' as the first argument.\"\n      );\n    }\n\n    if (typeof propertiesObject != \"undefined\")\n      throw new Error(\n        \"This browser's implementation of Object.create is a shim and doesn't support a second argument.\"\n      );\n\n    function F() {}\n    F.prototype = proto;\n\n    return new F();\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 防抖函数debounce\n\n> JavaScript 专题之跟着 underscore 学防抖\n\n事件在被触发 n 秒后，再执行回调；如果在这 n 秒中内再次被触发，则重新计时然后在执行回调\n\n * 简化版\n\n// 函数防抖的实现\nfunction debounce(fn, wait) {\n  let timer = null;\n\n  return function() {\n    let context = this,\n        args = arguments;\n\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\nSee More\n\n// underscore.js\nfunction debounce2(func, wait, immediate) {\n  var timer, result;\n  var debounced = function() {\n    var context = this;\n    var args = arguments;\n    if (timer) clearTimeout(timer);\n    if (immediate) {\n      var callNow = !timer;\n      timer = setTimeout(function() {\n        timer = null;\n      }, wait);\n      if (callNow) result = func.apply(context, args);\n    } else {\n      timer = setTimeout(function() {\n        func.apply(context, args);\n      }, wait);\n    }\n    return result;\n  };\n  debounced.cancel = function() {\n    clearTimeout(timer);\n    timer = null;\n  };\n  return debounced;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 节流函数throttle\n\n> JavaScript 专题之跟着 underscore 学节流\n\n单位时间内有事件被多次触发则，只生效一次\n\n * 简化版\n\n// 函数节流的实现;\nfunction throttle(fn, delay) {\n  let curTime = Date.now();\n\n  return function() {\n    let context = this,\n        args = arguments,\n        nowTime = Date.now();\n\n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - curTime >= delay) {\n      curTime = Date.now();\n      return fn.apply(context, args);\n    }\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\nSee More\n\nfunction throttle(func, wait, options) {\n  var timeout, context, args, result;\n  var previous = 0;\n  if (!options) options = {};\n\n  var later = function() {\n    previous = options.leading === false ? 0 : new Date().getTime();\n    timeout = null;\n    func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n\n  var throttled = function() {\n    var now = new Date().getTime();\n    if (!previous && options.leading === false) previous = now;\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n  };\n\n  throttled.cancel = function() {\n    clearTimeout(timeout);\n    previous = 0;\n    timeout = null;\n  };\n\n  return throttled;\n}\n\nfunction throttle(callback, time, ...arr) {\n  // 上次执行时间 第一次马上执行\n  let last = 0;\n  return () => {\n    // 当前时间\n    let cur = Date.now();\n    // 当前时间与上次执行的时间，是否超过间隔时间\n    if (cur - last > time) {\n      // ...arr为callback的参数\n      callback(...arr);\n      // 重置上次执行时间为当前时间 方便下次执行\n      last = cur;\n    }\n  };\n}\nlet fn = (a, b) => {\n  console.log('回调', a, b);\n};\n// 重复执行函数\nsetInterval(throttle(fn, 1000, '参数1', '参数2'), 10);\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n\n\n\n# 手写new函数\n\n> 「2021」高频前端面试题汇总之手写代码篇\n\n * 首先创建了一个新的空对象\n * 设置原型，将对象的原型设置为函数的 prototype 对象。\n * 让函数的 this 指向这个对象，执行构造函数的代码\n * 判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\nfunction new() {\n  // 1.将 arguments 对象转为数组\n  var args = [].slice.call(arguments);\n  var result = null\n  // 2.取出构造函数\n  var constructor = args.shift();\n  // 3.判断参数是否是一个函数\n  if (typeof constructor !== \"function\") {\n    console.error(\"type error\");\n    return;\n  }\n  // 4.创建一个空对象,继承构造函数的 prototype 属性\n  // var context.__proto__ = constructor.prototype;\n  var context = Object.create(constructor.prototype);\n  // 5.执行构造函数\n  var result = constructor.apply(context, args);\n  var isObject = (typeof result === \"object\") && result != null\n  // 6.如果返回结果是对象,就直接返回,则返回 context 对象\n  return isObject ? result : context;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 实现call\n\n * es6写法\n\nFunction.prototype._call = function (context) {\n  // 判断 context 是否传入，如果未传入则设置为 window\n  let context = context || window;\n  context.fn = this; // 将调用函数设为对象的方法\n  let args = [...arguments].slice(1);\n  let result = context.fn(...args);\n  delete context.fn;\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\nSee More\n * es5写法\n\nFunction.prototype.call2 = function (context) {\n    var context = context || window;\n    context.fn = this;\n\n    var args = [];\n    for(var i = 1, len = arguments.length; i < len; i++) {\n        args.push('arguments[' + i + ']');\n    }\n\n    var result = eval('context.fn(' + args +')');\n    delete context.fn\n    return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 实现apply\n\nFunction.prototype._apply = function (context) {\n  var context = context || window;\n  context.fn = this\n  let result;\n  // 判断是否有第二个参数\n  if (arguments[1]) {\n    result = context.fn(...arguments[1])\n  } else {\n    result = context.fn()\n  }\n  delete context.fn\n  return result\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\nSee More\n * 36个手写题\n\nFunction.prototype.apply2 = function (context, arr) {\n    var context = context || window;\n    context.fn = this;\n\n    var result;\n    if (!arr) {\n        result = context.fn();\n    } else {\n        var args = [];\n        for (var i = 0, len = arr.length; i < len; i++) {\n            args.push('arr[' + i + ']');\n        }\n        result = eval('context.fn(' + args + ')')\n    }\n\n    delete context.fn\n    return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 实现bind\n\nFunction.prototype._bind = function(context) {\n  // 保存原函数\n  let func = this;\n  // 获取参数\n  let params = [].slice.call(arguments, 1);\n\n  let Nop = function() {};\n\n  let bound = function() {\n    params = params.concat([].slice.call(arguments, 0));\n\n    return func.apply(this instanceof Nop\n           ? this : context, params);\n  }\n\n  Nop.prototype = func.prototype;\n  bound.prototype = new Nop();\n\n  return bound;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 实现浅拷贝shallowCopy\n\n * Object.assign\n * 扩展运算符(...)\n * 数组方法实现数组浅拷贝\n   * Array.prototype.slice\n   * Array.prototype.concat\n * 实现浅拷贝shallowCopy\n\nfunction shallowCopy(obj) {\n    if (typeof obj !== 'object') return\n\n    let newObj = obj instanceof Array ? [] : {}\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            newObj[key] = obj[key]\n        }\n    }\n    return newObj\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 实现深拷贝deepClone\n\n * JSON.parse(JSON.stringify(obj))\n * 函数库lodash的_.cloneDeep方法\n * 不考虑内置函数与引用问题\n\n// 深拷贝的实现\nfunction deepCopy(object) {\n  if (!object || typeof object !== \"object\") return;\n\n  let newObject = Array.isArray(object) ? [] : {};\n\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] =\n        typeof object[key] === \"object\" ? deepCopy(object[key]) : object[key];\n    }\n  }\n\n  return newObject;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * deepClone\n\nfunction deepClone(obj, map = new WeakMap()) {\n  if (obj instanceof RegExp) return new RegExp(obj);\n  if (obj instanceof Date) return new Date(obj);\n  // 判断是否是一个非对象\n  if (obj == null || typeof obj != \"object\") return obj;\n\n  if (map.has(obj)) {\n    return map.get(obj);\n  }\n  let t = {};\n  map.set(obj, t);\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      t[key] = deepClone(obj[key], map);\n    }\n  }\n  return t;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\nSee More\n * 36 个 JS 手写题\n\nconst isObject = (target) => (typeof target === \"object\" || typeof target === \"function\") && target !== null;\n\nfunction deepClone(target, map = new WeakMap()) {\n    if (map.get(target)) {\n        return target;\n    }\n    // 获取当前值的构造函数：获取它的类型\n    let constructor = target.constructor;\n    // 检测当前对象target是否与正则、日期格式对象匹配\n    if (/^(RegExp|Date)$/i.test(constructor.name)) {\n        // 创建一个新的特殊对象(正则类/日期类)的实例\n        return new constructor(target);\n    }\n    if (isObject(target)) {\n        map.set(target, true);  // 为循环引用的对象做标记\n        const cloneTarget = Array.isArray(target) ? [] : {};\n        for (let prop in target) {\n            if (target.hasOwnProperty(prop)) {\n                cloneTarget[prop] = deepClone(target[prop], map);\n            }\n        }\n        return cloneTarget;\n    } else {\n        return target;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 数组flat\n\n * reduce\n\nfunction flat(arr, depth) {\n  if(!Array.isArray(arr) || depth <= 0) {\n    return arr;\n  }\n  return arr.reduce((prev, cur) => {\n    if (Array.isArray(cur)) {\n      return prev.concat(_flat(cur, depth - 1))\n    } else {\n      return prev.concat(cur);\n    }\n  }, []);\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\nSee More\n * es5\n\nfunction flatten(arr) {\n    var result = [];\n    for (var i = 0, len = arr.length; i < len; i++) {\n        if (Array.isArray(arr[i])) {\n            result = result.concat(flatten(arr[i]))\n        } else {\n            result.push(arr[i])\n        }\n    }\n    return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * mdn#flat\n\nconst eachFlat = (arr = [], depth = 1) => {\n  const result = []; // 缓存递归结果\n  // 开始递归\n  (function flat(arr, depth) {\n    // forEach 会自动去除数组空位\n    arr.forEach((item) => {\n      // 控制递归深度\n      if (Array.isArray(item) && depth > 0) {\n        // 递归数组\n        flat(item, depth - 1)\n      } else {\n        // 缓存元素\n        result.push(item)\n      }\n    })\n  })(arr, depth)\n  // 返回递归结果\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 使用setTimeout实现setInterval\n\n * 使用 setTimeout 实现 setInterval\n\nfunction mySetInterval(fn, timeout) {\n  // 控制器，控制定时器是否继续执行\n  var timer = {\n    flag: true\n  };\n  // 设置递归函数，模拟定时器执行\n  function interval() {\n    if (timer.flag) {\n      fn();\n      setTimeout(interval, timeout);\n    }\n  }\n  // 启动定时器\n  setTimeout(interval, timeout);\n  // 返回控制器\n  return timer;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 实现数组forEach\n\n * forEach\n\nArray.prototype._forEach = function(fn, thisArg) {\n    if (typeof fn !== 'function') throw \"参数必须为函数\";\n    if(!Array.isArray(this)) throw \"只能对数组使用forEach方法\";\n    let arr = this;\n    for(let i=0; i<arr.length; i++) {\n        fn.call(thisArg, arr[i], i, arr)\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\nSee More\n * MDN array#polyfill\n\nArray.prototype._forEach = function(callback, thisArg) {\n    if (this == null) {\n        throw new TypeError('this is null or not defined')\n    }\n    if (typeof callback !== \"function\") {\n        throw new TypeError(callback + ' is not a function')\n    }\n    const O = Object(this)\n    const len = O.length >>> 0\n\n    let k = 0, res = []\n    while (k < len) {\n        if (k in O) {\n          res[k] = callback.call(thisArg, O[k], k, O);\n        }\n        k++;\n    }\n    return res\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 实现数组map\n\n * map\n\nArray.prototype.map = function(fn) {\n   if (typeof fn !== \"function\") {\n        throw Error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        res.push(fn(this[i]));\n    }\n    return res;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\nSee More\n * MDN array map#polyfill\n\nArray.prototype.map = function(callback, thisArg) {\n    if (this == null) {\n        throw new TypeError('this is null or not defined')\n    }\n    if (typeof callback !== \"function\") {\n        throw new TypeError(callback + ' is not a function')\n    }\n    const O = Object(this)  // this 就是当前的数组\n    const len = O.length >>> 0  // 后面有解释\n    let k = 0, res = []\n    while (k < len) {\n        if (k in O) {\n          res[k] = callback.call(thisArg, O[k], k, O);\n        }\n        k++;\n    }\n    return res\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 实现数组filter\n\n * filter\n\nArray.prototype._filter = function(fn) {\n    if (typeof fn !== \"function\") {\n        throw Error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        fn(this[i]) && res.push(this[i]);\n    }\n    return res;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\nSee More\n * MDN array filter#polyfill\n\nif (!Array.prototype.filter){\n  Array.prototype.filter = function(func, thisArg) {\n    'use strict';\n    if ( ! ((typeof func === 'Function' || typeof func === 'function') && this) )\n        throw new TypeError();\n\n    var len = this.length >>> 0,\n        res = new Array(len), // preallocate array\n        t = this, c = 0, i = -1;\n    if (thisArg === undefined){\n      while (++i !== len){\n        // checks to see if the key was set\n        if (i in this){\n          if (func(t[i], i, t)){\n            res[c++] = t[i];\n          }\n        }\n      }\n    }\n    else{\n      while (++i !== len){\n        // checks to see if the key was set\n        if (i in this){\n          if (func.call(thisArg, t[i], i, t)){\n            res[c++] = t[i];\n          }\n        }\n      }\n    }\n\n    res.length = c; // shrink down array to proper size\n    return res;\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# 实现数组reduce\n\nfunction mReduce(arr, reduceCallback, initialValue) {\n  if (!Array.isArray(arr) || !arr.length || typeof reduceCallback !== 'function'){\n    return [];\n  } else {\n    let hasInitialValue = initialValue !== undefined;\n    let value = hasInitialValue ? initialValue : arr[0];\n    // 如果有传递 initialValue，则索引从 1 开始，否则从 0 开始\n    for (let i = hasInitialValue ? 0 : 1, len = arr.length; i < len; i++) {\n      value = reduceCallback(value, arr[i], i, arr);\n    }\n    return value;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\nSee More\n * MDN array reduce#polyfill\n\nArray.prototype.reduce = function(callback, initialValue) {\n    if (this == null) {\n        throw new TypeError('this is null or not defined')\n    }\n    if (typeof callback !== \"function\") {\n        throw new TypeError(callback + ' is not a function')\n    }\n    const O = Object(this)\n    const len = O.length >>> 0\n    let k = 0, acc\n\n    if (arguments.length > 1) {\n        acc = initialValue\n    } else {\n        // 没传入初始值的时候，取数组中第一个非 empty 的值为初始值\n        while (k < len && !(k in O)) {\n            k++\n        }\n        if (k > len) {\n            throw new TypeError( 'Reduce of empty array with no initial value' );\n        }\n        acc = O[k++]\n    }\n    while (k < len) {\n        if (k in O) {\n            acc = callback(acc, O[k], k, O)\n        }\n        k++\n    }\n    return acc\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 实现Object.assign\n\n> 36 个 JS 手写题\n\nObject.assign2 = function(target, ...source) {\n    if (target == null) {\n        throw new TypeError('Cannot convert undefined or null to object')\n    }\n    let ret = Object(target)\n    source.forEach(function(obj) {\n        if (obj != null) {\n            for (let key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    ret[key] = obj[key]\n                }\n            }\n        }\n    })\n    return ret\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 柯里化curry\n\n * 逐步接收参数，并缓存供后期计算使用\n * 不立即计算，延后执行\n * 符合计算的条件，将缓存的参数，统一传递给执行方法\n * curry1：判断参数是否满足条件，满足条件执行方法，不满足则缓存参数\n\nfunction curry(fn) {\n  var allArgs = []; // 用来接收参数\n\n  return function next() {\n    var args = [].slice.call(arguments);\n\n    // 判断是否执行计算，即最后一个执行函数参数是否为空\n    if (args.length > 0) {\n      // 收集传入的参数，进行缓存\n      allArgs = allArgs.concat(args);\n      return next;\n    } else {\n      // 符合执行条件，执行计算\n      return fn.apply(null, allArgs);\n    }\n  };\n}\n\nvar add = currying(function() {\n  var sum = 0;\n  for (var i = 0; i < arguments.length; i++) {\n    sum += arguments[i];\n  }\n  return sum;\n});\n\nconsole.log(add(10, 2, 3)(4)());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n * curry2: 判断最后的参数是否与函数需要的参数数量相同，如果相同，则执行计算\n\nfunction curry(fn) {\n    var _args = [];\n    return function next() {\n      // 将参数收集起来\n      [].push.apply(_args, [].slice.call(arguments));\n      // 判断是否执行计算\n      if (_args.length === fn.length) {\n        const args = _args\n        _args = []\n        return fn.apply(this, args);\n      }\n      return next;\n    }\n}\nvar abc = function(a, b, c) {\n  return a + b + c;\n};\n\nvar curried = curry(abc)\nconsole.log(curried(1)(2)(3))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * curry3: 使用toString调用函数\n\nfunction curry2(fn) {\n    var _args = [];\n\n    function next() {\n        var args = [].slice.call(arguments);\n        _args = _args.concat(args)\n        return next;\n    }\n    // 字符类型\n    next.toString = function() {\n        return fn.apply(null, _args);\n    }\n    // 数值类型\n    next.valueOf = function() {\n        return fn.apply(null, _args);\n    }\n    return next;\n\n}\nvar add = curry2(function() {\n    var sum = 0;\n    for (var i = 0; i < arguments.length; i++) {\n        sum += arguments[i];\n    }\n    return sum;\n});\n\nalert(add(1, 2, 3)(4))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 偏函数partial\n\nfunction partial(fn, ...args) {\n  return (...arg) => {\n    // 收集参数\n    return fn(...args, ...arg)\n  }\n}\n// demo\nfunction add(...args) {\n  return args.reduce((a, b) => a + b)\n}\nlet partial_add = partial(add, 1, 2);\nconsole.log(partial_add(3, 4, 5));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 实现字符串的repeat方法\n\nfunction repeat(s, n) {\n  return (new Array(n + 1)).join(s);\n}\n\nfunction repeat(s, n) {\n  return (n > 0) ? s.concat(repeat(s, --n)) : \"\";\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# compose and pipe\n\n * compose\n\nfunction compose(fns){\n  return function(arg){\n    return fns.reduceRight((acc, fn) => fn(acc), arg);\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n * pipe\n\nfunction pipe(fns){\n  return function(...args){\n    return fns.reduce((acc, fn) => {\n      return fn(acc)\n    })\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# formateTime\n\nmodule.exports = {\n  formatDateTime(time, fmt) {\n    var date = new Date(time)\n    var o = {\n      'Y+': date.getFullYear(), // 年\n      'M+': date.getMonth() + 1, // 月份\n      'D+': date.getDate(), // 日\n      'h+': date.getHours(), // 小时\n      'm+': date.getMinutes(), // 分\n      's+': date.getSeconds(), // 秒\n      'q+': Math.floor((date.getMonth() + 3) / 3), // 季度\n      S: date.getMilliseconds(), // 毫秒\n    }\n    for (var k in o) {\n      if (new RegExp('(' + k + ')').test(fmt)) {\n        fmt = fmt.replace(\n          RegExp.$1,\n          o[k] < 10 ? '0' + o[k] : o[k],\n        )\n      }\n    }\n    return fmt\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 实现一个 JSON.stringify\n\n * 简单版：支持 obect/array/string/number\n\nfunction jsonStringify(data) {\n  let dataType = typeof data;\n  if (dataType !== 'object') { // 判断类型是否为普通类型\n    return String(data);\n  } else if (dataType === 'object') {\n    if (Array.isArray(data)) { // 判断是否是数组\n      let result = [];\n      data.forEach((item, index) => {\n        result[index] = jsonStringify(item);\n      });\n      result = \"[\" + result + \"]\";\n      return result.replace(/'/g, '\"');\n    } else { // 判断是否是对象\n      let result = [];\n      Object.keys(data).forEach((item, index) => {\n        result.push('\"' + item + '\"' + \":\" + jsonStringify(data[item]));\n      });\n      return (\"{\" + result + \"}\").replace(/'/g, '\"');\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n * 完整请参考实现 JSON.stringify\n\nfunction jsonStringify(data) {\n    let dataType = typeof data;\n\n    if (dataType !== 'object') {\n        let result = data;\n        //data 可能是 string/number/null/undefined/boolean\n        if (Number.isNaN(data) || data === Infinity) {\n            //NaN 和 Infinity 序列化返回 \"null\"\n            result = \"null\";\n        } else if (dataType === 'function' || dataType === 'undefined' || dataType === 'symbol') {\n            //function 、undefined 、symbol 序列化返回 undefined\n            return undefined;\n        } else if (dataType === 'string') {\n            result = '\"' + data + '\"';\n        }\n        //boolean 返回 String()\n        return String(result);\n    } else if (dataType === 'object') {\n        if (data === null) {\n            return \"null\"\n        } else if (data.toJSON && typeof data.toJSON === 'function') {\n            return jsonStringify(data.toJSON());\n        } else if (data instanceof Array) {\n            let result = [];\n            //如果是数组\n            //toJSON 方法可以存在于原型链中\n            data.forEach((item, index) => {\n                if (typeof item === 'undefined' || typeof item === 'function' || typeof item === 'symbol') {\n                    result[index] = \"null\";\n                } else {\n                    result[index] = jsonStringify(item);\n                }\n            });\n            result = \"[\" + result + \"]\";\n            return result.replace(/'/g, '\"');\n\n        } else {\n            //普通对象\n            /**\n             * 循环引用抛错(暂未检测，循环引用时，堆栈溢出)\n             * symbol key 忽略\n             * undefined、函数、symbol 为属性值，被忽略\n             */\n            let result = [];\n            Object.keys(data).forEach((item, index) => {\n                if (typeof item !== 'symbol') {\n                    //key 如果是symbol对象，忽略\n                    if (data[item] !== undefined && typeof data[item] !== 'function'\n                        && typeof data[item] !== 'symbol') {\n                        //键值如果是 undefined、函数、symbol 为属性值，忽略\n                        result.push('\"' + item + '\"' + \":\" + jsonStringify(data[item]));\n                    }\n                }\n            });\n            return (\"{\" + result + \"}\").replace(/'/g, '\"');\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n\n\n\n# 实现一个 JSON.parse\n\n * 完整参考实现 JSON.parse\n\n// new Function\nvar jsonStr = '{ \"age\": 20, \"name\": \"jack\" }';\nvar json = new Function(\"return \" + jsonStr)();\nconsole.log(json);\n\n// eval\nvar json = '{\"a\":\"1\", \"b\":2}';\nvar obj = eval(\"(\" + json + \")\");  // obj 就是 json 反序列化之后得到的对象\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# AOP\n\n> https://juejin.cn/post/7072545785769885726#heading-84\n\nFunction.prototype.before=function(fn){\n  return (...arg)=>{\n    fn.call(this,...arg)\n    this(...arg)\n  }\n}\nFunction.prototype.after=function(fn){\n  return (...arg)=>{\n    const result =this(...arg)\n    fn.call(this,...arg)\n    return result\n  }\n}\n\n// use\nlet func = () => console.log('func');\nfunc = func.before(() => {\n  console.log('===before===');\n}).after(() => {\n  console.log('===after===');\n});\n\nfunc();\n// ===before===\n// func\n// ===after===\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n",normalizedContent:"# 手写typof\n\nfunction typeof(obj) {\n  return object.prototype.tostring.call(obj).slice(8, -1).tolowercase()\n}\ntypeof([])        // 'array'\ntypeof({})        // 'object'\ntypeof(new date)  // 'date'\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 手写instanceof\n\nfunction instanceof(l, r) {\n  // let proto = l.__proto__;\n  let proto = object.getprototypeof(l);\n  let prototype = r.prototype\n  while (true) {\n    if (proto == null) {\n      return false\n    }\n    if (proto == prototype) {\n      return true\n    }\n    proto = object.getprototypeof(proto)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 手写object.create\n\n * mdn: object.create polyfill\n\nif (typeof object.create !== \"function\") {\n  object.create = function(proto, propertiesobject) {\n    if (typeof proto !== \"object\" && typeof proto !== \"function\") {\n      throw new typeerror(\"object prototype may only be an object: \" + proto);\n    } else if (proto === null) {\n      throw new error(\n        \"this browser's implementation of object.create is a shim and doesn't support 'null' as the first argument.\"\n      );\n    }\n\n    if (typeof propertiesobject != \"undefined\")\n      throw new error(\n        \"this browser's implementation of object.create is a shim and doesn't support a second argument.\"\n      );\n\n    function f() {}\n    f.prototype = proto;\n\n    return new f();\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 防抖函数debounce\n\n> javascript 专题之跟着 underscore 学防抖\n\n事件在被触发 n 秒后，再执行回调；如果在这 n 秒中内再次被触发，则重新计时然后在执行回调\n\n * 简化版\n\n// 函数防抖的实现\nfunction debounce(fn, wait) {\n  let timer = null;\n\n  return function() {\n    let context = this,\n        args = arguments;\n\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) {\n      cleartimeout(timer);\n      timer = null;\n    }\n\n    // 设置定时器，使事件间隔指定事件后执行\n    timer = settimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\nsee more\n\n// underscore.js\nfunction debounce2(func, wait, immediate) {\n  var timer, result;\n  var debounced = function() {\n    var context = this;\n    var args = arguments;\n    if (timer) cleartimeout(timer);\n    if (immediate) {\n      var callnow = !timer;\n      timer = settimeout(function() {\n        timer = null;\n      }, wait);\n      if (callnow) result = func.apply(context, args);\n    } else {\n      timer = settimeout(function() {\n        func.apply(context, args);\n      }, wait);\n    }\n    return result;\n  };\n  debounced.cancel = function() {\n    cleartimeout(timer);\n    timer = null;\n  };\n  return debounced;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 节流函数throttle\n\n> javascript 专题之跟着 underscore 学节流\n\n单位时间内有事件被多次触发则，只生效一次\n\n * 简化版\n\n// 函数节流的实现;\nfunction throttle(fn, delay) {\n  let curtime = date.now();\n\n  return function() {\n    let context = this,\n        args = arguments,\n        nowtime = date.now();\n\n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowtime - curtime >= delay) {\n      curtime = date.now();\n      return fn.apply(context, args);\n    }\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\nsee more\n\nfunction throttle(func, wait, options) {\n  var timeout, context, args, result;\n  var previous = 0;\n  if (!options) options = {};\n\n  var later = function() {\n    previous = options.leading === false ? 0 : new date().gettime();\n    timeout = null;\n    func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n\n  var throttled = function() {\n    var now = new date().gettime();\n    if (!previous && options.leading === false) previous = now;\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        cleartimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = settimeout(later, remaining);\n    }\n  };\n\n  throttled.cancel = function() {\n    cleartimeout(timeout);\n    previous = 0;\n    timeout = null;\n  };\n\n  return throttled;\n}\n\nfunction throttle(callback, time, ...arr) {\n  // 上次执行时间 第一次马上执行\n  let last = 0;\n  return () => {\n    // 当前时间\n    let cur = date.now();\n    // 当前时间与上次执行的时间，是否超过间隔时间\n    if (cur - last > time) {\n      // ...arr为callback的参数\n      callback(...arr);\n      // 重置上次执行时间为当前时间 方便下次执行\n      last = cur;\n    }\n  };\n}\nlet fn = (a, b) => {\n  console.log('回调', a, b);\n};\n// 重复执行函数\nsetinterval(throttle(fn, 1000, '参数1', '参数2'), 10);\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n\n\n\n# 手写new函数\n\n> 「2021」高频前端面试题汇总之手写代码篇\n\n * 首先创建了一个新的空对象\n * 设置原型，将对象的原型设置为函数的 prototype 对象。\n * 让函数的 this 指向这个对象，执行构造函数的代码\n * 判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\nfunction new() {\n  // 1.将 arguments 对象转为数组\n  var args = [].slice.call(arguments);\n  var result = null\n  // 2.取出构造函数\n  var constructor = args.shift();\n  // 3.判断参数是否是一个函数\n  if (typeof constructor !== \"function\") {\n    console.error(\"type error\");\n    return;\n  }\n  // 4.创建一个空对象,继承构造函数的 prototype 属性\n  // var context.__proto__ = constructor.prototype;\n  var context = object.create(constructor.prototype);\n  // 5.执行构造函数\n  var result = constructor.apply(context, args);\n  var isobject = (typeof result === \"object\") && result != null\n  // 6.如果返回结果是对象,就直接返回,则返回 context 对象\n  return isobject ? result : context;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 实现call\n\n * es6写法\n\nfunction.prototype._call = function (context) {\n  // 判断 context 是否传入，如果未传入则设置为 window\n  let context = context || window;\n  context.fn = this; // 将调用函数设为对象的方法\n  let args = [...arguments].slice(1);\n  let result = context.fn(...args);\n  delete context.fn;\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\nsee more\n * es5写法\n\nfunction.prototype.call2 = function (context) {\n    var context = context || window;\n    context.fn = this;\n\n    var args = [];\n    for(var i = 1, len = arguments.length; i < len; i++) {\n        args.push('arguments[' + i + ']');\n    }\n\n    var result = eval('context.fn(' + args +')');\n    delete context.fn\n    return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 实现apply\n\nfunction.prototype._apply = function (context) {\n  var context = context || window;\n  context.fn = this\n  let result;\n  // 判断是否有第二个参数\n  if (arguments[1]) {\n    result = context.fn(...arguments[1])\n  } else {\n    result = context.fn()\n  }\n  delete context.fn\n  return result\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\nsee more\n * 36个手写题\n\nfunction.prototype.apply2 = function (context, arr) {\n    var context = context || window;\n    context.fn = this;\n\n    var result;\n    if (!arr) {\n        result = context.fn();\n    } else {\n        var args = [];\n        for (var i = 0, len = arr.length; i < len; i++) {\n            args.push('arr[' + i + ']');\n        }\n        result = eval('context.fn(' + args + ')')\n    }\n\n    delete context.fn\n    return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 实现bind\n\nfunction.prototype._bind = function(context) {\n  // 保存原函数\n  let func = this;\n  // 获取参数\n  let params = [].slice.call(arguments, 1);\n\n  let nop = function() {};\n\n  let bound = function() {\n    params = params.concat([].slice.call(arguments, 0));\n\n    return func.apply(this instanceof nop\n           ? this : context, params);\n  }\n\n  nop.prototype = func.prototype;\n  bound.prototype = new nop();\n\n  return bound;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 实现浅拷贝shallowcopy\n\n * object.assign\n * 扩展运算符(...)\n * 数组方法实现数组浅拷贝\n   * array.prototype.slice\n   * array.prototype.concat\n * 实现浅拷贝shallowcopy\n\nfunction shallowcopy(obj) {\n    if (typeof obj !== 'object') return\n\n    let newobj = obj instanceof array ? [] : {}\n    for (let key in obj) {\n        if (obj.hasownproperty(key)) {\n            newobj[key] = obj[key]\n        }\n    }\n    return newobj\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 实现深拷贝deepclone\n\n * json.parse(json.stringify(obj))\n * 函数库lodash的_.clonedeep方法\n * 不考虑内置函数与引用问题\n\n// 深拷贝的实现\nfunction deepcopy(object) {\n  if (!object || typeof object !== \"object\") return;\n\n  let newobject = array.isarray(object) ? [] : {};\n\n  for (let key in object) {\n    if (object.hasownproperty(key)) {\n      newobject[key] =\n        typeof object[key] === \"object\" ? deepcopy(object[key]) : object[key];\n    }\n  }\n\n  return newobject;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * deepclone\n\nfunction deepclone(obj, map = new weakmap()) {\n  if (obj instanceof regexp) return new regexp(obj);\n  if (obj instanceof date) return new date(obj);\n  // 判断是否是一个非对象\n  if (obj == null || typeof obj != \"object\") return obj;\n\n  if (map.has(obj)) {\n    return map.get(obj);\n  }\n  let t = {};\n  map.set(obj, t);\n  for (let key in obj) {\n    if (obj.hasownproperty(key)) {\n      t[key] = deepclone(obj[key], map);\n    }\n  }\n  return t;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\nsee more\n * 36 个 js 手写题\n\nconst isobject = (target) => (typeof target === \"object\" || typeof target === \"function\") && target !== null;\n\nfunction deepclone(target, map = new weakmap()) {\n    if (map.get(target)) {\n        return target;\n    }\n    // 获取当前值的构造函数：获取它的类型\n    let constructor = target.constructor;\n    // 检测当前对象target是否与正则、日期格式对象匹配\n    if (/^(regexp|date)$/i.test(constructor.name)) {\n        // 创建一个新的特殊对象(正则类/日期类)的实例\n        return new constructor(target);\n    }\n    if (isobject(target)) {\n        map.set(target, true);  // 为循环引用的对象做标记\n        const clonetarget = array.isarray(target) ? [] : {};\n        for (let prop in target) {\n            if (target.hasownproperty(prop)) {\n                clonetarget[prop] = deepclone(target[prop], map);\n            }\n        }\n        return clonetarget;\n    } else {\n        return target;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 数组flat\n\n * reduce\n\nfunction flat(arr, depth) {\n  if(!array.isarray(arr) || depth <= 0) {\n    return arr;\n  }\n  return arr.reduce((prev, cur) => {\n    if (array.isarray(cur)) {\n      return prev.concat(_flat(cur, depth - 1))\n    } else {\n      return prev.concat(cur);\n    }\n  }, []);\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\nsee more\n * es5\n\nfunction flatten(arr) {\n    var result = [];\n    for (var i = 0, len = arr.length; i < len; i++) {\n        if (array.isarray(arr[i])) {\n            result = result.concat(flatten(arr[i]))\n        } else {\n            result.push(arr[i])\n        }\n    }\n    return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * mdn#flat\n\nconst eachflat = (arr = [], depth = 1) => {\n  const result = []; // 缓存递归结果\n  // 开始递归\n  (function flat(arr, depth) {\n    // foreach 会自动去除数组空位\n    arr.foreach((item) => {\n      // 控制递归深度\n      if (array.isarray(item) && depth > 0) {\n        // 递归数组\n        flat(item, depth - 1)\n      } else {\n        // 缓存元素\n        result.push(item)\n      }\n    })\n  })(arr, depth)\n  // 返回递归结果\n  return result;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 使用settimeout实现setinterval\n\n * 使用 settimeout 实现 setinterval\n\nfunction mysetinterval(fn, timeout) {\n  // 控制器，控制定时器是否继续执行\n  var timer = {\n    flag: true\n  };\n  // 设置递归函数，模拟定时器执行\n  function interval() {\n    if (timer.flag) {\n      fn();\n      settimeout(interval, timeout);\n    }\n  }\n  // 启动定时器\n  settimeout(interval, timeout);\n  // 返回控制器\n  return timer;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 实现数组foreach\n\n * foreach\n\narray.prototype._foreach = function(fn, thisarg) {\n    if (typeof fn !== 'function') throw \"参数必须为函数\";\n    if(!array.isarray(this)) throw \"只能对数组使用foreach方法\";\n    let arr = this;\n    for(let i=0; i<arr.length; i++) {\n        fn.call(thisarg, arr[i], i, arr)\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\nsee more\n * mdn array#polyfill\n\narray.prototype._foreach = function(callback, thisarg) {\n    if (this == null) {\n        throw new typeerror('this is null or not defined')\n    }\n    if (typeof callback !== \"function\") {\n        throw new typeerror(callback + ' is not a function')\n    }\n    const o = object(this)\n    const len = o.length >>> 0\n\n    let k = 0, res = []\n    while (k < len) {\n        if (k in o) {\n          res[k] = callback.call(thisarg, o[k], k, o);\n        }\n        k++;\n    }\n    return res\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 实现数组map\n\n * map\n\narray.prototype.map = function(fn) {\n   if (typeof fn !== \"function\") {\n        throw error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        res.push(fn(this[i]));\n    }\n    return res;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\nsee more\n * mdn array map#polyfill\n\narray.prototype.map = function(callback, thisarg) {\n    if (this == null) {\n        throw new typeerror('this is null or not defined')\n    }\n    if (typeof callback !== \"function\") {\n        throw new typeerror(callback + ' is not a function')\n    }\n    const o = object(this)  // this 就是当前的数组\n    const len = o.length >>> 0  // 后面有解释\n    let k = 0, res = []\n    while (k < len) {\n        if (k in o) {\n          res[k] = callback.call(thisarg, o[k], k, o);\n        }\n        k++;\n    }\n    return res\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 实现数组filter\n\n * filter\n\narray.prototype._filter = function(fn) {\n    if (typeof fn !== \"function\") {\n        throw error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        fn(this[i]) && res.push(this[i]);\n    }\n    return res;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\nsee more\n * mdn array filter#polyfill\n\nif (!array.prototype.filter){\n  array.prototype.filter = function(func, thisarg) {\n    'use strict';\n    if ( ! ((typeof func === 'function' || typeof func === 'function') && this) )\n        throw new typeerror();\n\n    var len = this.length >>> 0,\n        res = new array(len), // preallocate array\n        t = this, c = 0, i = -1;\n    if (thisarg === undefined){\n      while (++i !== len){\n        // checks to see if the key was set\n        if (i in this){\n          if (func(t[i], i, t)){\n            res[c++] = t[i];\n          }\n        }\n      }\n    }\n    else{\n      while (++i !== len){\n        // checks to see if the key was set\n        if (i in this){\n          if (func.call(thisarg, t[i], i, t)){\n            res[c++] = t[i];\n          }\n        }\n      }\n    }\n\n    res.length = c; // shrink down array to proper size\n    return res;\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# 实现数组reduce\n\nfunction mreduce(arr, reducecallback, initialvalue) {\n  if (!array.isarray(arr) || !arr.length || typeof reducecallback !== 'function'){\n    return [];\n  } else {\n    let hasinitialvalue = initialvalue !== undefined;\n    let value = hasinitialvalue ? initialvalue : arr[0];\n    // 如果有传递 initialvalue，则索引从 1 开始，否则从 0 开始\n    for (let i = hasinitialvalue ? 0 : 1, len = arr.length; i < len; i++) {\n      value = reducecallback(value, arr[i], i, arr);\n    }\n    return value;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\nsee more\n * mdn array reduce#polyfill\n\narray.prototype.reduce = function(callback, initialvalue) {\n    if (this == null) {\n        throw new typeerror('this is null or not defined')\n    }\n    if (typeof callback !== \"function\") {\n        throw new typeerror(callback + ' is not a function')\n    }\n    const o = object(this)\n    const len = o.length >>> 0\n    let k = 0, acc\n\n    if (arguments.length > 1) {\n        acc = initialvalue\n    } else {\n        // 没传入初始值的时候，取数组中第一个非 empty 的值为初始值\n        while (k < len && !(k in o)) {\n            k++\n        }\n        if (k > len) {\n            throw new typeerror( 'reduce of empty array with no initial value' );\n        }\n        acc = o[k++]\n    }\n    while (k < len) {\n        if (k in o) {\n            acc = callback(acc, o[k], k, o)\n        }\n        k++\n    }\n    return acc\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 实现object.assign\n\n> 36 个 js 手写题\n\nobject.assign2 = function(target, ...source) {\n    if (target == null) {\n        throw new typeerror('cannot convert undefined or null to object')\n    }\n    let ret = object(target)\n    source.foreach(function(obj) {\n        if (obj != null) {\n            for (let key in obj) {\n                if (obj.hasownproperty(key)) {\n                    ret[key] = obj[key]\n                }\n            }\n        }\n    })\n    return ret\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 柯里化curry\n\n * 逐步接收参数，并缓存供后期计算使用\n * 不立即计算，延后执行\n * 符合计算的条件，将缓存的参数，统一传递给执行方法\n * curry1：判断参数是否满足条件，满足条件执行方法，不满足则缓存参数\n\nfunction curry(fn) {\n  var allargs = []; // 用来接收参数\n\n  return function next() {\n    var args = [].slice.call(arguments);\n\n    // 判断是否执行计算，即最后一个执行函数参数是否为空\n    if (args.length > 0) {\n      // 收集传入的参数，进行缓存\n      allargs = allargs.concat(args);\n      return next;\n    } else {\n      // 符合执行条件，执行计算\n      return fn.apply(null, allargs);\n    }\n  };\n}\n\nvar add = currying(function() {\n  var sum = 0;\n  for (var i = 0; i < arguments.length; i++) {\n    sum += arguments[i];\n  }\n  return sum;\n});\n\nconsole.log(add(10, 2, 3)(4)());\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n * curry2: 判断最后的参数是否与函数需要的参数数量相同，如果相同，则执行计算\n\nfunction curry(fn) {\n    var _args = [];\n    return function next() {\n      // 将参数收集起来\n      [].push.apply(_args, [].slice.call(arguments));\n      // 判断是否执行计算\n      if (_args.length === fn.length) {\n        const args = _args\n        _args = []\n        return fn.apply(this, args);\n      }\n      return next;\n    }\n}\nvar abc = function(a, b, c) {\n  return a + b + c;\n};\n\nvar curried = curry(abc)\nconsole.log(curried(1)(2)(3))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * curry3: 使用tostring调用函数\n\nfunction curry2(fn) {\n    var _args = [];\n\n    function next() {\n        var args = [].slice.call(arguments);\n        _args = _args.concat(args)\n        return next;\n    }\n    // 字符类型\n    next.tostring = function() {\n        return fn.apply(null, _args);\n    }\n    // 数值类型\n    next.valueof = function() {\n        return fn.apply(null, _args);\n    }\n    return next;\n\n}\nvar add = curry2(function() {\n    var sum = 0;\n    for (var i = 0; i < arguments.length; i++) {\n        sum += arguments[i];\n    }\n    return sum;\n});\n\nalert(add(1, 2, 3)(4))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 偏函数partial\n\nfunction partial(fn, ...args) {\n  return (...arg) => {\n    // 收集参数\n    return fn(...args, ...arg)\n  }\n}\n// demo\nfunction add(...args) {\n  return args.reduce((a, b) => a + b)\n}\nlet partial_add = partial(add, 1, 2);\nconsole.log(partial_add(3, 4, 5));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 实现字符串的repeat方法\n\nfunction repeat(s, n) {\n  return (new array(n + 1)).join(s);\n}\n\nfunction repeat(s, n) {\n  return (n > 0) ? s.concat(repeat(s, --n)) : \"\";\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# compose and pipe\n\n * compose\n\nfunction compose(fns){\n  return function(arg){\n    return fns.reduceright((acc, fn) => fn(acc), arg);\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n * pipe\n\nfunction pipe(fns){\n  return function(...args){\n    return fns.reduce((acc, fn) => {\n      return fn(acc)\n    })\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# formatetime\n\nmodule.exports = {\n  formatdatetime(time, fmt) {\n    var date = new date(time)\n    var o = {\n      'y+': date.getfullyear(), // 年\n      'm+': date.getmonth() + 1, // 月份\n      'd+': date.getdate(), // 日\n      'h+': date.gethours(), // 小时\n      'm+': date.getminutes(), // 分\n      's+': date.getseconds(), // 秒\n      'q+': math.floor((date.getmonth() + 3) / 3), // 季度\n      s: date.getmilliseconds(), // 毫秒\n    }\n    for (var k in o) {\n      if (new regexp('(' + k + ')').test(fmt)) {\n        fmt = fmt.replace(\n          regexp.$1,\n          o[k] < 10 ? '0' + o[k] : o[k],\n        )\n      }\n    }\n    return fmt\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 实现一个 json.stringify\n\n * 简单版：支持 obect/array/string/number\n\nfunction jsonstringify(data) {\n  let datatype = typeof data;\n  if (datatype !== 'object') { // 判断类型是否为普通类型\n    return string(data);\n  } else if (datatype === 'object') {\n    if (array.isarray(data)) { // 判断是否是数组\n      let result = [];\n      data.foreach((item, index) => {\n        result[index] = jsonstringify(item);\n      });\n      result = \"[\" + result + \"]\";\n      return result.replace(/'/g, '\"');\n    } else { // 判断是否是对象\n      let result = [];\n      object.keys(data).foreach((item, index) => {\n        result.push('\"' + item + '\"' + \":\" + jsonstringify(data[item]));\n      });\n      return (\"{\" + result + \"}\").replace(/'/g, '\"');\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n * 完整请参考实现 json.stringify\n\nfunction jsonstringify(data) {\n    let datatype = typeof data;\n\n    if (datatype !== 'object') {\n        let result = data;\n        //data 可能是 string/number/null/undefined/boolean\n        if (number.isnan(data) || data === infinity) {\n            //nan 和 infinity 序列化返回 \"null\"\n            result = \"null\";\n        } else if (datatype === 'function' || datatype === 'undefined' || datatype === 'symbol') {\n            //function 、undefined 、symbol 序列化返回 undefined\n            return undefined;\n        } else if (datatype === 'string') {\n            result = '\"' + data + '\"';\n        }\n        //boolean 返回 string()\n        return string(result);\n    } else if (datatype === 'object') {\n        if (data === null) {\n            return \"null\"\n        } else if (data.tojson && typeof data.tojson === 'function') {\n            return jsonstringify(data.tojson());\n        } else if (data instanceof array) {\n            let result = [];\n            //如果是数组\n            //tojson 方法可以存在于原型链中\n            data.foreach((item, index) => {\n                if (typeof item === 'undefined' || typeof item === 'function' || typeof item === 'symbol') {\n                    result[index] = \"null\";\n                } else {\n                    result[index] = jsonstringify(item);\n                }\n            });\n            result = \"[\" + result + \"]\";\n            return result.replace(/'/g, '\"');\n\n        } else {\n            //普通对象\n            /**\n             * 循环引用抛错(暂未检测，循环引用时，堆栈溢出)\n             * symbol key 忽略\n             * undefined、函数、symbol 为属性值，被忽略\n             */\n            let result = [];\n            object.keys(data).foreach((item, index) => {\n                if (typeof item !== 'symbol') {\n                    //key 如果是symbol对象，忽略\n                    if (data[item] !== undefined && typeof data[item] !== 'function'\n                        && typeof data[item] !== 'symbol') {\n                        //键值如果是 undefined、函数、symbol 为属性值，忽略\n                        result.push('\"' + item + '\"' + \":\" + jsonstringify(data[item]));\n                    }\n                }\n            });\n            return (\"{\" + result + \"}\").replace(/'/g, '\"');\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n\n\n\n# 实现一个 json.parse\n\n * 完整参考实现 json.parse\n\n// new function\nvar jsonstr = '{ \"age\": 20, \"name\": \"jack\" }';\nvar json = new function(\"return \" + jsonstr)();\nconsole.log(json);\n\n// eval\nvar json = '{\"a\":\"1\", \"b\":2}';\nvar obj = eval(\"(\" + json + \")\");  // obj 就是 json 反序列化之后得到的对象\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# aop\n\n> https://juejin.cn/post/7072545785769885726#heading-84\n\nfunction.prototype.before=function(fn){\n  return (...arg)=>{\n    fn.call(this,...arg)\n    this(...arg)\n  }\n}\nfunction.prototype.after=function(fn){\n  return (...arg)=>{\n    const result =this(...arg)\n    fn.call(this,...arg)\n    return result\n  }\n}\n\n// use\nlet func = () => console.log('func');\nfunc = func.before(() => {\n  console.log('===before===');\n}).after(() => {\n  console.log('===after===');\n});\n\nfunc();\n// ===before===\n// func\n// ===after===\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n",charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1645163535e3},{title:"常见问题整理（二）",frontmatter:{title:"常见问题整理（二）",date:"2022-02-12T00:00:00.000Z",sidebar:"auto",tags:["array2tree","tree2array"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/fq-issue-02.html",relativePath:"frontend/issues/fq-issue-02.md",key:"v-2e4cb8ab",path:"/frontend/issues/fq-issue-02.html",headers:[{level:2,title:"array2tree",slug:"array2tree",normalizedTitle:"array2tree",charIndex:2},{level:2,title:"tree2array",slug:"tree2array",normalizedTitle:"tree2array",charIndex:1533},{level:2,title:"js使用filter递归过滤树形结构数组",slug:"js使用filter递归过滤树形结构数组",normalizedTitle:"js使用filter递归过滤树形结构数组",charIndex:1883},{level:2,title:"cached",slug:"cached",normalizedTitle:"cached",charIndex:3311},{level:2,title:"Url2Object",slug:"url2object",normalizedTitle:"url2object",charIndex:3657},{level:2,title:"formateMoney",slug:"formatemoney",normalizedTitle:"formatemoney",charIndex:4320},{level:2,title:"formateNumber",slug:"formatenumber",normalizedTitle:"formatenumber",charIndex:4620},{level:2,title:"获取标签的ClassName",slug:"获取标签的classname",normalizedTitle:"获取标签的classname",charIndex:4992},{level:2,title:"js动画animate",slug:"js动画animate",normalizedTitle:"js动画animate",charIndex:5720},{level:2,title:"getEleArributeValue",slug:"getelearributevalue",normalizedTitle:"getelearributevalue",charIndex:8935},{level:2,title:"console",slug:"console",normalizedTitle:"console",charIndex:1410},{level:2,title:"hexToRGB",slug:"hextorgb",normalizedTitle:"hextorgb",charIndex:9330},{level:2,title:"toCamelCaseVar",slug:"tocamelcasevar",normalizedTitle:"tocamelcasevar",charIndex:10081},{level:2,title:"numToChinese",slug:"numtochinese",normalizedTitle:"numtochinese",charIndex:10409},{level:2,title:"randomString",slug:"randomstring",normalizedTitle:"randomstring",charIndex:13893},{level:2,title:"如何避开 JavaScript 浮点数计算精度问题",slug:"如何避开-javascript-浮点数计算精度问题",normalizedTitle:"如何避开 javascript 浮点数计算精度问题",charIndex:14632},{level:2,title:"监听数组变化",slug:"监听数组变化",normalizedTitle:"监听数组变化",charIndex:18844},{level:2,title:"FIFO",slug:"fifo",normalizedTitle:"fifo",charIndex:19252},{level:2,title:"字符串正则去重",slug:"字符串正则去重",normalizedTitle:"字符串正则去重",charIndex:19997},{level:2,title:"使用 toString(16)取随机字符串",slug:"使用-tostring-16-取随机字符串",normalizedTitle:"使用 tostring(16)取随机字符串",charIndex:20191},{level:2,title:"伪数组（类数组）转数组",slug:"伪数组-类数组-转数组",normalizedTitle:"伪数组（类数组）转数组",charIndex:20278},{level:2,title:"最大值 / 最小值",slug:"最大值-最小值",normalizedTitle:"最大值 / 最小值",charIndex:20410},{level:2,title:"随机生成范围内不重复数字",slug:"随机生成范围内不重复数字",normalizedTitle:"随机生成范围内不重复数字",charIndex:21148},{level:2,title:"toRMB 形式",slug:"tormb-形式",normalizedTitle:"tormb 形式",charIndex:22020},{level:2,title:"字符串反转",slug:"字符串反转",normalizedTitle:"字符串反转",charIndex:22466},{level:2,title:"最大公约数与最小公倍数",slug:"最大公约数与最小公倍数",normalizedTitle:"最大公约数与最小公倍数",charIndex:22646},{level:2,title:"验证是否为回文",slug:"验证是否为回文",normalizedTitle:"验证是否为回文",charIndex:23365},{level:2,title:"判断一个数是否为质数",slug:"判断一个数是否为质数",normalizedTitle:"判断一个数是否为质数",charIndex:24224}],headersStr:"array2tree tree2array js使用filter递归过滤树形结构数组 cached Url2Object formateMoney formateNumber 获取标签的ClassName js动画animate getEleArributeValue console hexToRGB toCamelCaseVar numToChinese randomString 如何避开 JavaScript 浮点数计算精度问题 监听数组变化 FIFO 字符串正则去重 使用 toString(16)取随机字符串 伪数组（类数组）转数组 最大值 / 最小值 随机生成范围内不重复数字 toRMB 形式 字符串反转 最大公约数与最小公倍数 验证是否为回文 判断一个数是否为质数",content:"# array2tree\n\n * 递归\n\nlet arr = [\n    {id: 1, name: '部门1', pid: 0},\n    {id: 2, name: '部门2', pid: 1},\n    {id: 3, name: '部门3', pid: 1},\n    {id: 4, name: '部门4', pid: 3},\n    {id: 5, name: '部门5', pid: 4},\n]\n\nfunction array2tree(array, pid){\n  return array.reduce((pre, cur) =>{\n    if(cur.pid == pid){\n      pre.push(cur);\n      const children = array2tree(array, cur.id)\n      if(children.length){\n        cur.children = children;\n      }\n    }\n    return pre;\n  }, [])\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * 使用object\n\nfunction array2tree(items, rootId) {\n    const result = [];   // 存放结果集\n    const map = {};  //\n\n    // map存储\n    for (const item of items) {\n        map[item.id] = { ...item }\n    }\n\n    for (const item of items) {\n        const id = item.id; // 当前节点id\n        const pid = item.pid; // 当前节点的父节点id\n        const treeItem = map[id]; // 当前节点对应的树对象\n        if (pid === rootId) {  // 找到根节点\n            result.push(treeItem);\n        } else {\n            // 找到当前节点的父级\n            if (map[pid] && !map[pid].children) {\n                map[pid].children = []\n            }\n            // 添加到父级\n            map[pid].children.push(treeItem)\n        }\n    }\n    return result;\n}\n\nlet arr = [\n  {id: 1, name: '部门1', pid: 0},\n  {id: 2, name: '部门2', pid: 1},\n  {id: 3, name: '部门3', pid: 1},\n  {id: 4, name: '部门4', pid: 3},\n  {id: 5, name: '部门5', pid: 4},\n]\nlet rs = array2tree(arr, 0);\nconsole.log(rs);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# tree2array\n\nfunction tree2array(tree){\n  return tree.reduce((acc, cur) => {\n    if(cur.children){\n      const sub = tree2array(cur.children);\n      delete cur.children;\n      acc.push(cur, ...sub);\n    }else{\n      acc.push(cur);\n    }\n    return acc;\n  }, [])\n}\n\nlet rs2 = tree2array(rs);\nconsole.log(rs2)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# js使用filter递归过滤树形结构数组\n\n> Fork from : https://www.jianshu.com/p/5b816c76298f\n\n// 菜单列表\nconst menuList = [{\n    name: '系统管理',\n    code: 'system_manage',\n    children: [{\n        name: '用户管理',\n        code: 'user_manage',\n        children: [{\n            name: '添加用户',\n            code: 'add_user'\n        }, {\n            name: '编辑用户',\n            code: 'edit_user'\n        }, {\n            name: '删除用户',\n            code: 'del_user'\n        }]\n    }, {\n        name: '角色管理',\n        code: 'role_manage',\n        children: [{\n            name: '添加角色',\n            code: 'add_role'\n        }]\n    }]\n}, {\n    name: '业务管理',\n    code: 'bus_manage',\n    children: [{\n        name: '流程管理',\n        code: 'process_manage'\n    }]\n}, {\n    name: '订单管理',\n    code: 'order_manage'\n}]\n\n// 权限列表\nconst myMenuCode = ['system_manage', 'user_manage', 'add_user', 'order_manage']\n\nconst filterMenu = (menuList, menuCode) => {\n    return menuList.filter(item => {\n        return menuCode.indexOf(item.code) > -1\n    }).map(item => {\n        item = Object.assign({}, item)\n        if (item.children) {\n            item.children = filterMenu(item.children, menuCode)\n        }\n        return item\n    })\n}\n\n// 过滤后的菜单\nconst myMenu = filterMenu(menuList, myMenuCode)\n\nconsole.log(myMenu)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n\n\n\n# cached\n\nfunction cached(fn) {\n  const cache = Object.create(null)\n  return function cachedFn(str) {\n    if (!cache[str]) {\n      cache[str] = fn(str)\n    }\n    return cache[str]\n  }\n}\n// test\nvar cachedComputed = cached(computed)\ncachedComputed('ss')\n// 打印2000s have passed\ncachedComputed('ss')\n// 不再打印\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# Url2Object\n\nfunction serilizeUrl(url) {\n  var urlObject = {}\n  if (/\\?/.test(url)) {\n    var urlString = url.substring(url.indexOf('?') + 1)\n    console.log(urlString)\n    var urlArray = urlString.split('&')\n    for (var i = 0, len = urlArray.length; i < len; i++) {\n      var urlItem = urlArray[i]\n      console.log(urlItem)\n      var item = urlItem.split('=')\n      if (\n        item.length == 2 &&\n        item[0] != '' &&\n        item[0] != '\"\"' &&\n        item[0] != '\"'\n      ) {\n        urlObject[item[0]] = encodeURIComponent(item[1])\n      }\n    }\n    return urlObject\n  }\n  return {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# formateMoney\n\nconst formatMoney = function(num) {\n  if (num == \"0\") {\n    return \"0.00\";\n  }\n  if (num == undefined || num == \"\" || num == null) {\n    return \"-\";\n  }\n  return parseFloat(num)\n    .toFixed(2)\n    .replace(/\\d{1,3}(?=(\\d{3})+(\\.\\d*)?$)/g, \"$&,\");\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# formateNumber\n\nfunction formatNumber(num) {\n  let numStr = num + \"\";\n  let arr = num < 0 ? numStr.slice(1).split(\".\") : numStr.split(\".\");\n  let a = arr[0].split(\"\");\n  for (let i = a.length - 3; i > 0; i = i - 3) {\n    a.splice(i, 0, \",\");\n  }\n  let res = arr[1] ? a.join(\"\") + \".\" + arr[1] : a.join(\"\");\n  return num < 0 ? \"-\" + res : res;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 获取标签的ClassName\n\n//获取类名ClassName\nfunction getClassName(str) {\n  //为了火狐和谷歌及IE9-11\n  if (document.getElementsByClassName) {\n    return document.getElementsByClassName(str);\n  }\n  //获取所有标签节点(数组)\n  var allNodes = document.getElementsByTagName(\"*\");\n  //定义数组(哪个标签满足我的需求，就把他push到arr中，最后返回)\n  var arr = [];\n  //遍历数组（所有标签的数组）\n  for (var i = 0; i < allNodes.length; i++) {\n    //把类名变成数组\n    var arrClassName = allNodes[i].className.split(\" \");\n    //遍历数组中所有的元素（遍历数组中所有的元素用的）\n    for (var j = 0; j < arrClassName.length; j++) {\n      //在判断，如果Class属性值是传过来的值。放进数组。\n      if (arrClassName[j] == str) {\n        arr.push(aarrClassName[j]);\n      }\n    }\n  }\n  return arr;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# js动画animate\n\n * 简易版\n\n//动画animate\nfunction animateOne(ele, target) {\n  //清理定时器\n  clearInterval(ele.timer);\n  ele.timer = setInterval(function () {\n    var step = 9;\n    //如果对象的位置在目标的左边 往右走 step是正数\n    //如果对象的位置在目标的右边 往左走 step是负数\n    //对象的位置在目标的左边 ele.offsetLeft<target\n    step = ele.offsetLeft < target ? step : -step;\n    //终点检测 对象到目标的距离 > step的距离 就要继续走\n    if (Math.abs(ele.offsetLeft - target) > Math.abs(step)) {\n      ele.style.left = ele.offsetLeft + step + \"px\";\n    } else {\n      //距有可能 离终点还有一点点距离 我们手动把他放置到终点位置\n      ele.style.left = target + \"px\";\n      clearInterval(ele.timer);\n    }\n  }, 30)\n}\n\n// animate 缓动动画\nfunction animate(obj, target) {\n  clearInterval(obj.timer);\n  obj.timer = setInterval(function () {\n    var leader = obj.offsetLeft;\n    var step = (target - leader) / 10;\n    step = step > 0 ? Math.ceil(step) : Math.floor(step);\n    obj.style.left = obj.offsetLeft + step + \"px\";\n    if (leader == target) {\n      clearInterval(obj.timer);\n    }\n  }, 25)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n * animate\n\n//animate fn回调\nfunction animateTwo(obj, json, fn) {\n  clearInterval(obj.timer);\n  obj.timer = setInterval(function () {\n    var flag = true;\n    for (var k in json) {\n      var target = json[k];\n      var leader = parseInt(getStyle(obj, k));\n      var step = (target - leader) / 10;\n      step = step > 0 ? Math.ceil(step) : Math.floor(step);\n      leader = leader + step;\n      obj.style[k] = leader + \"px\";\n      if (leader != target) {\n        flag = false;\n      }\n    }\n    if (flag) {\n      clearInterval(obj.timer);\n      if (fn) {\n        //alert(fn);\n        fn();\n      }\n    }\n  }, 30)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * animate 多属性动画\n\n//fn为回调函数\n//{attr:target,attr:target}\nfunction animate(obj, json, fn) {\n  clearInterval(obj.timer);\n  obj.timer = setInterval(function () {\n    var flag = true;\n    for (var attr in json) {\n      //step = (target-leader)/10\n      //leader = leader + step\n      if (attr == \"opacity\") {\n        var target = json[attr] * 100;\n        var leader = Math.round(parseInt(getStyle(obj, attr || \"filter\") * 100)) || 100;\n      } else {\n        var target = json[attr];\n        var leader = parseInt(getStyle(obj, attr));\n      }\n      var step = (target - leader) / 10;\n      step = step > 0 ? Math.ceil(step) : Math.floor(step);\n      leader = leader + step;\n      //obj.style.left = leader + \"px\";\n      //obj.style[\"left\"] = leader + \"px\";\n      if (attr == \"opacity\") {\n        obj.style.opacity = leader / 100;\n        obj.style.filter = \"alpha(opacity=\" + leader + \")\";\n        //filter:alpha(opacity=x);\n      } else if (attr == \"zIndex\") {\n        obj.style.zIndex = attr;\n      } else {\n        obj.style[attr] = leader + \"px\";\n      }\n      /*if (leader == target) {\n       clearInterval(obj.timer);\n       }*/\n      if (leader != target) {\n        flag = false;\n      }\n    }\n    if (flag) {\n      clearInterval(obj.timer);\n      //alert(fn);\n      if (fn) {\n        fn();\n      }\n    }\n  }, 30)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n\n# getEleArributeValue\n\n// 根据属性得到具体元素\nfunction atrGetEle(ele, attr, value) {\n  var aElements = document.getElementsByTagName(ele);\n  var aEle = [];\n  for (var i = 0; i < aElements.length; i++) {\n    if (aElements[i].getAttribute(attr) == value)\n      aEle.push(aElements[i]);\n  }\n  return aEle;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# console\n\nconst log = (type) => console.log.bind(console, type);\n\n\n1\n\n\n\n# hexToRGB\n\n * 16 进制颜色值转 RGB 值\n\nconst hexToRGB = (hex) => {\n  if (!/(^\\#([a-fA-F0-9]{3})$)|(^\\#([a-fA-F0-9]{6})$)/g.test(hex)) return null\n  let allNumberStr = '0123456789abcdef' // 十六进制的所有数字\n  let len = hex.slice(1).length;\n  let str = len === 6 ? hex.slice(1) : hex.slice(1)[0].repeat(2) + hex.slice(1)[1].repeat(2) + hex.slice(1)[2].repeat(2);\n  let arrStr = str.split('');\n  let newArrStr = arrStr.map((item, index) => {\n    return allNumberStr.indexOf((item + '').toLowerCase())\n  })\n  let num1 = newArrStr[0] * 16 + newArrStr[1];\n  let num2 = newArrStr[2] * 16 + newArrStr[3];\n  let num3 = newArrStr[4] * 16 + newArrStr[5];\n  return `rgb(${num1}, ${num2}, ${num3})`\n}\n// console.log(hexToRGB('#fffaaa'))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# toCamelCaseVar\n\n * 转换驼峰命名\n\nconst toCamelCaseVar = (variable) => {\n  variable = variable.replace(/[\\_|-](\\w)/g, function (all, letter) {\n    return letter.toUpperCase();\n  });\n  return variable.slice(0, 1).toLowerCase() + variable.slice(1)\n}\n\n// console.log(toCamelCaseVar('Foo_style_css')) // fooStyleCss\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# numToChinese\n\n> 将数字1234转换为'一千二百三十四' (10000以内)\n\nfunction numToChinese(num) {\n  num += ''\n  let numLength = num.length\n  let numStr = '零一二三四五六七八九十'\n  let unitArr = ['', '十', '百', '千', '万']\n  function helper(str) {\n    let res = '';\n    if (str.length > 5) {\n      let first = str.slice(-5);\n      let second = str.slice(0, str.length - 5);\n      for (let i in second) {\n        res = res + numStr[second[i]] + unitArr[second.length - i];\n      }\n      for (let i in first) {\n        res = res + numStr[first[i]] + unitArr[first.length - i - 1];\n      }\n    } else {\n      let first = str.slice(-5);\n      for (let i in first) {\n        res = res + numStr[first[i]] + unitArr[first.length - i - 1];\n      }\n    }\n    res = res.replace(/零[零十百千]+/g, '零').replace(/零+$/g, '').replace(/零万/g, '万')\n    return res;\n  }\n\n  if (numLength > 8) {\n    return helper(num.slice(0, numLength - 8)) + '亿' + helper(num.slice(-8))\n  }\n  return helper(num)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n * 一亿以内\n\n\n/**\n * 将数字转换为中文大写\n * @param {number} num 要转换的数字\n * @returns {string} 转换后的中文大写\n */\nexport function digitToChinese(num) {\n  // 基本数字到中文的映射\n  const digits = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];\n\n  // 如果是0，直接返回零\n  if (num === 0) return '零';\n\n  // 将数字转为字符串\n  const numStr = num.toString();\n\n  // 处理亿级别\n  if (num >= 100000000) {\n    const yi = Math.floor(num / 100000000);\n    const rest = num % 100000000;\n    let result = digitToChinese(yi) + '亿';\n    if (rest > 0) {\n      // 如果余数小于一万，需要加\"零\"\n      if (rest < 10000) {\n        result += '零' + digitToChinese(rest);\n      } else {\n        // 如果余数大于一万但小于十万，需要加\"零\"\n        if (rest < 100000) {\n          result += '零' + digitToChinese(rest);\n        } else {\n          result += digitToChinese(rest);\n        }\n      }\n    }\n    return result;\n  }\n\n  // 处理万级别\n  if (num >= 10000) {\n    const wan = Math.floor(num / 10000);\n    const rest = num % 10000;\n    let result = digitToChinese(wan) + '万';\n    if (rest > 0) {\n      // 如果余数小于一千，需要加\"零\"\n      if (rest < 1000) {\n        result += '零' + digitToChinese(rest);\n      } else {\n        result += digitToChinese(rest);\n      }\n    }\n    return result;\n  }\n\n  // 处理千级别及以下\n  let result = '';\n  const units = ['', '十', '百', '千'];\n  for (let i = 0; i < numStr.length; i++) {\n    const digit = parseInt(numStr[i]);\n    if (digit === 0) {\n      // 当数字是0时\n      if (i < numStr.length - 1 && parseInt(numStr[i + 1]) !== 0) {\n        result += '零';\n      }\n    } else {\n      // 处理一十的特殊情况\n      if (digit === 1 && i === 0 && numStr.length === 2) {\n        result += '十';\n      } else {\n        result += digits[digit] + units[numStr.length - 1 - i];\n      }\n    }\n  }\n\n  // 处理末尾的零\n  result = result.replace(/零+$/, '');\n\n  // 处理连续的零\n  result = result.replace(/零+/g, '零');\n\n  return result;\n}\n\n// 测试用例\nconsole.log(digitToChinese(1234)); // 一千二百三十四\nconsole.log(digitToChinese(1001)); // 一千零一\nconsole.log(digitToChinese(1010)); // 一千零一十\nconsole.log(digitToChinese(10000)); // 一万\nconsole.log(digitToChinese(123456789)); // 一亿二千三百四十五万六千七百八十九\nconsole.log(digitToChinese(100000000)); // 一亿\nconsole.log(digitToChinese(100000001)); // 一亿零一\nconsole.log(digitToChinese(100010001)); // 一亿零一万零一\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n\n\n\n# randomString\n\nconst randomString = function(boolean, min, max=0) {\n  var str = \"\",\n    range = min,\n    arr = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n  // 随机产生\n  if (boolean) {\n    range = Math.round(Math.random() * (max - min)) + min;\n  }\n  for (var i = 0; i < range; i++) {\n    pos = Math.round(Math.random() * (arr.length - 1));\n    str += arr[pos];\n  }\n  return str;\n};\n// demo\nconsole.log(randomString(true, 1, 4));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 如何避开 JavaScript 浮点数计算精度问题\n\n * 如0.1+0.2!==0.3\n * 简单的进制转换：5..toString(2) //0101\n * 解决相关此问题的类库：bignumber.js\n * 简单解决方案：将小数转成整数来运算，之后再转回小数\n\n'use strict'\n\nvar accAdd = function (num1, num2) {\n  num1 = Number(num1);\n  num2 = Number(num2);\n  var dec1, dec2, times;\n  try { dec1 = countDecimals(num1) + 1; } catch (e) { dec1 = 0; }\n  try { dec2 = countDecimals(num2) + 1; } catch (e) { dec2 = 0; }\n  times = Math.pow(10, Math.max(dec1, dec2));\n  // var result = (num1 * times + num2 * times) / times;\n  var result = (accMul(num1, times) + accMul(num2, times)) / times;\n  return getCorrectResult(\"add\", num1, num2, result);\n  // return result;\n};\n\nvar accSub = function (num1, num2) {\n  num1 = Number(num1);\n  num2 = Number(num2);\n  var dec1, dec2, times;\n  try { dec1 = countDecimals(num1) + 1; } catch (e) { dec1 = 0; }\n  try { dec2 = countDecimals(num2) + 1; } catch (e) { dec2 = 0; }\n  times = Math.pow(10, Math.max(dec1, dec2));\n  // var result = Number(((num1 * times - num2 * times) / times);\n  var result = Number((accMul(num1, times) - accMul(num2, times)) / times);\n  return getCorrectResult(\"sub\", num1, num2, result);\n  // return result;\n};\n\nvar accDiv = function (num1, num2) {\n  num1 = Number(num1);\n  num2 = Number(num2);\n  var t1 = 0, t2 = 0, dec1, dec2;\n  try { t1 = countDecimals(num1); } catch (e) { }\n  try { t2 = countDecimals(num2); } catch (e) { }\n  dec1 = convertToInt(num1);\n  dec2 = convertToInt(num2);\n  var result = accMul((dec1 / dec2), Math.pow(10, t2 - t1));\n  return getCorrectResult(\"div\", num1, num2, result);\n  // return result;\n};\n\nvar accMul = function (num1, num2) {\n  num1 = Number(num1);\n  num2 = Number(num2);\n  var times = 0, s1 = num1.toString(), s2 = num2.toString();\n  try { times += countDecimals(s1); } catch (e) { }\n  try { times += countDecimals(s2); } catch (e) { }\n  var result = convertToInt(s1) * convertToInt(s2) / Math.pow(10, times);\n  return getCorrectResult(\"mul\", num1, num2, result);\n  // return result;\n};\n\nvar countDecimals = function (num) {\n  var len = 0;\n  try {\n    num = Number(num);\n    var str = num.toString().toUpperCase();\n    if (str.split('E').length === 2) { // scientific notation\n      var isDecimal = false;\n      if (str.split('.').length === 2) {\n        str = str.split('.')[1];\n        if (parseInt(str.split('E')[0]) !== 0) {\n          isDecimal = true;\n        }\n      }\n      let x = str.split('E');\n      if (isDecimal) {\n        len = x[0].length;\n      }\n      len -= parseInt(x[1]);\n    } else if (str.split('.').length === 2) { // decimal\n      if (parseInt(str.split('.')[1]) !== 0) {\n        len = str.split('.')[1].length;\n      }\n    }\n  } catch (e) {\n    throw e;\n  } finally {\n    if (isNaN(len) || len < 0) {\n      len = 0;\n    }\n    return len;\n  }\n};\n\nvar convertToInt = function (num) {\n  num = Number(num);\n  var newNum = num;\n  var times = countDecimals(num);\n  var temp_num = num.toString().toUpperCase();\n  if (temp_num.split('E').length === 2) {\n    newNum = Math.round(num * Math.pow(10, times));\n  } else {\n    newNum = Number(temp_num.replace(\".\", \"\"));\n  }\n  return newNum;\n};\n\nvar getCorrectResult = function (type, num1, num2, result) {\n  var temp_result = 0;\n  switch (type) {\n    case \"add\":\n      temp_result = num1 + num2;\n      break;\n    case \"sub\":\n      temp_result = num1 - num2;\n      break;\n    case \"div\":\n      temp_result = num1 / num2;\n      break;\n    case \"mul\":\n      temp_result = num1 * num2;\n      break;\n  }\n  if (Math.abs(result - temp_result) > 1) {\n    return temp_result;\n  }\n  return result;\n};\n// 用法\n// 加法： accAdd(0.1, 0.2)  // 得到结果：0.3\n// 减法： accSub(1, 0.9)    // 得到结果：0.1\n// 除法： accDiv(2.2, 100)  // 得到结果：0.022\n// 乘法： accMul(7, 0.8)    // 得到结果：5.6\n\n// 工具函数\ncountDecimals() //方法：计算小数位的长度\n\nconvertToInt() //方法：将小数转成整数\n\ngetCorrectResult() //方法：确认我们的计算结果无误，以防万一\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n\n\n\n# 监听数组变化\n\nfunction ObservableArray() {\n  return new Proxy([], {\n    get(target, propKey) {\n      const matArr = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];\n      matArr.indexOf(propKey) > -1 && console.log(propKey);\n      return target[propKey]\n    }\n  })\n}\nconst arr = new ObservableArray()\n\narr.push('Good')\narr.unshift('Good2')\nconsole.log(arr)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# FIFO\n\n * 一种缓存算法，设置缓存上限，当达到了缓存上限的时候，按照先进先出的策略进行淘汰，再增加进新的 k-v\n\nclass FIFOCache {\n  constructor(limit) {\n    this.limit = limit || 10;\n    this.map = {};\n    this.keys = [];\n  }\n  set(key, value) {\n    let map = this.map;\n    let keys = this.keys;\n    if (!Object.prototype.hasOwnProperty.call(map, key)) {\n      if (keys.length === this.limit) {\n        delete map[keys.shift()]; //先进先出，删除队列第一个元素\n      }\n      keys.push(key);\n    }\n    map[key] = value; //无论存在与否都对map中的key赋值\n  }\n  get(key) {\n    return this.map[key];\n  }\n}\n\nlet fifo = new FIFOCache(10);\n\nfor (let i = 0; i < 10; i++) {\n  fifo.set(`name-${i}`, i);\n}\nfifo.set(\"name-10\", 10);\nconsole.log(fifo);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 字符串正则去重\n\nvar str = \"adaaasfjjjbkk\";\n\nvar res = str.replace(/(.).*(\\1)/g, function($1, $2, $3) {\n  $1 = $2 + $1.substring(1).replace(new RegExp($2, \"g\"), \"\");\n  return $1;\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 使用 toString(16)取随机字符串\n\nMath.random()\n  .toString(16)\n  .substring(2, 15);\n\n\n1\n2\n3\n\n\n\n# 伪数组（类数组）转数组\n\nArray.prototype.slice.call(arguments);\nArray.prototype.concat.apply([], arguments);\nArray.from(arguments)\n\n\n1\n2\n3\n\n\n\n# 最大值 / 最小值\n\n * 最小值\n\nfunction MinNum(arr) {\n  var min = arr[0];\n  for (var i = 0; i < arr.length; i++) {\n    if (min > arr[i]) {\n      min = arr[i]\n    }\n  }\n  return min;\n}\nconsole.log(MinNum([2, 3, -44, 555, 222]))\n\n// 最小值\nMath.min.apply(Math, [32, 18, 38, 12, 43, 31, 17])\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * 最大值\n\nfunction MaxNum(arr) {\n  var max = arr[0];\n  for (var i = 0; i < arr.length; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n}\n\nconsole.log(MaxNum([2, 3, 3, 42, 1123]))\n\nvar a = [1, 2, 3, [5, 6],\n  [1, 4, 8]\n];\nvar ta = a.join(\",\").split(\",\"); //转化为一维数组\nconsole.log(Math.max.apply(null, ta)); //最大值\nconsole.log(Math.min.apply(null, ta)); //最小值\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 随机生成范围内不重复数字\n\n// 随机生成范围内不重复数字\n// aArray空数组 len数组个数  min最小值  max最大值\nfunction randomNumber(aArray, len, min, max) {\n  if (len >= (max - min)) {\n    console.log('超过' + min + '-' + max + '之间的个数范围' + (max - min - 1) + '个的总数');\n    return;\n  }\n  if (aArray.length >= len) {\n    aArray.sort(function (a, b) {\n      return a - b\n    });\n    return aArray;\n  }\n  var nowNub = parseInt(Math.random() * (max - min - 1)) + (min + 1);\n  //判断数组内是否有重复\n  for (var j = 0; j < aArray.length; j++) {\n    if (nowNub == aArray[j]) {\n      // 再次执行函数\n      randomNumber(aArray, len, min, max);\n      return;\n    }\n  }\n  // 添加到数组\n  aArray.push(nowNub);\n  //再次执行函数\n  randomNumber(aArray, len, min, max);\n  return aArray;\n}\n\n//定义一个空数组接收\nvar arr2 = [];\nrandomNumber(arr2, 8, 1, 10);\nconsole.log(arr2);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# toRMB 形式\n\n// 将数字12345678转化成 RMB形式\nfunction re(str) {\n  str += '';\n  return str.split(\"\").reverse().join(\"\");\n}\n\nfunction toRMB(num) {\n  var tmp = '';\n  for (var i = 1; i <= re(num).length; i++) {\n    tmp += re(num)[i - 1];\n    // console.log(tmp)\n    if (i % 3 == 0 && i != re(num).length) {\n      tmp += ',';\n    }\n  }\n  return re(tmp);\n}\n\nvar num1 = 12345789;\nconsole.log(toRMB(num1));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 字符串反转\n\n// 字符串反转，如将 '12345678' 变成 '87654321'\n// split : 将字符串分割成字符串数组,反序,在将数组转换为字符串\nvar str = '123456789';\nstr = str.split('').reverse().join('');\nconsole.log(str);\n\n\n1\n2\n3\n4\n5\n\n\n\n# 最大公约数与最小公倍数\n\n * 最大公约数: 能同时被两数整除的最大数字\n\nfunction maxDivisor(num1, num2) {\n  let max = num1 > num2 ? num1 : num2,\n    min = num1 > num2 ? num2 : num1;\n  for (var i = min; i >= 1; i--) {\n    if (max % i == 0 && min % i == 0) {\n      return i;\n    }\n  }\n}\n\nconsole.log(maxDivisor(60, 30)); // 30\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 最小公倍数: 能同时整除两数的最小数字\n\nfunction minDivisor(num1, num2) {\n  let max = num1 > num2 ? num1 : num2,\n    min = num1 > num2 ? num2 : num1,\n    result = 0;\n  // 这个循环，当两数同为质数时，终止的最大条件值为 i = min\n  for (var i = 1; i <= min; i++) {\n    result = i * max;\n    if (result % max == 0 && result % min == 0) {\n      return result;\n    }\n  }\n}\nconsole.log(minDivisor(6, 8)); // 24\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 验证是否为回文\n\n// 数组方法生成倒装的新字符串与原字符串对比\nfunction isPalindrome(str) {\n  str = '' + str;\n  if (!str || str.length < 2) {\n    return false;\n  }\n  return (\n    Array.from(str)\n      .reverse()\n      .join('') === str\n  );\n}\n\n// 倒序循环生成新字符串与原字符串对比\nfunction isPalindrome(str) {\n  str = '' + str;\n  if (!str || str.length < 2) {\n    return false;\n  }\n  var newStr = '';\n  for (var i = str.length - 1; i >= 0; i--) {\n    newStr += str[i];\n  }\n  return str1 === str;\n}\n\n// 以中间点为基点，从头至中与从尾至中逐一字符串进行对比，若有一个不同，则 return false\nfunction isPalindrome(str) {\n  str = '' + str;\n  if (!str || str.length < 2) {\n    return false;\n  }\n  for (let i = 0; i < str.length / 2; i++) {\n    if (str[i] !== str[str.length - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n# 判断一个数是否为质数\n\nfunction isPrime(num) {\n  if (num === 1) {\n    return \"1 不是质数，请输入大于1的数字\";\n  } else if (num <= 3) {\n    return num > 1;\n  } else {\n    let sq = Math.sqrt(num);\n    for (let i = 2; i <= sq; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n",normalizedContent:"# array2tree\n\n * 递归\n\nlet arr = [\n    {id: 1, name: '部门1', pid: 0},\n    {id: 2, name: '部门2', pid: 1},\n    {id: 3, name: '部门3', pid: 1},\n    {id: 4, name: '部门4', pid: 3},\n    {id: 5, name: '部门5', pid: 4},\n]\n\nfunction array2tree(array, pid){\n  return array.reduce((pre, cur) =>{\n    if(cur.pid == pid){\n      pre.push(cur);\n      const children = array2tree(array, cur.id)\n      if(children.length){\n        cur.children = children;\n      }\n    }\n    return pre;\n  }, [])\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * 使用object\n\nfunction array2tree(items, rootid) {\n    const result = [];   // 存放结果集\n    const map = {};  //\n\n    // map存储\n    for (const item of items) {\n        map[item.id] = { ...item }\n    }\n\n    for (const item of items) {\n        const id = item.id; // 当前节点id\n        const pid = item.pid; // 当前节点的父节点id\n        const treeitem = map[id]; // 当前节点对应的树对象\n        if (pid === rootid) {  // 找到根节点\n            result.push(treeitem);\n        } else {\n            // 找到当前节点的父级\n            if (map[pid] && !map[pid].children) {\n                map[pid].children = []\n            }\n            // 添加到父级\n            map[pid].children.push(treeitem)\n        }\n    }\n    return result;\n}\n\nlet arr = [\n  {id: 1, name: '部门1', pid: 0},\n  {id: 2, name: '部门2', pid: 1},\n  {id: 3, name: '部门3', pid: 1},\n  {id: 4, name: '部门4', pid: 3},\n  {id: 5, name: '部门5', pid: 4},\n]\nlet rs = array2tree(arr, 0);\nconsole.log(rs);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# tree2array\n\nfunction tree2array(tree){\n  return tree.reduce((acc, cur) => {\n    if(cur.children){\n      const sub = tree2array(cur.children);\n      delete cur.children;\n      acc.push(cur, ...sub);\n    }else{\n      acc.push(cur);\n    }\n    return acc;\n  }, [])\n}\n\nlet rs2 = tree2array(rs);\nconsole.log(rs2)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# js使用filter递归过滤树形结构数组\n\n> fork from : https://www.jianshu.com/p/5b816c76298f\n\n// 菜单列表\nconst menulist = [{\n    name: '系统管理',\n    code: 'system_manage',\n    children: [{\n        name: '用户管理',\n        code: 'user_manage',\n        children: [{\n            name: '添加用户',\n            code: 'add_user'\n        }, {\n            name: '编辑用户',\n            code: 'edit_user'\n        }, {\n            name: '删除用户',\n            code: 'del_user'\n        }]\n    }, {\n        name: '角色管理',\n        code: 'role_manage',\n        children: [{\n            name: '添加角色',\n            code: 'add_role'\n        }]\n    }]\n}, {\n    name: '业务管理',\n    code: 'bus_manage',\n    children: [{\n        name: '流程管理',\n        code: 'process_manage'\n    }]\n}, {\n    name: '订单管理',\n    code: 'order_manage'\n}]\n\n// 权限列表\nconst mymenucode = ['system_manage', 'user_manage', 'add_user', 'order_manage']\n\nconst filtermenu = (menulist, menucode) => {\n    return menulist.filter(item => {\n        return menucode.indexof(item.code) > -1\n    }).map(item => {\n        item = object.assign({}, item)\n        if (item.children) {\n            item.children = filtermenu(item.children, menucode)\n        }\n        return item\n    })\n}\n\n// 过滤后的菜单\nconst mymenu = filtermenu(menulist, mymenucode)\n\nconsole.log(mymenu)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n\n\n\n# cached\n\nfunction cached(fn) {\n  const cache = object.create(null)\n  return function cachedfn(str) {\n    if (!cache[str]) {\n      cache[str] = fn(str)\n    }\n    return cache[str]\n  }\n}\n// test\nvar cachedcomputed = cached(computed)\ncachedcomputed('ss')\n// 打印2000s have passed\ncachedcomputed('ss')\n// 不再打印\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# url2object\n\nfunction serilizeurl(url) {\n  var urlobject = {}\n  if (/\\?/.test(url)) {\n    var urlstring = url.substring(url.indexof('?') + 1)\n    console.log(urlstring)\n    var urlarray = urlstring.split('&')\n    for (var i = 0, len = urlarray.length; i < len; i++) {\n      var urlitem = urlarray[i]\n      console.log(urlitem)\n      var item = urlitem.split('=')\n      if (\n        item.length == 2 &&\n        item[0] != '' &&\n        item[0] != '\"\"' &&\n        item[0] != '\"'\n      ) {\n        urlobject[item[0]] = encodeuricomponent(item[1])\n      }\n    }\n    return urlobject\n  }\n  return {}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# formatemoney\n\nconst formatmoney = function(num) {\n  if (num == \"0\") {\n    return \"0.00\";\n  }\n  if (num == undefined || num == \"\" || num == null) {\n    return \"-\";\n  }\n  return parsefloat(num)\n    .tofixed(2)\n    .replace(/\\d{1,3}(?=(\\d{3})+(\\.\\d*)?$)/g, \"$&,\");\n};\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# formatenumber\n\nfunction formatnumber(num) {\n  let numstr = num + \"\";\n  let arr = num < 0 ? numstr.slice(1).split(\".\") : numstr.split(\".\");\n  let a = arr[0].split(\"\");\n  for (let i = a.length - 3; i > 0; i = i - 3) {\n    a.splice(i, 0, \",\");\n  }\n  let res = arr[1] ? a.join(\"\") + \".\" + arr[1] : a.join(\"\");\n  return num < 0 ? \"-\" + res : res;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 获取标签的classname\n\n//获取类名classname\nfunction getclassname(str) {\n  //为了火狐和谷歌及ie9-11\n  if (document.getelementsbyclassname) {\n    return document.getelementsbyclassname(str);\n  }\n  //获取所有标签节点(数组)\n  var allnodes = document.getelementsbytagname(\"*\");\n  //定义数组(哪个标签满足我的需求，就把他push到arr中，最后返回)\n  var arr = [];\n  //遍历数组（所有标签的数组）\n  for (var i = 0; i < allnodes.length; i++) {\n    //把类名变成数组\n    var arrclassname = allnodes[i].classname.split(\" \");\n    //遍历数组中所有的元素（遍历数组中所有的元素用的）\n    for (var j = 0; j < arrclassname.length; j++) {\n      //在判断，如果class属性值是传过来的值。放进数组。\n      if (arrclassname[j] == str) {\n        arr.push(aarrclassname[j]);\n      }\n    }\n  }\n  return arr;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# js动画animate\n\n * 简易版\n\n//动画animate\nfunction animateone(ele, target) {\n  //清理定时器\n  clearinterval(ele.timer);\n  ele.timer = setinterval(function () {\n    var step = 9;\n    //如果对象的位置在目标的左边 往右走 step是正数\n    //如果对象的位置在目标的右边 往左走 step是负数\n    //对象的位置在目标的左边 ele.offsetleft<target\n    step = ele.offsetleft < target ? step : -step;\n    //终点检测 对象到目标的距离 > step的距离 就要继续走\n    if (math.abs(ele.offsetleft - target) > math.abs(step)) {\n      ele.style.left = ele.offsetleft + step + \"px\";\n    } else {\n      //距有可能 离终点还有一点点距离 我们手动把他放置到终点位置\n      ele.style.left = target + \"px\";\n      clearinterval(ele.timer);\n    }\n  }, 30)\n}\n\n// animate 缓动动画\nfunction animate(obj, target) {\n  clearinterval(obj.timer);\n  obj.timer = setinterval(function () {\n    var leader = obj.offsetleft;\n    var step = (target - leader) / 10;\n    step = step > 0 ? math.ceil(step) : math.floor(step);\n    obj.style.left = obj.offsetleft + step + \"px\";\n    if (leader == target) {\n      clearinterval(obj.timer);\n    }\n  }, 25)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n * animate\n\n//animate fn回调\nfunction animatetwo(obj, json, fn) {\n  clearinterval(obj.timer);\n  obj.timer = setinterval(function () {\n    var flag = true;\n    for (var k in json) {\n      var target = json[k];\n      var leader = parseint(getstyle(obj, k));\n      var step = (target - leader) / 10;\n      step = step > 0 ? math.ceil(step) : math.floor(step);\n      leader = leader + step;\n      obj.style[k] = leader + \"px\";\n      if (leader != target) {\n        flag = false;\n      }\n    }\n    if (flag) {\n      clearinterval(obj.timer);\n      if (fn) {\n        //alert(fn);\n        fn();\n      }\n    }\n  }, 30)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * animate 多属性动画\n\n//fn为回调函数\n//{attr:target,attr:target}\nfunction animate(obj, json, fn) {\n  clearinterval(obj.timer);\n  obj.timer = setinterval(function () {\n    var flag = true;\n    for (var attr in json) {\n      //step = (target-leader)/10\n      //leader = leader + step\n      if (attr == \"opacity\") {\n        var target = json[attr] * 100;\n        var leader = math.round(parseint(getstyle(obj, attr || \"filter\") * 100)) || 100;\n      } else {\n        var target = json[attr];\n        var leader = parseint(getstyle(obj, attr));\n      }\n      var step = (target - leader) / 10;\n      step = step > 0 ? math.ceil(step) : math.floor(step);\n      leader = leader + step;\n      //obj.style.left = leader + \"px\";\n      //obj.style[\"left\"] = leader + \"px\";\n      if (attr == \"opacity\") {\n        obj.style.opacity = leader / 100;\n        obj.style.filter = \"alpha(opacity=\" + leader + \")\";\n        //filter:alpha(opacity=x);\n      } else if (attr == \"zindex\") {\n        obj.style.zindex = attr;\n      } else {\n        obj.style[attr] = leader + \"px\";\n      }\n      /*if (leader == target) {\n       clearinterval(obj.timer);\n       }*/\n      if (leader != target) {\n        flag = false;\n      }\n    }\n    if (flag) {\n      clearinterval(obj.timer);\n      //alert(fn);\n      if (fn) {\n        fn();\n      }\n    }\n  }, 30)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n\n# getelearributevalue\n\n// 根据属性得到具体元素\nfunction atrgetele(ele, attr, value) {\n  var aelements = document.getelementsbytagname(ele);\n  var aele = [];\n  for (var i = 0; i < aelements.length; i++) {\n    if (aelements[i].getattribute(attr) == value)\n      aele.push(aelements[i]);\n  }\n  return aele;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# console\n\nconst log = (type) => console.log.bind(console, type);\n\n\n1\n\n\n\n# hextorgb\n\n * 16 进制颜色值转 rgb 值\n\nconst hextorgb = (hex) => {\n  if (!/(^\\#([a-fa-f0-9]{3})$)|(^\\#([a-fa-f0-9]{6})$)/g.test(hex)) return null\n  let allnumberstr = '0123456789abcdef' // 十六进制的所有数字\n  let len = hex.slice(1).length;\n  let str = len === 6 ? hex.slice(1) : hex.slice(1)[0].repeat(2) + hex.slice(1)[1].repeat(2) + hex.slice(1)[2].repeat(2);\n  let arrstr = str.split('');\n  let newarrstr = arrstr.map((item, index) => {\n    return allnumberstr.indexof((item + '').tolowercase())\n  })\n  let num1 = newarrstr[0] * 16 + newarrstr[1];\n  let num2 = newarrstr[2] * 16 + newarrstr[3];\n  let num3 = newarrstr[4] * 16 + newarrstr[5];\n  return `rgb(${num1}, ${num2}, ${num3})`\n}\n// console.log(hextorgb('#fffaaa'))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# tocamelcasevar\n\n * 转换驼峰命名\n\nconst tocamelcasevar = (variable) => {\n  variable = variable.replace(/[\\_|-](\\w)/g, function (all, letter) {\n    return letter.touppercase();\n  });\n  return variable.slice(0, 1).tolowercase() + variable.slice(1)\n}\n\n// console.log(tocamelcasevar('foo_style_css')) // foostylecss\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# numtochinese\n\n> 将数字1234转换为'一千二百三十四' (10000以内)\n\nfunction numtochinese(num) {\n  num += ''\n  let numlength = num.length\n  let numstr = '零一二三四五六七八九十'\n  let unitarr = ['', '十', '百', '千', '万']\n  function helper(str) {\n    let res = '';\n    if (str.length > 5) {\n      let first = str.slice(-5);\n      let second = str.slice(0, str.length - 5);\n      for (let i in second) {\n        res = res + numstr[second[i]] + unitarr[second.length - i];\n      }\n      for (let i in first) {\n        res = res + numstr[first[i]] + unitarr[first.length - i - 1];\n      }\n    } else {\n      let first = str.slice(-5);\n      for (let i in first) {\n        res = res + numstr[first[i]] + unitarr[first.length - i - 1];\n      }\n    }\n    res = res.replace(/零[零十百千]+/g, '零').replace(/零+$/g, '').replace(/零万/g, '万')\n    return res;\n  }\n\n  if (numlength > 8) {\n    return helper(num.slice(0, numlength - 8)) + '亿' + helper(num.slice(-8))\n  }\n  return helper(num)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n * 一亿以内\n\n\n/**\n * 将数字转换为中文大写\n * @param {number} num 要转换的数字\n * @returns {string} 转换后的中文大写\n */\nexport function digittochinese(num) {\n  // 基本数字到中文的映射\n  const digits = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];\n\n  // 如果是0，直接返回零\n  if (num === 0) return '零';\n\n  // 将数字转为字符串\n  const numstr = num.tostring();\n\n  // 处理亿级别\n  if (num >= 100000000) {\n    const yi = math.floor(num / 100000000);\n    const rest = num % 100000000;\n    let result = digittochinese(yi) + '亿';\n    if (rest > 0) {\n      // 如果余数小于一万，需要加\"零\"\n      if (rest < 10000) {\n        result += '零' + digittochinese(rest);\n      } else {\n        // 如果余数大于一万但小于十万，需要加\"零\"\n        if (rest < 100000) {\n          result += '零' + digittochinese(rest);\n        } else {\n          result += digittochinese(rest);\n        }\n      }\n    }\n    return result;\n  }\n\n  // 处理万级别\n  if (num >= 10000) {\n    const wan = math.floor(num / 10000);\n    const rest = num % 10000;\n    let result = digittochinese(wan) + '万';\n    if (rest > 0) {\n      // 如果余数小于一千，需要加\"零\"\n      if (rest < 1000) {\n        result += '零' + digittochinese(rest);\n      } else {\n        result += digittochinese(rest);\n      }\n    }\n    return result;\n  }\n\n  // 处理千级别及以下\n  let result = '';\n  const units = ['', '十', '百', '千'];\n  for (let i = 0; i < numstr.length; i++) {\n    const digit = parseint(numstr[i]);\n    if (digit === 0) {\n      // 当数字是0时\n      if (i < numstr.length - 1 && parseint(numstr[i + 1]) !== 0) {\n        result += '零';\n      }\n    } else {\n      // 处理一十的特殊情况\n      if (digit === 1 && i === 0 && numstr.length === 2) {\n        result += '十';\n      } else {\n        result += digits[digit] + units[numstr.length - 1 - i];\n      }\n    }\n  }\n\n  // 处理末尾的零\n  result = result.replace(/零+$/, '');\n\n  // 处理连续的零\n  result = result.replace(/零+/g, '零');\n\n  return result;\n}\n\n// 测试用例\nconsole.log(digittochinese(1234)); // 一千二百三十四\nconsole.log(digittochinese(1001)); // 一千零一\nconsole.log(digittochinese(1010)); // 一千零一十\nconsole.log(digittochinese(10000)); // 一万\nconsole.log(digittochinese(123456789)); // 一亿二千三百四十五万六千七百八十九\nconsole.log(digittochinese(100000000)); // 一亿\nconsole.log(digittochinese(100000001)); // 一亿零一\nconsole.log(digittochinese(100010001)); // 一亿零一万零一\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n\n\n\n# randomstring\n\nconst randomstring = function(boolean, min, max=0) {\n  var str = \"\",\n    range = min,\n    arr = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  // 随机产生\n  if (boolean) {\n    range = math.round(math.random() * (max - min)) + min;\n  }\n  for (var i = 0; i < range; i++) {\n    pos = math.round(math.random() * (arr.length - 1));\n    str += arr[pos];\n  }\n  return str;\n};\n// demo\nconsole.log(randomstring(true, 1, 4));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 如何避开 javascript 浮点数计算精度问题\n\n * 如0.1+0.2!==0.3\n * 简单的进制转换：5..tostring(2) //0101\n * 解决相关此问题的类库：bignumber.js\n * 简单解决方案：将小数转成整数来运算，之后再转回小数\n\n'use strict'\n\nvar accadd = function (num1, num2) {\n  num1 = number(num1);\n  num2 = number(num2);\n  var dec1, dec2, times;\n  try { dec1 = countdecimals(num1) + 1; } catch (e) { dec1 = 0; }\n  try { dec2 = countdecimals(num2) + 1; } catch (e) { dec2 = 0; }\n  times = math.pow(10, math.max(dec1, dec2));\n  // var result = (num1 * times + num2 * times) / times;\n  var result = (accmul(num1, times) + accmul(num2, times)) / times;\n  return getcorrectresult(\"add\", num1, num2, result);\n  // return result;\n};\n\nvar accsub = function (num1, num2) {\n  num1 = number(num1);\n  num2 = number(num2);\n  var dec1, dec2, times;\n  try { dec1 = countdecimals(num1) + 1; } catch (e) { dec1 = 0; }\n  try { dec2 = countdecimals(num2) + 1; } catch (e) { dec2 = 0; }\n  times = math.pow(10, math.max(dec1, dec2));\n  // var result = number(((num1 * times - num2 * times) / times);\n  var result = number((accmul(num1, times) - accmul(num2, times)) / times);\n  return getcorrectresult(\"sub\", num1, num2, result);\n  // return result;\n};\n\nvar accdiv = function (num1, num2) {\n  num1 = number(num1);\n  num2 = number(num2);\n  var t1 = 0, t2 = 0, dec1, dec2;\n  try { t1 = countdecimals(num1); } catch (e) { }\n  try { t2 = countdecimals(num2); } catch (e) { }\n  dec1 = converttoint(num1);\n  dec2 = converttoint(num2);\n  var result = accmul((dec1 / dec2), math.pow(10, t2 - t1));\n  return getcorrectresult(\"div\", num1, num2, result);\n  // return result;\n};\n\nvar accmul = function (num1, num2) {\n  num1 = number(num1);\n  num2 = number(num2);\n  var times = 0, s1 = num1.tostring(), s2 = num2.tostring();\n  try { times += countdecimals(s1); } catch (e) { }\n  try { times += countdecimals(s2); } catch (e) { }\n  var result = converttoint(s1) * converttoint(s2) / math.pow(10, times);\n  return getcorrectresult(\"mul\", num1, num2, result);\n  // return result;\n};\n\nvar countdecimals = function (num) {\n  var len = 0;\n  try {\n    num = number(num);\n    var str = num.tostring().touppercase();\n    if (str.split('e').length === 2) { // scientific notation\n      var isdecimal = false;\n      if (str.split('.').length === 2) {\n        str = str.split('.')[1];\n        if (parseint(str.split('e')[0]) !== 0) {\n          isdecimal = true;\n        }\n      }\n      let x = str.split('e');\n      if (isdecimal) {\n        len = x[0].length;\n      }\n      len -= parseint(x[1]);\n    } else if (str.split('.').length === 2) { // decimal\n      if (parseint(str.split('.')[1]) !== 0) {\n        len = str.split('.')[1].length;\n      }\n    }\n  } catch (e) {\n    throw e;\n  } finally {\n    if (isnan(len) || len < 0) {\n      len = 0;\n    }\n    return len;\n  }\n};\n\nvar converttoint = function (num) {\n  num = number(num);\n  var newnum = num;\n  var times = countdecimals(num);\n  var temp_num = num.tostring().touppercase();\n  if (temp_num.split('e').length === 2) {\n    newnum = math.round(num * math.pow(10, times));\n  } else {\n    newnum = number(temp_num.replace(\".\", \"\"));\n  }\n  return newnum;\n};\n\nvar getcorrectresult = function (type, num1, num2, result) {\n  var temp_result = 0;\n  switch (type) {\n    case \"add\":\n      temp_result = num1 + num2;\n      break;\n    case \"sub\":\n      temp_result = num1 - num2;\n      break;\n    case \"div\":\n      temp_result = num1 / num2;\n      break;\n    case \"mul\":\n      temp_result = num1 * num2;\n      break;\n  }\n  if (math.abs(result - temp_result) > 1) {\n    return temp_result;\n  }\n  return result;\n};\n// 用法\n// 加法： accadd(0.1, 0.2)  // 得到结果：0.3\n// 减法： accsub(1, 0.9)    // 得到结果：0.1\n// 除法： accdiv(2.2, 100)  // 得到结果：0.022\n// 乘法： accmul(7, 0.8)    // 得到结果：5.6\n\n// 工具函数\ncountdecimals() //方法：计算小数位的长度\n\nconverttoint() //方法：将小数转成整数\n\ngetcorrectresult() //方法：确认我们的计算结果无误，以防万一\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n\n\n\n# 监听数组变化\n\nfunction observablearray() {\n  return new proxy([], {\n    get(target, propkey) {\n      const matarr = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];\n      matarr.indexof(propkey) > -1 && console.log(propkey);\n      return target[propkey]\n    }\n  })\n}\nconst arr = new observablearray()\n\narr.push('good')\narr.unshift('good2')\nconsole.log(arr)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# fifo\n\n * 一种缓存算法，设置缓存上限，当达到了缓存上限的时候，按照先进先出的策略进行淘汰，再增加进新的 k-v\n\nclass fifocache {\n  constructor(limit) {\n    this.limit = limit || 10;\n    this.map = {};\n    this.keys = [];\n  }\n  set(key, value) {\n    let map = this.map;\n    let keys = this.keys;\n    if (!object.prototype.hasownproperty.call(map, key)) {\n      if (keys.length === this.limit) {\n        delete map[keys.shift()]; //先进先出，删除队列第一个元素\n      }\n      keys.push(key);\n    }\n    map[key] = value; //无论存在与否都对map中的key赋值\n  }\n  get(key) {\n    return this.map[key];\n  }\n}\n\nlet fifo = new fifocache(10);\n\nfor (let i = 0; i < 10; i++) {\n  fifo.set(`name-${i}`, i);\n}\nfifo.set(\"name-10\", 10);\nconsole.log(fifo);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 字符串正则去重\n\nvar str = \"adaaasfjjjbkk\";\n\nvar res = str.replace(/(.).*(\\1)/g, function($1, $2, $3) {\n  $1 = $2 + $1.substring(1).replace(new regexp($2, \"g\"), \"\");\n  return $1;\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 使用 tostring(16)取随机字符串\n\nmath.random()\n  .tostring(16)\n  .substring(2, 15);\n\n\n1\n2\n3\n\n\n\n# 伪数组（类数组）转数组\n\narray.prototype.slice.call(arguments);\narray.prototype.concat.apply([], arguments);\narray.from(arguments)\n\n\n1\n2\n3\n\n\n\n# 最大值 / 最小值\n\n * 最小值\n\nfunction minnum(arr) {\n  var min = arr[0];\n  for (var i = 0; i < arr.length; i++) {\n    if (min > arr[i]) {\n      min = arr[i]\n    }\n  }\n  return min;\n}\nconsole.log(minnum([2, 3, -44, 555, 222]))\n\n// 最小值\nmath.min.apply(math, [32, 18, 38, 12, 43, 31, 17])\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * 最大值\n\nfunction maxnum(arr) {\n  var max = arr[0];\n  for (var i = 0; i < arr.length; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n}\n\nconsole.log(maxnum([2, 3, 3, 42, 1123]))\n\nvar a = [1, 2, 3, [5, 6],\n  [1, 4, 8]\n];\nvar ta = a.join(\",\").split(\",\"); //转化为一维数组\nconsole.log(math.max.apply(null, ta)); //最大值\nconsole.log(math.min.apply(null, ta)); //最小值\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 随机生成范围内不重复数字\n\n// 随机生成范围内不重复数字\n// aarray空数组 len数组个数  min最小值  max最大值\nfunction randomnumber(aarray, len, min, max) {\n  if (len >= (max - min)) {\n    console.log('超过' + min + '-' + max + '之间的个数范围' + (max - min - 1) + '个的总数');\n    return;\n  }\n  if (aarray.length >= len) {\n    aarray.sort(function (a, b) {\n      return a - b\n    });\n    return aarray;\n  }\n  var nownub = parseint(math.random() * (max - min - 1)) + (min + 1);\n  //判断数组内是否有重复\n  for (var j = 0; j < aarray.length; j++) {\n    if (nownub == aarray[j]) {\n      // 再次执行函数\n      randomnumber(aarray, len, min, max);\n      return;\n    }\n  }\n  // 添加到数组\n  aarray.push(nownub);\n  //再次执行函数\n  randomnumber(aarray, len, min, max);\n  return aarray;\n}\n\n//定义一个空数组接收\nvar arr2 = [];\nrandomnumber(arr2, 8, 1, 10);\nconsole.log(arr2);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# tormb 形式\n\n// 将数字12345678转化成 rmb形式\nfunction re(str) {\n  str += '';\n  return str.split(\"\").reverse().join(\"\");\n}\n\nfunction tormb(num) {\n  var tmp = '';\n  for (var i = 1; i <= re(num).length; i++) {\n    tmp += re(num)[i - 1];\n    // console.log(tmp)\n    if (i % 3 == 0 && i != re(num).length) {\n      tmp += ',';\n    }\n  }\n  return re(tmp);\n}\n\nvar num1 = 12345789;\nconsole.log(tormb(num1));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 字符串反转\n\n// 字符串反转，如将 '12345678' 变成 '87654321'\n// split : 将字符串分割成字符串数组,反序,在将数组转换为字符串\nvar str = '123456789';\nstr = str.split('').reverse().join('');\nconsole.log(str);\n\n\n1\n2\n3\n4\n5\n\n\n\n# 最大公约数与最小公倍数\n\n * 最大公约数: 能同时被两数整除的最大数字\n\nfunction maxdivisor(num1, num2) {\n  let max = num1 > num2 ? num1 : num2,\n    min = num1 > num2 ? num2 : num1;\n  for (var i = min; i >= 1; i--) {\n    if (max % i == 0 && min % i == 0) {\n      return i;\n    }\n  }\n}\n\nconsole.log(maxdivisor(60, 30)); // 30\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 最小公倍数: 能同时整除两数的最小数字\n\nfunction mindivisor(num1, num2) {\n  let max = num1 > num2 ? num1 : num2,\n    min = num1 > num2 ? num2 : num1,\n    result = 0;\n  // 这个循环，当两数同为质数时，终止的最大条件值为 i = min\n  for (var i = 1; i <= min; i++) {\n    result = i * max;\n    if (result % max == 0 && result % min == 0) {\n      return result;\n    }\n  }\n}\nconsole.log(mindivisor(6, 8)); // 24\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 验证是否为回文\n\n// 数组方法生成倒装的新字符串与原字符串对比\nfunction ispalindrome(str) {\n  str = '' + str;\n  if (!str || str.length < 2) {\n    return false;\n  }\n  return (\n    array.from(str)\n      .reverse()\n      .join('') === str\n  );\n}\n\n// 倒序循环生成新字符串与原字符串对比\nfunction ispalindrome(str) {\n  str = '' + str;\n  if (!str || str.length < 2) {\n    return false;\n  }\n  var newstr = '';\n  for (var i = str.length - 1; i >= 0; i--) {\n    newstr += str[i];\n  }\n  return str1 === str;\n}\n\n// 以中间点为基点，从头至中与从尾至中逐一字符串进行对比，若有一个不同，则 return false\nfunction ispalindrome(str) {\n  str = '' + str;\n  if (!str || str.length < 2) {\n    return false;\n  }\n  for (let i = 0; i < str.length / 2; i++) {\n    if (str[i] !== str[str.length - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\n\n# 判断一个数是否为质数\n\nfunction isprime(num) {\n  if (num === 1) {\n    return \"1 不是质数，请输入大于1的数字\";\n  } else if (num <= 3) {\n    return num > 1;\n  } else {\n    let sq = math.sqrt(num);\n    for (let i = 2; i <= sq; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n",charsets:{cjk:!0},lastUpdated:"2/24/2025",lastUpdatedTimestamp:1740388505e3,createdTime:1647517837e3},{title:"常见问题整理（一）",frontmatter:{title:"常见问题整理（一）",date:"2022-02-10T00:00:00.000Z",sidebar:"auto",tags:["继承"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/fq-issue-01.html",relativePath:"frontend/issues/fq-issue-01.md",key:"v-18f00c8b",path:"/frontend/issues/fq-issue-01.html",headers:[{level:2,title:"构造函数的继承",slug:"构造函数的继承",normalizedTitle:"构造函数的继承",charIndex:2},{level:2,title:"randomColor",slug:"randomcolor",normalizedTitle:"randomcolor",charIndex:1338},{level:2,title:"JS按位非(~)与(~~)运算符",slug:"js按位非-与-运算符",normalizedTitle:"js按位非(~)与(~~)运算符",charIndex:1879},{level:3,title:"进制转换",slug:"进制转换",normalizedTitle:"进制转换",charIndex:2566},{level:2,title:"判断是否包含ua",slug:"判断是否包含ua",normalizedTitle:"判断是否包含ua",charIndex:3398},{level:2,title:"a==1 && a==2 && a==3 问题",slug:"a-1-a-2-a-3-问题",normalizedTitle:"a==1 &amp;&amp; a==2 &amp;&amp; a==3 问题",charIndex:null},{level:2,title:"new Function",slug:"new-function",normalizedTitle:"new function",charIndex:4708},{level:2,title:"eval",slug:"eval",normalizedTitle:"eval",charIndex:4795},{level:2,title:"class类与构造函数定义方法的区别",slug:"class类与构造函数定义方法的区别",normalizedTitle:"class类与构造函数定义方法的区别",charIndex:5047},{level:2,title:"浏览器标识",slug:"浏览器标识",normalizedTitle:"浏览器标识",charIndex:5515},{level:2,title:"BrowserInfo",slug:"browserinfo",normalizedTitle:"browserinfo",charIndex:7093},{level:2,title:"typeOf 类型判断",slug:"typeof-类型判断",normalizedTitle:"typeof 类型判断",charIndex:8472},{level:2,title:"判断对象是否存在循环引用",slug:"判断对象是否存在循环引用",normalizedTitle:"判断对象是否存在循环引用",charIndex:8978},{level:2,title:"实现简单版路由",slug:"实现简单版路由",normalizedTitle:"实现简单版路由",charIndex:9732},{level:2,title:"水印watermark",slug:"水印watermark",normalizedTitle:"水印watermark",charIndex:10381}],headersStr:"构造函数的继承 randomColor JS按位非(~)与(~~)运算符 进制转换 判断是否包含ua a==1 && a==2 && a==3 问题 new Function eval class类与构造函数定义方法的区别 浏览器标识 BrowserInfo typeOf 类型判断 判断对象是否存在循环引用 实现简单版路由 水印watermark",content:'# 构造函数的继承\n\n * 寄生组合式继承\n\nfunction Father(name) {\n  this.name = name;\n}\nFather.prototype.sayname = function() {\n  console.log(this.name);\n};\n\nfunction Child(age, name) {\n  Father.call(this, name); //继承属性\n\n  this.age = age;\n}\n\n// 用一个 F 空的构造函数去取代执行了 Parent 这个构造函数\nfunction create(proto) {\n  function F() {}\n  F.prototype = proto;\n  return new F();\n}\n\nChild.prototype = create(Parent.prototype); //继承方法\nChild.prototype.constructor = Child;\n\n// Child原型方法\nChild.prototype.sayage = function() {\n  console.log(this.age);\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n * 原型式继承Object.create\n\nfunction Super() {\n  this.type = "super";\n  this.colors = ["red", "blue", "black"];\n}\nfunction Child(name) {\n  Super.call(this);  // <- there\n\n  this.type = "child";\n  this.name = "name";\n}\n\nChild.prototype = Object.create(Super.prototype); // <- there\n//或 Object.setPrototypeOf(Child.prototype, Super.prototype)\nChild.prototype.constructor = Child; // <- there\n\n// 使用\nvar child = new Child("cat");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * ES6的Class继承\n\nclass Animal {\n    constructor(name) {\n        this.name = name\n    }\n    getName() {\n        return this.name\n    }\n}\nclass Dog extends Animal {\n    constructor(name, age) {\n        super(name)\n        this.age = age\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# randomColor\n\n * 返回[0,1)之间的一个伪随机数\n\nfunction randomColor() {\n  return (\n    "#" + ("00000" + ((Math.random() * 0x1000000) << 0).toString(16)).substr(-6)\n  );\n}\nfunction randomRbga(a) {\n  var r = Math.floor(Math.random() * 255);\n  var g = Math.floor(Math.random() * 255);\n  var b = Math.floor(Math.random() * 255);\n  return "rgba(" + r + "," + g + "," + b + "," + a + ")";\n}\nfunction randomHsla() {\n  var colorAngle = Math.floor(Math.random() * 360);\n  return "hsla(" + colorAngle + ",100%,50%,1)";\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# JS按位非(~)与(~~)运算符\n\n * JS按位非(~)运算符与~~运算符的理解分析\n\n就来看看~1的计算步骤：\n\n- 将1(这里叫：原码)转二进制 ＝ 00000001\n\n- 按位取反 ＝ 11111110\n\n- 发现符号位(即最高位)为1(表示负数)，\n  将除符号位之外的其他数字取反 ＝ 10000001\n\n- 末位加1取其补码 ＝ 10000010\n\n- 转换回十进制 ＝ -2\n\n# 总结\n负数：补码(x) = -x - 1，正数：补码(x) = x\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * JavaScript 的按位操作符\n\n非负数的原码 = 反码 = 补码\n\n负数的反码 = 原码除符号位取反\n负数的补码 = 反码 + 1\n\n\n1\n2\n3\n4\n\n * ECMAScript 位运算符\n\n负数也存储为二进制代码，不过采用的形式是二进制补码。\n\n计算数字二进制补码的步骤有三步：\n\n1.确定该数字的非负版本的二进制表示（例如，要计算 -18的二进制补码，首先要确定 18 的二进制表示）\n\n0000 0000 0000 0000 0000 0000 0001 0010\n\n2.求得二进制反码，即要把 0 替换为 1，把 1 替换为 0\n\n1111 1111 1111 1111 1111 1111 1110 1101\n\n3.在二进制反码上加 1\n\n1111 1111 1111 1111 1111 1111 1110 1110\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 进制转换\n\n * toString(radix)\n\n(15).toString(2).padStart(8, "0"); // 00001111\n(15).toString(8).padStart(8, "0"); // 00000017\n(15).toString(16).padStart(8, "0"); // 0000000f\n\n\n1\n2\n3\n\n * Number()\n\nNumber("0x11"); // 17  十六进制\nNumber("0b11"); // 3   二进制\nNumber("0o11"); // 9   八进制\n\n\n1\n2\n3\n\n * baseConverter\n\nfunction baseConverter(decNumber, base) {\n  const remStack = [];\n  const digits = \'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\';\n  let number = decNumber;\n  let rem;\n  let baseString = \'\';\n\n  if (!(base >= 2 && base <= 36)) {\n    return \'\';\n  }\n\n  while (number > 0) {\n    rem = Math.floor(number % base);\n    remStack.push(rem);\n    number = Math.floor(number / base);\n  }\n\n  while (remStack.length > 0) {\n    baseString += digits[remStack.pop()];\n  }\n  return baseString;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 判断是否包含ua\n\nexport const getCurrentUA = () => window.navigator.userAgent.toLowerCase()\n\n/**\n * 返回是否包含ua的布尔值\n * @param {string} ua\n * @returns boolean\n */\nexport const includesUA = (ua) => {\n  if (!ua) throw new Error(\'includesUA: ua is required\')\n  const newUA = ua.replace(/(^\\s*)|(\\s*$)/g, \'\') // remove space\n  const reg = new RegExp(\'\\\\b\' + newUA + \'\\\\b\')\n  return reg.test(getCurrentUA())\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# a==1 && a==2 && a==3 问题\n\n * 全局变量，利用对象toString方法\n\nvar s = 0;\nvar a = {\n    toString(){\n          console.log(\'其次：toString.\')\n          return s+=1\n    },\n    valueOf(){\n        console.log(\'优先：valueOf.\')\n        return ++s\n    }\n}\n\nif(a == 1 && a ==2 && a == 3){\n  console.log(\'1.0 如何打印我！\')\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 使用definePrototype对变量劫持\n\nvar s = 0;\nwindow.a = 1\n\nObject.defineProperty(window, \'a\', {\n  get(){\n    return ++s;\n  }\n})\n\nif(a == 1 && a ==2 && a == 3){\n  console.log(\'2.0 如何打印我！\')\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 使用array的toString方法\n\nvar a = [1,2,3]\n// 数组toString默认回去调用join方法\n// 重写join方法\na.join = a.shift\n\nif(a == 1 && a ==2 && a == 3){\n  console.log(\'3.0 如何打印我！\')\n}\n\n// 例如\nvar b = [1,2,3]\nArray.prototype.join = function(){\n  return this.map(item => item*2)\n}\nconsole.log(b.toString())\n// [2, 4, 6]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# new Function\n\nvar str = "{\'a\':\'c\'}";\nvar f = new Function("return " + str);\n\n\n1\n2\n\n\n\n# eval\n\n * eval命令的作用是,将字符串当作语句执行\n\nvar a = 1;\neval("a = 2");\n\na; // 2\n\n\n1\n2\n3\n4\n\n * 如果使用严格模式,eval内部声明的变量,不会影响到外部作用域\n\n(function f() {\n  "use strict";\n  eval("var foo = 123");\n  console.log(foo); // ReferenceError: foo is not defined\n})();\n\n\n1\n2\n3\n4\n5\n\n\n\n# class类与构造函数定义方法的区别\n\n * 类的内部所有定义的方法，都是不可枚举的\n\nclass Point1 {\n  constructor() {}\n  getName() {}\n}\n\nObject.keys(Point1.prototype) // []\nObject.getOwnPropertyNames(Point1.prototype) // [ \'constructor\', \'getName\' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * ES5的构造函数写法，getName方法就是可枚举的\n\nfunction Point2(params) {}\nPoint2.prototype.getName = function () {}\n\nObject.keys(Point2.prototype) // [ \'getName\' ]\nObject.getOwnPropertyNames(Point2.prototype) // [ \'constructor\', \'getName\' ]\n\n\n1\n2\n3\n4\n5\n\n\n\n# 浏览器标识\n\n// 判断浏览器标识\n(function getMobileDevice(window) {\n  var ua = navigator.userAgent;\n  var mobile = /AppleWebKit.*Mobile.*/.test(ua) || /AppleWebKit/.test(ua); // 是否为移动终端\n  var ios = /\\(i[^;]+;( U;)? CPU.+Mac OS X/.test(ua); // ios终端\n  var android = /(Android);?[\\s\\/]+([\\d.]+)?/.test(ua); // android终端或者uc浏览器\n  var iphone = /iphone/i.test(ua); // iphone\n  var iPad = /iPad/i.test(ua); // ipad\n  var weixin = /micromessenger/i.test(ua); // weixin\n  var chrome = /Chrome\\/([\\d.]+)/.test(ua) || /CriOS\\/([\\d.]+)/.test(ua); // Chrome\n  var mozilla = ua.indexOf("Gecko") > -1 && ua.indexOf("KHTML") == -1; // 火狐内核\n  var webkit = /AppleWebKit/i.test(ua); // 苹果、谷歌内核\n  var opera = /Presto/i.test(ua); // opera内核\n  var safari = /safari/i.test(ua) && !/Chrome/i.test(ua); // 苹果浏览器\n  var msie = /msie/i.test(ua); // 微软\n  window.device = {\n    isMobile: mobile,\n    isIos: ios,\n    isAndroid: android,\n    isIPhone: iphone,\n    isIPad: iPad,\n    isWeiXin: weixin,\n    isChrome: chrome,\n    isMozilla: mozilla,\n    isWebkit: webkit,\n    isOpera: opera,\n    isSafari: safari,\n    isMsie: msie\n  };\n})(window);\n\nlet url = navigator.userAgent.toLowerCase();\n//使用toLowerCase将字符串全部转为小写 方便我们判断使用\nif (url.indexOf("15b202 qq") > -1) {\n  //单独判断QQ内置浏览器\n  alert("QQ APP 内置浏览器，做你想做的操作");\n}\nif (url.indexOf("micromessenger") > -1) {\n  //单独判断微信内置浏览器\n  alert("微信内置浏览器，做你想做的操作");\n}\nif (url.indexOf("15b202") > -1) {\n  //判断微信内置浏览器，QQ内置浏览器\n  alert("QQ和微信内置浏览器，做你想做的操作");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# BrowserInfo\n\nvar BrowserInfo = function () {\n  var json = {\n    userAgent: navigator.userAgent.toLowerCase(),\n    isAndroid: Boolean(navigator.userAgent.match(/android/gi)),\n    isIphone: Boolean(navigator.userAgent.match(/iphone|ipod/gi)),\n    isIpad: Boolean(navigator.userAgent.match(/ipad/gi)),\n    isWeixin: Boolean(navigator.userAgent.match(/MicroMessenger/gi))\n  };\n  return json;\n};\n\n// other\nconst inBrowser = typeof window !== "undefined";\n\nconst inWeex = typeof WXEnvironment !== "undefined" && !!WXEnvironment.platform;\nconst weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\n\nconst UA = inBrowser && window.navigator.userAgent.toLowerCase();\n\nconst isIE = UA && /msie|trident/.test(UA);\nconst isIE9 = UA && UA.indexOf("msie 9.0") > 0;\nconst isEdge = UA && UA.indexOf("edge/") > 0;\nconst isAndroid =\n  (UA && UA.indexOf("android") > 0) || weexPlatform === "android";\nconst isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || weexPlatform === "ios";\nconst isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nconst isPhantomJS = UA && /phantomjs/.test(UA);\nconst isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\nwindow.location.href = /Android|webOS|iPhone|iPod|BlackBerry/i.test(\n  navigator.userAgent\n)\n  ? "https://www.baidu.com/"\n  : "http://news.baidu.com/";\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# typeOf 类型判断\n\ntypeof undefined   //return undefined\ntypeof 1   //return number\ntypeof \' ni \'   //return string\ntypeof Function   //return function\ntypeof Symbol   //return function\ntypeof []   //return object\ntypeof null   //return object\ntypeof {}   //return object\ntypeof RegExp   //return function\ntypeof new RegExp()   //return object\ntypeof Math   //return object\ntypeof Date   //return function\ntypeof new Date()   //return object\ntypeof JSON   //return object\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 判断对象是否存在循环引用\n\n> 「2021」高频前端面试题汇总之手写代码篇\n\nconst isCycleObject = (obj,parent) => {\n    const parentArr = parent || [obj];\n    for(let i in obj) {\n        if(typeof obj[i] === \'object\') {\n            let flag = false;\n            parentArr.forEach((pObj) => {\n                // 如果对象存在循环引用，则返回true\n                if(pObj === obj[i]){\n                    flag = true;\n                }\n            })\n            if(flag) return true;\n            flag = isCycleObject(obj[i],[...parentArr,obj[i]]);\n            if(flag) return true;\n        }\n    }\n    return false;\n}\n\n\nconst a = 1;\nconst b = {a};\nconst c = {b};\nconst o = {d:{a:3},c}\no.c.b.aa = a;\n\nconsole.log(isCycleObject(o)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 实现简单版路由\n\n// hash路由\nclass Route{\n  constructor(){\n    // 路由存储对象\n    this.routes = {}\n    // 当前hash\n    this.currentHash = \'\'\n    // 绑定this，避免监听时this指向改变\n    this.freshRoute = this.freshRoute.bind(this)\n    // 监听\n    window.addEventListener(\'load\', this.freshRoute, false)\n    window.addEventListener(\'hashchange\', this.freshRoute, false)\n  }\n  // 存储\n  storeRoute (path, cb) {\n    this.routes[path] = cb || function () {}\n  }\n  // 更新\n  freshRoute () {\n    // location.hash.slice(1) 去除#\n    this.currentHash = location.hash.slice(1) || \'/\'\n    this.routes[this.currentHash]()\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 水印watermark\n\nSee More\n\nfunction watermark(text) {\n\t//默认设置\n\tlet defaultSettings = {\n\t\twatermark_txt: text,\n\t\twatermark_x: 20, //水印起始位置x轴坐标\n\t\twatermark_y: 20, //水印起始位置Y轴坐标\n\t\twatermark_rows: 20, //水印行数\n\t\twatermark_cols: 20, //水印列数\n\t\twatermark_x_space: 100, //水印x轴间隔\n\t\twatermark_y_space: 50, //水印y轴间隔\n\t\twatermark_color: "#aaa", //水印字体颜色\n\t\twatermark_alpha: 0.4, //水印透明度\n\t\twatermark_fontsize: "15px", //水印字体大小\n\t\twatermark_font: "微软雅黑", //水印字体\n\t\twatermark_width: 210, //水印宽度\n\t\twatermark_height: 80, //水印长度\n\t\twatermark_angle: 15, //水印倾斜度数\n\t}\n\t//采用配置项替换默认值，作用类似jquery.extend\n\tif (arguments.length === 1 && typeof arguments[0] === "object") {\n\t\tlet src = arguments[0] || {}\n\t\tfor (let key in src) {\n\t\t\tif (\n\t\t\t\tsrc[key] &&\n\t\t\t\tdefaultSettings[key] &&\n\t\t\t\tsrc[key] === defaultSettings[key]\n\t\t\t)\n\t\t\t\tcontinue\n\t\t\telse if (src[key]) defaultSettings[key] = src[key]\n\t\t}\n\t}\n\n\tlet oTemp = document.createDocumentFragment()\n\n\t//获取页面最大宽度\n\tlet page_width = Math.max(\n\t\tdocument.body.scrollWidth,\n\t\tdocument.body.clientWidth,\n\t)\n\tlet cutWidth = page_width * 0.015\n\tpage_width = page_width - cutWidth\n\t//获取页面最大高度\n\tlet page_height = Math.max(\n\t\tdocument.body.scrollHeight,\n\t\tdocument.body.clientHeight,\n\t)\n\t// var page_height = document.body.scrollHeight+document.body.scrollTop;\n\t//如果将水印列数设置为0，或水印列数设置过大，超过页面最大宽度，则重新计算水印列数和水印x轴间隔\n\tif (\n\t\tdefaultSettings.watermark_cols == 0 ||\n\t\tparseInt(\n\t\t\tdefaultSettings.watermark_x +\n\t\t\t\tdefaultSettings.watermark_width *\n\t\t\t\t\tdefaultSettings.watermark_cols +\n\t\t\t\tdefaultSettings.watermark_x_space *\n\t\t\t\t\t(defaultSettings.watermark_cols - 1),\n\t\t) > page_width\n\t) {\n\t\tdefaultSettings.watermark_cols = parseInt(\n\t\t\t(page_width -\n\t\t\t\tdefaultSettings.watermark_x +\n\t\t\t\tdefaultSettings.watermark_x_space) /\n\t\t\t\t(defaultSettings.watermark_width +\n\t\t\t\t\tdefaultSettings.watermark_x_space),\n\t\t)\n\t\tdefaultSettings.watermark_x_space = parseInt(\n\t\t\t(page_width -\n\t\t\t\tdefaultSettings.watermark_x -\n\t\t\t\tdefaultSettings.watermark_width *\n\t\t\t\t\tdefaultSettings.watermark_cols) /\n\t\t\t\t(defaultSettings.watermark_cols - 1),\n\t\t)\n\t}\n\t//如果将水印行数设置为0，或水印行数设置过大，超过页面最大长度，则重新计算水印行数和水印y轴间隔\n\tif (\n\t\tdefaultSettings.watermark_rows == 0 ||\n\t\tparseInt(\n\t\t\tdefaultSettings.watermark_y +\n\t\t\t\tdefaultSettings.watermark_height *\n\t\t\t\t\tdefaultSettings.watermark_rows +\n\t\t\t\tdefaultSettings.watermark_y_space *\n\t\t\t\t\t(defaultSettings.watermark_rows - 1),\n\t\t) > page_height\n\t) {\n\t\tdefaultSettings.watermark_rows = parseInt(\n\t\t\t(defaultSettings.watermark_y_space +\n\t\t\t\tpage_height -\n\t\t\t\tdefaultSettings.watermark_y) /\n\t\t\t\t(defaultSettings.watermark_height +\n\t\t\t\t\tdefaultSettings.watermark_y_space),\n\t\t)\n\t\tdefaultSettings.watermark_y_space = parseInt(\n\t\t\t(page_height -\n\t\t\t\tdefaultSettings.watermark_y -\n\t\t\t\tdefaultSettings.watermark_height *\n\t\t\t\t\tdefaultSettings.watermark_rows) /\n\t\t\t\t(defaultSettings.watermark_rows - 1),\n\t\t)\n\t}\n\tlet x\n\tlet y\n\tfor (let i = 0; i < defaultSettings.watermark_rows; i++) {\n\t\ty =\n\t\t\tdefaultSettings.watermark_y +\n\t\t\t(defaultSettings.watermark_y_space +\n\t\t\t\tdefaultSettings.watermark_height) *\n\t\t\t\ti\n\t\tfor (let j = 0; j < defaultSettings.watermark_cols; j++) {\n\t\t\tx =\n\t\t\t\tdefaultSettings.watermark_x +\n\t\t\t\t(defaultSettings.watermark_width +\n\t\t\t\t\tdefaultSettings.watermark_x_space) *\n\t\t\t\t\tj\n\n\t\t\tlet mask_div = document.createElement("div")\n\t\t\tmask_div.id = "mask_div" + i + j\n\t\t\tmask_div.className = "mask_div"\n\t\t\tmask_div.appendChild(\n\t\t\t\tdocument.createTextNode(defaultSettings.watermark_txt),\n\t\t\t)\n\t\t\t//设置水印div倾斜显示\n\t\t\tmask_div.style.webkitTransform =\n\t\t\t\t"rotate(-" + defaultSettings.watermark_angle + "deg)"\n\t\t\tmask_div.style.MozTransform =\n\t\t\t\t"rotate(-" + defaultSettings.watermark_angle + "deg)"\n\t\t\tmask_div.style.msTransform =\n\t\t\t\t"rotate(-" + defaultSettings.watermark_angle + "deg)"\n\t\t\tmask_div.style.OTransform =\n\t\t\t\t"rotate(-" + defaultSettings.watermark_angle + "deg)"\n\t\t\tmask_div.style.transform =\n\t\t\t\t"rotate(-" + defaultSettings.watermark_angle + "deg)"\n\t\t\tmask_div.style.visibility = ""\n\t\t\tmask_div.style.position = "absolute"\n\t\t\tmask_div.style.left = x + "px"\n\t\t\tmask_div.style.top = y + "px"\n\t\t\tmask_div.style.overflow = "hidden"\n\t\t\tmask_div.style.zIndex = "9999"\n\t\t\tmask_div.style.pointerEvents = "none" //pointer-events:none  让水印不遮挡页面的点击事件\n\t\t\t//mask_div.style.border="solid #eee 1px";\n\t\t\tmask_div.style.opacity = defaultSettings.watermark_alpha\n\t\t\tmask_div.style.fontSize = defaultSettings.watermark_fontsize\n\t\t\tmask_div.style.fontFamily = defaultSettings.watermark_font\n\t\t\tmask_div.style.color = defaultSettings.watermark_color\n\t\t\tmask_div.style.textAlign = "center"\n\t\t\tmask_div.style.width = defaultSettings.watermark_width + "px"\n\t\t\tmask_div.style.height = defaultSettings.watermark_height + "px"\n\t\t\tmask_div.style.display = "block"\n\t\t\toTemp.appendChild(mask_div)\n\t\t}\n\t}\n\tdocument.body.appendChild(oTemp)\n}\n\nexport default watermark\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n',normalizedContent:'# 构造函数的继承\n\n * 寄生组合式继承\n\nfunction father(name) {\n  this.name = name;\n}\nfather.prototype.sayname = function() {\n  console.log(this.name);\n};\n\nfunction child(age, name) {\n  father.call(this, name); //继承属性\n\n  this.age = age;\n}\n\n// 用一个 f 空的构造函数去取代执行了 parent 这个构造函数\nfunction create(proto) {\n  function f() {}\n  f.prototype = proto;\n  return new f();\n}\n\nchild.prototype = create(parent.prototype); //继承方法\nchild.prototype.constructor = child;\n\n// child原型方法\nchild.prototype.sayage = function() {\n  console.log(this.age);\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n * 原型式继承object.create\n\nfunction super() {\n  this.type = "super";\n  this.colors = ["red", "blue", "black"];\n}\nfunction child(name) {\n  super.call(this);  // <- there\n\n  this.type = "child";\n  this.name = "name";\n}\n\nchild.prototype = object.create(super.prototype); // <- there\n//或 object.setprototypeof(child.prototype, super.prototype)\nchild.prototype.constructor = child; // <- there\n\n// 使用\nvar child = new child("cat");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * es6的class继承\n\nclass animal {\n    constructor(name) {\n        this.name = name\n    }\n    getname() {\n        return this.name\n    }\n}\nclass dog extends animal {\n    constructor(name, age) {\n        super(name)\n        this.age = age\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# randomcolor\n\n * 返回[0,1)之间的一个伪随机数\n\nfunction randomcolor() {\n  return (\n    "#" + ("00000" + ((math.random() * 0x1000000) << 0).tostring(16)).substr(-6)\n  );\n}\nfunction randomrbga(a) {\n  var r = math.floor(math.random() * 255);\n  var g = math.floor(math.random() * 255);\n  var b = math.floor(math.random() * 255);\n  return "rgba(" + r + "," + g + "," + b + "," + a + ")";\n}\nfunction randomhsla() {\n  var colorangle = math.floor(math.random() * 360);\n  return "hsla(" + colorangle + ",100%,50%,1)";\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# js按位非(~)与(~~)运算符\n\n * js按位非(~)运算符与~~运算符的理解分析\n\n就来看看~1的计算步骤：\n\n- 将1(这里叫：原码)转二进制 ＝ 00000001\n\n- 按位取反 ＝ 11111110\n\n- 发现符号位(即最高位)为1(表示负数)，\n  将除符号位之外的其他数字取反 ＝ 10000001\n\n- 末位加1取其补码 ＝ 10000010\n\n- 转换回十进制 ＝ -2\n\n# 总结\n负数：补码(x) = -x - 1，正数：补码(x) = x\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * javascript 的按位操作符\n\n非负数的原码 = 反码 = 补码\n\n负数的反码 = 原码除符号位取反\n负数的补码 = 反码 + 1\n\n\n1\n2\n3\n4\n\n * ecmascript 位运算符\n\n负数也存储为二进制代码，不过采用的形式是二进制补码。\n\n计算数字二进制补码的步骤有三步：\n\n1.确定该数字的非负版本的二进制表示（例如，要计算 -18的二进制补码，首先要确定 18 的二进制表示）\n\n0000 0000 0000 0000 0000 0000 0001 0010\n\n2.求得二进制反码，即要把 0 替换为 1，把 1 替换为 0\n\n1111 1111 1111 1111 1111 1111 1110 1101\n\n3.在二进制反码上加 1\n\n1111 1111 1111 1111 1111 1111 1110 1110\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 进制转换\n\n * tostring(radix)\n\n(15).tostring(2).padstart(8, "0"); // 00001111\n(15).tostring(8).padstart(8, "0"); // 00000017\n(15).tostring(16).padstart(8, "0"); // 0000000f\n\n\n1\n2\n3\n\n * number()\n\nnumber("0x11"); // 17  十六进制\nnumber("0b11"); // 3   二进制\nnumber("0o11"); // 9   八进制\n\n\n1\n2\n3\n\n * baseconverter\n\nfunction baseconverter(decnumber, base) {\n  const remstack = [];\n  const digits = \'0123456789abcdefghijklmnopqrstuvwxyz\';\n  let number = decnumber;\n  let rem;\n  let basestring = \'\';\n\n  if (!(base >= 2 && base <= 36)) {\n    return \'\';\n  }\n\n  while (number > 0) {\n    rem = math.floor(number % base);\n    remstack.push(rem);\n    number = math.floor(number / base);\n  }\n\n  while (remstack.length > 0) {\n    basestring += digits[remstack.pop()];\n  }\n  return basestring;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 判断是否包含ua\n\nexport const getcurrentua = () => window.navigator.useragent.tolowercase()\n\n/**\n * 返回是否包含ua的布尔值\n * @param {string} ua\n * @returns boolean\n */\nexport const includesua = (ua) => {\n  if (!ua) throw new error(\'includesua: ua is required\')\n  const newua = ua.replace(/(^\\s*)|(\\s*$)/g, \'\') // remove space\n  const reg = new regexp(\'\\\\b\' + newua + \'\\\\b\')\n  return reg.test(getcurrentua())\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# a==1 && a==2 && a==3 问题\n\n * 全局变量，利用对象tostring方法\n\nvar s = 0;\nvar a = {\n    tostring(){\n          console.log(\'其次：tostring.\')\n          return s+=1\n    },\n    valueof(){\n        console.log(\'优先：valueof.\')\n        return ++s\n    }\n}\n\nif(a == 1 && a ==2 && a == 3){\n  console.log(\'1.0 如何打印我！\')\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 使用defineprototype对变量劫持\n\nvar s = 0;\nwindow.a = 1\n\nobject.defineproperty(window, \'a\', {\n  get(){\n    return ++s;\n  }\n})\n\nif(a == 1 && a ==2 && a == 3){\n  console.log(\'2.0 如何打印我！\')\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 使用array的tostring方法\n\nvar a = [1,2,3]\n// 数组tostring默认回去调用join方法\n// 重写join方法\na.join = a.shift\n\nif(a == 1 && a ==2 && a == 3){\n  console.log(\'3.0 如何打印我！\')\n}\n\n// 例如\nvar b = [1,2,3]\narray.prototype.join = function(){\n  return this.map(item => item*2)\n}\nconsole.log(b.tostring())\n// [2, 4, 6]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# new function\n\nvar str = "{\'a\':\'c\'}";\nvar f = new function("return " + str);\n\n\n1\n2\n\n\n\n# eval\n\n * eval命令的作用是,将字符串当作语句执行\n\nvar a = 1;\neval("a = 2");\n\na; // 2\n\n\n1\n2\n3\n4\n\n * 如果使用严格模式,eval内部声明的变量,不会影响到外部作用域\n\n(function f() {\n  "use strict";\n  eval("var foo = 123");\n  console.log(foo); // referenceerror: foo is not defined\n})();\n\n\n1\n2\n3\n4\n5\n\n\n\n# class类与构造函数定义方法的区别\n\n * 类的内部所有定义的方法，都是不可枚举的\n\nclass point1 {\n  constructor() {}\n  getname() {}\n}\n\nobject.keys(point1.prototype) // []\nobject.getownpropertynames(point1.prototype) // [ \'constructor\', \'getname\' ]\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * es5的构造函数写法，getname方法就是可枚举的\n\nfunction point2(params) {}\npoint2.prototype.getname = function () {}\n\nobject.keys(point2.prototype) // [ \'getname\' ]\nobject.getownpropertynames(point2.prototype) // [ \'constructor\', \'getname\' ]\n\n\n1\n2\n3\n4\n5\n\n\n\n# 浏览器标识\n\n// 判断浏览器标识\n(function getmobiledevice(window) {\n  var ua = navigator.useragent;\n  var mobile = /applewebkit.*mobile.*/.test(ua) || /applewebkit/.test(ua); // 是否为移动终端\n  var ios = /\\(i[^;]+;( u;)? cpu.+mac os x/.test(ua); // ios终端\n  var android = /(android);?[\\s\\/]+([\\d.]+)?/.test(ua); // android终端或者uc浏览器\n  var iphone = /iphone/i.test(ua); // iphone\n  var ipad = /ipad/i.test(ua); // ipad\n  var weixin = /micromessenger/i.test(ua); // weixin\n  var chrome = /chrome\\/([\\d.]+)/.test(ua) || /crios\\/([\\d.]+)/.test(ua); // chrome\n  var mozilla = ua.indexof("gecko") > -1 && ua.indexof("khtml") == -1; // 火狐内核\n  var webkit = /applewebkit/i.test(ua); // 苹果、谷歌内核\n  var opera = /presto/i.test(ua); // opera内核\n  var safari = /safari/i.test(ua) && !/chrome/i.test(ua); // 苹果浏览器\n  var msie = /msie/i.test(ua); // 微软\n  window.device = {\n    ismobile: mobile,\n    isios: ios,\n    isandroid: android,\n    isiphone: iphone,\n    isipad: ipad,\n    isweixin: weixin,\n    ischrome: chrome,\n    ismozilla: mozilla,\n    iswebkit: webkit,\n    isopera: opera,\n    issafari: safari,\n    ismsie: msie\n  };\n})(window);\n\nlet url = navigator.useragent.tolowercase();\n//使用tolowercase将字符串全部转为小写 方便我们判断使用\nif (url.indexof("15b202 qq") > -1) {\n  //单独判断qq内置浏览器\n  alert("qq app 内置浏览器，做你想做的操作");\n}\nif (url.indexof("micromessenger") > -1) {\n  //单独判断微信内置浏览器\n  alert("微信内置浏览器，做你想做的操作");\n}\nif (url.indexof("15b202") > -1) {\n  //判断微信内置浏览器，qq内置浏览器\n  alert("qq和微信内置浏览器，做你想做的操作");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# browserinfo\n\nvar browserinfo = function () {\n  var json = {\n    useragent: navigator.useragent.tolowercase(),\n    isandroid: boolean(navigator.useragent.match(/android/gi)),\n    isiphone: boolean(navigator.useragent.match(/iphone|ipod/gi)),\n    isipad: boolean(navigator.useragent.match(/ipad/gi)),\n    isweixin: boolean(navigator.useragent.match(/micromessenger/gi))\n  };\n  return json;\n};\n\n// other\nconst inbrowser = typeof window !== "undefined";\n\nconst inweex = typeof wxenvironment !== "undefined" && !!wxenvironment.platform;\nconst weexplatform = inweex && wxenvironment.platform.tolowercase();\n\nconst ua = inbrowser && window.navigator.useragent.tolowercase();\n\nconst isie = ua && /msie|trident/.test(ua);\nconst isie9 = ua && ua.indexof("msie 9.0") > 0;\nconst isedge = ua && ua.indexof("edge/") > 0;\nconst isandroid =\n  (ua && ua.indexof("android") > 0) || weexplatform === "android";\nconst isios = (ua && /iphone|ipad|ipod|ios/.test(ua)) || weexplatform === "ios";\nconst ischrome = ua && /chrome\\/\\d+/.test(ua) && !isedge;\nconst isphantomjs = ua && /phantomjs/.test(ua);\nconst isff = ua && ua.match(/firefox\\/(\\d+)/);\n\nwindow.location.href = /android|webos|iphone|ipod|blackberry/i.test(\n  navigator.useragent\n)\n  ? "https://www.baidu.com/"\n  : "http://news.baidu.com/";\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# typeof 类型判断\n\ntypeof undefined   //return undefined\ntypeof 1   //return number\ntypeof \' ni \'   //return string\ntypeof function   //return function\ntypeof symbol   //return function\ntypeof []   //return object\ntypeof null   //return object\ntypeof {}   //return object\ntypeof regexp   //return function\ntypeof new regexp()   //return object\ntypeof math   //return object\ntypeof date   //return function\ntypeof new date()   //return object\ntypeof json   //return object\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 判断对象是否存在循环引用\n\n> 「2021」高频前端面试题汇总之手写代码篇\n\nconst iscycleobject = (obj,parent) => {\n    const parentarr = parent || [obj];\n    for(let i in obj) {\n        if(typeof obj[i] === \'object\') {\n            let flag = false;\n            parentarr.foreach((pobj) => {\n                // 如果对象存在循环引用，则返回true\n                if(pobj === obj[i]){\n                    flag = true;\n                }\n            })\n            if(flag) return true;\n            flag = iscycleobject(obj[i],[...parentarr,obj[i]]);\n            if(flag) return true;\n        }\n    }\n    return false;\n}\n\n\nconst a = 1;\nconst b = {a};\nconst c = {b};\nconst o = {d:{a:3},c}\no.c.b.aa = a;\n\nconsole.log(iscycleobject(o)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 实现简单版路由\n\n// hash路由\nclass route{\n  constructor(){\n    // 路由存储对象\n    this.routes = {}\n    // 当前hash\n    this.currenthash = \'\'\n    // 绑定this，避免监听时this指向改变\n    this.freshroute = this.freshroute.bind(this)\n    // 监听\n    window.addeventlistener(\'load\', this.freshroute, false)\n    window.addeventlistener(\'hashchange\', this.freshroute, false)\n  }\n  // 存储\n  storeroute (path, cb) {\n    this.routes[path] = cb || function () {}\n  }\n  // 更新\n  freshroute () {\n    // location.hash.slice(1) 去除#\n    this.currenthash = location.hash.slice(1) || \'/\'\n    this.routes[this.currenthash]()\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 水印watermark\n\nsee more\n\nfunction watermark(text) {\n\t//默认设置\n\tlet defaultsettings = {\n\t\twatermark_txt: text,\n\t\twatermark_x: 20, //水印起始位置x轴坐标\n\t\twatermark_y: 20, //水印起始位置y轴坐标\n\t\twatermark_rows: 20, //水印行数\n\t\twatermark_cols: 20, //水印列数\n\t\twatermark_x_space: 100, //水印x轴间隔\n\t\twatermark_y_space: 50, //水印y轴间隔\n\t\twatermark_color: "#aaa", //水印字体颜色\n\t\twatermark_alpha: 0.4, //水印透明度\n\t\twatermark_fontsize: "15px", //水印字体大小\n\t\twatermark_font: "微软雅黑", //水印字体\n\t\twatermark_width: 210, //水印宽度\n\t\twatermark_height: 80, //水印长度\n\t\twatermark_angle: 15, //水印倾斜度数\n\t}\n\t//采用配置项替换默认值，作用类似jquery.extend\n\tif (arguments.length === 1 && typeof arguments[0] === "object") {\n\t\tlet src = arguments[0] || {}\n\t\tfor (let key in src) {\n\t\t\tif (\n\t\t\t\tsrc[key] &&\n\t\t\t\tdefaultsettings[key] &&\n\t\t\t\tsrc[key] === defaultsettings[key]\n\t\t\t)\n\t\t\t\tcontinue\n\t\t\telse if (src[key]) defaultsettings[key] = src[key]\n\t\t}\n\t}\n\n\tlet otemp = document.createdocumentfragment()\n\n\t//获取页面最大宽度\n\tlet page_width = math.max(\n\t\tdocument.body.scrollwidth,\n\t\tdocument.body.clientwidth,\n\t)\n\tlet cutwidth = page_width * 0.015\n\tpage_width = page_width - cutwidth\n\t//获取页面最大高度\n\tlet page_height = math.max(\n\t\tdocument.body.scrollheight,\n\t\tdocument.body.clientheight,\n\t)\n\t// var page_height = document.body.scrollheight+document.body.scrolltop;\n\t//如果将水印列数设置为0，或水印列数设置过大，超过页面最大宽度，则重新计算水印列数和水印x轴间隔\n\tif (\n\t\tdefaultsettings.watermark_cols == 0 ||\n\t\tparseint(\n\t\t\tdefaultsettings.watermark_x +\n\t\t\t\tdefaultsettings.watermark_width *\n\t\t\t\t\tdefaultsettings.watermark_cols +\n\t\t\t\tdefaultsettings.watermark_x_space *\n\t\t\t\t\t(defaultsettings.watermark_cols - 1),\n\t\t) > page_width\n\t) {\n\t\tdefaultsettings.watermark_cols = parseint(\n\t\t\t(page_width -\n\t\t\t\tdefaultsettings.watermark_x +\n\t\t\t\tdefaultsettings.watermark_x_space) /\n\t\t\t\t(defaultsettings.watermark_width +\n\t\t\t\t\tdefaultsettings.watermark_x_space),\n\t\t)\n\t\tdefaultsettings.watermark_x_space = parseint(\n\t\t\t(page_width -\n\t\t\t\tdefaultsettings.watermark_x -\n\t\t\t\tdefaultsettings.watermark_width *\n\t\t\t\t\tdefaultsettings.watermark_cols) /\n\t\t\t\t(defaultsettings.watermark_cols - 1),\n\t\t)\n\t}\n\t//如果将水印行数设置为0，或水印行数设置过大，超过页面最大长度，则重新计算水印行数和水印y轴间隔\n\tif (\n\t\tdefaultsettings.watermark_rows == 0 ||\n\t\tparseint(\n\t\t\tdefaultsettings.watermark_y +\n\t\t\t\tdefaultsettings.watermark_height *\n\t\t\t\t\tdefaultsettings.watermark_rows +\n\t\t\t\tdefaultsettings.watermark_y_space *\n\t\t\t\t\t(defaultsettings.watermark_rows - 1),\n\t\t) > page_height\n\t) {\n\t\tdefaultsettings.watermark_rows = parseint(\n\t\t\t(defaultsettings.watermark_y_space +\n\t\t\t\tpage_height -\n\t\t\t\tdefaultsettings.watermark_y) /\n\t\t\t\t(defaultsettings.watermark_height +\n\t\t\t\t\tdefaultsettings.watermark_y_space),\n\t\t)\n\t\tdefaultsettings.watermark_y_space = parseint(\n\t\t\t(page_height -\n\t\t\t\tdefaultsettings.watermark_y -\n\t\t\t\tdefaultsettings.watermark_height *\n\t\t\t\t\tdefaultsettings.watermark_rows) /\n\t\t\t\t(defaultsettings.watermark_rows - 1),\n\t\t)\n\t}\n\tlet x\n\tlet y\n\tfor (let i = 0; i < defaultsettings.watermark_rows; i++) {\n\t\ty =\n\t\t\tdefaultsettings.watermark_y +\n\t\t\t(defaultsettings.watermark_y_space +\n\t\t\t\tdefaultsettings.watermark_height) *\n\t\t\t\ti\n\t\tfor (let j = 0; j < defaultsettings.watermark_cols; j++) {\n\t\t\tx =\n\t\t\t\tdefaultsettings.watermark_x +\n\t\t\t\t(defaultsettings.watermark_width +\n\t\t\t\t\tdefaultsettings.watermark_x_space) *\n\t\t\t\t\tj\n\n\t\t\tlet mask_div = document.createelement("div")\n\t\t\tmask_div.id = "mask_div" + i + j\n\t\t\tmask_div.classname = "mask_div"\n\t\t\tmask_div.appendchild(\n\t\t\t\tdocument.createtextnode(defaultsettings.watermark_txt),\n\t\t\t)\n\t\t\t//设置水印div倾斜显示\n\t\t\tmask_div.style.webkittransform =\n\t\t\t\t"rotate(-" + defaultsettings.watermark_angle + "deg)"\n\t\t\tmask_div.style.moztransform =\n\t\t\t\t"rotate(-" + defaultsettings.watermark_angle + "deg)"\n\t\t\tmask_div.style.mstransform =\n\t\t\t\t"rotate(-" + defaultsettings.watermark_angle + "deg)"\n\t\t\tmask_div.style.otransform =\n\t\t\t\t"rotate(-" + defaultsettings.watermark_angle + "deg)"\n\t\t\tmask_div.style.transform =\n\t\t\t\t"rotate(-" + defaultsettings.watermark_angle + "deg)"\n\t\t\tmask_div.style.visibility = ""\n\t\t\tmask_div.style.position = "absolute"\n\t\t\tmask_div.style.left = x + "px"\n\t\t\tmask_div.style.top = y + "px"\n\t\t\tmask_div.style.overflow = "hidden"\n\t\t\tmask_div.style.zindex = "9999"\n\t\t\tmask_div.style.pointerevents = "none" //pointer-events:none  让水印不遮挡页面的点击事件\n\t\t\t//mask_div.style.border="solid #eee 1px";\n\t\t\tmask_div.style.opacity = defaultsettings.watermark_alpha\n\t\t\tmask_div.style.fontsize = defaultsettings.watermark_fontsize\n\t\t\tmask_div.style.fontfamily = defaultsettings.watermark_font\n\t\t\tmask_div.style.color = defaultsettings.watermark_color\n\t\t\tmask_div.style.textalign = "center"\n\t\t\tmask_div.style.width = defaultsettings.watermark_width + "px"\n\t\t\tmask_div.style.height = defaultsettings.watermark_height + "px"\n\t\t\tmask_div.style.display = "block"\n\t\t\totemp.appendchild(mask_div)\n\t\t}\n\t}\n\tdocument.body.appendchild(otemp)\n}\n\nexport default watermark\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n',charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1647517837e3},{title:"常见问题整理（三）",frontmatter:{title:"常见问题整理（三）",date:"2023-03-10T00:00:00.000Z",sidebar:"auto",categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/fq-issue-03.html",relativePath:"frontend/issues/fq-issue-03.md",key:"v-43a964cb",path:"/frontend/issues/fq-issue-03.html",headers:[{level:2,title:"for循环对象方式",slug:"for循环对象方式",normalizedTitle:"for循环对象方式",charIndex:2},{level:2,title:"Event Loop经典题目",slug:"event-loop经典题目",normalizedTitle:"event loop经典题目",charIndex:489},{level:2,title:"Node中的process.nextTick",slug:"node中的process-nexttick",normalizedTitle:"node中的process.nexttick",charIndex:1998},{level:2,title:"判断数组的方式有哪些",slug:"判断数组的方式有哪些",normalizedTitle:"判断数组的方式有哪些",charIndex:2397},{level:2,title:"为什么0.1+0.2 ! == 0.3，如何让其相等",slug:"为什么0-1-0-2-0-3-如何让其相等",normalizedTitle:"为什么0.1+0.2 ! == 0.3，如何让其相等",charIndex:2786},{level:2,title:"箭头函数与普通函数的区别",slug:"箭头函数与普通函数的区别",normalizedTitle:"箭头函数与普通函数的区别",charIndex:3156},{level:2,title:"模拟一个中间件流程",slug:"模拟一个中间件流程",normalizedTitle:"模拟一个中间件流程",charIndex:3292},{level:2,title:"node 创建子进程",slug:"node-创建子进程",normalizedTitle:"node 创建子进程",charIndex:4093},{level:2,title:"为什么type null是object",slug:"为什么type-null是object",normalizedTitle:"为什么type null是object",charIndex:4521}],headersStr:"for循环对象方式 Event Loop经典题目 Node中的process.nextTick 判断数组的方式有哪些 为什么0.1+0.2 ! == 0.3，如何让其相等 箭头函数与普通函数的区别 模拟一个中间件流程 node 创建子进程 为什么type null是object",content:'# for循环对象方式\n\n// 1. 使用 for in\nfor (let e in someObject) {\n  console.log(e);\n}\n\n// 2. Object.keys\nfor (var key of Object.keys(someObject)) {\n  console.log(key + \': \' + someObject[key]);\n}\n\n// 3. 使用 Generator 函数将对象重新包装一下\nconst obj = { a: 1, b: 2, c: 3 }\n\nfunction* entries(obj) {\n  for (let key of Object.keys(obj)) {\n    yield [key, obj[key]];\n  }\n}\n\nfor (let [key, value] of entries(obj)) {\n  console.log(key, \'->\', value);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# Event Loop经典题目\n\nPromise.resolve()\n  .then(function() {\n    console.log("promise0");\n  })\n  .then(function() {\n    console.log("promise5");\n  });\nsetTimeout(() => {\n  console.log("timer1");\n  Promise.resolve().then(function() {\n    console.log("promise2");\n  });\n  Promise.resolve().then(function() {\n    console.log("promise4");\n  });\n}, 0);\nsetTimeout(() => {\n  console.log("timer2");\n  Promise.resolve().then(function() {\n    console.log("promise3");\n  });\n}, 0);\nPromise.resolve().then(function() {\n  console.log("promise1");\n});\nconsole.log("start");\n\n// 打印结果：\n// start promise0 promise1 promise5 timer1 promise2 promise4 timer2 promise3\n\n// ------------------------------------------------------------------------\n\nconsole.log("script start");\nasync function async1() {\n  await async2(); // await 隐式返回promise\n  console.log("async1 end"); // 这里的执行时机：在执行微任务时执行\n}\nasync function async2() {\n  console.log("async2 end"); // 这里是同步代码\n}\nasync1();\nsetTimeout(function() {\n  console.log("setTimeout");\n}, 0);\nnew Promise(resolve => {\n  console.log("Promise"); // 这里是同步代码\n  resolve();\n})\n  .then(function() {\n    console.log("promise1");\n  })\n  .then(function() {\n    console.log("promise2");\n  });\nconsole.log("script end");\n\n// 打印结果:\n// script start => async2 end => Promise => script end => async1 end => promise1 => promise2 => setTimeout\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n\n\n\n# Node中的process.nextTick\n\nconsole.log("start");\nsetTimeout(() => {\n  console.log("timeout");\n}, 0);\nPromise.resolve().then(() => {\n  console.log("promise");\n});\nprocess.nextTick(() => {\n  console.log("nextTick");\n  Promise.resolve().then(() => {\n    console.log("promise1");\n  });\n});\nconsole.log("end");\n// 执行结果 start end nextTick  promise promise1 timeout\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 判断数组的方式有哪些\n\n * 通过Object.prototype.toString.call\n\nObject.prototype.toString.call([]).slice(8,-1) === \'Array\';\n\n\n1\n\n * 通过原型链做判断\n\n[].__proto__ === Array.prototype\nObject.getPrototypeOf([]) === Array.prototype\n\n\n1\n2\n\n * 通过ES6的Array.isArray做判断\n\nArray.isArrray([]);\n\n\n1\n\n * 通过instanceof做判断\n\n[] instanceof Array\n\n\n1\n\n * 通过Array.prototype.isPrototypeOf\n\nArray.prototype.isPrototypeOf([])\n\n\n1\n\n\n\n# 为什么0.1+0.2 ! == 0.3，如何让其相等\n\n * 实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数\n * 0.1 与 0.2 在转换为二进制时，出现了无限循环，导致相加时出现精度问题\n * ES6中，提供了Number.EPSILON属性，而它的值就是2-52\n\nfunction numberepsilon(arg1,arg2){\n  return Math.abs(arg1 - arg2) < Number.EPSILON;\n}\nconsole.log(numberepsilon(0.1 + 0.2, 0.3)); // true\n\n\n1\n2\n3\n4\n\n * 将小数转换为整数相加，最后在转换为小数\n * 将数字类型转换为字符串，然后在依次相加，最后在转换为数字类型\n\n\n# 箭头函数与普通函数的区别\n\n * 箭头函数没有自己的this\n * 不能改变箭头函数种的this指向\n * 不能作为构造函数使用\n * 没有自己的arguments\n * 没有prototype属性\n * 不能用作Generator函数，不能使用yield关键字\n\n\n# 模拟一个中间件流程\n\nconst m1 = async next => {\n  console.log("m1 run");\n  await next();\n  console.log("result1");\n};\n\nconst m2 = async next => {\n  console.log("m2 run");\n  await next();\n  console.log("result2");\n};\nconst m3 = async next => {\n  console.log("m3 run");\n  await next();\n  console.log("result3");\n};\n\nconst middlewares = [m1, m2, m3];\n\nfunction useApp() {\n  const next = () => {\n    const middleware = middlewares.shift();\n    if (middleware) {\n      // 递归调用栈\n      return Promise.resolve(middleware(next));\n    } else {\n      return Promise.resolve("end");\n    }\n  };\n  next();\n}\n\n// 启动中间件\nuseApp();\n\n// 依次打印：\n// m1 run\n// m2 run\n// m3 run\n// result3\n// result2\n// result1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# node 创建子进程\n\n> 进程间通信：使用fork方法创建的子进程，可通过send、on（message）方法来发送和接收进程间的数据\n\n// parent.js\nconst cp = require("child_process");\n// 通过child_process中的fork方法来生成子进程\nlet child = cp.fork("child.js");\nchild.send({ message: "from_parent" }); // send方法发送数据\nchild.on("message", res => console.log(res)); // on方法接收数据\n\n// child.js\nprocess.on("message", res => console.log(res));\nprocess.send({ message: "from_child" });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 为什么type null是object\n\n> 原文: The history of “typeof null”\n\n在 javascript 的最初版本中，使用的 32位系统，js为了性能优化，使用低位来存储变量的类型信息; 在判断数据类型时，是根据机器码低位标识来判断的，而null的机器码标识为全0，而对象的机器码低位标识为000。 所以typeof null的结果被误判为Object',normalizedContent:'# for循环对象方式\n\n// 1. 使用 for in\nfor (let e in someobject) {\n  console.log(e);\n}\n\n// 2. object.keys\nfor (var key of object.keys(someobject)) {\n  console.log(key + \': \' + someobject[key]);\n}\n\n// 3. 使用 generator 函数将对象重新包装一下\nconst obj = { a: 1, b: 2, c: 3 }\n\nfunction* entries(obj) {\n  for (let key of object.keys(obj)) {\n    yield [key, obj[key]];\n  }\n}\n\nfor (let [key, value] of entries(obj)) {\n  console.log(key, \'->\', value);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# event loop经典题目\n\npromise.resolve()\n  .then(function() {\n    console.log("promise0");\n  })\n  .then(function() {\n    console.log("promise5");\n  });\nsettimeout(() => {\n  console.log("timer1");\n  promise.resolve().then(function() {\n    console.log("promise2");\n  });\n  promise.resolve().then(function() {\n    console.log("promise4");\n  });\n}, 0);\nsettimeout(() => {\n  console.log("timer2");\n  promise.resolve().then(function() {\n    console.log("promise3");\n  });\n}, 0);\npromise.resolve().then(function() {\n  console.log("promise1");\n});\nconsole.log("start");\n\n// 打印结果：\n// start promise0 promise1 promise5 timer1 promise2 promise4 timer2 promise3\n\n// ------------------------------------------------------------------------\n\nconsole.log("script start");\nasync function async1() {\n  await async2(); // await 隐式返回promise\n  console.log("async1 end"); // 这里的执行时机：在执行微任务时执行\n}\nasync function async2() {\n  console.log("async2 end"); // 这里是同步代码\n}\nasync1();\nsettimeout(function() {\n  console.log("settimeout");\n}, 0);\nnew promise(resolve => {\n  console.log("promise"); // 这里是同步代码\n  resolve();\n})\n  .then(function() {\n    console.log("promise1");\n  })\n  .then(function() {\n    console.log("promise2");\n  });\nconsole.log("script end");\n\n// 打印结果:\n// script start => async2 end => promise => script end => async1 end => promise1 => promise2 => settimeout\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n\n\n\n# node中的process.nexttick\n\nconsole.log("start");\nsettimeout(() => {\n  console.log("timeout");\n}, 0);\npromise.resolve().then(() => {\n  console.log("promise");\n});\nprocess.nexttick(() => {\n  console.log("nexttick");\n  promise.resolve().then(() => {\n    console.log("promise1");\n  });\n});\nconsole.log("end");\n// 执行结果 start end nexttick  promise promise1 timeout\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 判断数组的方式有哪些\n\n * 通过object.prototype.tostring.call\n\nobject.prototype.tostring.call([]).slice(8,-1) === \'array\';\n\n\n1\n\n * 通过原型链做判断\n\n[].__proto__ === array.prototype\nobject.getprototypeof([]) === array.prototype\n\n\n1\n2\n\n * 通过es6的array.isarray做判断\n\narray.isarrray([]);\n\n\n1\n\n * 通过instanceof做判断\n\n[] instanceof array\n\n\n1\n\n * 通过array.prototype.isprototypeof\n\narray.prototype.isprototypeof([])\n\n\n1\n\n\n\n# 为什么0.1+0.2 ! == 0.3，如何让其相等\n\n * 实现遵循ieee 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数\n * 0.1 与 0.2 在转换为二进制时，出现了无限循环，导致相加时出现精度问题\n * es6中，提供了number.epsilon属性，而它的值就是2-52\n\nfunction numberepsilon(arg1,arg2){\n  return math.abs(arg1 - arg2) < number.epsilon;\n}\nconsole.log(numberepsilon(0.1 + 0.2, 0.3)); // true\n\n\n1\n2\n3\n4\n\n * 将小数转换为整数相加，最后在转换为小数\n * 将数字类型转换为字符串，然后在依次相加，最后在转换为数字类型\n\n\n# 箭头函数与普通函数的区别\n\n * 箭头函数没有自己的this\n * 不能改变箭头函数种的this指向\n * 不能作为构造函数使用\n * 没有自己的arguments\n * 没有prototype属性\n * 不能用作generator函数，不能使用yield关键字\n\n\n# 模拟一个中间件流程\n\nconst m1 = async next => {\n  console.log("m1 run");\n  await next();\n  console.log("result1");\n};\n\nconst m2 = async next => {\n  console.log("m2 run");\n  await next();\n  console.log("result2");\n};\nconst m3 = async next => {\n  console.log("m3 run");\n  await next();\n  console.log("result3");\n};\n\nconst middlewares = [m1, m2, m3];\n\nfunction useapp() {\n  const next = () => {\n    const middleware = middlewares.shift();\n    if (middleware) {\n      // 递归调用栈\n      return promise.resolve(middleware(next));\n    } else {\n      return promise.resolve("end");\n    }\n  };\n  next();\n}\n\n// 启动中间件\nuseapp();\n\n// 依次打印：\n// m1 run\n// m2 run\n// m3 run\n// result3\n// result2\n// result1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# node 创建子进程\n\n> 进程间通信：使用fork方法创建的子进程，可通过send、on（message）方法来发送和接收进程间的数据\n\n// parent.js\nconst cp = require("child_process");\n// 通过child_process中的fork方法来生成子进程\nlet child = cp.fork("child.js");\nchild.send({ message: "from_parent" }); // send方法发送数据\nchild.on("message", res => console.log(res)); // on方法接收数据\n\n// child.js\nprocess.on("message", res => console.log(res));\nprocess.send({ message: "from_child" });\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 为什么type null是object\n\n> 原文: the history of “typeof null”\n\n在 javascript 的最初版本中，使用的 32位系统，js为了性能优化，使用低位来存储变量的类型信息; 在判断数据类型时，是根据机器码低位标识来判断的，而null的机器码标识为全0，而对象的机器码低位标识为000。 所以typeof null的结果被误判为object',charsets:{cjk:!0},lastUpdated:"3/11/2023",lastUpdatedTimestamp:1678526401e3,createdTime:1678525665e3},{title:"github的graphql使用",frontmatter:{title:"github的graphql使用",date:"2020-08-02T00:00:00.000Z",sidebar:"auto",tags:["graphql"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/graphql-github.html",relativePath:"frontend/issues/graphql-github.md",key:"v-d4cae84e",path:"/frontend/issues/graphql-github.html",headers:[{level:2,title:"变量（Variables）",slug:"变量-variables",normalizedTitle:"变量（variables）",charIndex:111},{level:2,title:"操作名称（Operation name）",slug:"操作名称-operation-name",normalizedTitle:"操作名称（operation name）",charIndex:590},{level:2,title:"别名（Aliases）",slug:"别名-aliases",normalizedTitle:"别名（aliases）",charIndex:689},{level:2,title:"片段（Fragments）",slug:"片段-fragments",normalizedTitle:"片段（fragments）",charIndex:1667},{level:2,title:"指令（Directives）",slug:"指令-directives",normalizedTitle:"指令（directives）",charIndex:2816},{level:2,title:"变更（Mutations）",slug:"变更-mutations",normalizedTitle:"变更（mutations）",charIndex:3274},{level:2,title:"分页（Pagination）",slug:"分页-pagination",normalizedTitle:"分页（pagination）",charIndex:4068},{level:2,title:"nodejs 示例",slug:"nodejs-示例",normalizedTitle:"nodejs 示例",charIndex:4649},{level:2,title:"github 登录授权",slug:"github-登录授权",normalizedTitle:"github 登录授权",charIndex:6006}],headersStr:"变量（Variables） 操作名称（Operation name） 别名（Aliases） 片段（Fragments） 指令（Directives） 变更（Mutations） 分页（Pagination） nodejs 示例 github 登录授权",content:' * https://developer.github.com/v4/explorer/\n * Graphql Api : https://api.github.com/graphql\n * Schema 和类型\n\n\n# 变量（Variables）\n\n * 变量以 $ 开头， Int 为类型 ， ！为是否必填\n\n# $repo 为变量名\n\nquery($repo:Int!) {\n  viewer {\n    # 用户名 -> 注释\n    name #  -> 字段\n     repositories(last: $repo) { # 在操作中使用变量 $repo\n       nodes {\n         name\n       }\n     }\n   }\n}\n\n// query variables\nvariables {\n   "repo": 3\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 默认变量（Default variables）\n\n// "chengzao" 为 $user 的默认值\nquery MyQuery($user: String = "chengzao") {\n  user(login: $user) {\n    login\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 操作名称（Operation name）\n\n# MyQuery 为操作名\nquery MyQuery {\n  viewer {\n    login\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 别名（Aliases）\n\nquery MyPaginationQuery($pageSize: Int = 10) {\n  viewer {\n    # startsRepos 为 starredRepositories 的别名\n    startsRepos: starredRepositories(first: $pageSize) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n        }\n      }\n      totalCount\n    }\n  }\n}\n\n# 返回数据\n{\n  "data": {\n    "viewer": {\n      "startsRepo": {\n        "pageInfo": {\n          "endCursor": "xxx",\n          "hasNextPage": true,\n          "hasPreviousPage": false,\n          "startCursor": "xxx"\n        },\n        "edges": [\n          {\n            "cursor": "xxx",\n            "node": {\n              "id": "xxx",\n              "name": "nvm"\n            }\n          },\n        ],\n        "totalCount": 17\n      }\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n\n# 片段（Fragments）\n\nquery MyPaginationQuery($pageSize: Int = 10) {\n  viewer {\n    startsRepos: starredRepositories(first: $pageSize) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      totalCount\n      ...nodes\n    }\n  }\n}\n\n# https://graphql.cn/learn/schema/#interfaces\n# StarredRepositoryConnection 为 github graphql 中定义好的类型\nfragment nodes on StarredRepositoryConnection {\n   repos: edges {\n      cursor\n      node {\n        id\n        name\n      }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n * 在片段内使用变量\n\nquery MyPaginationQuery($pageSize: Int = 10) {\n  viewer {\n    ...viewer\n  }\n}\n\n# viewer\nfragment viewer on User{\n   startsRepos: starredRepositories(first: $pageSize) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      totalCount\n      ...nodes\n    }\n}\n\n\n# nodes\nfragment nodes on StarredRepositoryConnection {\n   repos: edges {\n      cursor\n      node {\n        id\n        name\n      }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 指令（Directives）\n\n * include包含此字段\n\nquery MyQuery($showStatus: Boolean!) {\n  viewer {\n    login\n    status @include(if: $showStatus) {\n      emoji\n    }\n  }\n}\n\n# query variables\n{\n  "showStatus": true\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * skip跳过此字段\n\nquery MyQuery($showStatus: Boolean!) {\n  viewer {\n    login\n    status @skip(if: $showStatus) {\n      emoji\n    }\n    id\n  }\n}\n\n# query variables\n{\n  "showStatus": true\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 变更（Mutations）\n\n * 约定规范任何导致写入的操作都应该显式通过变更（mutation）来发送\n\nquery FindIssueID {\n  repository(owner:"octocat", name:"Hello-World") {\n    issue(number:349) {\n      id\n    }\n  }\n}\n\nmutation AddReactionToIssue {\n  addReaction(input:{subjectId:"MDU6SXNzdWUyMzEzOTE1NTE=",content:HOORAY}) {\n    reaction {\n      content\n    }\n    subject {\n      id\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 多个参数\n\nmutation($myVar:AddReactionInput!) {\n  addReaction(input:$myVar) {\n    reaction {\n      content\n    }\n    subject {\n      id\n    }\n  }\n}\n\n# query variables\n# https://docs.github.com/cn/graphql/reference/input-objects#addreactioninput\nvariables {\n  "myVar": {\n    "subjectId":"MDU6SXNzdWUyMTc5NTQ0OTc=",\n    "content":"HOORAY"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 分页（Pagination）\n\n * github分页query\n\nquery MyPaginationQuery($cursorNo: String!, $pageSize: Int=10) {\n  viewer {\n    starredRepositories(first: $pageSize, after: $cursorNo) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n        }\n      }\n      totalCount\n    }\n  }\n}\n\n# query variables\n# cursorNo: 传入返回数据中的 pageInfo.startCursor / pageInfo.endCursor\n{\n  "cursorNo": "xxx",\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# nodejs 示例\n\n * 使用 GraphQL 进行身份验证\n * creating-a-personal-access-token\n\nconst axios = require(\'axios\')\n\n// ACCESS_TOKEN -> https://github.com/settings/tokens\n// .env -> ACCESS_TOKEN=axxxx54\n\nrequire("dotenv").config();\nconst TOKEN = process.env.ACCESS_TOKEN;\nconst GH_API = "https://api.github.com/graphql";\n\nfunction request (query, variables, headers = {}) {\n  return axios({\n    url: GH_API,\n    method: "post",\n    headers:{\n      Authorization: `bearer ${TOKEN}`,\n      ...headers\n    },\n    data:{\n      query,\n      variables\n    },\n  });\n}\n\nconst query = `\n  query MyPaginationQuery($pageSize: Int = 10) {\n    viewer {\n      startsRepos: starredRepositories(first: $pageSize) {\n        pageInfo {\n          endCursor\n          hasNextPage\n          hasPreviousPage\n          startCursor\n        }\n        totalCount\n        ...nodes\n      }\n    }\n  }\n\n  fragment nodes on StarredRepositoryConnection {\n    repos: edges {\n        cursor\n        node {\n          id\n          name\n        }\n      }\n  }\n`\n\nconst variables = {\n  pageSize: 5\n}\n\nconst data = async () => {\n  const res = await request(query, variables)\n  console.log(JSON.stringify(res.data, 0 ,2));\n}\n\ndata()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n\n\n\n# github 登录授权\n\n * AnDongCai@back-login\n * linwalker@node-login\n * 第三方登入例子-GitHub 授权登入（node-koa）\n * GitHub OAuth 第三方登录示例教程\n * 基于 Github API 的图床 Chrome 插件开发全纪录',normalizedContent:' * https://developer.github.com/v4/explorer/\n * graphql api : https://api.github.com/graphql\n * schema 和类型\n\n\n# 变量（variables）\n\n * 变量以 $ 开头， int 为类型 ， ！为是否必填\n\n# $repo 为变量名\n\nquery($repo:int!) {\n  viewer {\n    # 用户名 -> 注释\n    name #  -> 字段\n     repositories(last: $repo) { # 在操作中使用变量 $repo\n       nodes {\n         name\n       }\n     }\n   }\n}\n\n// query variables\nvariables {\n   "repo": 3\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 默认变量（default variables）\n\n// "chengzao" 为 $user 的默认值\nquery myquery($user: string = "chengzao") {\n  user(login: $user) {\n    login\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 操作名称（operation name）\n\n# myquery 为操作名\nquery myquery {\n  viewer {\n    login\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 别名（aliases）\n\nquery mypaginationquery($pagesize: int = 10) {\n  viewer {\n    # startsrepos 为 starredrepositories 的别名\n    startsrepos: starredrepositories(first: $pagesize) {\n      pageinfo {\n        endcursor\n        hasnextpage\n        haspreviouspage\n        startcursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n        }\n      }\n      totalcount\n    }\n  }\n}\n\n# 返回数据\n{\n  "data": {\n    "viewer": {\n      "startsrepo": {\n        "pageinfo": {\n          "endcursor": "xxx",\n          "hasnextpage": true,\n          "haspreviouspage": false,\n          "startcursor": "xxx"\n        },\n        "edges": [\n          {\n            "cursor": "xxx",\n            "node": {\n              "id": "xxx",\n              "name": "nvm"\n            }\n          },\n        ],\n        "totalcount": 17\n      }\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n\n# 片段（fragments）\n\nquery mypaginationquery($pagesize: int = 10) {\n  viewer {\n    startsrepos: starredrepositories(first: $pagesize) {\n      pageinfo {\n        endcursor\n        hasnextpage\n        haspreviouspage\n        startcursor\n      }\n      totalcount\n      ...nodes\n    }\n  }\n}\n\n# https://graphql.cn/learn/schema/#interfaces\n# starredrepositoryconnection 为 github graphql 中定义好的类型\nfragment nodes on starredrepositoryconnection {\n   repos: edges {\n      cursor\n      node {\n        id\n        name\n      }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n * 在片段内使用变量\n\nquery mypaginationquery($pagesize: int = 10) {\n  viewer {\n    ...viewer\n  }\n}\n\n# viewer\nfragment viewer on user{\n   startsrepos: starredrepositories(first: $pagesize) {\n      pageinfo {\n        endcursor\n        hasnextpage\n        haspreviouspage\n        startcursor\n      }\n      totalcount\n      ...nodes\n    }\n}\n\n\n# nodes\nfragment nodes on starredrepositoryconnection {\n   repos: edges {\n      cursor\n      node {\n        id\n        name\n      }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 指令（directives）\n\n * include包含此字段\n\nquery myquery($showstatus: boolean!) {\n  viewer {\n    login\n    status @include(if: $showstatus) {\n      emoji\n    }\n  }\n}\n\n# query variables\n{\n  "showstatus": true\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * skip跳过此字段\n\nquery myquery($showstatus: boolean!) {\n  viewer {\n    login\n    status @skip(if: $showstatus) {\n      emoji\n    }\n    id\n  }\n}\n\n# query variables\n{\n  "showstatus": true\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 变更（mutations）\n\n * 约定规范任何导致写入的操作都应该显式通过变更（mutation）来发送\n\nquery findissueid {\n  repository(owner:"octocat", name:"hello-world") {\n    issue(number:349) {\n      id\n    }\n  }\n}\n\nmutation addreactiontoissue {\n  addreaction(input:{subjectid:"mdu6sxnzdwuymzezote1nte=",content:hooray}) {\n    reaction {\n      content\n    }\n    subject {\n      id\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 多个参数\n\nmutation($myvar:addreactioninput!) {\n  addreaction(input:$myvar) {\n    reaction {\n      content\n    }\n    subject {\n      id\n    }\n  }\n}\n\n# query variables\n# https://docs.github.com/cn/graphql/reference/input-objects#addreactioninput\nvariables {\n  "myvar": {\n    "subjectid":"mdu6sxnzdwuymtc5ntq0otc=",\n    "content":"hooray"\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 分页（pagination）\n\n * github分页query\n\nquery mypaginationquery($cursorno: string!, $pagesize: int=10) {\n  viewer {\n    starredrepositories(first: $pagesize, after: $cursorno) {\n      pageinfo {\n        endcursor\n        hasnextpage\n        haspreviouspage\n        startcursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n        }\n      }\n      totalcount\n    }\n  }\n}\n\n# query variables\n# cursorno: 传入返回数据中的 pageinfo.startcursor / pageinfo.endcursor\n{\n  "cursorno": "xxx",\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# nodejs 示例\n\n * 使用 graphql 进行身份验证\n * creating-a-personal-access-token\n\nconst axios = require(\'axios\')\n\n// access_token -> https://github.com/settings/tokens\n// .env -> access_token=axxxx54\n\nrequire("dotenv").config();\nconst token = process.env.access_token;\nconst gh_api = "https://api.github.com/graphql";\n\nfunction request (query, variables, headers = {}) {\n  return axios({\n    url: gh_api,\n    method: "post",\n    headers:{\n      authorization: `bearer ${token}`,\n      ...headers\n    },\n    data:{\n      query,\n      variables\n    },\n  });\n}\n\nconst query = `\n  query mypaginationquery($pagesize: int = 10) {\n    viewer {\n      startsrepos: starredrepositories(first: $pagesize) {\n        pageinfo {\n          endcursor\n          hasnextpage\n          haspreviouspage\n          startcursor\n        }\n        totalcount\n        ...nodes\n      }\n    }\n  }\n\n  fragment nodes on starredrepositoryconnection {\n    repos: edges {\n        cursor\n        node {\n          id\n          name\n        }\n      }\n  }\n`\n\nconst variables = {\n  pagesize: 5\n}\n\nconst data = async () => {\n  const res = await request(query, variables)\n  console.log(json.stringify(res.data, 0 ,2));\n}\n\ndata()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n\n\n\n# github 登录授权\n\n * andongcai@back-login\n * linwalker@node-login\n * 第三方登入例子-github 授权登入（node-koa）\n * github oauth 第三方登录示例教程\n * 基于 github api 的图床 chrome 插件开发全纪录',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647945545e3,createdTime:1643899953e3},{title:"如何处理前端异常",frontmatter:{title:"如何处理前端异常",date:"2022-01-29T00:00:00.000Z",sidebar:"auto",tags:["error"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/handleError.html",relativePath:"frontend/issues/handleError.md",key:"v-09c6e9ab",path:"/frontend/issues/handleError.html",headers:[{level:2,title:"try-catch",slug:"try-catch",normalizedTitle:"try-catch",charIndex:2},{level:2,title:"window.onerror",slug:"window-onerror",normalizedTitle:"window.onerror",charIndex:558},{level:2,title:"Script error",slug:"script-error",normalizedTitle:"script error",charIndex:1005},{level:2,title:"监听error事件",slug:"监听error事件",normalizedTitle:"监听error事件",charIndex:1824},{level:2,title:"Promise异常捕获",slug:"promise异常捕获",normalizedTitle:"promise异常捕获",charIndex:1915},{level:2,title:"错误类型总结",slug:"错误类型总结",normalizedTitle:"错误类型总结",charIndex:2190},{level:2,title:"错误数据采集",slug:"错误数据采集",normalizedTitle:"错误数据采集",charIndex:2754},{level:2,title:"性能数据上报",slug:"性能数据上报",normalizedTitle:"性能数据上报",charIndex:3841},{level:2,title:"错误上报",slug:"错误上报",normalizedTitle:"错误上报",charIndex:4374},{level:2,title:"demo示例",slug:"demo示例",normalizedTitle:"demo示例",charIndex:5462},{level:2,title:"链接",slug:"链接",normalizedTitle:"链接",charIndex:14331}],headersStr:"try-catch window.onerror Script error 监听error事件 Promise异常捕获 错误类型总结 错误数据采集 性能数据上报 错误上报 demo示例 链接",content:"# try-catch\n\n只能捕获到同步的运行时错误，对语法和异步错误捕获不到\n\ntry {\n  setTimeout(() => {\n    undefined.map(v => v);\n  }, 1000)\n} catch(e) {\n  console.log('捕获到异常：',e); // 没有执行\n}\n\n// result:\n// Uncaught TypeError: Cannot read property 'map' of undefined\n//     at setTimeout (<anonymous>:3:11)\n\n// ------------------------------------------\n\ntry {\n  let name = 'jartto;  // 语法错误\n  console.log(nam);\n} catch(e) {\n  console.log('捕获到异常：',e); // 没有执行\n}\n\n// result:\n// Uncaught SyntaxError: Invalid or unexpected token\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# window.onerror\n\n * onerror 最好写在所有 JS 脚本的前面，否则有可能捕获不到错误；\n * onerror 无法捕获语法错误, 静态资源异常，接口异常\n * 函数只有在返回 true 的时候，异常才不会向上抛出，否则即使是知道异常的发生控制台还是会显示 Uncaught Error: xxxxx\n * iframe 异常\n\n<iframe src=\"./iframe.html\" frameborder=\"0\"></iframe>\n<script>\n  window.frames[0].onerror = function (message, source, lineno, colno, error) {\n    console.log('捕获到 iframe 异常：',{message, source, lineno, colno, error});\n    return true;\n  };\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# Script error\n\n * 解决 \"Script Error\" 的另类思路\n\n// script 标签添加 crossOrigin 属性\nconst script = document.createElement('script');\nscript.crossOrigin = 'anonymous';\nscript.src = url;\ndocument.body.appendChild(script);\n\n// 改写 EventTarget 的 addEventListener 方法\nconst originAddEventListener = EventTarget.prototype.addEventListener;\nEventTarget.prototype.addEventListener = function (type, listener, options) {\n  // 捕获添加事件时的堆栈\n  const addStack = new Error(`Event (${type})`).stack;\n  const wrappedListener = function (...args) {\n    try {\n      return listener.apply(this, args);\n    }\n    catch (err) {\n      // 异常发生时，扩展堆栈\n      err.stack += '\\n' + addStack;\n      throw err;\n    }\n  }\n  return originAddEventListener.call(this, type, wrappedListener, options);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 监听error事件\n\nwindow.addEventListener('error',() => {}）\n\n\n1\n\n * 捕获网络请求的异常，无法判断 HTTP 的状态码；\n\n\n# Promise异常捕获\n\n * 在 promise 中使用 catch 可以非常方便的捕获到异步 error\n * 没有写 catch 的 Promise 中抛出的错误无法被 onerror 或 try-catch 捕获到\n * async/await异常捕获, 不去捕获的话就会和Promise一样\n * 解决方案 全局监听unhandledrejectionError\n\nwindow.addEventListener(\"unhandledrejection\", e => {\n  throw e.reason\n});\n\n\n1\n2\n3\n\n\n\n# 错误类型总结\n\n> https://juejin.cn/post/6967152411542552607#heading-3\n\n异常类型                 同步方法   异步方法   资源加载   PROMISE   ASYNC/AWAIT\ntry/catch            ✔️                             ✔️\nonerror              ✔️     ✔️                      \nerror事件监听            ✔️     ✔️     ✔️               \nunhandledrejection                        ✔️        ✔️\n\n * 代码\n\nwindow.addEventListener(\"unhandledrejection\", e => {\n  throw e.reason\n});\nwindow.addEventListener('error', args => {\n  console.log(\n    'error event:', args\n  );\n  return true;\n}, true);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 错误数据采集\n\n * https://juejin.cn/post/6899430989404045320\n\n// 捕获资源加载失败错误 js css img...\naddEventListener('error', e => {\n    const target = e.target\n    if (target != window) {\n        monitor.errors.push({\n            type: target.localName,\n            url: target.src || target.href,\n            msg: (target.src || target.href) + ' is load error',\n            // 错误发生的时间\n            time: new Date().getTime(),\n        })\n    }\n}, true)\n\n// 监听 js 错误\nwindow.onerror = function(msg, url, row, col, error) {\n    monitor.errors.push({\n        type: 'javascript',\n        row: row,\n        col: col,\n        msg: error && error.stack? error.stack : msg,\n        url: url,\n        // 错误发生的时间\n        time: new Date().getTime(),\n    })\n}\n\n// 监听 promise 错误 缺点是获取不到行数数据\naddEventListener('unhandledrejection', e => {\n    monitor.errors.push({\n        type: 'promise',\n        msg: (e.reason && e.reason.msg) || e.reason || '',\n        // 错误发生的时间\n        time: new Date().getTime(),\n    })\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# 性能数据上报\n\nwindow.onload = () => {\n    // 在浏览器空闲时间获取性能及资源信息\n    // https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback\n    if (window.requestIdleCallback) {\n        window.requestIdleCallback(() => {\n            monitor.performance = getPerformance()\n            monitor.resources = getResources()\n        })\n    } else {\n        setTimeout(() => {\n            monitor.performance = getPerformance()\n            monitor.resources = getResources()\n        }, 0)\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 错误上报\n\n * 通过ajax发送数据\n * 动态创建img标签的形式\n\nfunction sendImage(url: string, params: object) {\n  const img = new Image()\n\n  img.style.display = 'none'\n\n  const removeImage = function() {\n    img.parentNode.removeChild(img)\n  }\n\n  img.onload = removeImage\n  img.onerror = removeImage\n\n  img.src = `${url}?params=${serilizeParams(params)}`\n\n  document.body.appendChild(img)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * navigator.sendBeacon 来进行上报\n\ntype ContentType = 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain';\n\nconst serilizeParams = (params: object) => {\n    return window.btoa(JSON.stringify(params))\n}\n\nfunction sendBeacon(url: string, params: object) {\n  const formData = new FormData()\n  formData.append('params', serilizeParams(params))\n  navigator.sendBeacon(url, formData)\n}\n\n\nwindow.addEventListener('unload', sendLog, false);\n\nfunction sendLog(url: string, params: object) {\n    if（navigator.sendBeacon) {\n        sendBeacon(url, params)\n    } else {\n        sendImage(url, params)\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# demo示例\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <script>\n        function monitorInit() {\n            const monitor = {\n                // 数据上传地址\n                url: '',\n                // 性能信息\n                performance: {},\n                // 资源信息\n                resources: {},\n                // 错误信息\n                errors: [],\n                // 用户信息\n                user: {\n                    // 屏幕宽度\n                    screen: screen.width,\n                    // 屏幕高度\n                    height: screen.height,\n                    // 浏览器平台\n                    platform: navigator.platform,\n                    // 浏览器的用户代理信息\n                    userAgent: navigator.userAgent,\n                    // 浏览器用户界面的语言\n                    language: navigator.language,\n                },\n                // 手动添加错误\n                addError(error) {\n                    const obj = {}\n                    const { type, msg, url, row, col } = error\n                    if (type) obj.type = type\n                    if (msg) obj.msg = msg\n                    if (url) obj.url = url\n                    if (row) obj.row = row\n                    if (col) obj.col = col\n                    obj.time = new Date().getTime()\n                    monitor.errors.push(obj)\n                },\n                // 重置 monitor 对象\n                reset() {\n                    window.performance && window.performance.clearResourceTimings()\n                    monitor.performance = getPerformance()\n                    monitor.resources = getResources()\n                    monitor.errors = []\n                },\n                // 清空 error 信息\n                clearError() {\n                    monitor.errors = []\n                },\n                // 上传监控数据\n                upload() {\n                    // 自定义上传\n                    // axios.post({\n                    //     url: monitor.url,\n                    //     data: {\n                    //         performance,\n                    //         resources,\n                    //         errors,\n                    //         user,\n                    //     }\n                    // })\n                },\n                // 设置数据上传地址\n                setURL(url) {\n                    monitor.url = url\n                },\n            }\n\n            // 获取性能信息\n            const getPerformance = () => {\n                if (!window.performance) return\n                const timing = window.performance.timing\n                const performance = {\n                    // 重定向耗时\n                    redirect: timing.redirectEnd - timing.redirectStart,\n                    // 白屏时间\n                    whiteScreen: whiteScreen,\n                    // DOM 渲染耗时\n                    dom: timing.domComplete - timing.domLoading,\n                    // 页面加载耗时\n                    load: timing.loadEventEnd - timing.navigationStart,\n                    // 页面卸载耗时\n                    unload: timing.unloadEventEnd - timing.unloadEventStart,\n                    // 请求耗时\n                    request: timing.responseEnd - timing.requestStart,\n                    // 获取性能信息时当前时间\n                    time: new Date().getTime(),\n                }\n\n                return performance\n            }\n\n            // 获取资源信息\n            const getResources = () => {\n                if (!window.performance) return\n                const data = window.performance.getEntriesByType('resource')\n                const resource = {\n                    xmlhttprequest: [],\n                    css: [],\n                    other: [],\n                    script: [],\n                    img: [],\n                    link: [],\n                    fetch: [],\n                    // 获取资源信息时当前时间\n                    time: new Date().getTime(),\n                }\n\n                data.forEach(item => {\n                    const arry = resource[item.initiatorType]\n                    arry && arry.push({\n                        // 资源的名称\n                        name: item.name,\n                        // 资源加载耗时\n                        duration: item.duration.toFixed(2),\n                        // 资源大小\n                        size: item.transferSize,\n                        // 资源所用协议\n                        protocol: item.nextHopProtocol,\n                    })\n                })\n\n                return resource\n            }\n\n            window.onload = () => {\n                // 在浏览器空闲时间获取性能及资源信息 https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback\n                if (window.requestIdleCallback) {\n                    window.requestIdleCallback(() => {\n                        monitor.performance = getPerformance()\n                        monitor.resources = getResources()\n                        console.log('页面性能信息')\n                        console.log(monitor.performance)\n                        console.log('页面资源信息')\n                        console.log(monitor.resources)\n                    })\n                } else {\n                    setTimeout(() => {\n                        monitor.performance = getPerformance()\n                        monitor.resources = getResources()\n                        console.log('页面性能信息')\n                        console.log(monitor.performance)\n                        console.log('页面资源信息')\n                        console.log(monitor.resources)\n                    }, 0)\n                }\n            }\n\n            // 捕获资源加载失败错误 js css img...\n            addEventListener('error', e => {\n                const target = e.target\n                if (target != window) {\n                    monitor.errors.push({\n                        type: target.localName,\n                        url: target.src || target.href,\n                        msg: (target.src || target.href) + ' is load error',\n                        // 错误发生的时间\n                        time: new Date().getTime(),\n                    })\n\n                    console.log('所有的错误信息')\n                    console.log(monitor.errors)\n                }\n            }, true)\n\n            // 监听 js 错误\n            window.onerror = function(msg, url, row, col, error) {\n                monitor.errors.push({\n                    type: 'javascript', // 错误类型\n                    row: row, // 发生错误时的代码行数\n                    col: col, // 发生错误时的代码列数\n                    msg: error && error.stack? error.stack : msg, // 错误信息\n                    url: url, // 错误文件\n                    time: new Date().getTime(), // 错误发生的时间\n                })\n\n                console.log('所有的错误信息')\n                console.log(monitor.errors)\n            }\n\n            // 监听 promise 错误 缺点是获取不到行数数据\n            addEventListener('unhandledrejection', e => {\n                monitor.errors.push({\n                    type: 'promise',\n                    msg: (e.reason && e.reason.msg) || e.reason || '',\n                    // 错误发生的时间\n                    time: new Date().getTime(),\n                })\n\n                console.log('所有的错误信息')\n                console.log(monitor.errors)\n            })\n\n            return monitor\n        }\n\n        const monitor = monitorInit()\n    <\/script>\n    <link rel=\"stylesheet\" href=\"test.css\">\n    <title>Document</title>\n</head>\n<body>\n    <button class=\"btn1\">错误测试按钮1</button>\n    <button class=\"btn2\">错误测试按钮2</button>\n    <button class=\"btn3\">错误测试按钮3</button>\n    <img src=\"https://avatars3.githubusercontent.com/u/22117876?s=460&v=4\" alt=\"\">\n    <img src=\"test.png\" alt=\"\">\n<script src=\"192.168.10.15/test.js\"><\/script>\n<script>\ndocument.querySelector('.btn1').onclick = () => {\n    setTimeout(() => {\n        console.log(button)\n    }, 0)\n}\n\ndocument.querySelector('.btn2').onclick = () => {\n    new Promise((resolve, reject) => {\n        reject({\n            msg: 'test.js promise is error'\n        })\n    })\n}\n\ndocument.querySelector('.btn3').onclick = () => {\n    throw ('这是一个手动扔出的错误')\n}\n<\/script>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n\n\n\n# 链接\n\n * 如何优雅处理前端异常？\n * 深入了解前端监控原理\n * 前端埋点与监控方案\n * 前端监控平台系列：微信小程序监控和Web监控（已开源）\n * 前端开发中的Error以及异常捕获",normalizedContent:"# try-catch\n\n只能捕获到同步的运行时错误，对语法和异步错误捕获不到\n\ntry {\n  settimeout(() => {\n    undefined.map(v => v);\n  }, 1000)\n} catch(e) {\n  console.log('捕获到异常：',e); // 没有执行\n}\n\n// result:\n// uncaught typeerror: cannot read property 'map' of undefined\n//     at settimeout (<anonymous>:3:11)\n\n// ------------------------------------------\n\ntry {\n  let name = 'jartto;  // 语法错误\n  console.log(nam);\n} catch(e) {\n  console.log('捕获到异常：',e); // 没有执行\n}\n\n// result:\n// uncaught syntaxerror: invalid or unexpected token\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# window.onerror\n\n * onerror 最好写在所有 js 脚本的前面，否则有可能捕获不到错误；\n * onerror 无法捕获语法错误, 静态资源异常，接口异常\n * 函数只有在返回 true 的时候，异常才不会向上抛出，否则即使是知道异常的发生控制台还是会显示 uncaught error: xxxxx\n * iframe 异常\n\n<iframe src=\"./iframe.html\" frameborder=\"0\"></iframe>\n<script>\n  window.frames[0].onerror = function (message, source, lineno, colno, error) {\n    console.log('捕获到 iframe 异常：',{message, source, lineno, colno, error});\n    return true;\n  };\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# script error\n\n * 解决 \"script error\" 的另类思路\n\n// script 标签添加 crossorigin 属性\nconst script = document.createelement('script');\nscript.crossorigin = 'anonymous';\nscript.src = url;\ndocument.body.appendchild(script);\n\n// 改写 eventtarget 的 addeventlistener 方法\nconst originaddeventlistener = eventtarget.prototype.addeventlistener;\neventtarget.prototype.addeventlistener = function (type, listener, options) {\n  // 捕获添加事件时的堆栈\n  const addstack = new error(`event (${type})`).stack;\n  const wrappedlistener = function (...args) {\n    try {\n      return listener.apply(this, args);\n    }\n    catch (err) {\n      // 异常发生时，扩展堆栈\n      err.stack += '\\n' + addstack;\n      throw err;\n    }\n  }\n  return originaddeventlistener.call(this, type, wrappedlistener, options);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 监听error事件\n\nwindow.addeventlistener('error',() => {}）\n\n\n1\n\n * 捕获网络请求的异常，无法判断 http 的状态码；\n\n\n# promise异常捕获\n\n * 在 promise 中使用 catch 可以非常方便的捕获到异步 error\n * 没有写 catch 的 promise 中抛出的错误无法被 onerror 或 try-catch 捕获到\n * async/await异常捕获, 不去捕获的话就会和promise一样\n * 解决方案 全局监听unhandledrejectionerror\n\nwindow.addeventlistener(\"unhandledrejection\", e => {\n  throw e.reason\n});\n\n\n1\n2\n3\n\n\n\n# 错误类型总结\n\n> https://juejin.cn/post/6967152411542552607#heading-3\n\n异常类型                 同步方法   异步方法   资源加载   promise   async/await\ntry/catch            ✔️                             ✔️\nonerror              ✔️     ✔️                      \nerror事件监听            ✔️     ✔️     ✔️               \nunhandledrejection                        ✔️        ✔️\n\n * 代码\n\nwindow.addeventlistener(\"unhandledrejection\", e => {\n  throw e.reason\n});\nwindow.addeventlistener('error', args => {\n  console.log(\n    'error event:', args\n  );\n  return true;\n}, true);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 错误数据采集\n\n * https://juejin.cn/post/6899430989404045320\n\n// 捕获资源加载失败错误 js css img...\naddeventlistener('error', e => {\n    const target = e.target\n    if (target != window) {\n        monitor.errors.push({\n            type: target.localname,\n            url: target.src || target.href,\n            msg: (target.src || target.href) + ' is load error',\n            // 错误发生的时间\n            time: new date().gettime(),\n        })\n    }\n}, true)\n\n// 监听 js 错误\nwindow.onerror = function(msg, url, row, col, error) {\n    monitor.errors.push({\n        type: 'javascript',\n        row: row,\n        col: col,\n        msg: error && error.stack? error.stack : msg,\n        url: url,\n        // 错误发生的时间\n        time: new date().gettime(),\n    })\n}\n\n// 监听 promise 错误 缺点是获取不到行数数据\naddeventlistener('unhandledrejection', e => {\n    monitor.errors.push({\n        type: 'promise',\n        msg: (e.reason && e.reason.msg) || e.reason || '',\n        // 错误发生的时间\n        time: new date().gettime(),\n    })\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# 性能数据上报\n\nwindow.onload = () => {\n    // 在浏览器空闲时间获取性能及资源信息\n    // https://developer.mozilla.org/zh-cn/docs/web/api/window/requestidlecallback\n    if (window.requestidlecallback) {\n        window.requestidlecallback(() => {\n            monitor.performance = getperformance()\n            monitor.resources = getresources()\n        })\n    } else {\n        settimeout(() => {\n            monitor.performance = getperformance()\n            monitor.resources = getresources()\n        }, 0)\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 错误上报\n\n * 通过ajax发送数据\n * 动态创建img标签的形式\n\nfunction sendimage(url: string, params: object) {\n  const img = new image()\n\n  img.style.display = 'none'\n\n  const removeimage = function() {\n    img.parentnode.removechild(img)\n  }\n\n  img.onload = removeimage\n  img.onerror = removeimage\n\n  img.src = `${url}?params=${serilizeparams(params)}`\n\n  document.body.appendchild(img)\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * navigator.sendbeacon 来进行上报\n\ntype contenttype = 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain';\n\nconst serilizeparams = (params: object) => {\n    return window.btoa(json.stringify(params))\n}\n\nfunction sendbeacon(url: string, params: object) {\n  const formdata = new formdata()\n  formdata.append('params', serilizeparams(params))\n  navigator.sendbeacon(url, formdata)\n}\n\n\nwindow.addeventlistener('unload', sendlog, false);\n\nfunction sendlog(url: string, params: object) {\n    if（navigator.sendbeacon) {\n        sendbeacon(url, params)\n    } else {\n        sendimage(url, params)\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# demo示例\n\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n    <script>\n        function monitorinit() {\n            const monitor = {\n                // 数据上传地址\n                url: '',\n                // 性能信息\n                performance: {},\n                // 资源信息\n                resources: {},\n                // 错误信息\n                errors: [],\n                // 用户信息\n                user: {\n                    // 屏幕宽度\n                    screen: screen.width,\n                    // 屏幕高度\n                    height: screen.height,\n                    // 浏览器平台\n                    platform: navigator.platform,\n                    // 浏览器的用户代理信息\n                    useragent: navigator.useragent,\n                    // 浏览器用户界面的语言\n                    language: navigator.language,\n                },\n                // 手动添加错误\n                adderror(error) {\n                    const obj = {}\n                    const { type, msg, url, row, col } = error\n                    if (type) obj.type = type\n                    if (msg) obj.msg = msg\n                    if (url) obj.url = url\n                    if (row) obj.row = row\n                    if (col) obj.col = col\n                    obj.time = new date().gettime()\n                    monitor.errors.push(obj)\n                },\n                // 重置 monitor 对象\n                reset() {\n                    window.performance && window.performance.clearresourcetimings()\n                    monitor.performance = getperformance()\n                    monitor.resources = getresources()\n                    monitor.errors = []\n                },\n                // 清空 error 信息\n                clearerror() {\n                    monitor.errors = []\n                },\n                // 上传监控数据\n                upload() {\n                    // 自定义上传\n                    // axios.post({\n                    //     url: monitor.url,\n                    //     data: {\n                    //         performance,\n                    //         resources,\n                    //         errors,\n                    //         user,\n                    //     }\n                    // })\n                },\n                // 设置数据上传地址\n                seturl(url) {\n                    monitor.url = url\n                },\n            }\n\n            // 获取性能信息\n            const getperformance = () => {\n                if (!window.performance) return\n                const timing = window.performance.timing\n                const performance = {\n                    // 重定向耗时\n                    redirect: timing.redirectend - timing.redirectstart,\n                    // 白屏时间\n                    whitescreen: whitescreen,\n                    // dom 渲染耗时\n                    dom: timing.domcomplete - timing.domloading,\n                    // 页面加载耗时\n                    load: timing.loadeventend - timing.navigationstart,\n                    // 页面卸载耗时\n                    unload: timing.unloadeventend - timing.unloadeventstart,\n                    // 请求耗时\n                    request: timing.responseend - timing.requeststart,\n                    // 获取性能信息时当前时间\n                    time: new date().gettime(),\n                }\n\n                return performance\n            }\n\n            // 获取资源信息\n            const getresources = () => {\n                if (!window.performance) return\n                const data = window.performance.getentriesbytype('resource')\n                const resource = {\n                    xmlhttprequest: [],\n                    css: [],\n                    other: [],\n                    script: [],\n                    img: [],\n                    link: [],\n                    fetch: [],\n                    // 获取资源信息时当前时间\n                    time: new date().gettime(),\n                }\n\n                data.foreach(item => {\n                    const arry = resource[item.initiatortype]\n                    arry && arry.push({\n                        // 资源的名称\n                        name: item.name,\n                        // 资源加载耗时\n                        duration: item.duration.tofixed(2),\n                        // 资源大小\n                        size: item.transfersize,\n                        // 资源所用协议\n                        protocol: item.nexthopprotocol,\n                    })\n                })\n\n                return resource\n            }\n\n            window.onload = () => {\n                // 在浏览器空闲时间获取性能及资源信息 https://developer.mozilla.org/zh-cn/docs/web/api/window/requestidlecallback\n                if (window.requestidlecallback) {\n                    window.requestidlecallback(() => {\n                        monitor.performance = getperformance()\n                        monitor.resources = getresources()\n                        console.log('页面性能信息')\n                        console.log(monitor.performance)\n                        console.log('页面资源信息')\n                        console.log(monitor.resources)\n                    })\n                } else {\n                    settimeout(() => {\n                        monitor.performance = getperformance()\n                        monitor.resources = getresources()\n                        console.log('页面性能信息')\n                        console.log(monitor.performance)\n                        console.log('页面资源信息')\n                        console.log(monitor.resources)\n                    }, 0)\n                }\n            }\n\n            // 捕获资源加载失败错误 js css img...\n            addeventlistener('error', e => {\n                const target = e.target\n                if (target != window) {\n                    monitor.errors.push({\n                        type: target.localname,\n                        url: target.src || target.href,\n                        msg: (target.src || target.href) + ' is load error',\n                        // 错误发生的时间\n                        time: new date().gettime(),\n                    })\n\n                    console.log('所有的错误信息')\n                    console.log(monitor.errors)\n                }\n            }, true)\n\n            // 监听 js 错误\n            window.onerror = function(msg, url, row, col, error) {\n                monitor.errors.push({\n                    type: 'javascript', // 错误类型\n                    row: row, // 发生错误时的代码行数\n                    col: col, // 发生错误时的代码列数\n                    msg: error && error.stack? error.stack : msg, // 错误信息\n                    url: url, // 错误文件\n                    time: new date().gettime(), // 错误发生的时间\n                })\n\n                console.log('所有的错误信息')\n                console.log(monitor.errors)\n            }\n\n            // 监听 promise 错误 缺点是获取不到行数数据\n            addeventlistener('unhandledrejection', e => {\n                monitor.errors.push({\n                    type: 'promise',\n                    msg: (e.reason && e.reason.msg) || e.reason || '',\n                    // 错误发生的时间\n                    time: new date().gettime(),\n                })\n\n                console.log('所有的错误信息')\n                console.log(monitor.errors)\n            })\n\n            return monitor\n        }\n\n        const monitor = monitorinit()\n    <\/script>\n    <link rel=\"stylesheet\" href=\"test.css\">\n    <title>document</title>\n</head>\n<body>\n    <button class=\"btn1\">错误测试按钮1</button>\n    <button class=\"btn2\">错误测试按钮2</button>\n    <button class=\"btn3\">错误测试按钮3</button>\n    <img src=\"https://avatars3.githubusercontent.com/u/22117876?s=460&v=4\" alt=\"\">\n    <img src=\"test.png\" alt=\"\">\n<script src=\"192.168.10.15/test.js\"><\/script>\n<script>\ndocument.queryselector('.btn1').onclick = () => {\n    settimeout(() => {\n        console.log(button)\n    }, 0)\n}\n\ndocument.queryselector('.btn2').onclick = () => {\n    new promise((resolve, reject) => {\n        reject({\n            msg: 'test.js promise is error'\n        })\n    })\n}\n\ndocument.queryselector('.btn3').onclick = () => {\n    throw ('这是一个手动扔出的错误')\n}\n<\/script>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n\n\n\n# 链接\n\n * 如何优雅处理前端异常？\n * 深入了解前端监控原理\n * 前端埋点与监控方案\n * 前端监控平台系列：微信小程序监控和web监控（已开源）\n * 前端开发中的error以及异常捕获",charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1643899953e3},{title:"Learn jest.js note",frontmatter:{title:"Learn jest.js note",date:"2022-01-16T00:00:00.000Z",sidebar:"auto",tags:["jest"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/learn-jest.html",relativePath:"frontend/issues/learn-jest.md",key:"v-2e91b746",path:"/frontend/issues/learn-jest.html",headers:[{level:2,title:"Web常见测试",slug:"web常见测试",normalizedTitle:"web常见测试",charIndex:2},{level:2,title:"单元测试分类",slug:"单元测试分类",normalizedTitle:"单元测试分类",charIndex:166},{level:2,title:"Jest介绍",slug:"jest介绍",normalizedTitle:"jest介绍",charIndex:232},{level:2,title:"快速开始",slug:"快速开始",normalizedTitle:"快速开始",charIndex:359},{level:2,title:"常用配置参数",slug:"常用配置参数",normalizedTitle:"常用配置参数",charIndex:801},{level:2,title:"常用接口",slug:"常用接口",normalizedTitle:"常用接口",charIndex:1475},{level:2,title:"匹配器的使用",slug:"匹配器的使用",normalizedTitle:"匹配器的使用",charIndex:3547},{level:2,title:"异步代码",slug:"异步代码",normalizedTitle:"异步代码",charIndex:5662},{level:2,title:"Jest Mock",slug:"jest-mock",normalizedTitle:"jest mock",charIndex:7900},{level:3,title:"jest.fn",slug:"jest-fn",normalizedTitle:"jest.fn",charIndex:7914},{level:3,title:"jest.mock",slug:"jest-mock-2",normalizedTitle:"jest.mock",charIndex:9564},{level:3,title:"jest.spyOn",slug:"jest-spyon",normalizedTitle:"jest.spyon",charIndex:10241},{level:2,title:"测试库",slug:"测试库",normalizedTitle:"测试库",charIndex:10886},{level:2,title:"在 Vue 中使用",slug:"在-vue-中使用",normalizedTitle:"在 vue 中使用",charIndex:10932},{level:2,title:"How can I mock window?",slug:"how-can-i-mock-window",normalizedTitle:"how can i mock window?",charIndex:14793},{level:3,title:"方式一",slug:"方式一",normalizedTitle:"方式一",charIndex:14820},{level:3,title:"方式二",slug:"方式二",normalizedTitle:"方式二",charIndex:14889},{level:2,title:"jest Exceeded timeout of 5000 ms for a test #11607",slug:"jest-exceeded-timeout-of-5000-ms-for-a-test-11607",normalizedTitle:"jest exceeded timeout of 5000 ms for a test #11607",charIndex:15117},{level:2,title:"tsd",slug:"tsd",normalizedTitle:"tsd",charIndex:15222},{level:2,title:"package",slug:"package",normalizedTitle:"package",charIndex:681},{level:2,title:"相关链接",slug:"相关链接",normalizedTitle:"相关链接",charIndex:15319}],headersStr:"Web常见测试 单元测试分类 Jest介绍 快速开始 常用配置参数 常用接口 匹配器的使用 异步代码 Jest Mock jest.fn jest.mock jest.spyOn 测试库 在 Vue 中使用 How can I mock window? 方式一 方式二 jest Exceeded timeout of 5000 ms for a test #11607 tsd package 相关链接",content:"# Web常见测试\n\n> 来源于VUE： https://cn.vuejs.org/v2/guide/testing.html\n\n * 单元测试（unit）： Mocha、Jest ...\n * 端到端 (E2E，end-to-end) 测试：cypress.io 、Nightwatch.js、Puppeteer ...\n\n\n# 单元测试分类\n\n * TDD - 测试驱动开发：先写测试用例再写代码\n * BDD - 行为驱动开发：先写代码再写测试用例\n\n\n# Jest介绍\n\n * https://jestjs.io/\n * Jest 是一款优雅、简洁的 JavaScript 测试框架。\n * Jest 支持 Babel、TypeScript、Node、React、Angular、Vue 等诸多框架！\n\n\n# 快速开始\n\n * 安装 jest\n\nnpm install jest -D\nor\nyarn add jest -D\n\n\n1\n2\n3\n\n * 初始化配置文件\n\nnpx jest init  // -> jest.config.js\n\n\n1\n\n * demo\n\n// sum.js\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n\n// sum.test.js\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n\n// package.json\n{\n  \"scripts\": {\n    \"test\": \"jest\" // <- add\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 常用配置参数\n\n * collectCoverage: 覆盖\n * testMatch: 匹配test文件\n * transform: 匹配到文件后使用的转换loader\n * testEnvironment: 测试环境，默认是node环境\n * testEnvironmentOptions: 设置变量传递给testEnvironment中\n * moduleNameMapper: 类似webpack中的别名\n * setupFiles & setupFilesAfterEnv: 用于设置 testing environment\n * demo\n\nconst path = require('path');\n\nmodule.exports = {\n  testMatch: [\n    '<rootDir>/src/test/unit/specs/*.spec.js',\n  ],\n  transform: {\n    '^.+\\\\.js?$': 'babel-jest',\n\t'^.+\\\\.ts?$': 'ts-jest',\n    '.*\\\\.(vue)$': 'vue-jest',\n  },\n  moduleNameMapper: {\n    '^@/(.*)$': '<rootDir>/src/$1',\n  },\n  transformIgnorePatterns: ['/node_modules/'],\n  // ...\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 常用接口\n\n * 常用的三个：describe、test( 别名it)、expect\n\nconst sum = require('../src/sum');\n\ndescribe('tests: sum commonjs', () => {\n  test('adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n  });\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 钩子函数：多次测试重复设置 beforeEach & afterEach\n * 钩子函数：一次性设置 beforeAll & afterAll\n * 钩子函数执行顺序\n\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\ntest('', () => console.log('1 - test'));\ndescribe('Scoped / Nested block', () => {\n  beforeAll(() => console.log('2 - beforeAll'));\n  afterAll(() => console.log('2 - afterAll'));\n  beforeEach(() => console.log('2 - beforeEach'));\n  afterEach(() => console.log('2 - afterEach'));\n  test('', () => console.log('2 - test'));\n});\n\n// 1 - beforeAll\n// 1 - beforeEach\n// 1 - test\n// 1 - afterEach\n// 2 - beforeAll\n// 1 - beforeEach\n// 2 - beforeEach\n// 2 - test\n// 2 - afterEach\n// 1 - afterEach\n// 2 - afterAll\n// 1 - afterAll\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * describe 和 test 块的执行顺序\n\ndescribe('outer', () => {\n  console.log('describe outer-a');\n\n  describe('describe inner 1', () => {\n    console.log('describe inner 1');\n    test('test 1', () => {\n      console.log('test for describe inner 1');\n      expect(true).toEqual(true);\n    });\n  });\n\n  console.log('describe outer-b');\n\n  test('test 1', () => {\n    console.log('test for describe outer');\n    expect(true).toEqual(true);\n  });\n\n  describe('describe inner 2', () => {\n    console.log('describe inner 2');\n    test('test for describe inner 2', () => {\n      console.log('test for describe inner 2');\n      expect(false).toEqual(false);\n    });\n  });\n\n  console.log('describe outer-c');\n});\n\n// describe outer-a\n// describe inner 1\n// describe outer-b\n// describe inner 2\n// describe outer-c\n// test for describe inner 1\n// test for describe outer\n// test for describe inner 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n\n# 匹配器的使用\n\n * toBe\n\ntest('2 加 2 等于 4', () => {\n  expect(2 + 2).toBe(4);\n});\n\n\n1\n2\n3\n\n * toEqual: 递归检查对象或数组的每个字段\n\ntest('对象赋值', () => {\n  const data = {one: 1};\n  data['two'] = 2;\n  expect(data).toEqual({one: 1, two: 2});\n});\n\n\n1\n2\n3\n4\n5\n\n * not\n\ntest('adding positive numbers is not zero', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.toBe(0);\n    }\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * toBeNull 只匹配 null\n * toBeUndefined 只匹配 undefined\n * toBeDefined 与 toBeUndefined 相反\n * toBeTruthy 匹配任何 if 语句为真\n * toBeFalsy 匹配任何if 语句为假\n * 数字大多数的比较数字有等价的匹配器\n\ntest('two plus two', () => {\n  const value = 2 + 2;\n  expect(value).toBeGreaterThan(3);\n  expect(value).toBeGreaterThanOrEqual(3.5);\n  expect(value).toBeLessThan(5);\n  expect(value).toBeLessThanOrEqual(4.5);\n\n  // toBe and toEqual are equivalent for numbers\n  expect(value).toBe(4);\n  expect(value).toEqual(4);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * toBeCloseTo：对于比较浮点数相等\n\ntest('两个浮点数字相加', () => {\n  const value = 0.1 + 0.2;\n  //expect(value).toBe(0.3);      // 这句会报错，因为浮点数有舍入误差\n  expect(value).toBeCloseTo(0.3); // 这句可以运行\n});\n\n\n1\n2\n3\n4\n5\n\n * toMatch：字符串\n\ntest('there is no I in team', () => {\n  expect('team').not.toMatch(/I/);\n});\n\ntest('but there is a \"stop\" in Christoph', () => {\n  expect('Christoph').toMatch(/stop/);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * toContain：Arrays and iterables\n\nconst shoppingList = [\n  'diapers',\n  'kleenex',\n  'trash bags',\n  'paper towels',\n  'milk',\n];\n\ntest('the shopping list has milk on it', () => {\n  expect(shoppingList).toContain('milk');\n  expect(new Set(shoppingList)).toContain('milk');\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * toThrow：抛出错误\n\nfunction compileAndroidCode() {\n  throw new Error('you are using the wrong JDK');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(() => compileAndroidCode()).toThrow();\n  expect(() => compileAndroidCode()).toThrow(Error);\n\n  // You can also use the exact error message or a regexp\n  expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');\n  expect(() => compileAndroidCode()).toThrow(/JDK/);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 异步代码\n\n * 回调\n\nconst fetchData = callback => setTimeout(() => callback&&callback('peanut butter'), 1000)\n\ntest('the data is peanut butter', done => {\n  expect.assertions(1);\n  function callback(data) {\n    try {\n      expect(data).toBe('peanut butter');\n      done();\n    } catch (error) {\n      done(error);\n    }\n  }\n  // 异步方法\n  fetchData(callback);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * Promises：需要有返回值\n\n// 捕获：then\nconst fetchData = () => Promise.resolve('peanut butter')\ntest('the data is peanut butter', () => {\n  expect.assertions(1);\n  return fetchData().then(data => {\n    expect(data).toBe('peanut butter');\n  });\n});\n\n// 捕获：cath\nconst fetchData = () => Promise.reject('catch error')\ntest('the fetch fails with an error', () => {\n  expect.assertions(1); // 验证一定数量的断言被调用\n  return fetchData().catch(e => expect(e).toMatch('error'));\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 【推荐】.resolves / .rejects\n\n// resolves\nconst fetchData = () => Promise.resolve('peanut butter')\ntest('the data is peanut butter', () => {\n  return expect(fetchData()).resolves.toBe('peanut butter');\n});\n\n// rejects\nconst fetchData = () => Promise.reject('catch error')\ntest('the fetch fails with an error', () => {\n  return expect(fetchData()).rejects.toMatch('error');\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * Async/Await\n\n// resolve\nconst fetchData = () => Promise.resolve('peanut butter')\ntest('the data is peanut butter', async () => {\n  expect.assertions(1);\n  const data = await fetchData();\n  expect(data).toBe('peanut butter');\n});\n\n// reject error\nconst fetchData = () => Promise.reject('catch error')\ntest('the fetch fails with an error', async () => {\n  expect.assertions(1);\n  try {\n    await fetchData();\n  } catch (e) {\n    expect(e).toMatch('error');\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 【推荐】async await和 .resolves or .rejects一起使用\n\n// resolve\nconst fetchData = () => Promise.resolve('peanut butter')\ntest('the data is peanut butter', async () => {\n  await expect(fetchData()).resolves.toBe('peanut butter');\n});\n\n// error\nconst fetchData = () => Promise.reject('catch error')\ntest('the fetch fails with an error', async () => {\n  await expect(fetchData()).rejects.toMatch('error');\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Jest Mock\n\n\n# jest.fn\n\n * 没有定义函数内部的实现，返回undefined作为返回值\n\ntest('测试jest.fn()调用', () => {\n  let mockFn = jest.fn();\n  let result = mockFn(1, 2, 3);\n\n  // 断言mockFn的执行后返回undefined\n  expect(result).toBeUndefined();\n  // 断言mockFn被调用\n  expect(mockFn).toBeCalled();\n  // 断言mockFn被调用了一次\n  expect(mockFn).toBeCalledTimes(1);\n  // 断言mockFn传入的参数为1, 2, 3\n  expect(mockFn).toHaveBeenCalledWith(1, 2, 3);\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * mockReturnValue：定义返回值\n\ntest('测试jest.fn()返回固定值', () => {\n  let mockFn = jest.fn().mockReturnValue('default');\n  // 断言mockFn执行后返回值为default\n  expect(mockFn()).toBe('default');\n})\n\ntest('测试jest.fn()内部实现', () => {\n  let mockFn = jest.fn((num1, num2) => {\n    return num1 * num2;\n  })\n  // 断言mockFn执行后返回100\n  expect(mockFn(10, 10)).toBe(100);\n})\n\ntest('测试jest.fn()返回Promise', async () => {\n  let mockFn = jest.fn().mockResolvedValue('default');\n  let result = await mockFn();\n  // 断言mockFn通过await关键字执行后返回值为default\n  expect(result).toBe('default');\n  // 断言mockFn调用后返回的是Promise对象\n  expect(Object.prototype.toString.call(mockFn())).toBe(\"[object Promise]\");\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n * demo\n\n// fetch.js\nimport axios from 'axios';\nexport default {\n  async fetchPostsList(callback) {\n    return axios.get('https://jsonplaceholder.typicode.com/posts').then(res => {\n      return callback(res.data);\n    })\n  }\n}\n// fetch.spec.js\nimport fetch from '../src/fetch.js'\ntest('fetchPostsList中的回调函数应该能够被调用', async () => {\n  expect.assertions(1);\n  let mockFn = jest.fn();\n  await fetch.fetchPostsList(mockFn);\n\n  // 断言mockFn被调用\n  expect(mockFn).toBeCalled();\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# jest.mock\n\n * 模块内的方法是不会被jest所实际执行\n\n// events.js\nimport fetch from './fetch';\nexport default {\n  async getPostList() {\n    return fetch.fetchPostsList(data => {\n      console.log('fetchPostsList be called!');  // not console called\n      // do something\n    });\n  }\n}\n\n// events.spec.js\nimport events from '../src/events';\nimport fetch from '../src/fetch';\n// mock整个fetch.js模块\njest.mock('../src/fetch.js');\ntest('mock 整个 fetch.js模块', async () => {\n  expect.assertions(2);\n  await events.getPostList();\n  expect(fetch.fetchPostsList).toHaveBeenCalled();\n  expect(fetch.fetchPostsList).toHaveBeenCalledTimes(1);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# jest.spyOn\n\n// events.js\nimport fetch from './fetch';\nexport default {\n  async getPostList() {\n    return fetch.fetchPostsList(data => {\n      console.log('fetchPostsList be called!');  // console called\n      // do something\n    });\n  }\n}\n\n// events.spec.js\nimport events from '../src/events';\nimport fetch from '../src/fetch';\n\ntest('使用jest.spyOn()监控fetch.fetchPostsList被正常调用', async() => {\n  expect.assertions(2);\n  const spyFn = jest.spyOn(fetch, 'fetchPostsList');\n  await events.getPostList();\n  expect(spyFn).toHaveBeenCalled();\n  expect(spyFn).toHaveBeenCalledTimes(1);\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 测试库\n\n * https://testing-library.com/docs/\n\n\n# 在 Vue 中使用\n\n * 来源：https://cn.vuejs.org/v2/guide/testing.html\n\n * Vue Test Utils：vue官方的偏底层的组件测试库\n\n * Vue Testing Library (@testing-library/vue)\n\n * el-input: textarea 设置默认高度\n\n<el-input\n  type=\"textarea\"\n  :rows=\"10\"\n/>\n\n\n1\n2\n3\n4\n\n * element-ui jest\n\n// HelloWorld.vue\n<template>\n  <div class=\"hello\">\n    <el-button>{{ msg }}</el-button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n<\/script>\n\n// HelloWorld.spec.js\nimport { shallowMount, createLocalVue } from '@vue/test-utils'\nimport Button from '@/components/HelloWorld.vue'\nimport ElementUI from 'element-ui' // added\n\nconst localVue = createLocalVue() // added\nlocalVue.use(ElementUI) // added\n\ndescribe('shallowMount HelloWorld.vue', () => {\n  it('renders props.msg when passed', () => {\n    const msg = 'new message'\n    const wrapper = shallowMount(Button, {\n      propsData: { msg },\n      localVue\n    })\n    expect(wrapper.text()).toMatch(msg)\n  })\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n * jest测试：第三方组件\n\nimport { shallowMount, createLocalVue } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\nimport Vuex from 'vuex'\nimport Router from 'vue-router'\nimport ElementUI from 'element-ui'\nconst localVue  = createLocalVue()\nlocalVue.use(Vuex)\nlocalVue.use(Router)\nlocalVue.use(ElementUI)\n\ndescribe('HelloWorld.vue', () => {\n  it('use localVue', () => {\n    const wrapper = shallowMount(HelloWorld, {\n      localVue\n    })\n  })\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * tests router view: code sinppets\n\nimport { mount, createLocalVue } from \"@vue/test-utils\"\nimport App from \"@/App.vue\"\nimport VueRouter from \"vue-router\"\nimport NestedRoute from \"@/components/NestedRoute.vue\"\nimport routes from \"@/routes.js\"\n\nconst localVue = createLocalVue()\nlocalVue.use(VueRouter)\n\n// mock components render\njest.mock(\"@/components/NestedRoute.vue\", () => ({\n  name: \"NestedRoute\",\n  render: h => h(\"div\")\n}))\n\ndescribe(\"App\", () => {\n  it(\"renders a child component via routing\", async () => {\n    const router = new VueRouter({ routes })\n    const wrapper = mount(App, {\n      localVue,\n      router\n    })\n\n    router.push(\"/nested-route\")\n    await wrapper.vm.$nextTick()\n\n    expect(wrapper.findComponent(NestedRoute).exists()).toBe(true)\n  })\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n * jest.mock & jest.fn: code snippets\n\n// NestedRoute.vue\n<template>\n  <div>\n    Nested Route\n    <div class=\"username\">\n      {{ $route.params.username }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { bustCache } from \"@/bust-cache.js\"\nexport default {\n  name: \"NestedRoute\",\n\n  beforeRouteLeave(to, from, next) {\n    bustCache()\n    next()\n  }\n}\n<\/script>\n\n// NestedRoute.spec.js\nimport { shallowMount, createLocalVue } from \"@vue/test-utils\"\nimport VueRouter from \"vue-router\"\nimport NestedRoute from \"@/components/NestedRoute.vue\"\nimport mockModule from \"@/bust-cache.js\"\n\njest.mock(\"@/bust-cache.js\", () => ({ bustCache: jest.fn() }))\nconst localVue = createLocalVue()\nlocalVue.use(VueRouter)\n\ndescribe(\"NestedRoute\", () => {\n  it(\"renders a username from query string\", () => {\n    const username = \"alice\"\n    const wrapper = shallowMount(NestedRoute, {\n      mocks: {\n        $route: {\n          params: { username }\n        }\n      }\n    })\n\n    expect(wrapper.find(\".username\").text()).toBe(username)\n  })\n\n  it(\"calls bustCache and next when leaving the route\", () => {\n    const next = jest.fn()\n    NestedRoute.beforeRouteLeave(undefined, undefined, next)\n\n    expect(mockModule.bustCache).toHaveBeenCalled()\n    expect(next).toHaveBeenCalled()\n  })\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n\n\n\n# How can I mock window?\n\n\n# 方式一\n\n * 使用Object.defineProperty代理劫持属性\n * 相关包：jest-useragent-mock\n\n\n# 方式二\n\n * jest-environment-jsdom-global\n * 安装\n\nyarn add --dev jest-environment-jsdom-global jest-environment-jsdom\n\n\n1\n\n * 配置jest.config.js\n\n\"jest\": {\n  \"testEnvironment\": \"jest-environment-jsdom-global\" // 默认是node\n}\n\n\n1\n2\n3\n\n\n\n# jest Exceeded timeout of 5000 ms for a test #11607\n\n * Exceeded timeout of 5000 ms for a test #11607\n\n\n# tsd\n\ntsd: https://github.com/SamVerschueren/tsd\n\n\n# package\n\n * jest promise: flush-promises\n\n\n# 相关链接\n\n * Github@Jest issues: Docs: setupFiles vs setupFilesAfterEnv #9314\n * jsdom\n * jest-environment-jsdom\n * Jest Mocking localstorage #2098\n * Unable to change window.location using Object.defineProperty #5124\n * Jest Unable to change window.location using Object.defineProperty #5124\n * vue tests: https://github.com/tonylua/vue-testing-handbook",normalizedContent:"# web常见测试\n\n> 来源于vue： https://cn.vuejs.org/v2/guide/testing.html\n\n * 单元测试（unit）： mocha、jest ...\n * 端到端 (e2e，end-to-end) 测试：cypress.io 、nightwatch.js、puppeteer ...\n\n\n# 单元测试分类\n\n * tdd - 测试驱动开发：先写测试用例再写代码\n * bdd - 行为驱动开发：先写代码再写测试用例\n\n\n# jest介绍\n\n * https://jestjs.io/\n * jest 是一款优雅、简洁的 javascript 测试框架。\n * jest 支持 babel、typescript、node、react、angular、vue 等诸多框架！\n\n\n# 快速开始\n\n * 安装 jest\n\nnpm install jest -d\nor\nyarn add jest -d\n\n\n1\n2\n3\n\n * 初始化配置文件\n\nnpx jest init  // -> jest.config.js\n\n\n1\n\n * demo\n\n// sum.js\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n\n// sum.test.js\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).tobe(3);\n});\n\n// package.json\n{\n  \"scripts\": {\n    \"test\": \"jest\" // <- add\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 常用配置参数\n\n * collectcoverage: 覆盖\n * testmatch: 匹配test文件\n * transform: 匹配到文件后使用的转换loader\n * testenvironment: 测试环境，默认是node环境\n * testenvironmentoptions: 设置变量传递给testenvironment中\n * modulenamemapper: 类似webpack中的别名\n * setupfiles & setupfilesafterenv: 用于设置 testing environment\n * demo\n\nconst path = require('path');\n\nmodule.exports = {\n  testmatch: [\n    '<rootdir>/src/test/unit/specs/*.spec.js',\n  ],\n  transform: {\n    '^.+\\\\.js?$': 'babel-jest',\n\t'^.+\\\\.ts?$': 'ts-jest',\n    '.*\\\\.(vue)$': 'vue-jest',\n  },\n  modulenamemapper: {\n    '^@/(.*)$': '<rootdir>/src/$1',\n  },\n  transformignorepatterns: ['/node_modules/'],\n  // ...\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 常用接口\n\n * 常用的三个：describe、test( 别名it)、expect\n\nconst sum = require('../src/sum');\n\ndescribe('tests: sum commonjs', () => {\n  test('adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).tobe(3);\n  });\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 钩子函数：多次测试重复设置 beforeeach & aftereach\n * 钩子函数：一次性设置 beforeall & afterall\n * 钩子函数执行顺序\n\nbeforeall(() => console.log('1 - beforeall'));\nafterall(() => console.log('1 - afterall'));\nbeforeeach(() => console.log('1 - beforeeach'));\naftereach(() => console.log('1 - aftereach'));\ntest('', () => console.log('1 - test'));\ndescribe('scoped / nested block', () => {\n  beforeall(() => console.log('2 - beforeall'));\n  afterall(() => console.log('2 - afterall'));\n  beforeeach(() => console.log('2 - beforeeach'));\n  aftereach(() => console.log('2 - aftereach'));\n  test('', () => console.log('2 - test'));\n});\n\n// 1 - beforeall\n// 1 - beforeeach\n// 1 - test\n// 1 - aftereach\n// 2 - beforeall\n// 1 - beforeeach\n// 2 - beforeeach\n// 2 - test\n// 2 - aftereach\n// 1 - aftereach\n// 2 - afterall\n// 1 - afterall\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * describe 和 test 块的执行顺序\n\ndescribe('outer', () => {\n  console.log('describe outer-a');\n\n  describe('describe inner 1', () => {\n    console.log('describe inner 1');\n    test('test 1', () => {\n      console.log('test for describe inner 1');\n      expect(true).toequal(true);\n    });\n  });\n\n  console.log('describe outer-b');\n\n  test('test 1', () => {\n    console.log('test for describe outer');\n    expect(true).toequal(true);\n  });\n\n  describe('describe inner 2', () => {\n    console.log('describe inner 2');\n    test('test for describe inner 2', () => {\n      console.log('test for describe inner 2');\n      expect(false).toequal(false);\n    });\n  });\n\n  console.log('describe outer-c');\n});\n\n// describe outer-a\n// describe inner 1\n// describe outer-b\n// describe inner 2\n// describe outer-c\n// test for describe inner 1\n// test for describe outer\n// test for describe inner 2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n\n# 匹配器的使用\n\n * tobe\n\ntest('2 加 2 等于 4', () => {\n  expect(2 + 2).tobe(4);\n});\n\n\n1\n2\n3\n\n * toequal: 递归检查对象或数组的每个字段\n\ntest('对象赋值', () => {\n  const data = {one: 1};\n  data['two'] = 2;\n  expect(data).toequal({one: 1, two: 2});\n});\n\n\n1\n2\n3\n4\n5\n\n * not\n\ntest('adding positive numbers is not zero', () => {\n  for (let a = 1; a < 10; a++) {\n    for (let b = 1; b < 10; b++) {\n      expect(a + b).not.tobe(0);\n    }\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * tobenull 只匹配 null\n * tobeundefined 只匹配 undefined\n * tobedefined 与 tobeundefined 相反\n * tobetruthy 匹配任何 if 语句为真\n * tobefalsy 匹配任何if 语句为假\n * 数字大多数的比较数字有等价的匹配器\n\ntest('two plus two', () => {\n  const value = 2 + 2;\n  expect(value).tobegreaterthan(3);\n  expect(value).tobegreaterthanorequal(3.5);\n  expect(value).tobelessthan(5);\n  expect(value).tobelessthanorequal(4.5);\n\n  // tobe and toequal are equivalent for numbers\n  expect(value).tobe(4);\n  expect(value).toequal(4);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * tobecloseto：对于比较浮点数相等\n\ntest('两个浮点数字相加', () => {\n  const value = 0.1 + 0.2;\n  //expect(value).tobe(0.3);      // 这句会报错，因为浮点数有舍入误差\n  expect(value).tobecloseto(0.3); // 这句可以运行\n});\n\n\n1\n2\n3\n4\n5\n\n * tomatch：字符串\n\ntest('there is no i in team', () => {\n  expect('team').not.tomatch(/i/);\n});\n\ntest('but there is a \"stop\" in christoph', () => {\n  expect('christoph').tomatch(/stop/);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * tocontain：arrays and iterables\n\nconst shoppinglist = [\n  'diapers',\n  'kleenex',\n  'trash bags',\n  'paper towels',\n  'milk',\n];\n\ntest('the shopping list has milk on it', () => {\n  expect(shoppinglist).tocontain('milk');\n  expect(new set(shoppinglist)).tocontain('milk');\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * tothrow：抛出错误\n\nfunction compileandroidcode() {\n  throw new error('you are using the wrong jdk');\n}\n\ntest('compiling android goes as expected', () => {\n  expect(() => compileandroidcode()).tothrow();\n  expect(() => compileandroidcode()).tothrow(error);\n\n  // you can also use the exact error message or a regexp\n  expect(() => compileandroidcode()).tothrow('you are using the wrong jdk');\n  expect(() => compileandroidcode()).tothrow(/jdk/);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 异步代码\n\n * 回调\n\nconst fetchdata = callback => settimeout(() => callback&&callback('peanut butter'), 1000)\n\ntest('the data is peanut butter', done => {\n  expect.assertions(1);\n  function callback(data) {\n    try {\n      expect(data).tobe('peanut butter');\n      done();\n    } catch (error) {\n      done(error);\n    }\n  }\n  // 异步方法\n  fetchdata(callback);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * promises：需要有返回值\n\n// 捕获：then\nconst fetchdata = () => promise.resolve('peanut butter')\ntest('the data is peanut butter', () => {\n  expect.assertions(1);\n  return fetchdata().then(data => {\n    expect(data).tobe('peanut butter');\n  });\n});\n\n// 捕获：cath\nconst fetchdata = () => promise.reject('catch error')\ntest('the fetch fails with an error', () => {\n  expect.assertions(1); // 验证一定数量的断言被调用\n  return fetchdata().catch(e => expect(e).tomatch('error'));\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 【推荐】.resolves / .rejects\n\n// resolves\nconst fetchdata = () => promise.resolve('peanut butter')\ntest('the data is peanut butter', () => {\n  return expect(fetchdata()).resolves.tobe('peanut butter');\n});\n\n// rejects\nconst fetchdata = () => promise.reject('catch error')\ntest('the fetch fails with an error', () => {\n  return expect(fetchdata()).rejects.tomatch('error');\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * async/await\n\n// resolve\nconst fetchdata = () => promise.resolve('peanut butter')\ntest('the data is peanut butter', async () => {\n  expect.assertions(1);\n  const data = await fetchdata();\n  expect(data).tobe('peanut butter');\n});\n\n// reject error\nconst fetchdata = () => promise.reject('catch error')\ntest('the fetch fails with an error', async () => {\n  expect.assertions(1);\n  try {\n    await fetchdata();\n  } catch (e) {\n    expect(e).tomatch('error');\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 【推荐】async await和 .resolves or .rejects一起使用\n\n// resolve\nconst fetchdata = () => promise.resolve('peanut butter')\ntest('the data is peanut butter', async () => {\n  await expect(fetchdata()).resolves.tobe('peanut butter');\n});\n\n// error\nconst fetchdata = () => promise.reject('catch error')\ntest('the fetch fails with an error', async () => {\n  await expect(fetchdata()).rejects.tomatch('error');\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# jest mock\n\n\n# jest.fn\n\n * 没有定义函数内部的实现，返回undefined作为返回值\n\ntest('测试jest.fn()调用', () => {\n  let mockfn = jest.fn();\n  let result = mockfn(1, 2, 3);\n\n  // 断言mockfn的执行后返回undefined\n  expect(result).tobeundefined();\n  // 断言mockfn被调用\n  expect(mockfn).tobecalled();\n  // 断言mockfn被调用了一次\n  expect(mockfn).tobecalledtimes(1);\n  // 断言mockfn传入的参数为1, 2, 3\n  expect(mockfn).tohavebeencalledwith(1, 2, 3);\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * mockreturnvalue：定义返回值\n\ntest('测试jest.fn()返回固定值', () => {\n  let mockfn = jest.fn().mockreturnvalue('default');\n  // 断言mockfn执行后返回值为default\n  expect(mockfn()).tobe('default');\n})\n\ntest('测试jest.fn()内部实现', () => {\n  let mockfn = jest.fn((num1, num2) => {\n    return num1 * num2;\n  })\n  // 断言mockfn执行后返回100\n  expect(mockfn(10, 10)).tobe(100);\n})\n\ntest('测试jest.fn()返回promise', async () => {\n  let mockfn = jest.fn().mockresolvedvalue('default');\n  let result = await mockfn();\n  // 断言mockfn通过await关键字执行后返回值为default\n  expect(result).tobe('default');\n  // 断言mockfn调用后返回的是promise对象\n  expect(object.prototype.tostring.call(mockfn())).tobe(\"[object promise]\");\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n * demo\n\n// fetch.js\nimport axios from 'axios';\nexport default {\n  async fetchpostslist(callback) {\n    return axios.get('https://jsonplaceholder.typicode.com/posts').then(res => {\n      return callback(res.data);\n    })\n  }\n}\n// fetch.spec.js\nimport fetch from '../src/fetch.js'\ntest('fetchpostslist中的回调函数应该能够被调用', async () => {\n  expect.assertions(1);\n  let mockfn = jest.fn();\n  await fetch.fetchpostslist(mockfn);\n\n  // 断言mockfn被调用\n  expect(mockfn).tobecalled();\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# jest.mock\n\n * 模块内的方法是不会被jest所实际执行\n\n// events.js\nimport fetch from './fetch';\nexport default {\n  async getpostlist() {\n    return fetch.fetchpostslist(data => {\n      console.log('fetchpostslist be called!');  // not console called\n      // do something\n    });\n  }\n}\n\n// events.spec.js\nimport events from '../src/events';\nimport fetch from '../src/fetch';\n// mock整个fetch.js模块\njest.mock('../src/fetch.js');\ntest('mock 整个 fetch.js模块', async () => {\n  expect.assertions(2);\n  await events.getpostlist();\n  expect(fetch.fetchpostslist).tohavebeencalled();\n  expect(fetch.fetchpostslist).tohavebeencalledtimes(1);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# jest.spyon\n\n// events.js\nimport fetch from './fetch';\nexport default {\n  async getpostlist() {\n    return fetch.fetchpostslist(data => {\n      console.log('fetchpostslist be called!');  // console called\n      // do something\n    });\n  }\n}\n\n// events.spec.js\nimport events from '../src/events';\nimport fetch from '../src/fetch';\n\ntest('使用jest.spyon()监控fetch.fetchpostslist被正常调用', async() => {\n  expect.assertions(2);\n  const spyfn = jest.spyon(fetch, 'fetchpostslist');\n  await events.getpostlist();\n  expect(spyfn).tohavebeencalled();\n  expect(spyfn).tohavebeencalledtimes(1);\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 测试库\n\n * https://testing-library.com/docs/\n\n\n# 在 vue 中使用\n\n * 来源：https://cn.vuejs.org/v2/guide/testing.html\n\n * vue test utils：vue官方的偏底层的组件测试库\n\n * vue testing library (@testing-library/vue)\n\n * el-input: textarea 设置默认高度\n\n<el-input\n  type=\"textarea\"\n  :rows=\"10\"\n/>\n\n\n1\n2\n3\n4\n\n * element-ui jest\n\n// helloworld.vue\n<template>\n  <div class=\"hello\">\n    <el-button>{{ msg }}</el-button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'helloworld',\n  props: {\n    msg: string\n  }\n}\n<\/script>\n\n// helloworld.spec.js\nimport { shallowmount, createlocalvue } from '@vue/test-utils'\nimport button from '@/components/helloworld.vue'\nimport elementui from 'element-ui' // added\n\nconst localvue = createlocalvue() // added\nlocalvue.use(elementui) // added\n\ndescribe('shallowmount helloworld.vue', () => {\n  it('renders props.msg when passed', () => {\n    const msg = 'new message'\n    const wrapper = shallowmount(button, {\n      propsdata: { msg },\n      localvue\n    })\n    expect(wrapper.text()).tomatch(msg)\n  })\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n * jest测试：第三方组件\n\nimport { shallowmount, createlocalvue } from '@vue/test-utils'\nimport helloworld from '@/components/helloworld.vue'\nimport vuex from 'vuex'\nimport router from 'vue-router'\nimport elementui from 'element-ui'\nconst localvue  = createlocalvue()\nlocalvue.use(vuex)\nlocalvue.use(router)\nlocalvue.use(elementui)\n\ndescribe('helloworld.vue', () => {\n  it('use localvue', () => {\n    const wrapper = shallowmount(helloworld, {\n      localvue\n    })\n  })\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * tests router view: code sinppets\n\nimport { mount, createlocalvue } from \"@vue/test-utils\"\nimport app from \"@/app.vue\"\nimport vuerouter from \"vue-router\"\nimport nestedroute from \"@/components/nestedroute.vue\"\nimport routes from \"@/routes.js\"\n\nconst localvue = createlocalvue()\nlocalvue.use(vuerouter)\n\n// mock components render\njest.mock(\"@/components/nestedroute.vue\", () => ({\n  name: \"nestedroute\",\n  render: h => h(\"div\")\n}))\n\ndescribe(\"app\", () => {\n  it(\"renders a child component via routing\", async () => {\n    const router = new vuerouter({ routes })\n    const wrapper = mount(app, {\n      localvue,\n      router\n    })\n\n    router.push(\"/nested-route\")\n    await wrapper.vm.$nexttick()\n\n    expect(wrapper.findcomponent(nestedroute).exists()).tobe(true)\n  })\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n * jest.mock & jest.fn: code snippets\n\n// nestedroute.vue\n<template>\n  <div>\n    nested route\n    <div class=\"username\">\n      {{ $route.params.username }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { bustcache } from \"@/bust-cache.js\"\nexport default {\n  name: \"nestedroute\",\n\n  beforerouteleave(to, from, next) {\n    bustcache()\n    next()\n  }\n}\n<\/script>\n\n// nestedroute.spec.js\nimport { shallowmount, createlocalvue } from \"@vue/test-utils\"\nimport vuerouter from \"vue-router\"\nimport nestedroute from \"@/components/nestedroute.vue\"\nimport mockmodule from \"@/bust-cache.js\"\n\njest.mock(\"@/bust-cache.js\", () => ({ bustcache: jest.fn() }))\nconst localvue = createlocalvue()\nlocalvue.use(vuerouter)\n\ndescribe(\"nestedroute\", () => {\n  it(\"renders a username from query string\", () => {\n    const username = \"alice\"\n    const wrapper = shallowmount(nestedroute, {\n      mocks: {\n        $route: {\n          params: { username }\n        }\n      }\n    })\n\n    expect(wrapper.find(\".username\").text()).tobe(username)\n  })\n\n  it(\"calls bustcache and next when leaving the route\", () => {\n    const next = jest.fn()\n    nestedroute.beforerouteleave(undefined, undefined, next)\n\n    expect(mockmodule.bustcache).tohavebeencalled()\n    expect(next).tohavebeencalled()\n  })\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n\n\n\n# how can i mock window?\n\n\n# 方式一\n\n * 使用object.defineproperty代理劫持属性\n * 相关包：jest-useragent-mock\n\n\n# 方式二\n\n * jest-environment-jsdom-global\n * 安装\n\nyarn add --dev jest-environment-jsdom-global jest-environment-jsdom\n\n\n1\n\n * 配置jest.config.js\n\n\"jest\": {\n  \"testenvironment\": \"jest-environment-jsdom-global\" // 默认是node\n}\n\n\n1\n2\n3\n\n\n\n# jest exceeded timeout of 5000 ms for a test #11607\n\n * exceeded timeout of 5000 ms for a test #11607\n\n\n# tsd\n\ntsd: https://github.com/samverschueren/tsd\n\n\n# package\n\n * jest promise: flush-promises\n\n\n# 相关链接\n\n * github@jest issues: docs: setupfiles vs setupfilesafterenv #9314\n * jsdom\n * jest-environment-jsdom\n * jest mocking localstorage #2098\n * unable to change window.location using object.defineproperty #5124\n * jest unable to change window.location using object.defineproperty #5124\n * vue tests: https://github.com/tonylua/vue-testing-handbook",charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647945545e3,createdTime:1643899953e3},{title:"css预处理器less使用",frontmatter:{title:"css预处理器less使用",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["less","1像素问题"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/less.html",relativePath:"frontend/issues/less.md",key:"v-0139db16",path:"/frontend/issues/less.html",headers:[{level:2,title:"基本使用",slug:"基本使用",normalizedTitle:"基本使用",charIndex:57},{level:2,title:"import",slug:"import",normalizedTitle:"import",charIndex:137},{level:2,title:"变量",slug:"变量",normalizedTitle:"变量",charIndex:508},{level:2,title:"混合",slug:"混合",normalizedTitle:"混合",charIndex:858},{level:2,title:"匹配模式",slug:"匹配模式",normalizedTitle:"匹配模式",charIndex:2197},{level:2,title:"嵌套用法",slug:"嵌套用法",normalizedTitle:"嵌套用法",charIndex:4044},{level:2,title:"argument 用法",slug:"argument-用法",normalizedTitle:"argument 用法",charIndex:4990},{level:2,title:"避免编译",slug:"避免编译",normalizedTitle:"避免编译",charIndex:5266},{level:2,title:"important 用法",slug:"important-用法",normalizedTitle:"important 用法",charIndex:5395},{level:2,title:"utils",slug:"utils",normalizedTitle:"utils",charIndex:5614}],headersStr:"基本使用 import 变量 混合 匹配模式 嵌套用法 argument 用法 避免编译 important 用法 utils",content:" * lesscss\n * koala-app 编译器\n * online-less-compilers\n\n\n# 基本使用\n\nlessc styles.less > styles.css\nlessc -x styles.less styles.css\n\n\n1\n2\n\n\n\n# import\n\n// less 文件\n@charset 'utf-8';\n//导入less文件\n@import \"m\";\n//导入css文件:\n//注意导入的css文件位置与编译后css的位置是一致的\n@import (less) \"b.css\";\n\n//m.less\n.cless {\n  @red: red;\n  color: @red;\n}\n\n//b.css\n.bcss {\n  color: #ccc;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n//less编译后的对应css文件：\n@charset 'utf-8';\n.cless {\n  color: #ff0000;\n}\n.bcss {\n  color: #ccc;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 变量\n\n//less文件：\n@charset 'utf-8';\n/* 这是一个编译后看见的注释*/\n//这是一个编译后看不见的注释\n@_width: 300px;\n@red: red;\n\n.col {\n  //可重复声明使用不影响外调用\n  @red: #ccc;\n  color: @red;\n}\n.col2 {\n  color: @red;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n//less编译后的对应css文件：\n@charset 'utf-8';\n/* 这是一个编译后看见的注释*/\n.col {\n  color: #cccccc;\n}\n.col2 {\n  color: #ff0000;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 混合\n\n.bord {\n  border: 1px solid #000;\n}\n//例：\n.box {\n  width: @_width;\n  height: @_width;\n  background-color: @red;\n  .bord; //混合\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n//less编译后的对应css文件：\n.bord {\n  border: 1px solid #000;\n}\n.box {\n  width: 300px;\n  height: 300px;\n  background-color: #ff0000;\n  border: 1px solid #000;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * 混合-带参数\n\n.border_02(@border_width) {\n  border: solid yellow @border_width;\n}\n//例：\n.border_hunhe {\n  width: @_width;\n  height: @_width;\n  .border_02(20px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n//less编译后的对应css文件：\n.border_hunhe {\n  width: 300px;\n  height: 300px;\n  border: solid #ffff00 20px;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n * 混合-默认值\n\n.border_03(@border_width:10px) {\n  border: @border_width solid green;\n}\n//例： 混合 不传值\n.border_hunhe2 {\n  .border_03();\n}\n//例： 混合 传值\n.border_hunhe21 {\n  .border_03(12px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n//less编译后的对应css文件：\n.border_hunhe2 {\n  border: 10px solid #008000;\n}\n.border_hunhe21 {\n  border: 12px solid #008000;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 混合用法:默认值为变量\n\n@bdr: 10px;\n.border_04(@border_width:@bdr) {\n  border: @border_width solid @red;\n}\n//例： 混合 不传值\n.border_hunhe3 {\n  .border_04();\n}\n//例： 混合 传值\n.border_hunhe31 {\n  .border_04(13px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n//less编译后的对应css文件：\n.border_hunhe3 {\n  border: 10px solid #ff0000;\n}\n.border_hunhe31 {\n  border: 13px solid #ff0000;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 匹配模式\n\n/* 三角形 border */\n// 原文url:http://www.cnblogs.com/blosaa/p/3823695.html\n//上\n.trangle(top,@w:5px,@c:#ccc) {\n  border-width: @w;\n  border-color: transparent transparent @c transparent;\n  border-style: dashed dashed solid dashed;\n}\n//右\n.trangle(right,@w:5px,@c:#ccc) {\n  border-width: @w;\n  border-color: transparent transparent transparent @c;\n  border-style: dashed dashed dashed solid;\n}\n//下\n.trangle(bottom,@w:5px,@c:#ccc) {\n  border-width: @w;\n  border-color: @c transparent transparent transparent;\n  border-style: solid dashed dashed dashed;\n}\n//左\n.trangle(left,@w:5px,@c:#ccc) {\n  border-width: @w;\n  border-color: transparent @c transparent transparent;\n  border-style: dashed solid dashed dashed;\n}\n//匹配通用格式\n.trangle(@_,@w:5px,@c:#ccc) {\n  width: 0;\n  height: 0;\n  overflow: hidden;\n}\n//例：\n.sanjiao {\n  .trangle(right, 50px);\n}\n\n//例：传入错误值\n.sanjiao1 {\n  .trangle(dsa, 20px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n//less编译后的对应css文件：\n/* 三角形 border */\n.sanjiao {\n  border-width: 50px;\n  border-color: transparent transparent transparent #cccccc;\n  border-style: dashed dashed dashed solid;\n  width: 0;\n  height: 0;\n  overflow: hidden;\n}\n.sanjiao1 {\n  width: 0;\n  height: 0;\n  overflow: hidden;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 运算: 其中一个带单位即可.注意:减法之间的格式;命名变量在运算中不可添加单位\n\n@w10: 100px;\n@h10: 120;\n.add {\n  width: @w10 + 10;\n  height: @h10 - 10px;\n  color: #666 / 2; //可用,不建议\n}\n.add2 {\n  width: @w10 + 12/2;\n  height: (@h10 - 10) * 2px;\n}\n\n.add3 {\n  width: @w10 + 10px;\n  height: @h10 / 3 * 3px - 6+4;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n//less编译后的对应css文件：\n.add {\n  width: 110px;\n  height: 110px;\n  color: #333333;\n}\n.add2 {\n  width: 106px;\n  height: 220px;\n}\n.add3 {\n  width: 110px;\n  height: 118px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 嵌套用法\n\nul {\n  width: 100px;\n  //margin: 10px auto;\n  li {\n    width: 100px;\n    float: left;\n    border-bottom: 1px solid #ccc / 2;\n  }\n  a {\n    width: 100px;\n    color: red;\n    display: block;\n    //& 上一层选择器的名\n    &:hover {\n      color: blue;\n    }\n    span {\n      font-weight: bold;\n      font-size: 18px;\n      float: right;\n      color: #85ada7;\n    }\n  }\n}\n// $的用法\n.tit {\n  width: 100px;\n  &_n {\n    width: 100px;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n//less编译后的对应css文件：\nul {\n  width: 100px;\n}\nul li {\n  width: 100px;\n  float: left;\n  border-bottom: 1px solid #666666;\n}\nul a {\n  width: 100px;\n  color: red;\n  display: block;\n}\nul a:hover {\n  color: blue;\n}\nul a span {\n  font-weight: bold;\n  font-size: 18px;\n  float: right;\n  color: #85ada7;\n}\n.tit {\n  width: 100px;\n}\n.tit_n {\n  width: 100px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# argument 用法\n\n.brd2(@c:#ccc,@w:10px,@solid:solid) {\n  border: @arguments;\n}\n.bor2 {\n  .brd2();\n}\n//注意参数对应\n.bor21 {\n  .brd2(red);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n//less编译后的对应css文件：\n.bor2 {\n  border: #cccccc 10px solid;\n}\n.bor21 {\n  border: #ff0000 10px solid;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 避免编译\n\n.wid {\n  width: ~\"calc(100px - 20px)\";\n}\n\n\n1\n2\n3\n\n\n//less编译后的对应css文件：\n.wid {\n  width: calc(100px - 20px);\n}\n\n\n1\n2\n3\n4\n\n\n\n# important 用法\n\n.impor(@w:10px,@h:10px) {\n  width: @w;\n  height: @h;\n}\n.im_a {\n  .impor() !important;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n//less编译后的对应css文件：\n.im_a {\n  width: 10px !important;\n  height: 10px !important;\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# utils\n\n// - less border 1px\n\n.min-device-pixel-ratio(@scale2, @scale3) {\n  @media screen and (min-device-pixel-ratio: 2), (-webkit-min-device-pixel-ratio: 2) {\n    transform: @scale2;\n  }\n  @media screen and (min-device-pixel-ratio: 3), (-webkit-min-device-pixel-ratio: 3) {\n    transform: @scale3;\n  }\n}\n\n.border-1px(@color: #DDD, @radius: 2PX, @style: solid) {\n  &::before {\n    content: \"\";\n    pointer-events: none;\n    display: block;\n    position: absolute;\n    left: 0;\n    top: 0;\n    transform-origin: 0 0;\n    border: 1PX @style @color;\n    border-radius: @radius;\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n    @media screen and (min-device-pixel-ratio: 2), (-webkit-min-device-pixel-ratio: 2) {\n      width: 200%;\n      height: 200%;\n      border-radius: @radius * 2;\n      transform: scale(.5);\n    }\n    @media screen and (min-device-pixel-ratio: 3), (-webkit-min-device-pixel-ratio: 3) {\n      width: 300%;\n      height: 300%;\n      border-radius: @radius * 3;\n      transform: scale(.33);\n    }\n  }\n}\n\n.border-top-1px(@color: #DDD, @style: solid) {\n  &::before {\n    content: \"\";\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    border-top: 1Px @style @color;\n    transform-origin: 0 0;\n    .min-device-pixel-ratio(scaleY(.5), scaleY(.33));\n  }\n}\n\n// - 多行显示\n\n.line-camp( @clamp:2 ) {\n    text-overflow: -o-ellipsis-lastline;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: @clamp;\n    -webkit-box-orient: vertical;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n\n * border\n\n@lignt-gray-color: #ccc;\n\n.border-radius(@radius: 0){\n  border-radius: @radius;\n}\n.border(\n    @borderWidth: 1px;\n    @borderStyle: solid;\n    @borderColor: @lignt-gray-color;\n    @borderRadius: 0) {\n    position: relative;\n    &:before {\n        content: '';\n        position: absolute;\n        width: 98%;\n        height: 98%;\n        top: 0;\n        left: 0;\n        transform-origin: left top;\n        -webkit-transform-origin: left top;\n        box-sizing: border-box;\n        pointer-events: none;\n    }\n    @media (-webkit-min-device-pixel-ratio: 2) {\n        &:before {\n            width: 200%;\n            height: 200%;\n            -webkit-transform: scale(.5);\n        }\n    }\n    @media (-webkit-min-device-pixel-ratio: 2.5) {\n        &:before {\n            width: 250%;\n            height: 250%;\n            -webkit-transform: scale(.4);\n        }\n    }\n    @media (-webkit-min-device-pixel-ratio: 2.75) {\n        &:before {\n            width: 275%;\n            height: 275%;\n            -webkit-transform: scale(1 / 2.75);\n        }\n    }\n    @media (-webkit-min-device-pixel-ratio: 3) {\n        &:before {\n            width: 300%;\n            height: 300%;\n            transform: scale(1 / 3);\n            -webkit-transform: scale(1 / 3);\n        }\n    }\n   .border-radius(@borderRadius);\n    &:before {\n        border-width: @borderWidth;\n        border-style: @borderStyle;\n        border-color: @borderColor;\n    }\n}\n\n.border-all(\n\t@borderWidth: 1px;\n\t@borderStyle: solid;\n\t@borderColor: @lignt-gray-color;\n\t@borderRadius: 0) {\n    .border(@borderWidth; @borderStyle; @borderColor; @borderRadius);\n}\n\n.box{\n   .border-all();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n",normalizedContent:" * lesscss\n * koala-app 编译器\n * online-less-compilers\n\n\n# 基本使用\n\nlessc styles.less > styles.css\nlessc -x styles.less styles.css\n\n\n1\n2\n\n\n\n# import\n\n// less 文件\n@charset 'utf-8';\n//导入less文件\n@import \"m\";\n//导入css文件:\n//注意导入的css文件位置与编译后css的位置是一致的\n@import (less) \"b.css\";\n\n//m.less\n.cless {\n  @red: red;\n  color: @red;\n}\n\n//b.css\n.bcss {\n  color: #ccc;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n//less编译后的对应css文件：\n@charset 'utf-8';\n.cless {\n  color: #ff0000;\n}\n.bcss {\n  color: #ccc;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 变量\n\n//less文件：\n@charset 'utf-8';\n/* 这是一个编译后看见的注释*/\n//这是一个编译后看不见的注释\n@_width: 300px;\n@red: red;\n\n.col {\n  //可重复声明使用不影响外调用\n  @red: #ccc;\n  color: @red;\n}\n.col2 {\n  color: @red;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n//less编译后的对应css文件：\n@charset 'utf-8';\n/* 这是一个编译后看见的注释*/\n.col {\n  color: #cccccc;\n}\n.col2 {\n  color: #ff0000;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 混合\n\n.bord {\n  border: 1px solid #000;\n}\n//例：\n.box {\n  width: @_width;\n  height: @_width;\n  background-color: @red;\n  .bord; //混合\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n//less编译后的对应css文件：\n.bord {\n  border: 1px solid #000;\n}\n.box {\n  width: 300px;\n  height: 300px;\n  background-color: #ff0000;\n  border: 1px solid #000;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * 混合-带参数\n\n.border_02(@border_width) {\n  border: solid yellow @border_width;\n}\n//例：\n.border_hunhe {\n  width: @_width;\n  height: @_width;\n  .border_02(20px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n//less编译后的对应css文件：\n.border_hunhe {\n  width: 300px;\n  height: 300px;\n  border: solid #ffff00 20px;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n * 混合-默认值\n\n.border_03(@border_width:10px) {\n  border: @border_width solid green;\n}\n//例： 混合 不传值\n.border_hunhe2 {\n  .border_03();\n}\n//例： 混合 传值\n.border_hunhe21 {\n  .border_03(12px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n//less编译后的对应css文件：\n.border_hunhe2 {\n  border: 10px solid #008000;\n}\n.border_hunhe21 {\n  border: 12px solid #008000;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 混合用法:默认值为变量\n\n@bdr: 10px;\n.border_04(@border_width:@bdr) {\n  border: @border_width solid @red;\n}\n//例： 混合 不传值\n.border_hunhe3 {\n  .border_04();\n}\n//例： 混合 传值\n.border_hunhe31 {\n  .border_04(13px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n//less编译后的对应css文件：\n.border_hunhe3 {\n  border: 10px solid #ff0000;\n}\n.border_hunhe31 {\n  border: 13px solid #ff0000;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 匹配模式\n\n/* 三角形 border */\n// 原文url:http://www.cnblogs.com/blosaa/p/3823695.html\n//上\n.trangle(top,@w:5px,@c:#ccc) {\n  border-width: @w;\n  border-color: transparent transparent @c transparent;\n  border-style: dashed dashed solid dashed;\n}\n//右\n.trangle(right,@w:5px,@c:#ccc) {\n  border-width: @w;\n  border-color: transparent transparent transparent @c;\n  border-style: dashed dashed dashed solid;\n}\n//下\n.trangle(bottom,@w:5px,@c:#ccc) {\n  border-width: @w;\n  border-color: @c transparent transparent transparent;\n  border-style: solid dashed dashed dashed;\n}\n//左\n.trangle(left,@w:5px,@c:#ccc) {\n  border-width: @w;\n  border-color: transparent @c transparent transparent;\n  border-style: dashed solid dashed dashed;\n}\n//匹配通用格式\n.trangle(@_,@w:5px,@c:#ccc) {\n  width: 0;\n  height: 0;\n  overflow: hidden;\n}\n//例：\n.sanjiao {\n  .trangle(right, 50px);\n}\n\n//例：传入错误值\n.sanjiao1 {\n  .trangle(dsa, 20px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n//less编译后的对应css文件：\n/* 三角形 border */\n.sanjiao {\n  border-width: 50px;\n  border-color: transparent transparent transparent #cccccc;\n  border-style: dashed dashed dashed solid;\n  width: 0;\n  height: 0;\n  overflow: hidden;\n}\n.sanjiao1 {\n  width: 0;\n  height: 0;\n  overflow: hidden;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 运算: 其中一个带单位即可.注意:减法之间的格式;命名变量在运算中不可添加单位\n\n@w10: 100px;\n@h10: 120;\n.add {\n  width: @w10 + 10;\n  height: @h10 - 10px;\n  color: #666 / 2; //可用,不建议\n}\n.add2 {\n  width: @w10 + 12/2;\n  height: (@h10 - 10) * 2px;\n}\n\n.add3 {\n  width: @w10 + 10px;\n  height: @h10 / 3 * 3px - 6+4;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n//less编译后的对应css文件：\n.add {\n  width: 110px;\n  height: 110px;\n  color: #333333;\n}\n.add2 {\n  width: 106px;\n  height: 220px;\n}\n.add3 {\n  width: 110px;\n  height: 118px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 嵌套用法\n\nul {\n  width: 100px;\n  //margin: 10px auto;\n  li {\n    width: 100px;\n    float: left;\n    border-bottom: 1px solid #ccc / 2;\n  }\n  a {\n    width: 100px;\n    color: red;\n    display: block;\n    //& 上一层选择器的名\n    &:hover {\n      color: blue;\n    }\n    span {\n      font-weight: bold;\n      font-size: 18px;\n      float: right;\n      color: #85ada7;\n    }\n  }\n}\n// $的用法\n.tit {\n  width: 100px;\n  &_n {\n    width: 100px;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n//less编译后的对应css文件：\nul {\n  width: 100px;\n}\nul li {\n  width: 100px;\n  float: left;\n  border-bottom: 1px solid #666666;\n}\nul a {\n  width: 100px;\n  color: red;\n  display: block;\n}\nul a:hover {\n  color: blue;\n}\nul a span {\n  font-weight: bold;\n  font-size: 18px;\n  float: right;\n  color: #85ada7;\n}\n.tit {\n  width: 100px;\n}\n.tit_n {\n  width: 100px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# argument 用法\n\n.brd2(@c:#ccc,@w:10px,@solid:solid) {\n  border: @arguments;\n}\n.bor2 {\n  .brd2();\n}\n//注意参数对应\n.bor21 {\n  .brd2(red);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n//less编译后的对应css文件：\n.bor2 {\n  border: #cccccc 10px solid;\n}\n.bor21 {\n  border: #ff0000 10px solid;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 避免编译\n\n.wid {\n  width: ~\"calc(100px - 20px)\";\n}\n\n\n1\n2\n3\n\n\n//less编译后的对应css文件：\n.wid {\n  width: calc(100px - 20px);\n}\n\n\n1\n2\n3\n4\n\n\n\n# important 用法\n\n.impor(@w:10px,@h:10px) {\n  width: @w;\n  height: @h;\n}\n.im_a {\n  .impor() !important;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n//less编译后的对应css文件：\n.im_a {\n  width: 10px !important;\n  height: 10px !important;\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# utils\n\n// - less border 1px\n\n.min-device-pixel-ratio(@scale2, @scale3) {\n  @media screen and (min-device-pixel-ratio: 2), (-webkit-min-device-pixel-ratio: 2) {\n    transform: @scale2;\n  }\n  @media screen and (min-device-pixel-ratio: 3), (-webkit-min-device-pixel-ratio: 3) {\n    transform: @scale3;\n  }\n}\n\n.border-1px(@color: #ddd, @radius: 2px, @style: solid) {\n  &::before {\n    content: \"\";\n    pointer-events: none;\n    display: block;\n    position: absolute;\n    left: 0;\n    top: 0;\n    transform-origin: 0 0;\n    border: 1px @style @color;\n    border-radius: @radius;\n    box-sizing: border-box;\n    width: 100%;\n    height: 100%;\n    @media screen and (min-device-pixel-ratio: 2), (-webkit-min-device-pixel-ratio: 2) {\n      width: 200%;\n      height: 200%;\n      border-radius: @radius * 2;\n      transform: scale(.5);\n    }\n    @media screen and (min-device-pixel-ratio: 3), (-webkit-min-device-pixel-ratio: 3) {\n      width: 300%;\n      height: 300%;\n      border-radius: @radius * 3;\n      transform: scale(.33);\n    }\n  }\n}\n\n.border-top-1px(@color: #ddd, @style: solid) {\n  &::before {\n    content: \"\";\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    border-top: 1px @style @color;\n    transform-origin: 0 0;\n    .min-device-pixel-ratio(scaley(.5), scaley(.33));\n  }\n}\n\n// - 多行显示\n\n.line-camp( @clamp:2 ) {\n    text-overflow: -o-ellipsis-lastline;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: @clamp;\n    -webkit-box-orient: vertical;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n\n * border\n\n@lignt-gray-color: #ccc;\n\n.border-radius(@radius: 0){\n  border-radius: @radius;\n}\n.border(\n    @borderwidth: 1px;\n    @borderstyle: solid;\n    @bordercolor: @lignt-gray-color;\n    @borderradius: 0) {\n    position: relative;\n    &:before {\n        content: '';\n        position: absolute;\n        width: 98%;\n        height: 98%;\n        top: 0;\n        left: 0;\n        transform-origin: left top;\n        -webkit-transform-origin: left top;\n        box-sizing: border-box;\n        pointer-events: none;\n    }\n    @media (-webkit-min-device-pixel-ratio: 2) {\n        &:before {\n            width: 200%;\n            height: 200%;\n            -webkit-transform: scale(.5);\n        }\n    }\n    @media (-webkit-min-device-pixel-ratio: 2.5) {\n        &:before {\n            width: 250%;\n            height: 250%;\n            -webkit-transform: scale(.4);\n        }\n    }\n    @media (-webkit-min-device-pixel-ratio: 2.75) {\n        &:before {\n            width: 275%;\n            height: 275%;\n            -webkit-transform: scale(1 / 2.75);\n        }\n    }\n    @media (-webkit-min-device-pixel-ratio: 3) {\n        &:before {\n            width: 300%;\n            height: 300%;\n            transform: scale(1 / 3);\n            -webkit-transform: scale(1 / 3);\n        }\n    }\n   .border-radius(@borderradius);\n    &:before {\n        border-width: @borderwidth;\n        border-style: @borderstyle;\n        border-color: @bordercolor;\n    }\n}\n\n.border-all(\n\t@borderwidth: 1px;\n\t@borderstyle: solid;\n\t@bordercolor: @lignt-gray-color;\n\t@borderradius: 0) {\n    .border(@borderwidth; @borderstyle; @bordercolor; @borderradius);\n}\n\n.box{\n   .border-all();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n",charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647945545e3,createdTime:1647945545e3},{title:"micro frontend",frontmatter:{title:"micro frontend",date:"2022-01-12T00:00:00.000Z",sidebar:"auto",tags:["micro"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/micro-frontend.html",relativePath:"frontend/issues/micro-frontend.md",key:"v-0aa71f1e",path:"/frontend/issues/micro-frontend.html",headers:[{level:2,title:"pnpm & rush.js",slug:"pnpm-rush-js",normalizedTitle:"pnpm &amp; rush.js",charIndex:null},{level:2,title:"yarn & leran",slug:"yarn-leran",normalizedTitle:"yarn &amp; leran",charIndex:null},{level:2,title:"microrepo",slug:"microrepo",normalizedTitle:"microrepo",charIndex:196},{level:2,title:"webpack5 module federation",slug:"webpack5-module-federation",normalizedTitle:"webpack5 module federation",charIndex:446},{level:2,title:"系列文章",slug:"系列文章",normalizedTitle:"系列文章",charIndex:648},{level:2,title:"初始化配置",slug:"初始化配置",normalizedTitle:"初始化配置",charIndex:841}],headersStr:"pnpm & rush.js yarn & leran microrepo webpack5 module federation 系列文章 初始化配置",content:'# pnpm & rush.js\n\n * https://github.com/pnpm/pnpm\n * https://rushjs.io/\n * https://github.com/changesets/changesets\n\n\n# yarn & leran\n\n * https://yarnpkg.com/\n * https://github.com/lerna/lerna\n\n\n# microrepo\n\n * https://github.com/micro-zoe/micro-app\n * https://github.com/modern-js-dev/garfish\n * https://github.com/umijs/qiankun\n * https://github.com/ice-lab/icestark\n * https://github.com/efoxTeam/emp\n * https://github.com/vercel/turborepo\n\n\n# webpack5 module federation\n\n * https://github.com/module-federation/module-federation-examples\n * https://github.com/Shenfq/Webpack5-Module-Federation-Demo\n * https://github.com/yuzhanglong/mf-lite\n\n\n# 系列文章\n\n * https://github.com/a1029563229/micro-front-template\n * 微前端qiankun从搭建到部署的实践\n * fengxianqi/qiankun-example\n * qiankun 微前端实践及常见问题\n * 微前端 | 7. 微应用沙箱实现原理\n * 深入浅出解析阿里成熟的微前端框架 qiankun 源码\n\n\n# 初始化配置\n\n * jsconfig.json\n\n{\n    "include": [\n        "./src/**/*"\n    ],\n    "compilerOptions": {\n        "target": "esnext",\n        "module": "esnext",\n        "moduleResolution":"node",\n        "allowSyntheticDefaultImports": true,\n        "experimentalDecorators": true,\n        "baseUrl": ".",\n        "paths": {\n            "@/*": [\n                "src/*"\n            ]\n        },\n    },\n    "exclude": [\n        "node_modules","dist",\n        "bower_components", "jspm_packages"\n    ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n * tsconfig.json\n\n{\n  "include": [\n    "./src/**/*"\n  ],\n  "compilerOptions": {\n      "target": "esnext",\n      "module": "esnext",\n      "strict": true,\n      "jsx": "preserve",\n      "importHelpers": true,\n      "moduleResolution": "node",\n      "experimentalDecorators": true,\n      "skipLibCheck": true,\n      "esModuleInterop": true,\n      "allowSyntheticDefaultImports": true,\n      "allowJs": true,\n      "sourceMap": true,\n      "baseUrl": ".",\n      "types": [\n          "webpack-env"\n      ],\n      "paths": {\n          "@/*": [\n              "src/*"\n          ]\n      },\n      "lib": [\n          "esnext",\n          "dom",\n          "dom.iterable",\n          "scripthost"\n      ]\n  },\n  "exclude": [\n      "node_modules"\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n * vue.config.js\n\nconst path = require("path");\nconst { name } = require("./package");\n\nfunction resolve(dir) {\n    return path.join(__dirname, dir);\n}\n\nconst port = 7101; // dev port\n\nmodule.exports = {\n    /**\n     * You will need to set publicPath if you plan to deploy your site under a sub path,\n     * for example GitHub Pages. If you plan to deploy your site to https://foo.github.io/bar/,\n     * then publicPath should be set to "/bar/".\n     * In most cases please use \'/\' !!!\n     * Detail: https://cli.vuejs.org/config/#publicpath\n     */\n    outputDir: "dist",\n    assetsDir: "static",\n    filenameHashing: true,\n    // tweak internal webpack configuration.\n    // see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md\n    devServer: {\n        // host: \'0.0.0.0\',\n        hot: true,\n        disableHostCheck: true,\n        port,\n        overlay: {\n            warnings: false,\n            errors: true,\n        },\n        headers: {\n            "Access-Control-Allow-Origin": "*",\n        },\n    },\n    // 自定义webpack配置\n    configureWebpack: {\n        resolve: {\n            alias: {\n                "@": resolve("src"),\n            },\n            extensions: [".js", ".jsx", ".ts", ".tsx"],\n        },\n        entry: "./src/main.js",\n        output: {\n            // 把子应用打包成 umd 库格式\n            library: `${name}-[name]`,\n            libraryTarget: "umd",\n            jsonpFunction: `webpackJsonp_${name}`,\n        },\n    },\n    css: {\n        requireModuleExtension: true,\n    },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n * public-path.js\n\nif (window.__POWERED_BY_QIANKUN__) {\n    // eslint-disable-next-line no-undef\n    __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n}\n\n\n1\n2\n3\n4\n\n * main.js\n\nimport "./public-path";\nimport Vue from "vue";\n// import VueRouter from "vue-router";\nimport App from "./App.vue";\n\n// import router from "./router";\nimport createRouter from "./router";\nimport store from "./store";\n\nVue.config.productionTip = false;\n\nlet router = null;\nlet instance = null;\n\nfunction render(props = {}) {\n    const { container } = props;\n    router = createRouter();\n    instance = new Vue({\n        router,\n        store,\n        render: (h) => h(App),\n    }).$mount(container ? container.querySelector("#app") : "#app");\n}\n\nif (!window.__POWERED_BY_QIANKUN__) {\n    render();\n}\n\nfunction storeTest(props) {\n    props.onGlobalStateChange &&\n        props.onGlobalStateChange(\n            (value, prev) =>\n                console.log(\n                    `[onGlobalStateChange - ${props.name}]:`,\n                    value,\n                    prev\n                ),\n            true\n        );\n    props.setGlobalState &&\n        props.setGlobalState({\n            ignore: props.name,\n            user: {\n                name: props.name,\n            },\n        });\n}\n\nexport async function bootstrap() {\n    console.log("[vue] vue app bootstraped");\n}\n\nexport async function mount(props) {\n    console.log("[vue] props from main framework", props);\n    storeTest(props);\n    render(props);\n}\n\nexport async function unmount() {\n    instance.$destroy();\n    instance.$el.innerHTML = "";\n    instance = null;\n    router = null;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n\n * vue-router\n\nimport Vue from "vue";\nimport VueRouter from "vue-router";\nimport Home from "../views/Home.vue";\n\nVue.use(VueRouter);\n\nconst routes = [\n    {\n        path: "/",\n        name: "Home",\n        component: Home,\n    },\n    {\n        path: "/about",\n        name: "About",\n        // route level code-splitting\n        // this generates a separate chunk (about.[hash].js) for this route\n        // which is lazy-loaded when the route is visited.\n        component: () =>\n            import(/* webpackChunkName: "about" */ "../views/About.vue"),\n    },\n];\n\nconst router = () => {\n    return new VueRouter({\n        base: window.__POWERED_BY_QIANKUN__ ? "/vue" : "/",\n        mode: "history",\n        routes,\n    });\n};\n\nexport default router;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n',normalizedContent:'# pnpm & rush.js\n\n * https://github.com/pnpm/pnpm\n * https://rushjs.io/\n * https://github.com/changesets/changesets\n\n\n# yarn & leran\n\n * https://yarnpkg.com/\n * https://github.com/lerna/lerna\n\n\n# microrepo\n\n * https://github.com/micro-zoe/micro-app\n * https://github.com/modern-js-dev/garfish\n * https://github.com/umijs/qiankun\n * https://github.com/ice-lab/icestark\n * https://github.com/efoxteam/emp\n * https://github.com/vercel/turborepo\n\n\n# webpack5 module federation\n\n * https://github.com/module-federation/module-federation-examples\n * https://github.com/shenfq/webpack5-module-federation-demo\n * https://github.com/yuzhanglong/mf-lite\n\n\n# 系列文章\n\n * https://github.com/a1029563229/micro-front-template\n * 微前端qiankun从搭建到部署的实践\n * fengxianqi/qiankun-example\n * qiankun 微前端实践及常见问题\n * 微前端 | 7. 微应用沙箱实现原理\n * 深入浅出解析阿里成熟的微前端框架 qiankun 源码\n\n\n# 初始化配置\n\n * jsconfig.json\n\n{\n    "include": [\n        "./src/**/*"\n    ],\n    "compileroptions": {\n        "target": "esnext",\n        "module": "esnext",\n        "moduleresolution":"node",\n        "allowsyntheticdefaultimports": true,\n        "experimentaldecorators": true,\n        "baseurl": ".",\n        "paths": {\n            "@/*": [\n                "src/*"\n            ]\n        },\n    },\n    "exclude": [\n        "node_modules","dist",\n        "bower_components", "jspm_packages"\n    ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n * tsconfig.json\n\n{\n  "include": [\n    "./src/**/*"\n  ],\n  "compileroptions": {\n      "target": "esnext",\n      "module": "esnext",\n      "strict": true,\n      "jsx": "preserve",\n      "importhelpers": true,\n      "moduleresolution": "node",\n      "experimentaldecorators": true,\n      "skiplibcheck": true,\n      "esmoduleinterop": true,\n      "allowsyntheticdefaultimports": true,\n      "allowjs": true,\n      "sourcemap": true,\n      "baseurl": ".",\n      "types": [\n          "webpack-env"\n      ],\n      "paths": {\n          "@/*": [\n              "src/*"\n          ]\n      },\n      "lib": [\n          "esnext",\n          "dom",\n          "dom.iterable",\n          "scripthost"\n      ]\n  },\n  "exclude": [\n      "node_modules"\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n * vue.config.js\n\nconst path = require("path");\nconst { name } = require("./package");\n\nfunction resolve(dir) {\n    return path.join(__dirname, dir);\n}\n\nconst port = 7101; // dev port\n\nmodule.exports = {\n    /**\n     * you will need to set publicpath if you plan to deploy your site under a sub path,\n     * for example github pages. if you plan to deploy your site to https://foo.github.io/bar/,\n     * then publicpath should be set to "/bar/".\n     * in most cases please use \'/\' !!!\n     * detail: https://cli.vuejs.org/config/#publicpath\n     */\n    outputdir: "dist",\n    assetsdir: "static",\n    filenamehashing: true,\n    // tweak internal webpack configuration.\n    // see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md\n    devserver: {\n        // host: \'0.0.0.0\',\n        hot: true,\n        disablehostcheck: true,\n        port,\n        overlay: {\n            warnings: false,\n            errors: true,\n        },\n        headers: {\n            "access-control-allow-origin": "*",\n        },\n    },\n    // 自定义webpack配置\n    configurewebpack: {\n        resolve: {\n            alias: {\n                "@": resolve("src"),\n            },\n            extensions: [".js", ".jsx", ".ts", ".tsx"],\n        },\n        entry: "./src/main.js",\n        output: {\n            // 把子应用打包成 umd 库格式\n            library: `${name}-[name]`,\n            librarytarget: "umd",\n            jsonpfunction: `webpackjsonp_${name}`,\n        },\n    },\n    css: {\n        requiremoduleextension: true,\n    },\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n * public-path.js\n\nif (window.__powered_by_qiankun__) {\n    // eslint-disable-next-line no-undef\n    __webpack_public_path__ = window.__injected_public_path_by_qiankun__;\n}\n\n\n1\n2\n3\n4\n\n * main.js\n\nimport "./public-path";\nimport vue from "vue";\n// import vuerouter from "vue-router";\nimport app from "./app.vue";\n\n// import router from "./router";\nimport createrouter from "./router";\nimport store from "./store";\n\nvue.config.productiontip = false;\n\nlet router = null;\nlet instance = null;\n\nfunction render(props = {}) {\n    const { container } = props;\n    router = createrouter();\n    instance = new vue({\n        router,\n        store,\n        render: (h) => h(app),\n    }).$mount(container ? container.queryselector("#app") : "#app");\n}\n\nif (!window.__powered_by_qiankun__) {\n    render();\n}\n\nfunction storetest(props) {\n    props.onglobalstatechange &&\n        props.onglobalstatechange(\n            (value, prev) =>\n                console.log(\n                    `[onglobalstatechange - ${props.name}]:`,\n                    value,\n                    prev\n                ),\n            true\n        );\n    props.setglobalstate &&\n        props.setglobalstate({\n            ignore: props.name,\n            user: {\n                name: props.name,\n            },\n        });\n}\n\nexport async function bootstrap() {\n    console.log("[vue] vue app bootstraped");\n}\n\nexport async function mount(props) {\n    console.log("[vue] props from main framework", props);\n    storetest(props);\n    render(props);\n}\n\nexport async function unmount() {\n    instance.$destroy();\n    instance.$el.innerhtml = "";\n    instance = null;\n    router = null;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n\n * vue-router\n\nimport vue from "vue";\nimport vuerouter from "vue-router";\nimport home from "../views/home.vue";\n\nvue.use(vuerouter);\n\nconst routes = [\n    {\n        path: "/",\n        name: "home",\n        component: home,\n    },\n    {\n        path: "/about",\n        name: "about",\n        // route level code-splitting\n        // this generates a separate chunk (about.[hash].js) for this route\n        // which is lazy-loaded when the route is visited.\n        component: () =>\n            import(/* webpackchunkname: "about" */ "../views/about.vue"),\n    },\n];\n\nconst router = () => {\n    return new vuerouter({\n        base: window.__powered_by_qiankun__ ? "/vue" : "/",\n        mode: "history",\n        routes,\n    });\n};\n\nexport default router;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647945545e3,createdTime:1643899953e3},{title:"设计模式/构造函数",frontmatter:{title:"设计模式/构造函数",date:"2021-06-20T00:00:00.000Z",sidebar:"auto",categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/oop.html",relativePath:"frontend/issues/oop.md",key:"v-1c46f5ab",path:"/frontend/issues/oop.html",headers:[{level:2,title:"工厂模式",slug:"工厂模式",normalizedTitle:"工厂模式",charIndex:2},{level:2,title:"构造函数模式",slug:"构造函数模式",normalizedTitle:"构造函数模式",charIndex:322},{level:2,title:"单例模式",slug:"单例模式",normalizedTitle:"单例模式",charIndex:586},{level:2,title:"适配器模式",slug:"适配器模式",normalizedTitle:"适配器模式",charIndex:1056},{level:2,title:"代理模式",slug:"代理模式",normalizedTitle:"代理模式",charIndex:1349},{level:2,title:"装饰者模式",slug:"装饰者模式",normalizedTitle:"装饰者模式",charIndex:1791},{level:2,title:"观察者模式",slug:"观察者模式",normalizedTitle:"观察者模式",charIndex:2289},{level:2,title:"发布订阅模式",slug:"发布订阅模式",normalizedTitle:"发布订阅模式",charIndex:4776},{level:2,title:"面向对象",slug:"面向对象",normalizedTitle:"面向对象",charIndex:5726},{level:2,title:"构造函数",slug:"构造函数",normalizedTitle:"构造函数",charIndex:322},{level:2,title:"原型链示意图",slug:"原型链示意图",normalizedTitle:"原型链示意图",charIndex:6053}],headersStr:"工厂模式 构造函数模式 单例模式 适配器模式 代理模式 装饰者模式 观察者模式 发布订阅模式 面向对象 构造函数 原型链示意图",content:'# 工厂模式\n\n原地址： JavaScript 设计模式 es6\n\nfunction Persion(name) {\n  var obj = {};\n  obj.name = name;\n  obj.say = function() {\n    console.log("Hello,", this.name);\n  };\n  return obj;\n}\n\nvar p1 = Persion("js");\np1.say(); // => Hello, js\n\nvar p2 = Persion("css");\np2.say(); // => Hello, css\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 构造函数模式\n\nfunction Persion(name, age) {\n  this.name = name;\n  this.age = age;\n  this.say = function() {\n    console.log("hello ", this.name);\n  };\n}\nvar p1 = new Persion("js", 12);\np1.say();\nvar p2 = new Persion("node", 16);\np2.say();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 单例模式\n\nclass User {\n  constructor(name) {\n    this.name = name;\n    this.getName();\n  }\n  getName() {\n    return this.name;\n  }\n}\n// 代理实现单例模式\nvar ProxyMode = (function() {\n  var instance = null;\n  return function(name) {\n    if (!instance) {\n      instance = new User(name);\n    }\n    return instance;\n  };\n})();\n\nvar a = new ProxyMode("aaa");\nvar b = new ProxyMode("bbb");\nconsole.log(a === b); // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 适配器模式\n\nclass Plug {\n  getName() {\n    return "html";\n  }\n}\n\nclass Target {\n  constructor() {\n    this.plug = new Plug();\n  }\n  getName() {\n    return this.plug.getName() + " css";\n  }\n}\n\nlet target = new Target();\ntarget.getName(); // html css\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 代理模式\n\nlet M = {\n  send: function(target, gif) {\n    target.receive(gif);\n  }\n};\nlet B = {\n  receive: function(gif) {\n    A.obs(function() {\n      A.receive(gif);\n    });\n  }\n};\nlet A = {\n  receive: function(gif) {\n    console.log("get " + gif);\n  },\n  obs: function(fn) {\n    setTimeout(function() {\n      fn();\n    }, 1000);\n  }\n};\n\nM.send(B, "flower"); // => get flower\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 装饰者模式\n\nclass Cellphone {\n  create() {\n    console.log("生成一个手机");\n  }\n}\nclass Decorator {\n  constructor(cellphone) {\n    this.cellphone = cellphone;\n  }\n  create() {\n    this.cellphone.create();\n    this.createShell();\n  }\n  createShell() {\n    console.log("生成手机壳");\n  }\n}\n\nlet cellphone = new Cellphone();\ncellphone.create(); // 生成一个手机\nconsole.log("------------");\nlet dec = new Decorator(cellphone);\ndec.create(); // 生成一个手机 生成手机壳\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 观察者模式\n\nclass Sub {\n  constructor() {\n    this.state = 0;\n    this.observers = [];\n  }\n  getState() {\n    return this.state;\n  }\n  setState(state) {\n    this.state = state;\n    this.notify();\n  }\n  notify() {\n    this.observers.forEach(observer => {\n      observer.update();\n    });\n  }\n  add(observer) {\n    this.observers.push(observer);\n  }\n}\n\nclass Observer {\n  constructor(name, subject) {\n    this.name = name;\n    this.subject = subject;\n    this.subject.add(this);\n  }\n  update() {\n    console.log(`${this.name} update, state: ${this.subject.getState()}`);\n  }\n}\n// add obs\nlet sub = new Sub();\nlet o1 = new Observer("o1", sub);\nlet o2 = new Observer("02", sub);\n// update state\nsub.setState(12);\n// => o1 update, state: 12\n// => 02 update, state: 12\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n * defineProperty\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <meta\n      name="viewport"\n      content="width=device-width,initial-scale=1,maximum-scale=1,viewport-fit=cover"\n    />\n    <title></title>\n  </head>\n  <body>\n    <div id="app">\n      <div id="dom-one"></div>\n      <br />\n      <div id="dom-two"></div>\n      <br />\n      <button id="btn">改变</button>\n    </div>\n    <script>\n      /**\n       * 观察监听一个对象成员的变化\n       * @param {Object} obj 观察的对象\n       * @param {String} targetVariable 观察的对象成员\n       * @param {Function} callback 目标变化触发的回调\n       */\n      function observer(obj, targetVariable, callback) {\n        if (!obj.data) {\n          obj.data = {}\n        }\n        Object.defineProperty(obj, targetVariable, {\n          get() {\n            return this.data[targetVariable]\n          },\n          set(val) {\n            this.data[targetVariable] = val\n            // 目标主动通知观察者\n            callback && callback(val)\n          },\n        })\n        if (obj.data[targetVariable]) {\n          callback && callback(obj.data[targetVariable])\n        }\n      }\n\n      const obj = {\n        data: { description: \'原始值\' },\n      }\n\n      observer(obj, \'description\', value => {\n        document.querySelector(\'#dom-one\').innerHTML = value\n        document.querySelector(\'#dom-two\').innerHTML = value\n      })\n\n      btn.onclick = () => {\n        obj.description = \'改变了\'\n      }\n    <\/script>\n  </body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\n\n\n# 发布订阅模式\n\n> 发布者 -> 事件中心 <=> 订阅者\n\nclass EventEmitter {\n    constructor() {\n        this.cache = {}\n    }\n    on(name, fn) {\n        if (this.cache[name]) {\n            this.cache[name].push(fn)\n        } else {\n            this.cache[name] = [fn]\n        }\n    }\n    off(name, fn) {\n        let tasks = this.cache[name]\n        if (tasks) {\n            const index = tasks.findIndex(f => f === fn || f.callback === fn)\n            if (index >= 0) {\n                tasks.splice(index, 1)\n            }\n        }\n    }\n    emit(name, once = false, ...args) {\n        if (this.cache[name]) {\n            // 创建副本，如果回调函数内继续注册相同事件，会造成死循环\n            let tasks = this.cache[name].slice()\n            for (let fn of tasks) {\n                fn(...args)\n            }\n            if (once) {\n                delete this.cache[name]\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 面向对象\n\n * 封装 继承 多态 作用：复用\n * 继承：就是修改对象中的原型链的层次结构\n\n\n# 构造函数\n\nfunction Func(uName) {\n  this.userName = uName;\n}\nFunc.prototype.showUserName = function() {\n  return this.userName;\n};\nvar obj1 = new Func("hello");\nvar obj2 = new Func("xiao ming");\nconsole.log(obj1.showUserName === obj2.showUserName); //true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 原型链示意图\n\n',normalizedContent:'# 工厂模式\n\n原地址： javascript 设计模式 es6\n\nfunction persion(name) {\n  var obj = {};\n  obj.name = name;\n  obj.say = function() {\n    console.log("hello,", this.name);\n  };\n  return obj;\n}\n\nvar p1 = persion("js");\np1.say(); // => hello, js\n\nvar p2 = persion("css");\np2.say(); // => hello, css\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 构造函数模式\n\nfunction persion(name, age) {\n  this.name = name;\n  this.age = age;\n  this.say = function() {\n    console.log("hello ", this.name);\n  };\n}\nvar p1 = new persion("js", 12);\np1.say();\nvar p2 = new persion("node", 16);\np2.say();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 单例模式\n\nclass user {\n  constructor(name) {\n    this.name = name;\n    this.getname();\n  }\n  getname() {\n    return this.name;\n  }\n}\n// 代理实现单例模式\nvar proxymode = (function() {\n  var instance = null;\n  return function(name) {\n    if (!instance) {\n      instance = new user(name);\n    }\n    return instance;\n  };\n})();\n\nvar a = new proxymode("aaa");\nvar b = new proxymode("bbb");\nconsole.log(a === b); // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 适配器模式\n\nclass plug {\n  getname() {\n    return "html";\n  }\n}\n\nclass target {\n  constructor() {\n    this.plug = new plug();\n  }\n  getname() {\n    return this.plug.getname() + " css";\n  }\n}\n\nlet target = new target();\ntarget.getname(); // html css\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 代理模式\n\nlet m = {\n  send: function(target, gif) {\n    target.receive(gif);\n  }\n};\nlet b = {\n  receive: function(gif) {\n    a.obs(function() {\n      a.receive(gif);\n    });\n  }\n};\nlet a = {\n  receive: function(gif) {\n    console.log("get " + gif);\n  },\n  obs: function(fn) {\n    settimeout(function() {\n      fn();\n    }, 1000);\n  }\n};\n\nm.send(b, "flower"); // => get flower\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 装饰者模式\n\nclass cellphone {\n  create() {\n    console.log("生成一个手机");\n  }\n}\nclass decorator {\n  constructor(cellphone) {\n    this.cellphone = cellphone;\n  }\n  create() {\n    this.cellphone.create();\n    this.createshell();\n  }\n  createshell() {\n    console.log("生成手机壳");\n  }\n}\n\nlet cellphone = new cellphone();\ncellphone.create(); // 生成一个手机\nconsole.log("------------");\nlet dec = new decorator(cellphone);\ndec.create(); // 生成一个手机 生成手机壳\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 观察者模式\n\nclass sub {\n  constructor() {\n    this.state = 0;\n    this.observers = [];\n  }\n  getstate() {\n    return this.state;\n  }\n  setstate(state) {\n    this.state = state;\n    this.notify();\n  }\n  notify() {\n    this.observers.foreach(observer => {\n      observer.update();\n    });\n  }\n  add(observer) {\n    this.observers.push(observer);\n  }\n}\n\nclass observer {\n  constructor(name, subject) {\n    this.name = name;\n    this.subject = subject;\n    this.subject.add(this);\n  }\n  update() {\n    console.log(`${this.name} update, state: ${this.subject.getstate()}`);\n  }\n}\n// add obs\nlet sub = new sub();\nlet o1 = new observer("o1", sub);\nlet o2 = new observer("02", sub);\n// update state\nsub.setstate(12);\n// => o1 update, state: 12\n// => 02 update, state: 12\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n * defineproperty\n\n<!doctype html>\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <meta\n      name="viewport"\n      content="width=device-width,initial-scale=1,maximum-scale=1,viewport-fit=cover"\n    />\n    <title></title>\n  </head>\n  <body>\n    <div id="app">\n      <div id="dom-one"></div>\n      <br />\n      <div id="dom-two"></div>\n      <br />\n      <button id="btn">改变</button>\n    </div>\n    <script>\n      /**\n       * 观察监听一个对象成员的变化\n       * @param {object} obj 观察的对象\n       * @param {string} targetvariable 观察的对象成员\n       * @param {function} callback 目标变化触发的回调\n       */\n      function observer(obj, targetvariable, callback) {\n        if (!obj.data) {\n          obj.data = {}\n        }\n        object.defineproperty(obj, targetvariable, {\n          get() {\n            return this.data[targetvariable]\n          },\n          set(val) {\n            this.data[targetvariable] = val\n            // 目标主动通知观察者\n            callback && callback(val)\n          },\n        })\n        if (obj.data[targetvariable]) {\n          callback && callback(obj.data[targetvariable])\n        }\n      }\n\n      const obj = {\n        data: { description: \'原始值\' },\n      }\n\n      observer(obj, \'description\', value => {\n        document.queryselector(\'#dom-one\').innerhtml = value\n        document.queryselector(\'#dom-two\').innerhtml = value\n      })\n\n      btn.onclick = () => {\n        obj.description = \'改变了\'\n      }\n    <\/script>\n  </body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\n\n\n# 发布订阅模式\n\n> 发布者 -> 事件中心 <=> 订阅者\n\nclass eventemitter {\n    constructor() {\n        this.cache = {}\n    }\n    on(name, fn) {\n        if (this.cache[name]) {\n            this.cache[name].push(fn)\n        } else {\n            this.cache[name] = [fn]\n        }\n    }\n    off(name, fn) {\n        let tasks = this.cache[name]\n        if (tasks) {\n            const index = tasks.findindex(f => f === fn || f.callback === fn)\n            if (index >= 0) {\n                tasks.splice(index, 1)\n            }\n        }\n    }\n    emit(name, once = false, ...args) {\n        if (this.cache[name]) {\n            // 创建副本，如果回调函数内继续注册相同事件，会造成死循环\n            let tasks = this.cache[name].slice()\n            for (let fn of tasks) {\n                fn(...args)\n            }\n            if (once) {\n                delete this.cache[name]\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 面向对象\n\n * 封装 继承 多态 作用：复用\n * 继承：就是修改对象中的原型链的层次结构\n\n\n# 构造函数\n\nfunction func(uname) {\n  this.username = uname;\n}\nfunc.prototype.showusername = function() {\n  return this.username;\n};\nvar obj1 = new func("hello");\nvar obj2 = new func("xiao ming");\nconsole.log(obj1.showusername === obj2.showusername); //true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 原型链示意图\n\n',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647925342e3,createdTime:1645441798e3},{title:"实现Promise",frontmatter:{title:"实现Promise",date:"2022-01-19T00:00:00.000Z",sidebar:"auto",tags:["promise"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/promise.html",relativePath:"frontend/issues/promise.md",key:"v-29559f8b",path:"/frontend/issues/promise.html",headers:[{level:2,title:"Promise",slug:"promise",normalizedTitle:"promise",charIndex:2},{level:2,title:"promise完整版",slug:"promise完整版",normalizedTitle:"promise完整版",charIndex:2364},{level:2,title:"Promise.resolve",slug:"promise-resolve",normalizedTitle:"promise.resolve",charIndex:12536},{level:2,title:"Promise.reject",slug:"promise-reject",normalizedTitle:"promise.reject",charIndex:12749},{level:2,title:"Promise.all",slug:"promise-all",normalizedTitle:"promise.all",charIndex:12876},{level:2,title:"Promise.race",slug:"promise-race",normalizedTitle:"promise.race",charIndex:13381},{level:2,title:"Promise.allSettled",slug:"promise-allsettled",normalizedTitle:"promise.allsettled",charIndex:13705},{level:2,title:"Promise.any",slug:"promise-any",normalizedTitle:"promise.any",charIndex:14520},{level:2,title:"Promise.prototype.finally",slug:"promise-prototype-finally",normalizedTitle:"promise.prototype.finally",charIndex:15068},{level:2,title:"Promise.retry",slug:"promise-retry",normalizedTitle:"promise.retry",charIndex:15412},{level:2,title:"参考文档",slug:"参考文档",normalizedTitle:"参考文档",charIndex:16014}],headersStr:"Promise promise完整版 Promise.resolve Promise.reject Promise.all Promise.race Promise.allSettled Promise.any Promise.prototype.finally Promise.retry 参考文档",content:'# Promise\n\n * 简化版\n\nconst PENDING = "pending";\nconst FULFILLED = \'fulfilled\';\nconst REJECTED = "rejected";\nfunction myPromise(executor) {\n  let self = this;\n\n  self.status = PENDING; //定义状态改变前的初始状态\n  self.value = undefined; //定义状态为fulfilled的时候的状态\n  self.reason = undefined; //定义状态为rejected的时候的状态\n\n  self.resolveCb = [];\n  self.rejectCb = [];\n\n  function resolve(value) {\n    // 判断传入元素是否为Promise值，如果是，则状态改变必须等待前一个状态改变后再进行改变\n    if (value instanceof myPromise) {\n      return value.then(resolve, reject);\n    }\n    // 保证代码的执行顺序为本轮事件循环的末尾\n    setTimeout(() => {\n      // 只有状态为 pending 时才能转变，\n      if (self.status === PENDING) {\n        // 修改状态\n        self.status = FULFILLED;\n        // 设置传入的值\n        self.value = value;\n        // 执行回调函数\n        self.resolveCb.forEach(callback => {\n          callback(value);\n        });\n      }\n    }, 0);\n  }\n\n  function reject(reason) {\n    // 保证代码的执行顺序为本轮事件循环的末尾\n    setTimeout(() => {\n      // 只有状态为 pending 时才能转变\n      if (self.status === PENDING) {\n        // 修改状态\n        self.status = REJECTED;\n        // 设置传入的值\n        self.value = reason;\n        // 执行回调函数\n        self.rejectCb.forEach(callback => {\n          callback(reason);\n        });\n      }\n    }, 0);\n  }\n\n  //捕获构造异常\n  try {\n    executor(resolve, reject);\n  } catch (e) {\n    reject(e);\n  }\n}\n\nmyPromise.prototype.then = function(onResolved, onRejected) {\n  const self = this;\n  // 首先判断两个参数是否为函数类型，因为这两个参数是可选参数\n  onResolved = typeof onResolved === "function"\n    ? onResolved : function(value) { return value};\n\n  onRejected =typeof onRejected === "function"\n    ? onRejected  : function(error) {  throw error };\n\n  // 判断当前状态是否为fulfilled\n  if (self.status == FULFILLED ) {\n    onResolved(self.value);\n  }\n\n  // 判断当前状态是否为rejected\n  if (self.status == REJECTED ) {\n    onRejected(self.reason);\n  }\n\n  // 判断当前状态是否为pending\n  if (self.status == PENDING ) {\n    self.resolveCb.push(() => onResolved(self.value));\n    self.rejectCb.push(() => onRejected(self.reason));\n  }\n};\n// demo\nvar p = new myPromise(function(resolve, reject) {\n  resolve(1);\n});\np.then(function(x) {\n  console.log(x);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n\n\n\n# promise完整版\n\n> 原文：36 个 JS 手写题\n\n * ES5实现\n\nconst PENDING = \'pending\';\nconst FULFILLED = \'fulfilled\';\nconst REJECTED = \'rejected\';\n\nconst resolvePromise = (promise2, x, resolve, reject) => {\n  // 自己等待自己完成是错误的实现，用一个类型错误，结束掉 promise  Promise/A+ 2.3.1\n  if (promise2 === x) {\n    return reject(\n      new TypeError("Chaining cycle detected for promise #<Promise>"));\n  }\n  // Promise/A+ 2.3.3.3.3 只能调用一次\n  let called;\n  // 后续的条件要严格判断 保证代码能和别的库一起使用\n  if ((typeof x === "object" && x != null) || typeof x === "function") {\n    try {\n      // 为了判断 resolve 过的就不用再 reject 了（比如 reject 和 resolve 同时调用的时候）  Promise/A+ 2.3.3.1\n      let then = x.then;\n      if (typeof then === "function") {\n        // 不要写成 x.then，直接 then.call 就可以了 因为 x.then 会再次取值，Object.defineProperty  Promise/A+ 2.3.3.3\n        then.call(\n          x, (y) => {\n            // 根据 promise 的状态决定是成功还是失败\n            if (called) return;\n            called = true;\n            // 递归解析的过程（因为可能 promise 中还有 promise） Promise/A+ 2.3.3.3.1\n            resolvePromise(promise2, y, resolve, reject);\n          }, (r) => {\n            // 只要失败就失败 Promise/A+ 2.3.3.3.2\n            if (called) return;\n            called = true;\n            reject(r);\n          });\n      } else {\n        // 如果 x.then 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.3.4\n        resolve(x);\n      }\n    } catch (e) {\n      // Promise/A+ 2.3.3.2\n      if (called) return;\n      called = true;\n      reject(e);\n    }\n  } else {\n    // 如果 x 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.4\n    resolve(x);\n  }\n};\n\nfunction myPromise(executor) {\n  this.status = PENDING;\n  this.value = undefined;\n  this.reason = undefined;\n  this.onResolvedCallbacks = [];\n  this.onRejectedCallbacks = [];\n\n  let resolve = (value) => {\n    if (this.status === PENDING) {\n      this.status = FULFILLED;\n      this.value = value;\n      this.onResolvedCallbacks.forEach((fn) => fn());\n    }\n  };\n\n  let reject = (reason) => {\n    if (this.status === PENDING) {\n      this.status = REJECTED;\n      this.reason = reason;\n      this.onRejectedCallbacks.forEach((fn) => fn());\n    }\n  };\n\n  try {\n    executor(resolve, reject);\n  } catch (error) {\n    reject(error);\n  }\n}\n\nmyPromise.prototype.then = function(onFulfilled, onRejected) {\n  // 解决 onFufilled，onRejected 没有传值的问题\n  onFulfilled = typeof onFulfilled === "function" ? onFulfilled : (v) => v;\n  // 因为错误的值要让后面访问到，所以这里也要抛出错误，不然会在之后 then 的 resolve 中捕获\n  onRejected = typeof onRejected === "function" ? onRejected : (err) => {\n    throw err;\n  };\n  // 每次调用 then 都返回一个新的 promise\n  let promise2 = new myPromise((resolve, reject) => {\n    if (this.status === FULFILLED) {\n      //Promise/A+ 2.2.4 --- setTimeout\n      setTimeout(() => {\n        try {\n          let x = onFulfilled(this.value);\n          // x可能是一个proimise\n          resolvePromise(promise2, x, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      }, 0);\n    }\n\n    if (this.status === REJECTED) {\n      //Promise/A+ 2.2.3\n      setTimeout(() => {\n        try {\n          let x = onRejected(this.reason);\n          resolvePromise(promise2, x, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      }, 0);\n    }\n\n    if (this.status === PENDING) {\n      this.onResolvedCallbacks.push(() => {\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      });\n\n      this.onRejectedCallbacks.push(() => {\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      });\n    }\n  });\n  return promise2;\n}\n\nmyPromise.prototype.catch = function(onRejected) {\n  return this.then(null, onRejected)\n}\n\nmyPromise.defer = myPromise.deferred = function() {\n  let dfd = {}\n  dfd.promise = new myPromise((resolve, reject) => {\n    dfd.resolve = resolve;\n    dfd.reject = reject;\n  });\n  return dfd;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n\nSee More\n * ES6实现Promise\n\nconst PENDING = \'pending\';\nconst FULFILLED = \'fulfilled\';\nconst REJECTED = \'rejected\';\n\nclass Promise {\n    constructor(executor) {\n        this.status = PENDING;\n        this.value = undefined;\n        this.reason = undefined;\n        this.onResolvedCallbacks = [];\n        this.onRejectedCallbacks = [];\n\n        let resolve = (value) => {\n            if (this.status === PENDING) {\n                this.status = FULFILLED;\n                this.value = value;\n                this.onResolvedCallbacks.forEach((fn) => fn());\n            }\n        };\n\n        let reject = (reason) => {\n            if (this.status === PENDING) {\n                this.status = REJECTED;\n                this.reason = reason;\n                this.onRejectedCallbacks.forEach((fn) => fn());\n            }\n        };\n\n        try {\n            executor(resolve, reject);\n        } catch (error) {\n            reject(error);\n        }\n    }\n\n    then(onFulfilled, onRejected) {\n        // 解决 onFufilled，onRejected 没有传值的问题\n        onFulfilled = typeof onFulfilled === "function" ? onFulfilled : (v) => v;\n        // 因为错误的值要让后面访问到，所以这里也要抛出错误，不然会在之后 then 的 resolve 中捕获\n        onRejected = typeof onRejected === "function" ? onRejected : (err) => {\n            throw err;\n        };\n        // 每次调用 then 都返回一个新的 promise\n        let promise2 = new Promise((resolve, reject) => {\n            if (this.status === FULFILLED) {\n                //Promise/A+ 2.2.4 --- setTimeout\n                setTimeout(() => {\n                    try {\n                        let x = onFulfilled(this.value);\n                        // x可能是一个proimise\n                        resolvePromise(promise2, x, resolve, reject);\n                    } catch (e) {\n                        reject(e);\n                    }\n                }, 0);\n            }\n\n            if (this.status === REJECTED) {\n                //Promise/A+ 2.2.3\n                setTimeout(() => {\n                    try {\n                        let x = onRejected(this.reason);\n                        resolvePromise(promise2, x, resolve, reject);\n                    } catch (e) {\n                        reject(e);\n                    }\n                }, 0);\n            }\n\n            if (this.status === PENDING) {\n                this.onResolvedCallbacks.push(() => {\n                    setTimeout(() => {\n                        try {\n                            let x = onFulfilled(this.value);\n                            resolvePromise(promise2, x, resolve, reject);\n                        } catch (e) {\n                            reject(e);\n                        }\n                    }, 0);\n                });\n\n                this.onRejectedCallbacks.push(() => {\n                    setTimeout(() => {\n                        try {\n                            let x = onRejected(this.reason);\n                            resolvePromise(promise2, x, resolve, reject);\n                        } catch (e) {\n                            reject(e);\n                        }\n                    }, 0);\n                });\n            }\n        });\n        return promise2;\n    }\n\n    catch(onReject){\n      return this.then(null, onReject)\n    }\n}\n\nconst resolvePromise = (promise2, x, resolve, reject) => {\n    // 自己等待自己完成是错误的实现，用一个类型错误，结束掉 promise  Promise/A+ 2.3.1\n    if (promise2 === x) {\n        return reject(\n            new TypeError("Chaining cycle detected for promise #<Promise>"));\n    }\n    // Promise/A+ 2.3.3.3.3 只能调用一次\n    let called;\n    // 后续的条件要严格判断 保证代码能和别的库一起使用\n    if ((typeof x === "object" && x != null) || typeof x === "function") {\n        try {\n            // 为了判断 resolve 过的就不用再 reject 了（比如 reject 和 resolve 同时调用的时候）  Promise/A+ 2.3.3.1\n            let then = x.then;\n            if (typeof then === "function") {\n            // 不要写成 x.then，直接 then.call 就可以了 因为 x.then 会再次取值，Object.defineProperty  Promise/A+ 2.3.3.3\n                then.call(\n                    x, (y) => {\n                        // 根据 promise 的状态决定是成功还是失败\n                        if (called) return;\n                        called = true;\n                        // 递归解析的过程（因为可能 promise 中还有 promise） Promise/A+ 2.3.3.3.1\n                        resolvePromise(promise2, y, resolve, reject);\n                    }, (r) => {\n                        // 只要失败就失败 Promise/A+ 2.3.3.3.2\n                        if (called) return;\n                        called = true;\n                        reject(r);\n                    });\n            } else {\n                // 如果 x.then 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.3.4\n                resolve(x);\n            }\n        } catch (e) {\n            // Promise/A+ 2.3.3.2\n            if (called) return;\n            called = true;\n            reject(e);\n        }\n    } else {\n        // 如果 x 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.4\n        resolve(x);\n    }\n};\n\nPromise.defer = Promise.deferred = function () {\n    let dfd = {}\n    dfd.promise = new Promise((resolve,reject)=>{\n        dfd.resolve = resolve;\n        dfd.reject = reject;\n    });\n    return dfd;\n}\nmodule.exports = Promise;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n\n\n\n# Promise.resolve\n\nPromise.resolve = function(value) {\n    // 如果是 Promsie，则直接输出它\n    if(value instanceof Promise){\n        return value\n    }\n    return new Promise(resolve => resolve(value))\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# Promise.reject\n\nPromise.reject = function(reason) {\n    return new Promise((resolve, reject) => reject(reason))\n}\n\n\n1\n2\n3\n\n\n\n# Promise.all\n\nPromise.all = function(promiseArr) {\n    let index = 0, result = []\n    return new Promise((resolve, reject) => {\n        promiseArr.forEach((p, i) => {\n            Promise.resolve(p).then(val => {\n                index++\n                result[i] = val\n                if (index === promiseArr.length) {\n                    resolve(result)\n                }\n            }, err => {\n                reject(err)\n            })\n        })\n    })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# Promise.race\n\nPromise.race = function(promiseArr) {\n    return new Promise((resolve, reject) => {\n        promiseArr.forEach(p => {\n            Promise.resolve(p).then(val => {\n                resolve(val)\n            }, err => {\n                reject(err)\n            })\n        })\n    })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Promise.allSettled\n\nPromise.allSettled = function(promiseArr) {\n    let result = []\n\n    return new Promise((resolve, reject) => {\n        promiseArr.forEach((p, i) => {\n            Promise.resolve(p).then(val => {\n                result.push({\n                    status: \'fulfilled\',\n                    value: val\n                })\n                if (result.length === promiseArr.length) {\n                    resolve(result)\n                }\n            }, err => {\n                result.push({\n                    status: \'rejected\',\n                    reason: err\n                })\n                if (result.length === promiseArr.length) {\n                    resolve(result)\n                }\n            })\n        })\n    })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# Promise.any\n\nPromise.any = function(promiseArr) {\n    let index = 0\n    return new Promise((resolve, reject) => {\n        if (promiseArr.length === 0) return\n        promiseArr.forEach((p, i) => {\n            Promise.resolve(p).then(val => {\n                resolve(val)\n\n            }, err => {\n                index++\n                if (index === promiseArr.length) {\n                  reject(new AggregateError(\'All promises were rejected\'))\n                }\n            })\n        })\n    })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# Promise.prototype.finally\n\n> https://es6.ruanyifeng.com/#docs/promise#Promise-prototype-finally\n\nPromise.prototype.finally = function (callback) {\n  let P = this.constructor;\n  return this.then(\n    value  => P.resolve(callback()).then(() => value),\n    reason => P.resolve(callback()).then(() => { throw reason })\n  );\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# Promise.retry\n\n/*\n* @param {function} fn - 方法名\n* @param {number} delay - 延迟的时间\n* @param {number} times - 重发的次数\n*/\nfunction retry(fn, delay, times) {\n  return new Promise((resolve, reject) => {\n    function func() {\n      Promise.resolve(fn()).then(res => {\n          resolve(res);\n        })\n        .catch(err => {\n          // 接口失败后，判断剩余次数不为0时，继续重发\n          if (times !== 0) {\n            setTimeout(func, delay);\n            times--;\n          } else {\n            reject(err);\n          }\n        });\n    }\n    func();\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 参考文档\n\n * 原文：从零一步一步实现一个完整版的 Promise',normalizedContent:'# promise\n\n * 简化版\n\nconst pending = "pending";\nconst fulfilled = \'fulfilled\';\nconst rejected = "rejected";\nfunction mypromise(executor) {\n  let self = this;\n\n  self.status = pending; //定义状态改变前的初始状态\n  self.value = undefined; //定义状态为fulfilled的时候的状态\n  self.reason = undefined; //定义状态为rejected的时候的状态\n\n  self.resolvecb = [];\n  self.rejectcb = [];\n\n  function resolve(value) {\n    // 判断传入元素是否为promise值，如果是，则状态改变必须等待前一个状态改变后再进行改变\n    if (value instanceof mypromise) {\n      return value.then(resolve, reject);\n    }\n    // 保证代码的执行顺序为本轮事件循环的末尾\n    settimeout(() => {\n      // 只有状态为 pending 时才能转变，\n      if (self.status === pending) {\n        // 修改状态\n        self.status = fulfilled;\n        // 设置传入的值\n        self.value = value;\n        // 执行回调函数\n        self.resolvecb.foreach(callback => {\n          callback(value);\n        });\n      }\n    }, 0);\n  }\n\n  function reject(reason) {\n    // 保证代码的执行顺序为本轮事件循环的末尾\n    settimeout(() => {\n      // 只有状态为 pending 时才能转变\n      if (self.status === pending) {\n        // 修改状态\n        self.status = rejected;\n        // 设置传入的值\n        self.value = reason;\n        // 执行回调函数\n        self.rejectcb.foreach(callback => {\n          callback(reason);\n        });\n      }\n    }, 0);\n  }\n\n  //捕获构造异常\n  try {\n    executor(resolve, reject);\n  } catch (e) {\n    reject(e);\n  }\n}\n\nmypromise.prototype.then = function(onresolved, onrejected) {\n  const self = this;\n  // 首先判断两个参数是否为函数类型，因为这两个参数是可选参数\n  onresolved = typeof onresolved === "function"\n    ? onresolved : function(value) { return value};\n\n  onrejected =typeof onrejected === "function"\n    ? onrejected  : function(error) {  throw error };\n\n  // 判断当前状态是否为fulfilled\n  if (self.status == fulfilled ) {\n    onresolved(self.value);\n  }\n\n  // 判断当前状态是否为rejected\n  if (self.status == rejected ) {\n    onrejected(self.reason);\n  }\n\n  // 判断当前状态是否为pending\n  if (self.status == pending ) {\n    self.resolvecb.push(() => onresolved(self.value));\n    self.rejectcb.push(() => onrejected(self.reason));\n  }\n};\n// demo\nvar p = new mypromise(function(resolve, reject) {\n  resolve(1);\n});\np.then(function(x) {\n  console.log(x);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n\n\n\n# promise完整版\n\n> 原文：36 个 js 手写题\n\n * es5实现\n\nconst pending = \'pending\';\nconst fulfilled = \'fulfilled\';\nconst rejected = \'rejected\';\n\nconst resolvepromise = (promise2, x, resolve, reject) => {\n  // 自己等待自己完成是错误的实现，用一个类型错误，结束掉 promise  promise/a+ 2.3.1\n  if (promise2 === x) {\n    return reject(\n      new typeerror("chaining cycle detected for promise #<promise>"));\n  }\n  // promise/a+ 2.3.3.3.3 只能调用一次\n  let called;\n  // 后续的条件要严格判断 保证代码能和别的库一起使用\n  if ((typeof x === "object" && x != null) || typeof x === "function") {\n    try {\n      // 为了判断 resolve 过的就不用再 reject 了（比如 reject 和 resolve 同时调用的时候）  promise/a+ 2.3.3.1\n      let then = x.then;\n      if (typeof then === "function") {\n        // 不要写成 x.then，直接 then.call 就可以了 因为 x.then 会再次取值，object.defineproperty  promise/a+ 2.3.3.3\n        then.call(\n          x, (y) => {\n            // 根据 promise 的状态决定是成功还是失败\n            if (called) return;\n            called = true;\n            // 递归解析的过程（因为可能 promise 中还有 promise） promise/a+ 2.3.3.3.1\n            resolvepromise(promise2, y, resolve, reject);\n          }, (r) => {\n            // 只要失败就失败 promise/a+ 2.3.3.3.2\n            if (called) return;\n            called = true;\n            reject(r);\n          });\n      } else {\n        // 如果 x.then 是个普通值就直接返回 resolve 作为结果  promise/a+ 2.3.3.4\n        resolve(x);\n      }\n    } catch (e) {\n      // promise/a+ 2.3.3.2\n      if (called) return;\n      called = true;\n      reject(e);\n    }\n  } else {\n    // 如果 x 是个普通值就直接返回 resolve 作为结果  promise/a+ 2.3.4\n    resolve(x);\n  }\n};\n\nfunction mypromise(executor) {\n  this.status = pending;\n  this.value = undefined;\n  this.reason = undefined;\n  this.onresolvedcallbacks = [];\n  this.onrejectedcallbacks = [];\n\n  let resolve = (value) => {\n    if (this.status === pending) {\n      this.status = fulfilled;\n      this.value = value;\n      this.onresolvedcallbacks.foreach((fn) => fn());\n    }\n  };\n\n  let reject = (reason) => {\n    if (this.status === pending) {\n      this.status = rejected;\n      this.reason = reason;\n      this.onrejectedcallbacks.foreach((fn) => fn());\n    }\n  };\n\n  try {\n    executor(resolve, reject);\n  } catch (error) {\n    reject(error);\n  }\n}\n\nmypromise.prototype.then = function(onfulfilled, onrejected) {\n  // 解决 onfufilled，onrejected 没有传值的问题\n  onfulfilled = typeof onfulfilled === "function" ? onfulfilled : (v) => v;\n  // 因为错误的值要让后面访问到，所以这里也要抛出错误，不然会在之后 then 的 resolve 中捕获\n  onrejected = typeof onrejected === "function" ? onrejected : (err) => {\n    throw err;\n  };\n  // 每次调用 then 都返回一个新的 promise\n  let promise2 = new mypromise((resolve, reject) => {\n    if (this.status === fulfilled) {\n      //promise/a+ 2.2.4 --- settimeout\n      settimeout(() => {\n        try {\n          let x = onfulfilled(this.value);\n          // x可能是一个proimise\n          resolvepromise(promise2, x, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      }, 0);\n    }\n\n    if (this.status === rejected) {\n      //promise/a+ 2.2.3\n      settimeout(() => {\n        try {\n          let x = onrejected(this.reason);\n          resolvepromise(promise2, x, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      }, 0);\n    }\n\n    if (this.status === pending) {\n      this.onresolvedcallbacks.push(() => {\n        settimeout(() => {\n          try {\n            let x = onfulfilled(this.value);\n            resolvepromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      });\n\n      this.onrejectedcallbacks.push(() => {\n        settimeout(() => {\n          try {\n            let x = onrejected(this.reason);\n            resolvepromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      });\n    }\n  });\n  return promise2;\n}\n\nmypromise.prototype.catch = function(onrejected) {\n  return this.then(null, onrejected)\n}\n\nmypromise.defer = mypromise.deferred = function() {\n  let dfd = {}\n  dfd.promise = new mypromise((resolve, reject) => {\n    dfd.resolve = resolve;\n    dfd.reject = reject;\n  });\n  return dfd;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n\nsee more\n * es6实现promise\n\nconst pending = \'pending\';\nconst fulfilled = \'fulfilled\';\nconst rejected = \'rejected\';\n\nclass promise {\n    constructor(executor) {\n        this.status = pending;\n        this.value = undefined;\n        this.reason = undefined;\n        this.onresolvedcallbacks = [];\n        this.onrejectedcallbacks = [];\n\n        let resolve = (value) => {\n            if (this.status === pending) {\n                this.status = fulfilled;\n                this.value = value;\n                this.onresolvedcallbacks.foreach((fn) => fn());\n            }\n        };\n\n        let reject = (reason) => {\n            if (this.status === pending) {\n                this.status = rejected;\n                this.reason = reason;\n                this.onrejectedcallbacks.foreach((fn) => fn());\n            }\n        };\n\n        try {\n            executor(resolve, reject);\n        } catch (error) {\n            reject(error);\n        }\n    }\n\n    then(onfulfilled, onrejected) {\n        // 解决 onfufilled，onrejected 没有传值的问题\n        onfulfilled = typeof onfulfilled === "function" ? onfulfilled : (v) => v;\n        // 因为错误的值要让后面访问到，所以这里也要抛出错误，不然会在之后 then 的 resolve 中捕获\n        onrejected = typeof onrejected === "function" ? onrejected : (err) => {\n            throw err;\n        };\n        // 每次调用 then 都返回一个新的 promise\n        let promise2 = new promise((resolve, reject) => {\n            if (this.status === fulfilled) {\n                //promise/a+ 2.2.4 --- settimeout\n                settimeout(() => {\n                    try {\n                        let x = onfulfilled(this.value);\n                        // x可能是一个proimise\n                        resolvepromise(promise2, x, resolve, reject);\n                    } catch (e) {\n                        reject(e);\n                    }\n                }, 0);\n            }\n\n            if (this.status === rejected) {\n                //promise/a+ 2.2.3\n                settimeout(() => {\n                    try {\n                        let x = onrejected(this.reason);\n                        resolvepromise(promise2, x, resolve, reject);\n                    } catch (e) {\n                        reject(e);\n                    }\n                }, 0);\n            }\n\n            if (this.status === pending) {\n                this.onresolvedcallbacks.push(() => {\n                    settimeout(() => {\n                        try {\n                            let x = onfulfilled(this.value);\n                            resolvepromise(promise2, x, resolve, reject);\n                        } catch (e) {\n                            reject(e);\n                        }\n                    }, 0);\n                });\n\n                this.onrejectedcallbacks.push(() => {\n                    settimeout(() => {\n                        try {\n                            let x = onrejected(this.reason);\n                            resolvepromise(promise2, x, resolve, reject);\n                        } catch (e) {\n                            reject(e);\n                        }\n                    }, 0);\n                });\n            }\n        });\n        return promise2;\n    }\n\n    catch(onreject){\n      return this.then(null, onreject)\n    }\n}\n\nconst resolvepromise = (promise2, x, resolve, reject) => {\n    // 自己等待自己完成是错误的实现，用一个类型错误，结束掉 promise  promise/a+ 2.3.1\n    if (promise2 === x) {\n        return reject(\n            new typeerror("chaining cycle detected for promise #<promise>"));\n    }\n    // promise/a+ 2.3.3.3.3 只能调用一次\n    let called;\n    // 后续的条件要严格判断 保证代码能和别的库一起使用\n    if ((typeof x === "object" && x != null) || typeof x === "function") {\n        try {\n            // 为了判断 resolve 过的就不用再 reject 了（比如 reject 和 resolve 同时调用的时候）  promise/a+ 2.3.3.1\n            let then = x.then;\n            if (typeof then === "function") {\n            // 不要写成 x.then，直接 then.call 就可以了 因为 x.then 会再次取值，object.defineproperty  promise/a+ 2.3.3.3\n                then.call(\n                    x, (y) => {\n                        // 根据 promise 的状态决定是成功还是失败\n                        if (called) return;\n                        called = true;\n                        // 递归解析的过程（因为可能 promise 中还有 promise） promise/a+ 2.3.3.3.1\n                        resolvepromise(promise2, y, resolve, reject);\n                    }, (r) => {\n                        // 只要失败就失败 promise/a+ 2.3.3.3.2\n                        if (called) return;\n                        called = true;\n                        reject(r);\n                    });\n            } else {\n                // 如果 x.then 是个普通值就直接返回 resolve 作为结果  promise/a+ 2.3.3.4\n                resolve(x);\n            }\n        } catch (e) {\n            // promise/a+ 2.3.3.2\n            if (called) return;\n            called = true;\n            reject(e);\n        }\n    } else {\n        // 如果 x 是个普通值就直接返回 resolve 作为结果  promise/a+ 2.3.4\n        resolve(x);\n    }\n};\n\npromise.defer = promise.deferred = function () {\n    let dfd = {}\n    dfd.promise = new promise((resolve,reject)=>{\n        dfd.resolve = resolve;\n        dfd.reject = reject;\n    });\n    return dfd;\n}\nmodule.exports = promise;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n\n\n\n# promise.resolve\n\npromise.resolve = function(value) {\n    // 如果是 promsie，则直接输出它\n    if(value instanceof promise){\n        return value\n    }\n    return new promise(resolve => resolve(value))\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# promise.reject\n\npromise.reject = function(reason) {\n    return new promise((resolve, reject) => reject(reason))\n}\n\n\n1\n2\n3\n\n\n\n# promise.all\n\npromise.all = function(promisearr) {\n    let index = 0, result = []\n    return new promise((resolve, reject) => {\n        promisearr.foreach((p, i) => {\n            promise.resolve(p).then(val => {\n                index++\n                result[i] = val\n                if (index === promisearr.length) {\n                    resolve(result)\n                }\n            }, err => {\n                reject(err)\n            })\n        })\n    })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# promise.race\n\npromise.race = function(promisearr) {\n    return new promise((resolve, reject) => {\n        promisearr.foreach(p => {\n            promise.resolve(p).then(val => {\n                resolve(val)\n            }, err => {\n                reject(err)\n            })\n        })\n    })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# promise.allsettled\n\npromise.allsettled = function(promisearr) {\n    let result = []\n\n    return new promise((resolve, reject) => {\n        promisearr.foreach((p, i) => {\n            promise.resolve(p).then(val => {\n                result.push({\n                    status: \'fulfilled\',\n                    value: val\n                })\n                if (result.length === promisearr.length) {\n                    resolve(result)\n                }\n            }, err => {\n                result.push({\n                    status: \'rejected\',\n                    reason: err\n                })\n                if (result.length === promisearr.length) {\n                    resolve(result)\n                }\n            })\n        })\n    })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# promise.any\n\npromise.any = function(promisearr) {\n    let index = 0\n    return new promise((resolve, reject) => {\n        if (promisearr.length === 0) return\n        promisearr.foreach((p, i) => {\n            promise.resolve(p).then(val => {\n                resolve(val)\n\n            }, err => {\n                index++\n                if (index === promisearr.length) {\n                  reject(new aggregateerror(\'all promises were rejected\'))\n                }\n            })\n        })\n    })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# promise.prototype.finally\n\n> https://es6.ruanyifeng.com/#docs/promise#promise-prototype-finally\n\npromise.prototype.finally = function (callback) {\n  let p = this.constructor;\n  return this.then(\n    value  => p.resolve(callback()).then(() => value),\n    reason => p.resolve(callback()).then(() => { throw reason })\n  );\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# promise.retry\n\n/*\n* @param {function} fn - 方法名\n* @param {number} delay - 延迟的时间\n* @param {number} times - 重发的次数\n*/\nfunction retry(fn, delay, times) {\n  return new promise((resolve, reject) => {\n    function func() {\n      promise.resolve(fn()).then(res => {\n          resolve(res);\n        })\n        .catch(err => {\n          // 接口失败后，判断剩余次数不为0时，继续重发\n          if (times !== 0) {\n            settimeout(func, delay);\n            times--;\n          } else {\n            reject(err);\n          }\n        });\n    }\n    func();\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 参考文档\n\n * 原文：从零一步一步实现一个完整版的 promise',charsets:{cjk:!0},lastUpdated:"3/11/2023",lastUpdatedTimestamp:1678525665e3,createdTime:1644421339e3},{title:"使用rem和viewport的注意事项",frontmatter:{title:"使用rem和viewport的注意事项",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["viewport","rem"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/rem.html",relativePath:"frontend/issues/rem.md",key:"v-0c4cce2a",path:"/frontend/issues/rem.html",headers:[{level:2,title:"dpr",slug:"dpr",normalizedTitle:"dpr",charIndex:2},{level:2,title:"viewport",slug:"viewport",normalizedTitle:"viewport",charIndex:339},{level:2,title:"viewport 设置",slug:"viewport-设置",normalizedTitle:"viewport 设置",charIndex:585},{level:2,title:"rem 示例 1",slug:"rem-示例-1",normalizedTitle:"rem 示例 1",charIndex:888},{level:2,title:"rem 示例 2",slug:"rem-示例-2",normalizedTitle:"rem 示例 2",charIndex:1682},{level:2,title:"根据 dpr 选择图片",slug:"根据-dpr-选择图片",normalizedTitle:"根据 dpr 选择图片",charIndex:4183},{level:2,title:"根据 dpr 设置 font-size",slug:"根据-dpr-设置-font-size",normalizedTitle:"根据 dpr 设置 font-size",charIndex:4648},{level:2,title:"dpr 设置容器大小",slug:"dpr-设置容器大小",normalizedTitle:"dpr 设置容器大小",charIndex:4992},{level:2,title:"pxtorem",slug:"pxtorem",normalizedTitle:"pxtorem",charIndex:5792},{level:2,title:"vw 和 vh",slug:"vw-和-vh",normalizedTitle:"vw 和 vh",charIndex:6826},{level:2,title:"相关链接",slug:"相关链接",normalizedTitle:"相关链接",charIndex:6867}],headersStr:"dpr viewport viewport 设置 rem 示例 1 rem 示例 2 根据 dpr 选择图片 根据 dpr 设置 font-size dpr 设置容器大小 pxtorem vw 和 vh 相关链接",content:'# dpr\n\n * dpr: 物理像素数和 css 像素被称为设备像素比\n * dpr 的值，js 通过window.devicePixelRadio获取\n * dpr 的值，css 通过-webkit-device-pixel-ratio | -webkit-min-device-pixel-ratio | -webkit-max-device-pixel-ratio获取\n * 物理像素（physical pixel）: 手机屏幕上显示的最小单元\n * 设备独立像素（density-indenpendent pixel）: 逻辑像素(css 像素数)\n * 设备像素比（device pixel ratio）: 设备像素比(dpr) = 物理像素/设备独立像素\n\n\n# viewport\n\n * 移动端适配总结@juejin\n * layoutviewport: 大于实际屏幕,通过 document.documentElement.clientWidth 获取\n * visualviewport: 当前显示在屏幕上的页面，即浏览器可视区域的宽度\n * idealviewport: 为浏览器定义的可完美适配移动端的理想 viewport，固定不变，可以认为是设备视口宽度。比如 iphone 7 为 375px, iphone 7p 为 414px\n\n\n# viewport 设置\n\n * head meta\n\n<meta\n  name="viewport"\n  content="width=device-width,initial-scale=1,user-scale=no"\n/>\n\n\n1\n2\n3\n4\n\n * width 设置的是 layoutviewport 的宽度\n * initial-scale 设置页面的初始缩放值，并且这个初始缩放值是相对于 idealviewport 缩放的，最终得到的结果不仅会决定 visualviewport，还会影响到 layoutviewport\n * user-scalable 是否允许用户进行缩放的设置\n\n\n# rem 示例 1\n\n * js\n\n// 动态计算 页面宽度/一个比例值（比如 10 或者 15）= 1rem\n\n// iphone6: 750; 分成100份 1rem = 750/100 即 html 的宽度为 7.5rem（750 / 100）\n// html(font-size) = deviceWidth / 7.5\n\n(function() {\n  document.addEventListener(\n    "DOMContentLoaded",\n    function(e) {\n      document.getElementsByTagName("html")[0].style.fontSize =\n        window.innerWidth / 7.5 + "px";\n    },\n    false\n  );\n})();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * scss\n\n/* 单位px转化为rem */\n@function px2rem($px) {\n  @return #{$px / 100}rem;\n}\n\n/* 设置字体大小，不使用rem单位， 根据dpr值分段调整 */\n@mixin font-size($fontSize) {\n  font-size: $fontSize / $design-dpr;\n\n  [data-dpr="2"] & {\n    font-size: $fontSize / $design-dpr * 2;\n  }\n\n  [data-dpr="3"] & {\n    font-size: $fontSize / $design-dpr * 3;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# rem 示例 2\n\n * js\n\n!(function() {\n  var docElem = document.documentElement,\n    metaElem = document.querySelector(\'meta[name="viewport"]\'),\n    dpr = window.devicePixelRatio || 1,\n    // 将页面分为10块\n    blocks = 10,\n    // 需要限制的最小宽度\n    defaultMinWidth = 320,\n    // 需要限制的最大宽度\n    defaultMaxWidth = 540,\n    // 计算的基准值\n    calcMaxWidth = 9999999;\n\n  if (!metaElem) {\n    metaElem = initMetaViewport();\n  }\n\n  if (metaElem.getAttribute("data-content-max") !== null) {\n    calcMaxWidth = defaultMaxWidth;\n  }\n\n  // 确保meta[name="viewport"]存在\n  function initMetaViewport() {\n    var meta = document.createElement("meta");\n\n    meta.setAttribute("name", "viewport");\n    meta.setAttribute(\n      "content",\n      "width=device-width,initial-scale=1,user-scalable=no"\n    );\n    document.head.appendChild(meta);\n\n    return meta;\n  }\n\n  // 大部分dpr为2以下的安卓机型不识别scale，需设置不缩放\n  if (navigator.appVersion.match(/android/gi) && dpr <= 2) {\n    dpr = 1;\n  }\n\n  setScale(dpr);\n\n  // 企业QQ设置了scale后，不能完全识别scale（此时clientWidth未收到缩放的影响而翻倍），需设置不缩放\n  if (navigator.appVersion.match(/qq\\//gi) && docElem.clientWidth <= 360) {\n    dpr = 1;\n    setScale(dpr);\n  }\n\n  docElem.setAttribute("data-dpr", dpr);\n\n  // 设置缩放\n  function setScale(dpr) {\n    metaElem.setAttribute(\n      "content",\n      "initial-scale=" +\n        1 / dpr +\n        ",maximum-scale=" +\n        1 / dpr +\n        ",minimum-scale=" +\n        1 / dpr +\n        ",user-scalable=no"\n    );\n  }\n\n  // 设置docElem字体大小\n  function setFontSize() {\n    var clientWidth = docElem.clientWidth;\n\n    clientWidth = Math.max(clientWidth, defaultMinWidth * dpr);\n\n    // 调整计算基准值\n    if (calcMaxWidth === defaultMaxWidth) {\n      clientWidth = Math.min(clientWidth, defaultMaxWidth * dpr);\n    }\n\n    docElem.style.fontSize = clientWidth / blocks + "px";\n  }\n\n  setFontSize();\n\n  window.addEventListener(\n    window.orientationchange ? "orientationchange" : "resize",\n    setFontSize,\n    false\n  );\n})();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n\n * px 和 rem\n\n/* 移动端页面设计稿宽度 */\n$design-width: 750;\n/* 将移动端页面分为10块 */\n$blocks: 10;\n\n/* 单位px转化为rem */\n@function px2rem($px) {\n  @return #{$px / $design-width * $blocks}rem;\n}\n\n/* 单位rem转化为px，可用于根据rem单位快速计算原px */\n@function rem2px($rem) {\n  @return #{$rem / $blocks * $design-width}px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 根据 dpr 选择图片\n\n@mixin bg(url, type) {\n  background-image: url(url+"."+type);\n\n  @media only screen and (-webkit-min-device-pixel-ratio: 2) {\n    background-image: url(url+"@2x."+type);\n  }\n\n  @media only screen and (-webkit-min-device-pixel-ratio: 3) {\n    background-image: url(url+"@3x."+type);\n  }\n}\n\n#test {\n  width: 100px;\n  height: 100px;\n  background-color: yellow;\n  @include bg("../assets/test", "jpg");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 根据 dpr 设置 font-size\n\n * 设置字体大小，不使用 rem 单位，根据 dpr 值分段调整\n\n/* 移动端页面设计稿dpr基准值 */\n$design-dpr: 2;\n\n@mixin font-size($fontSize) {\n  font-size: $fontSize / $design-dpr;\n\n  [data-dpr="2"] & {\n    font-size: $fontSize / $design-dpr * 2;\n  }\n\n  [data-dpr="3"] & {\n    font-size: $fontSize / $design-dpr * 3;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# dpr 设置容器大小\n\n/* 缩放所支持的设备最小宽度 */\n$min-device-width: 320px;\n/* 缩放所支持的设备最大宽度 */\n$max-device-width: 540px;\n\n/* 设置容器拉伸的最小宽度 */\n@mixin container-min-width() {\n  margin-right: auto;\n  margin-left: auto;\n  min-width: $min-device-width;\n\n  @media (-webkit-device-pixel-ratio: 2) {\n    min-width: $min-device-width * 2;\n  }\n\n  @media (-webkit-device-pixel-ratio: 3) {\n    min-width: $min-device-width * 3;\n  }\n}\n\n/* 设置容器拉伸的最大宽度 */\n@mixin container-max-width() {\n  margin-right: auto;\n  margin-left: auto;\n  max-width: $max-device-width;\n\n  @media (-webkit-device-pixel-ratio: 2) {\n    max-width: $max-device-width * 2;\n  }\n\n  @media (-webkit-device-pixel-ratio: 3) {\n    max-width: $max-device-width * 3;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# pxtorem\n\n * postcss-px-to-viewport\n\n * postcss-pxtorem\n\n * 项目目录\n\n├── gulpfile.js\n├── output\n├── package-lock.json\n├── package.json\n└── src\n    ├── index.js\n    ├── m\n    │   └── m.css\n    ├── other\n    │   ├── m\n    │   │   └── other-m.css\n    │   └── pc\n    │       └── other-pc.css\n    └── pc\n        └── pc.css\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * gulpfile.js\n\n// 将 `src/xxx/m/xxx.css`转换为rem\n\nconst { src, dest } = require(\'gulp\');\nvar postcss = require(\'gulp-postcss\');\nvar pxtorem = require(\'postcss-pxtorem\');\nexports.default = function() {\n    // https://github.com/cuth/postcss-pxtorem 配置\n    var processors = [\n        pxtorem({\n            replace: true,\n            propList: [\'*\'],\n            exclude: function(path) {\n                const matchPath = /src\\/(.+\\/)*m\\//.test(path)\n                return !matchPath\n            }\n        })\n    ];\n\n    return src(\'src/**/*.css\')\n        .pipe(postcss(processors))\n        .pipe(dest(\'output/css\'));\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# vw 和 vh\n\n * 如何在 Vue 项目中使用 vw 实现移动端适配\n\n\n# 相关链接\n\n * 移动 web 适配之 rem\n * 使用 Flexible 实现手淘 H5 页面的终端适配\n * 响应式布局的常用解决方案对比(媒体查询、百分比、rem 和 vw/vh） #13\n * 物理像素 Device-Viewport-and-Pixel-Introduction\n * 如何在 Vue 项目中使用 vw 实现移动端适配\n * 物理像素与 css 像素\n * CSS 像素、物理像素、逻辑像素、设备像素比、PPI、Viewport #21',normalizedContent:'# dpr\n\n * dpr: 物理像素数和 css 像素被称为设备像素比\n * dpr 的值，js 通过window.devicepixelradio获取\n * dpr 的值，css 通过-webkit-device-pixel-ratio | -webkit-min-device-pixel-ratio | -webkit-max-device-pixel-ratio获取\n * 物理像素（physical pixel）: 手机屏幕上显示的最小单元\n * 设备独立像素（density-indenpendent pixel）: 逻辑像素(css 像素数)\n * 设备像素比（device pixel ratio）: 设备像素比(dpr) = 物理像素/设备独立像素\n\n\n# viewport\n\n * 移动端适配总结@juejin\n * layoutviewport: 大于实际屏幕,通过 document.documentelement.clientwidth 获取\n * visualviewport: 当前显示在屏幕上的页面，即浏览器可视区域的宽度\n * idealviewport: 为浏览器定义的可完美适配移动端的理想 viewport，固定不变，可以认为是设备视口宽度。比如 iphone 7 为 375px, iphone 7p 为 414px\n\n\n# viewport 设置\n\n * head meta\n\n<meta\n  name="viewport"\n  content="width=device-width,initial-scale=1,user-scale=no"\n/>\n\n\n1\n2\n3\n4\n\n * width 设置的是 layoutviewport 的宽度\n * initial-scale 设置页面的初始缩放值，并且这个初始缩放值是相对于 idealviewport 缩放的，最终得到的结果不仅会决定 visualviewport，还会影响到 layoutviewport\n * user-scalable 是否允许用户进行缩放的设置\n\n\n# rem 示例 1\n\n * js\n\n// 动态计算 页面宽度/一个比例值（比如 10 或者 15）= 1rem\n\n// iphone6: 750; 分成100份 1rem = 750/100 即 html 的宽度为 7.5rem（750 / 100）\n// html(font-size) = devicewidth / 7.5\n\n(function() {\n  document.addeventlistener(\n    "domcontentloaded",\n    function(e) {\n      document.getelementsbytagname("html")[0].style.fontsize =\n        window.innerwidth / 7.5 + "px";\n    },\n    false\n  );\n})();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * scss\n\n/* 单位px转化为rem */\n@function px2rem($px) {\n  @return #{$px / 100}rem;\n}\n\n/* 设置字体大小，不使用rem单位， 根据dpr值分段调整 */\n@mixin font-size($fontsize) {\n  font-size: $fontsize / $design-dpr;\n\n  [data-dpr="2"] & {\n    font-size: $fontsize / $design-dpr * 2;\n  }\n\n  [data-dpr="3"] & {\n    font-size: $fontsize / $design-dpr * 3;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# rem 示例 2\n\n * js\n\n!(function() {\n  var docelem = document.documentelement,\n    metaelem = document.queryselector(\'meta[name="viewport"]\'),\n    dpr = window.devicepixelratio || 1,\n    // 将页面分为10块\n    blocks = 10,\n    // 需要限制的最小宽度\n    defaultminwidth = 320,\n    // 需要限制的最大宽度\n    defaultmaxwidth = 540,\n    // 计算的基准值\n    calcmaxwidth = 9999999;\n\n  if (!metaelem) {\n    metaelem = initmetaviewport();\n  }\n\n  if (metaelem.getattribute("data-content-max") !== null) {\n    calcmaxwidth = defaultmaxwidth;\n  }\n\n  // 确保meta[name="viewport"]存在\n  function initmetaviewport() {\n    var meta = document.createelement("meta");\n\n    meta.setattribute("name", "viewport");\n    meta.setattribute(\n      "content",\n      "width=device-width,initial-scale=1,user-scalable=no"\n    );\n    document.head.appendchild(meta);\n\n    return meta;\n  }\n\n  // 大部分dpr为2以下的安卓机型不识别scale，需设置不缩放\n  if (navigator.appversion.match(/android/gi) && dpr <= 2) {\n    dpr = 1;\n  }\n\n  setscale(dpr);\n\n  // 企业qq设置了scale后，不能完全识别scale（此时clientwidth未收到缩放的影响而翻倍），需设置不缩放\n  if (navigator.appversion.match(/qq\\//gi) && docelem.clientwidth <= 360) {\n    dpr = 1;\n    setscale(dpr);\n  }\n\n  docelem.setattribute("data-dpr", dpr);\n\n  // 设置缩放\n  function setscale(dpr) {\n    metaelem.setattribute(\n      "content",\n      "initial-scale=" +\n        1 / dpr +\n        ",maximum-scale=" +\n        1 / dpr +\n        ",minimum-scale=" +\n        1 / dpr +\n        ",user-scalable=no"\n    );\n  }\n\n  // 设置docelem字体大小\n  function setfontsize() {\n    var clientwidth = docelem.clientwidth;\n\n    clientwidth = math.max(clientwidth, defaultminwidth * dpr);\n\n    // 调整计算基准值\n    if (calcmaxwidth === defaultmaxwidth) {\n      clientwidth = math.min(clientwidth, defaultmaxwidth * dpr);\n    }\n\n    docelem.style.fontsize = clientwidth / blocks + "px";\n  }\n\n  setfontsize();\n\n  window.addeventlistener(\n    window.orientationchange ? "orientationchange" : "resize",\n    setfontsize,\n    false\n  );\n})();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n\n * px 和 rem\n\n/* 移动端页面设计稿宽度 */\n$design-width: 750;\n/* 将移动端页面分为10块 */\n$blocks: 10;\n\n/* 单位px转化为rem */\n@function px2rem($px) {\n  @return #{$px / $design-width * $blocks}rem;\n}\n\n/* 单位rem转化为px，可用于根据rem单位快速计算原px */\n@function rem2px($rem) {\n  @return #{$rem / $blocks * $design-width}px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 根据 dpr 选择图片\n\n@mixin bg(url, type) {\n  background-image: url(url+"."+type);\n\n  @media only screen and (-webkit-min-device-pixel-ratio: 2) {\n    background-image: url(url+"@2x."+type);\n  }\n\n  @media only screen and (-webkit-min-device-pixel-ratio: 3) {\n    background-image: url(url+"@3x."+type);\n  }\n}\n\n#test {\n  width: 100px;\n  height: 100px;\n  background-color: yellow;\n  @include bg("../assets/test", "jpg");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 根据 dpr 设置 font-size\n\n * 设置字体大小，不使用 rem 单位，根据 dpr 值分段调整\n\n/* 移动端页面设计稿dpr基准值 */\n$design-dpr: 2;\n\n@mixin font-size($fontsize) {\n  font-size: $fontsize / $design-dpr;\n\n  [data-dpr="2"] & {\n    font-size: $fontsize / $design-dpr * 2;\n  }\n\n  [data-dpr="3"] & {\n    font-size: $fontsize / $design-dpr * 3;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# dpr 设置容器大小\n\n/* 缩放所支持的设备最小宽度 */\n$min-device-width: 320px;\n/* 缩放所支持的设备最大宽度 */\n$max-device-width: 540px;\n\n/* 设置容器拉伸的最小宽度 */\n@mixin container-min-width() {\n  margin-right: auto;\n  margin-left: auto;\n  min-width: $min-device-width;\n\n  @media (-webkit-device-pixel-ratio: 2) {\n    min-width: $min-device-width * 2;\n  }\n\n  @media (-webkit-device-pixel-ratio: 3) {\n    min-width: $min-device-width * 3;\n  }\n}\n\n/* 设置容器拉伸的最大宽度 */\n@mixin container-max-width() {\n  margin-right: auto;\n  margin-left: auto;\n  max-width: $max-device-width;\n\n  @media (-webkit-device-pixel-ratio: 2) {\n    max-width: $max-device-width * 2;\n  }\n\n  @media (-webkit-device-pixel-ratio: 3) {\n    max-width: $max-device-width * 3;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# pxtorem\n\n * postcss-px-to-viewport\n\n * postcss-pxtorem\n\n * 项目目录\n\n├── gulpfile.js\n├── output\n├── package-lock.json\n├── package.json\n└── src\n    ├── index.js\n    ├── m\n    │   └── m.css\n    ├── other\n    │   ├── m\n    │   │   └── other-m.css\n    │   └── pc\n    │       └── other-pc.css\n    └── pc\n        └── pc.css\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * gulpfile.js\n\n// 将 `src/xxx/m/xxx.css`转换为rem\n\nconst { src, dest } = require(\'gulp\');\nvar postcss = require(\'gulp-postcss\');\nvar pxtorem = require(\'postcss-pxtorem\');\nexports.default = function() {\n    // https://github.com/cuth/postcss-pxtorem 配置\n    var processors = [\n        pxtorem({\n            replace: true,\n            proplist: [\'*\'],\n            exclude: function(path) {\n                const matchpath = /src\\/(.+\\/)*m\\//.test(path)\n                return !matchpath\n            }\n        })\n    ];\n\n    return src(\'src/**/*.css\')\n        .pipe(postcss(processors))\n        .pipe(dest(\'output/css\'));\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# vw 和 vh\n\n * 如何在 vue 项目中使用 vw 实现移动端适配\n\n\n# 相关链接\n\n * 移动 web 适配之 rem\n * 使用 flexible 实现手淘 h5 页面的终端适配\n * 响应式布局的常用解决方案对比(媒体查询、百分比、rem 和 vw/vh） #13\n * 物理像素 device-viewport-and-pixel-introduction\n * 如何在 vue 项目中使用 vw 实现移动端适配\n * 物理像素与 css 像素\n * css 像素、物理像素、逻辑像素、设备像素比、ppi、viewport #21',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647945545e3,createdTime:1647945545e3},{title:"URL到页面加载过程",frontmatter:{title:"URL到页面加载过程",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["html渲染"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/render-html.html",relativePath:"frontend/issues/render-html.md",key:"v-bfe34c2a",path:"/frontend/issues/render-html.html",headers:[{level:2,title:"OIS 七层模型模型",slug:"ois-七层模型模型",normalizedTitle:"ois 七层模型模型",charIndex:2},{level:2,title:"五层模型",slug:"五层模型",normalizedTitle:"五层模型",charIndex:71},{level:2,title:"socket图解",slug:"socket图解",normalizedTitle:"socket图解",charIndex:134},{level:2,title:"TCP",slug:"tcp",normalizedTitle:"tcp",charIndex:201},{level:2,title:"TCP和UDP的区别",slug:"tcp和udp的区别",normalizedTitle:"tcp和udp的区别",charIndex:1298},{level:2,title:"从输入 URL 到页面加载的过程",slug:"从输入-url-到页面加载的过程",normalizedTitle:"从输入 url 到页面加载的过程",charIndex:1614},{level:2,title:"解析页面流程",slug:"解析页面流程",normalizedTitle:"解析页面流程",charIndex:2288},{level:2,title:"渲染",slug:"渲染",normalizedTitle:"渲染",charIndex:2072},{level:2,title:"Reflow 回流",slug:"reflow-回流",normalizedTitle:"reflow 回流",charIndex:2614},{level:2,title:"重绘（repaint 或 redraw）",slug:"重绘-repaint-或-redraw",normalizedTitle:"重绘（repaint 或 redraw）",charIndex:2982},{level:2,title:"回流一定伴随着重绘，重绘却可以单独出现",slug:"回流一定伴随着重绘-重绘却可以单独出现",normalizedTitle:"回流一定伴随着重绘，重绘却可以单独出现",charIndex:3079},{level:2,title:"回流重绘的优化方案",slug:"回流重绘的优化方案",normalizedTitle:"回流重绘的优化方案",charIndex:3103},{level:2,title:"引擎对 JS 的处理过程",slug:"引擎对-js-的处理过程",normalizedTitle:"引擎对 js 的处理过程",charIndex:3322},{level:2,title:"浏览器缓存",slug:"浏览器缓存",normalizedTitle:"浏览器缓存",charIndex:3534},{level:2,title:"HTTP 常见状态码",slug:"http-常见状态码",normalizedTitle:"http 常见状态码",charIndex:3810},{level:2,title:"HTTPS通信（握手）过程",slug:"https通信-握手-过程",normalizedTitle:"https通信（握手）过程",charIndex:4118},{level:2,title:"HTTP2",slug:"http2",normalizedTitle:"http2",charIndex:4550},{level:2,title:"HTTP3",slug:"http3",normalizedTitle:"http3",charIndex:5445},{level:2,title:"Cache-Control: no-cache 和no-store的区别",slug:"cache-control-no-cache-和no-store的区别",normalizedTitle:"cache-control: no-cache 和no-store的区别",charIndex:5740},{level:2,title:"垃圾回收机制",slug:"垃圾回收机制",normalizedTitle:"垃圾回收机制",charIndex:5881},{level:3,title:"GC 垃圾回收策略",slug:"gc-垃圾回收策略",normalizedTitle:"gc 垃圾回收策略",charIndex:5941},{level:3,title:"分代式垃圾回收机制",slug:"分代式垃圾回收机制",normalizedTitle:"分代式垃圾回收机制",charIndex:6365},{level:2,title:"参考文章",slug:"参考文章",normalizedTitle:"参考文章",charIndex:6453}],headersStr:"OIS 七层模型模型 五层模型 socket图解 TCP TCP和UDP的区别 从输入 URL 到页面加载的过程 解析页面流程 渲染 Reflow 回流 重绘（repaint 或 redraw） 回流一定伴随着重绘，重绘却可以单独出现 回流重绘的优化方案 引擎对 JS 的处理过程 浏览器缓存 HTTP 常见状态码 HTTPS通信（握手）过程 HTTP2 HTTP3 Cache-Control: no-cache 和no-store的区别 垃圾回收机制 GC 垃圾回收策略 分代式垃圾回收机制 参考文章",content:'# OIS 七层模型模型\n\n> 原文：https://www.liwenzhou.com/posts/Go/15_socket/\n\n\n\n\n# 五层模型\n\n> 原文：https://www.liwenzhou.com/posts/Go/15_socket/\n\n\n\n\n# socket图解\n\n> 原文：https://www.liwenzhou.com/posts/Go/15_socket/\n\n\n\n\n# TCP\n\n> 原文：https://www.cnblogs.com/xiaolincoding/p/12638546.html\n\n * TCP 是面向连接的、可靠的、基于字节流的传输层通信协议\n\n\n\n * SYN: Synchronize 同步\n\n * ACK: Acknowledge 确认\n\n * Seq: Sequence 序号\n\n * 三次握手 https://zhuanlan.zhihu.com/p/388704023\n   \n   * 第一次握手(SYN=1, seq=x)，发送完毕后，客户端进入 SYN_SEND 状态\n   * 第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1)， 发送完毕后，服务器端进入 SYN_RCVD 状态\n   * 第三次握手(ACK=1，ACKnum=y+1)，发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时,也进入 ESTABLISHED 状态，TCP 握手，即可以开始数据传输\n\n * 四次挥手 https://zhuanlan.zhihu.com/p/388704023\n   \n   * 第一次挥手(FIN=1，seq=u)，发送完毕后，客户端进入FIN_WAIT_1 状态\n   * 第二次挥手(ACK=1，ack=u+1,seq =v)，发送完毕后，服务器端进入CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态\n   * 第三次挥手(FIN=1，ACK1,seq=w,ack=u+1)，发送完毕后，服务器端进入LAST_ACK 状态，等待来自客户端的最后一个ACK\n   * 第四次挥手(ACK=1，seq=u+1,ack=w+1)，客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态\n\n * 为什么挥手需要四次？\n   \n   * 关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了但是还能接收数据；\n   * 服务器收到客户端的 FIN 报文时，先回一个 ACK 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 FIN 报文给客户端来表示同意现在关闭连接。\n\n\n# TCP和UDP的区别\n\n> https://juejin.cn/post/6908327746473033741#heading-75\n\n         UDP                     TCP\n是否连接     无连接                     面向连接\n是否可靠     不可靠传输                   可靠传输\n连接对象个数   支持一对一，一对多，多对一和多对多交互通信   只能是一对一通信\n传输方式     面向报文                    面向字节流\n首部开销     首部开销小，仅8字节              首部最小20字节，最大60字节\n\n\n# 从输入 URL 到页面加载的过程\n\n * 1. 从浏览器接收 url 到开启网络请求线程 (浏览器的机制以及进程与线程之间的关系)\n * 2. 开启网络线程到发出一个完整的 http 请求 (涉及到 dns 查询，tcp/ip 请求，五层因特网协议栈等知识，tcp三次握手，四次挥手)\n * 3. 从服务器接收到请求到对应后台接收到请求 (涉及到负载均衡，安全拦截以及后台内部的处理等)\n * 4. 后台和前台的 http 交互 （这一部分包括 http 头部、响应码、报文结构、cookie 等知识，可以提下静态资源的 cookie 优化，以及编码解码，如 gzip 压缩等）\n * 5. 单独拎出来的缓存问题，http 的缓存 （这部分包括 http 缓存头部，etag，catch-control 等）\n * 6. 浏览器接收到 http 数据包后的解析流程 （解析 html-词法分析然后解析成 dom 树、解析 css 生成 css 规则树、合并成 render 树，然后 layout、painting 渲染、复合-`图层的合成、GPU 绘制、外链资源的处理、loaded 和 domcontentloaded 等）\n * 7. CSS 的可视化格式模型（元素的渲染规则，如包含块，控制框，BFC，IFC 等概念）\n * 8. JS 引擎解析过程（JS 的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）\n * 9. 其它（可以拓展不同的知识模块，如跨域，web 安全，hybrid 模式等等内容）\n\n\n# 解析页面流程\n\n * 1. 解析 HTML，构建 DOM 树\n * 2. 解析 CSS，生成 CSS 规则树\n * 3. 合并 DOM 树和 CSS 规则，生成 render 树\n * 4. 布局 render 树(Layout/reflow), 负责各元素尺寸、位置的计算\n * 5. 绘制 render 树（paint），绘制页面像素信息\n * 6. 浏览器会将各层的信息发送给 GPU，GPU 会将各层合成（composite），显示在屏幕上\n\n\n# 渲染\n\n * 计算 CSS 样式\n * 构建渲染树\n * 布局，主要定位坐标和大小，是否换行，各种 position overflow z-index 属性\n * 绘制，将图像绘制出来\n\n\n# Reflow 回流\n\n当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建, 这就称为回流(reflow)\n\n * 页面渲染初始化\n * DOM 结构改变，比如删除了某个节点\n * render 树变化，比如减少了 padding\n * 窗口 resize\n * 获取某些属性，引发回流\n   * offset(Top/Left/Width/Height)\n   * scroll(Top/Left/Width/Height)\n   * cilent(Top/Left/Width/Height)\n   * width, height\n   * 调用了getComputedStyle()或者 IE 的currentStyle\n * 改变字体大小会引发回流\n * 元素尺寸的改变——大小，外边距，边框\n\n\n# 重绘（repaint 或 redraw）\n\n重绘发生在元素的可见的外观被改变，但并没有影响到布局的时候。 例，仅修改 DOM 元素的字体颜色（只有 Repaint，因为不需要调整布局）\n\n\n# 回流一定伴随着重绘，重绘却可以单独出现\n\n\n# 回流重绘的优化方案\n\n * 减少逐项更改样式，最好一次性更改 style，或者将样式定义为 class 并一次性更新\n * 避免循环操作 dom，创建一个 documentFragment 或 div，在它上面应用所有 DOM 操作，最后再把它添加到 window.document\n * 避免多次读取 offset 等属性。无法避免则将它们缓存到变量\n * 将复杂的元素绝对定位或固定定位，使得它脱离文档流，否则回流代价会很高\n\n\n# 引擎对 JS 的处理过程\n\n * 1. 读取代码，进行词法分析（Lexical analysis），然后将代码分解成词元（token）\n * 2. 对词元进行语法分析（parsing），然后将代码整理成语法树（syntax tree）\n * 3. 使用翻译器（translator），将代码转为字节码（bytecode）\n * 4. 使用字节码解释器（bytecode interpreter），将字节码转为机器码\n\n\n# 浏览器缓存\n\njuejin/浅谈 HTTP 缓存\n\n * 强缓存\n\nExpires: 值是服务器告诉浏览器的缓存过期时间\ncache-control: 值是相对时间内直接使用浏览器缓存\n\n\n1\n2\n\n * 协商缓存\n\nLast-Modified 和 If-Modified-Since : 文件在服务器上最近的修改时间\nEtag 和 If-None-Match : 只有当文件内容改变时，ETag才改变\n\n\n1\n2\n\n * 缓存的优先级\n\nCache-Control > Expires > ETag > Last-Modified\n\n\n1\n\n\n\n# HTTP 常见状态码\n\n * 200 :表明该请求被成功地完成，所请求的资源发送回客户端\n * 201 :表示请求成功且服务器创建了新的资源\n * 202 :表示服务器已经接受了请求，但还未处理\n * 301 :表示永久重定向，请求的网页已经永久移动到新位置\n * 302 :表示临时重定向\n * 304 :自从上次请求后，请求的网页未修改过，请客户端使用本地缓存\n * 400 :客户端请求有错（譬如可以是安全模块拦截）\n * 401 :服务器无法理解请求的格式\n * 402 :请求未授权\n * 403 :禁止访问\n * 404 :资源未找到\n * 500 :服务器内部错误\n * 503 :服务不可用\n\n\n# HTTPS通信（握手）过程\n\n> https://juejin.cn/post/6908327746473033741#heading-30\n> \n> https采用非对称加密+对称加密，非对称加密来传递密钥；对称加密来加密内容\n\n * 1.客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法\n * 2.服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数\n * 3.客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服 务器。并且还会提供一个前面所有内容的 hash 的值，用来供服务器检验\n * 4.服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的 hash 值来供客户端检验\n * 5.客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息\n\n\n# HTTP2\n\n> HTTP 1.1 和 HTTP 2.0 的区别\n\n * 二进制协议：HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为"帧"，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。\n * 多路复用： HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP 连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了"队头堵塞"【1】的问题。\n * 数据流： HTTP/2 使用了数据流的概念，因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 ID ，用来区分它属于哪个数据流。\n * 头信息压缩： HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。\n * 服务器推送： HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主动推送的是静态资源，和 WebSocket 以及使用 SSE 等方式向客户端发送即时数据的推送是不同的。\n\n\n# HTTP3\n\n> 说一下HTTP 3.0\n\n * HTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议\n\n\n\n * 流量控制、传输可靠性功能：QUIC在UDP的基础上增加了一层来保证数据传输可靠性，它提供了数据包重传、拥塞控制、以及其他一些TCP中的特性。\n * 集成TLS加密功能：目前QUIC使用TLS1.3，减少了握手所花费的RTT数。\n * 多路复用：同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的单独传输，解决了TCP的队头阻塞问题\n * 快速握手：由于基于UDP，可以实现使用0 ~ 1个RTT来建立连接\n\n\n# Cache-Control: no-cache 和no-store的区别\n\nCache-Control: no-store：这个才是响应不被缓存的意思 Cache-Control: no-cache是会被缓存的，只不过浏览器每次都会向服务器发起请求，来验证当前缓存的有效性\n\n\n# 垃圾回收机制\n\n> 原文 https://juejin.cn/post/7146996646394462239\n\n\n# GC 垃圾回收策略\n\n * 标记清除\n\n分为 标记 和 清除 两个阶段，标记阶段即为所有活动对象做上标记，清除阶段则把没有标记（也就是非活动对象）销毁 在运行时会给内存中的所有变量都加上一个标记，假设内存中所有对象都是垃圾，全标记为0 然后从各个根对象开始遍历，把不是垃圾的节点改成1，清理所有标记为0的垃圾，销毁并回收它们所占用的内存空间。最后，把所有内存中对象标记修改为0，等待下一轮垃圾回收\n\n * 引用计数\n\n一个对象，如果没有其他对象引用到它，这个对象就是零引用，将被垃圾回收机制回收 它的策略是跟踪记录每个变量值被使用的次数 一个对象被其他对象引用时，这个对象的引用次数就为 1，如果同一个值又被赋给另一个变量，那么引用数加 1，如果该变量的值被其他的值覆盖了，则引用次数减 1 当这个值的引用次数变为 0 的时候，说明没有变量在使用，这个值没法被访问了，回收空间，垃圾回收器会在运行的时候清理掉引用次数为 0 的值占用的内存\n\n\n# 分代式垃圾回收机制\n\nV8采用了一种代回收的策略，将内存分为两个生代：新生代和老生代 新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象\n\n\n# 参考文章\n\n * URL 到页面加载过程',normalizedContent:'# ois 七层模型模型\n\n> 原文：https://www.liwenzhou.com/posts/go/15_socket/\n\n\n\n\n# 五层模型\n\n> 原文：https://www.liwenzhou.com/posts/go/15_socket/\n\n\n\n\n# socket图解\n\n> 原文：https://www.liwenzhou.com/posts/go/15_socket/\n\n\n\n\n# tcp\n\n> 原文：https://www.cnblogs.com/xiaolincoding/p/12638546.html\n\n * tcp 是面向连接的、可靠的、基于字节流的传输层通信协议\n\n\n\n * syn: synchronize 同步\n\n * ack: acknowledge 确认\n\n * seq: sequence 序号\n\n * 三次握手 https://zhuanlan.zhihu.com/p/388704023\n   \n   * 第一次握手(syn=1, seq=x)，发送完毕后，客户端进入 syn_send 状态\n   * 第二次握手(syn=1, ack=1, seq=y, acknum=x+1)， 发送完毕后，服务器端进入 syn_rcvd 状态\n   * 第三次握手(ack=1，acknum=y+1)，发送完毕后，客户端进入 established 状态，当服务器端接收到这个包时,也进入 established 状态，tcp 握手，即可以开始数据传输\n\n * 四次挥手 https://zhuanlan.zhihu.com/p/388704023\n   \n   * 第一次挥手(fin=1，seq=u)，发送完毕后，客户端进入fin_wait_1 状态\n   * 第二次挥手(ack=1，ack=u+1,seq =v)，发送完毕后，服务器端进入close_wait 状态，客户端接收到这个确认包之后，进入 fin_wait_2 状态\n   * 第三次挥手(fin=1，ack1,seq=w,ack=u+1)，发送完毕后，服务器端进入last_ack 状态，等待来自客户端的最后一个ack\n   * 第四次挥手(ack=1，seq=u+1,ack=w+1)，客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 time_wait状态，等待了某个固定时间（两个最大段生命周期，2msl，2 maximum segment lifetime）之后，没有收到服务器端的 ack ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 closed 状态。服务器端接收到这个确认包之后，关闭连接，进入 closed 状态\n\n * 为什么挥手需要四次？\n   \n   * 关闭连接时，客户端向服务端发送 fin 时，仅仅表示客户端不再发送数据了但是还能接收数据；\n   * 服务器收到客户端的 fin 报文时，先回一个 ack 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 fin 报文给客户端来表示同意现在关闭连接。\n\n\n# tcp和udp的区别\n\n> https://juejin.cn/post/6908327746473033741#heading-75\n\n         udp                     tcp\n是否连接     无连接                     面向连接\n是否可靠     不可靠传输                   可靠传输\n连接对象个数   支持一对一，一对多，多对一和多对多交互通信   只能是一对一通信\n传输方式     面向报文                    面向字节流\n首部开销     首部开销小，仅8字节              首部最小20字节，最大60字节\n\n\n# 从输入 url 到页面加载的过程\n\n * 1. 从浏览器接收 url 到开启网络请求线程 (浏览器的机制以及进程与线程之间的关系)\n * 2. 开启网络线程到发出一个完整的 http 请求 (涉及到 dns 查询，tcp/ip 请求，五层因特网协议栈等知识，tcp三次握手，四次挥手)\n * 3. 从服务器接收到请求到对应后台接收到请求 (涉及到负载均衡，安全拦截以及后台内部的处理等)\n * 4. 后台和前台的 http 交互 （这一部分包括 http 头部、响应码、报文结构、cookie 等知识，可以提下静态资源的 cookie 优化，以及编码解码，如 gzip 压缩等）\n * 5. 单独拎出来的缓存问题，http 的缓存 （这部分包括 http 缓存头部，etag，catch-control 等）\n * 6. 浏览器接收到 http 数据包后的解析流程 （解析 html-词法分析然后解析成 dom 树、解析 css 生成 css 规则树、合并成 render 树，然后 layout、painting 渲染、复合-`图层的合成、gpu 绘制、外链资源的处理、loaded 和 domcontentloaded 等）\n * 7. css 的可视化格式模型（元素的渲染规则，如包含块，控制框，bfc，ifc 等概念）\n * 8. js 引擎解析过程（js 的解释阶段，预处理阶段，执行阶段生成执行上下文，vo，作用域链、回收机制等等）\n * 9. 其它（可以拓展不同的知识模块，如跨域，web 安全，hybrid 模式等等内容）\n\n\n# 解析页面流程\n\n * 1. 解析 html，构建 dom 树\n * 2. 解析 css，生成 css 规则树\n * 3. 合并 dom 树和 css 规则，生成 render 树\n * 4. 布局 render 树(layout/reflow), 负责各元素尺寸、位置的计算\n * 5. 绘制 render 树（paint），绘制页面像素信息\n * 6. 浏览器会将各层的信息发送给 gpu，gpu 会将各层合成（composite），显示在屏幕上\n\n\n# 渲染\n\n * 计算 css 样式\n * 构建渲染树\n * 布局，主要定位坐标和大小，是否换行，各种 position overflow z-index 属性\n * 绘制，将图像绘制出来\n\n\n# reflow 回流\n\n当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建, 这就称为回流(reflow)\n\n * 页面渲染初始化\n * dom 结构改变，比如删除了某个节点\n * render 树变化，比如减少了 padding\n * 窗口 resize\n * 获取某些属性，引发回流\n   * offset(top/left/width/height)\n   * scroll(top/left/width/height)\n   * cilent(top/left/width/height)\n   * width, height\n   * 调用了getcomputedstyle()或者 ie 的currentstyle\n * 改变字体大小会引发回流\n * 元素尺寸的改变——大小，外边距，边框\n\n\n# 重绘（repaint 或 redraw）\n\n重绘发生在元素的可见的外观被改变，但并没有影响到布局的时候。 例，仅修改 dom 元素的字体颜色（只有 repaint，因为不需要调整布局）\n\n\n# 回流一定伴随着重绘，重绘却可以单独出现\n\n\n# 回流重绘的优化方案\n\n * 减少逐项更改样式，最好一次性更改 style，或者将样式定义为 class 并一次性更新\n * 避免循环操作 dom，创建一个 documentfragment 或 div，在它上面应用所有 dom 操作，最后再把它添加到 window.document\n * 避免多次读取 offset 等属性。无法避免则将它们缓存到变量\n * 将复杂的元素绝对定位或固定定位，使得它脱离文档流，否则回流代价会很高\n\n\n# 引擎对 js 的处理过程\n\n * 1. 读取代码，进行词法分析（lexical analysis），然后将代码分解成词元（token）\n * 2. 对词元进行语法分析（parsing），然后将代码整理成语法树（syntax tree）\n * 3. 使用翻译器（translator），将代码转为字节码（bytecode）\n * 4. 使用字节码解释器（bytecode interpreter），将字节码转为机器码\n\n\n# 浏览器缓存\n\njuejin/浅谈 http 缓存\n\n * 强缓存\n\nexpires: 值是服务器告诉浏览器的缓存过期时间\ncache-control: 值是相对时间内直接使用浏览器缓存\n\n\n1\n2\n\n * 协商缓存\n\nlast-modified 和 if-modified-since : 文件在服务器上最近的修改时间\netag 和 if-none-match : 只有当文件内容改变时，etag才改变\n\n\n1\n2\n\n * 缓存的优先级\n\ncache-control > expires > etag > last-modified\n\n\n1\n\n\n\n# http 常见状态码\n\n * 200 :表明该请求被成功地完成，所请求的资源发送回客户端\n * 201 :表示请求成功且服务器创建了新的资源\n * 202 :表示服务器已经接受了请求，但还未处理\n * 301 :表示永久重定向，请求的网页已经永久移动到新位置\n * 302 :表示临时重定向\n * 304 :自从上次请求后，请求的网页未修改过，请客户端使用本地缓存\n * 400 :客户端请求有错（譬如可以是安全模块拦截）\n * 401 :服务器无法理解请求的格式\n * 402 :请求未授权\n * 403 :禁止访问\n * 404 :资源未找到\n * 500 :服务器内部错误\n * 503 :服务不可用\n\n\n# https通信（握手）过程\n\n> https://juejin.cn/post/6908327746473033741#heading-30\n> \n> https采用非对称加密+对称加密，非对称加密来传递密钥；对称加密来加密内容\n\n * 1.客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法\n * 2.服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数\n * 3.客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服 务器。并且还会提供一个前面所有内容的 hash 的值，用来供服务器检验\n * 4.服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的 hash 值来供客户端检验\n * 5.客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息\n\n\n# http2\n\n> http 1.1 和 http 2.0 的区别\n\n * 二进制协议：http/2 是一个二进制协议。在 http/1.1 版中，报文的头信息必须是文本（ascii 编码），数据体可以是文本，也可以是二进制。http/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为"帧"，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。\n * 多路复用： http/2 实现了多路复用，http/2 仍然复用 tcp 连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了"队头堵塞"【1】的问题。\n * 数据流： http/2 使用了数据流的概念，因为 http/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。http/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 id ，用来区分它属于哪个数据流。\n * 头信息压缩： http/2 实现了头信息压缩，由于 http 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 cookie 和 user agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。http/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。\n * 服务器推送： http/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主动推送的是静态资源，和 websocket 以及使用 sse 等方式向客户端发送即时数据的推送是不同的。\n\n\n# http3\n\n> 说一下http 3.0\n\n * http/3基于udp协议实现了类似于tcp的多路复用数据流、传输可靠性等功能，这套功能被称为quic协议\n\n\n\n * 流量控制、传输可靠性功能：quic在udp的基础上增加了一层来保证数据传输可靠性，它提供了数据包重传、拥塞控制、以及其他一些tcp中的特性。\n * 集成tls加密功能：目前quic使用tls1.3，减少了握手所花费的rtt数。\n * 多路复用：同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的单独传输，解决了tcp的队头阻塞问题\n * 快速握手：由于基于udp，可以实现使用0 ~ 1个rtt来建立连接\n\n\n# cache-control: no-cache 和no-store的区别\n\ncache-control: no-store：这个才是响应不被缓存的意思 cache-control: no-cache是会被缓存的，只不过浏览器每次都会向服务器发起请求，来验证当前缓存的有效性\n\n\n# 垃圾回收机制\n\n> 原文 https://juejin.cn/post/7146996646394462239\n\n\n# gc 垃圾回收策略\n\n * 标记清除\n\n分为 标记 和 清除 两个阶段，标记阶段即为所有活动对象做上标记，清除阶段则把没有标记（也就是非活动对象）销毁 在运行时会给内存中的所有变量都加上一个标记，假设内存中所有对象都是垃圾，全标记为0 然后从各个根对象开始遍历，把不是垃圾的节点改成1，清理所有标记为0的垃圾，销毁并回收它们所占用的内存空间。最后，把所有内存中对象标记修改为0，等待下一轮垃圾回收\n\n * 引用计数\n\n一个对象，如果没有其他对象引用到它，这个对象就是零引用，将被垃圾回收机制回收 它的策略是跟踪记录每个变量值被使用的次数 一个对象被其他对象引用时，这个对象的引用次数就为 1，如果同一个值又被赋给另一个变量，那么引用数加 1，如果该变量的值被其他的值覆盖了，则引用次数减 1 当这个值的引用次数变为 0 的时候，说明没有变量在使用，这个值没法被访问了，回收空间，垃圾回收器会在运行的时候清理掉引用次数为 0 的值占用的内存\n\n\n# 分代式垃圾回收机制\n\nv8采用了一种代回收的策略，将内存分为两个生代：新生代和老生代 新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象\n\n\n# 参考文章\n\n * url 到页面加载过程',charsets:{cjk:!0},lastUpdated:"3/11/2023",lastUpdatedTimestamp:1678525665e3,createdTime:1643899953e3},{title:"typescript",frontmatter:{title:"typescript",date:"2022-01-31T00:00:00.000Z",sidebar:"auto",tags:["tsconfig","jsconfig"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/typescript.html",relativePath:"frontend/issues/typescript.md",key:"v-55150e46",path:"/frontend/issues/typescript.html",headers:[{level:2,title:"typescript",slug:"typescript",normalizedTitle:"typescript",charIndex:2},{level:2,title:"tsconfig & jsconfig",slug:"tsconfig-jsconfig",normalizedTitle:"tsconfig &amp; jsconfig",charIndex:null}],headersStr:"typescript tsconfig & jsconfig",content:'# typescript\n\n * https://github.com/jkchao/typescript-book-chinese\n * https://jkchao.github.io/typescript-book-chinese/typings/overview.html\n * microsoft/api-extractor: https://api-extractor.com/pages/setup/invoking/\n * ts complier options: https://www.tslang.cn/docs/handbook/compiler-options.html\n * rushstack:https://github.com/microsoft/rushstack\n\n\n# tsconfig & jsconfig\n\n * tsconfig.json\n\n{\n  "compilerOptions": {\n\n    /* 基本选项 */\n    "target": "es5",                       // 指定 ECMAScript 目标版本: \'ES3\' (default), \'ES5\', \'ES6\'/\'ES2015\', \'ES2016\', \'ES2017\', or \'ESNEXT\'\n    "module": "commonjs",                  // 指定使用模块: \'commonjs\', \'amd\', \'system\', \'umd\' or \'es2015\'\n    "lib": [],                             // 指定要包含在编译中的库文件\n    "allowJs": true,                       // 允许编译 javascript 文件\n    "checkJs": true,                       // 报告 javascript 文件中的错误\n    "jsx": "preserve",                     // 指定 jsx 代码的生成: \'preserve\', \'react-native\', or \'react\'\n    "declaration": true,                   // 生成相应的 \'.d.ts\' 文件\n    "sourceMap": true,                     // 生成相应的 \'.map\' 文件\n    "outFile": "./",                       // 将输出文件合并为一个文件\n    "outDir": "./",                        // 指定输出目录\n    "rootDir": "./",                       // 用来控制输出目录结构 --outDir.\n    "removeComments": true,                // 删除编译后的所有的注释\n    "noEmit": true,                        // 不生成输出文件\n    "importHelpers": true,                 // 从 tslib 导入辅助工具函数\n    "isolatedModules": true,               // 将每个文件作为单独的模块 （与 \'ts.transpileModule\' 类似）.\n\n    /* 严格的类型检查选项 */\n    "strict": true,                        // 启用所有严格类型检查选项\n    "noImplicitAny": true,                 // 在表达式和声明上有隐含的 any类型时报错\n    "strictNullChecks": true,              // 启用严格的 null 检查\n    "noImplicitThis": true,                // 当 this 表达式值为 any 类型的时候，生成一个错误\n    "alwaysStrict": true,                  // 以严格模式检查每个模块，并在每个文件里加入 \'use strict\'\n\n    /* 额外的检查 */\n    "noUnusedLocals": true,                // 有未使用的变量时，抛出错误\n    "noUnusedParameters": true,            // 有未使用的参数时，抛出错误\n    "noImplicitReturns": true,             // 并不是所有函数里的代码都有返回值时，抛出错误\n    "noFallthroughCasesInSwitch": true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）\n\n    /* 模块解析选项 */\n    "moduleResolution": "node",            // 选择模块解析策略： \'node\' (Node.js) or \'classic\' (TypeScript pre-1.6)\n    "baseUrl": "./",                       // 用于解析非相对模块名称的基目录\n    "paths": {},                           // 模块名到基于 baseUrl 的路径映射的列表\n    "rootDirs": [],                        // 根文件夹列表，其组合内容表示项目运行时的结构内容\n    "typeRoots": [],                       // 包含类型声明的文件列表\n    "types": [],                           // 需要包含的类型声明文件名列表\n    "allowSyntheticDefaultImports": true,  // 允许从没有设置默认导出的模块中默认导入。\n\n    /* Source Map Options */\n    "sourceRoot": "./",                    // 指定调试器应该找到 TypeScript 文件而不是源文件的位置\n    "mapRoot": "./",                       // 指定调试器应该找到映射文件而不是生成文件的位置\n    "inlineSourceMap": true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件\n    "inlineSources": true,                 // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性\n\n    /* 其他选项 */\n    "experimentalDecorators": true,        // 启用装饰器\n    "emitDecoratorMetadata": true          // 为装饰器提供元数据的支持\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n * jsconfig.json\n\n{\n  "include": [\n      "./src/**/*"\n  ],\n  "compilerOptions": {\n      "target": "esnext",\n      "module": "esnext",\n      "moduleResolution":"node",\n      "allowSyntheticDefaultImports": true,\n      "experimentalDecorators": true,\n      "baseUrl": ".",\n      "paths": {\n          "@/*": ["src/*"],\n          "@components/*": ["components/*"]\n      },\n  },\n  "exclude": [\n      "node_modules","dist",\n      "bower_components", "jspm_packages"\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n',normalizedContent:'# typescript\n\n * https://github.com/jkchao/typescript-book-chinese\n * https://jkchao.github.io/typescript-book-chinese/typings/overview.html\n * microsoft/api-extractor: https://api-extractor.com/pages/setup/invoking/\n * ts complier options: https://www.tslang.cn/docs/handbook/compiler-options.html\n * rushstack:https://github.com/microsoft/rushstack\n\n\n# tsconfig & jsconfig\n\n * tsconfig.json\n\n{\n  "compileroptions": {\n\n    /* 基本选项 */\n    "target": "es5",                       // 指定 ecmascript 目标版本: \'es3\' (default), \'es5\', \'es6\'/\'es2015\', \'es2016\', \'es2017\', or \'esnext\'\n    "module": "commonjs",                  // 指定使用模块: \'commonjs\', \'amd\', \'system\', \'umd\' or \'es2015\'\n    "lib": [],                             // 指定要包含在编译中的库文件\n    "allowjs": true,                       // 允许编译 javascript 文件\n    "checkjs": true,                       // 报告 javascript 文件中的错误\n    "jsx": "preserve",                     // 指定 jsx 代码的生成: \'preserve\', \'react-native\', or \'react\'\n    "declaration": true,                   // 生成相应的 \'.d.ts\' 文件\n    "sourcemap": true,                     // 生成相应的 \'.map\' 文件\n    "outfile": "./",                       // 将输出文件合并为一个文件\n    "outdir": "./",                        // 指定输出目录\n    "rootdir": "./",                       // 用来控制输出目录结构 --outdir.\n    "removecomments": true,                // 删除编译后的所有的注释\n    "noemit": true,                        // 不生成输出文件\n    "importhelpers": true,                 // 从 tslib 导入辅助工具函数\n    "isolatedmodules": true,               // 将每个文件作为单独的模块 （与 \'ts.transpilemodule\' 类似）.\n\n    /* 严格的类型检查选项 */\n    "strict": true,                        // 启用所有严格类型检查选项\n    "noimplicitany": true,                 // 在表达式和声明上有隐含的 any类型时报错\n    "strictnullchecks": true,              // 启用严格的 null 检查\n    "noimplicitthis": true,                // 当 this 表达式值为 any 类型的时候，生成一个错误\n    "alwaysstrict": true,                  // 以严格模式检查每个模块，并在每个文件里加入 \'use strict\'\n\n    /* 额外的检查 */\n    "nounusedlocals": true,                // 有未使用的变量时，抛出错误\n    "nounusedparameters": true,            // 有未使用的参数时，抛出错误\n    "noimplicitreturns": true,             // 并不是所有函数里的代码都有返回值时，抛出错误\n    "nofallthroughcasesinswitch": true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）\n\n    /* 模块解析选项 */\n    "moduleresolution": "node",            // 选择模块解析策略： \'node\' (node.js) or \'classic\' (typescript pre-1.6)\n    "baseurl": "./",                       // 用于解析非相对模块名称的基目录\n    "paths": {},                           // 模块名到基于 baseurl 的路径映射的列表\n    "rootdirs": [],                        // 根文件夹列表，其组合内容表示项目运行时的结构内容\n    "typeroots": [],                       // 包含类型声明的文件列表\n    "types": [],                           // 需要包含的类型声明文件名列表\n    "allowsyntheticdefaultimports": true,  // 允许从没有设置默认导出的模块中默认导入。\n\n    /* source map options */\n    "sourceroot": "./",                    // 指定调试器应该找到 typescript 文件而不是源文件的位置\n    "maproot": "./",                       // 指定调试器应该找到映射文件而不是生成文件的位置\n    "inlinesourcemap": true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件\n    "inlinesources": true,                 // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlinesourcemap 或 --sourcemap 属性\n\n    /* 其他选项 */\n    "experimentaldecorators": true,        // 启用装饰器\n    "emitdecoratormetadata": true          // 为装饰器提供元数据的支持\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n * jsconfig.json\n\n{\n  "include": [\n      "./src/**/*"\n  ],\n  "compileroptions": {\n      "target": "esnext",\n      "module": "esnext",\n      "moduleresolution":"node",\n      "allowsyntheticdefaultimports": true,\n      "experimentaldecorators": true,\n      "baseurl": ".",\n      "paths": {\n          "@/*": ["src/*"],\n          "@components/*": ["components/*"]\n      },\n  },\n  "exclude": [\n      "node_modules","dist",\n      "bower_components", "jspm_packages"\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647945545e3,createdTime:1647945545e3},{title:"css预处理器sass使用",frontmatter:{title:"css预处理器sass使用",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["sass"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/sass.html",relativePath:"frontend/issues/sass.md",key:"v-843ae6ea",path:"/frontend/issues/sass.html",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:62},{level:2,title:"基本使用",slug:"基本使用",normalizedTitle:"基本使用",charIndex:786},{level:2,title:"注释",slug:"注释",normalizedTitle:"注释",charIndex:1531},{level:2,title:"使用 $ 声明变量",slug:"使用-声明变量",normalizedTitle:"使用 $ 声明变量",charIndex:1599},{level:2,title:"嵌套 CSS 规则",slug:"嵌套-css-规则",normalizedTitle:"嵌套 css 规则",charIndex:2399},{level:2,title:"父选择器的标识符&",slug:"父选择器的标识符",normalizedTitle:"父选择器的标识符&amp;",charIndex:null},{level:2,title:"群组选择器的嵌套",slug:"群组选择器的嵌套",normalizedTitle:"群组选择器的嵌套",charIndex:3215},{level:2,title:"子组合选择器和同层组合选择器：>、+ 和 ~",slug:"子组合选择器和同层组合选择器-、-和",normalizedTitle:"子组合选择器和同层组合选择器：&gt;、+ 和 ~",charIndex:null},{level:2,title:"嵌套属性",slug:"嵌套属性",normalizedTitle:"嵌套属性",charIndex:4118},{level:2,title:"导入局部的 SASS 文件",slug:"导入局部的-sass-文件",normalizedTitle:"导入局部的 sass 文件",charIndex:4337},{level:2,title:"混合器 mixin",slug:"混合器-mixin",normalizedTitle:"混合器 mixin",charIndex:5132},{level:2,title:"使用选择器继承来精简CSS Extend",slug:"使用选择器继承来精简css-extend",normalizedTitle:"使用选择器继承来精简css extend",charIndex:7597},{level:2,title:"mixin and extend 不同",slug:"mixin-and-extend-不同",normalizedTitle:"mixin and extend 不同",charIndex:7946},{level:2,title:"function 函数指令",slug:"function-函数指令",normalizedTitle:"function 函数指令",charIndex:8518},{level:2,title:"控制指令 (Control Directives)",slug:"控制指令-control-directives",normalizedTitle:"控制指令 (control directives)",charIndex:9103},{level:2,title:"插值语句",slug:"插值语句",normalizedTitle:"插值语句",charIndex:11349}],headersStr:"安装 基本使用 注释 使用 $ 声明变量 嵌套 CSS 规则 父选择器的标识符& 群组选择器的嵌套 子组合选择器和同层组合选择器：>、+ 和 ~ 嵌套属性 导入局部的 SASS 文件 混合器 mixin 使用选择器继承来精简CSS Extend mixin and extend 不同 function 函数指令 控制指令 (Control Directives) 插值语句",content:' * sass-lang 官方文档\n * sass 中文\n * RubyGems 镜像\n * sass 转 css\n\n\n# 安装\n\n * 首先安装ruby\n * 安装 sass\n\n# 1.删除原gem源\ngem sources --remove https://rubygems.org/\n\n# 2.添加国内淘宝源\ngem sources -a hhttps://gems.ruby-china.com\n\n# 3.打印是否替换成功\ngem sources -l\n\n# 4.更换成功后打印如下\n*** CURRENT SOURCES ***\nhhttps://gems.ruby-china.com\n\n#\nsudo gem install sass\nsudo gem install compass\n\n# 安装node-sass\nnpm install node-sass -g\n# 监听单个文件\nnode-sass -w src/base.scss dist/base.css --output-style expanded\n# 监听文件夹\nnode-sass -w src --output dist --output-style expanded\n# 生成source-map\nnode-sass -w src --output dist --output-style expanded --source-map=true\n# 指定source-map路径为map\nnode-sass -w src --output dist --output-style expanded --source-map=map\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 基本使用\n\n * 命令行编译\n\n# 单文件转换命令\nsass input.scss output.css\n\n# 单文件监听命令\nsass --watch input.scss:output.css\n\n# 如果你有很多的sass文件的目录，你也可以告诉sass监听整个目录：\nsass --watch app/sass:public/stylesheets\n\n# 例: sass --watch src:dist --style expanded\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * 命令行编译配置选项\n\n# 编译格式\nsass --watch input.scss:output.css --style compact\n\n# 编译添加调试map\nsass --watch input.scss:output.css --sourcemap\n\n# 选择编译格式并添加调试map\nsass --watch input.scss:output.css --style expanded --sourcemap\n\n# 开启debug信息\nsass --watch input.scss:output.css --debug-info\n\n# sass内置有四种编译格式option: nested expanded compact compressed\nsass --style [option] # 表示解析后的css是什么排版格式\n\n# 开启sourcemap调试后，会生成一个后缀名为.css.map文件\nsass --sourcemap # 表示开启sourcemap调试。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 注释\n\n// 这种注释内容不会出现在生成的css文件中\n\n/* 这种注释内容会出现在生成的css文件中 */\n\n\n1\n2\n3\n\n\n\n# 使用 $ 声明变量\n\n/* 1. 使用变量$ */\n// 变量定义在css规则块内，那么该变量只能在此规则块内使用\n$highlight-color: #f90;\n$plain-font: "Myriad Pro", Myriad, "Helvetica Neue", Helvetica,\n  "Liberation Sans", Arial, sans-serif;\n\nhtml {\n  font-family: $plain-font;\n  color: $highlight-color;\n}\n\n// $变量引用, 将局部变量转换为全局变量可以添加 !global 声明\n.warp {\n  background: #ccc;\n  .selected {\n    border: 1px solid $highlight-color;\n  }\n}\n\n/* 变量名用中划线,下划线分隔都可以， 建议使用中划线 */\n\n$highlight-border: 1px solid $highlight-color;\n.selected {\n  border: $highlight-border;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n< title="scss编译后">\n\n// 编译后\nhtml {\n  font-family: "Myriad Pro", Myriad, "Helvetica Neue", Helvetica,\n    "Liberation Sans", Arial, sans-serif;\n  color: #f90;\n}\n\n.selected {\n  border: 1px solid #f90;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 嵌套 CSS 规则\n\n#content {\n  // 默认为子代选择器\n  article {\n    h1 {\n      color: #333;\n    }\n    p {\n      margin-bottom: 1.4em;\n    }\n  }\n  aside {\n    background-color: #eee;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n< title="scss编译后">\n\n// 编译后\n#content article h1 {\n  color: #333;\n}\n\n#content article p {\n  margin-bottom: 1.4em;\n}\n\n#content aside {\n  background-color: #eee;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 父选择器的标识符&\n\narticle a {\n  color: blue; // 链接符\n  &:hover {\n    color: red;\n  }\n}\n\n#content aside {\n  color: red; // 在父级加上一层范围标识\n  body.ie & {\n    color: green;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n< title="scss编译后">\n\n// 编译后\narticle a {\n  color: blue;\n}\n\narticle a:hover {\n  color: red;\n}\n\n#content aside {\n  color: red;\n}\n\nbody.ie #content aside {\n  color: green;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 群组选择器的嵌套\n\n.container {\n  h1,\n  h2,\n  h3 {\n    margin-bottom: 0.8em;\n  }\n}\n\nnav,\naside {\n  a {\n    color: blue;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n< title="scss编译后">\n\n// 编译后\n.container h1,\n.container h2,\n.container h3 {\n  margin-bottom: 0.8em;\n}\n\nnav a,\naside a {\n  color: blue;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 子组合选择器和同层组合选择器：>、+ 和 ~\n\narticle {\n  ~ article {\n    border-top: 1px dashed #ccc;\n  }\n  > section {\n    background: #eee;\n  }\n  dl > {\n    dt {\n      color: #333;\n    }\n    dd {\n      color: #555;\n    }\n  }\n  nav + & {\n    margin-top: 0;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n< title="scss编译后">\n\n// 编译后\narticle ~ article {\n  border-top: 1px dashed #ccc;\n}\n\narticle > section {\n  background: #eee;\n}\n\narticle dl > dt {\n  color: #333;\n}\n\narticle dl > dd {\n  color: #555;\n}\n\nnav + article {\n  margin-top: 0;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 嵌套属性\n\nnav {\n  border: {\n    style: solid;\n    width: 1px;\n    color: #ccc;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n< title="scss编译后">\n\n// 编译后\nnav {\n  border-style: solid;\n  border-width: 1px;\n  border-color: #ccc;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 导入局部的 SASS 文件\n\nsass 局部文件的文件名以下划线(_)开头，sass 就不会在编译时单独编译这个文件输出 css\n\n// _blue-theme.scss\naside {\n  background: blue;\n  color: white;\n}\n\n\n1\n2\n3\n4\n5\n\n\n// _tmp.scss\n/* 默认变量值\n   如果导入前没有设置变量的值则取默认值，否则取设置的值 */\n$fancybox-width: 400px !default;\n.fancybox {\n  width: $fancybox-width;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n/* 导入前设置变量的值 */\n$fancybox-width: 500px;\n@import "./_tmp";\n\n/* 嵌套导入sass :局部文件会被直接插入到css规则内导入它的地方 */\n.blue-theme {\n  @import "./_blue-theme";\n}\n\n$family: unquote("Droid+Sans");\n@import url("http://fonts.googleapis.com/css?family=#{$family}");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n< title="scss编译后">\n\n// 编译后\n.fancybox {\n  width: 500px;\n}\n\n// 编译后\n.blue-theme aside {\n  background: blue;\n  color: white;\n}\n\n// 编译后\n@import url("http://fonts.googleapis.com/css?family=Droid+Sans");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 混合器 mixin\n\n@mixin rounded-corners {\n  -moz-border-radius: 5px;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\n\n.notice {\n  background-color: green;\n  border: 2px solid #00aa00; // 使用混合器\n  @include rounded-corners;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n< title="scss编译后">\n\n// 编译后\n.notice {\n  background-color: green;\n  border: 2px solid #00aa00;\n  -moz-border-radius: 5px;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 混合器中的 CSS 规则\n\n@mixin no-bullets {\n  list-style: none;\n  li {\n    list-style-image: none;\n    list-style-type: none;\n    margin-left: 0px;\n  }\n}\n\nul.plain {\n  color: #444;\n  @include no-bullets;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n< title="scss编译后">\n\n// 编译后\nul.plain {\n  color: #444;\n  list-style: none;\n}\n\nul.plain li {\n  list-style-image: none;\n  list-style-type: none;\n  margin-left: 0px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 给混合器传参\n\n@mixin link-colors($normal, $hover, $visited) {\n  color: $normal;\n  &:hover {\n    color: $hover;\n  }\n  &:visited {\n    color: $visited;\n  }\n}\n\na {\n  @include link-colors(blue, red, green);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n< title="scss编译后">\n\n// 编译后\na {\n  color: blue;\n}\n\na:hover {\n  color: red;\n}\n\na:visited {\n  color: green;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 混合器传参: sass 允许通过语法$name: value 的形式指定每个参数的值\n\n@mixin link-colors($normal, $hover, $visited) {\n  color: $normal;\n  &:hover {\n    color: $hover;\n  }\n  &:visited {\n    color: $visited;\n  }\n}\na {\n  @include link-colors($normal: blue, $visited: green, $hover: red);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n< title="scss编译后">\n\n// 编译后\na {\n  color: blue;\n}\n\na:hover {\n  color: red;\n}\n\na:visited {\n  color: green;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 混合器传参:默认参数值 默认值使用$name: default-value的声明形式\n\n@mixin link-colors($normal, $hover: $normal, $visited: $normal) {\n  color: $normal;\n  &:hover {\n    color: $hover;\n  }\n  &:visited {\n    color: $visited;\n  }\n}\n\na {\n  @include link-colors($normal: blue);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n< title="scss编译后">\n\n// 编译后\na {\n  color: blue;\n}\n\na:hover {\n  color: blue;\n}\n\na:visited {\n  color: blue;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * mixin 向混合样式中导入内容 : @content\n\n$color: green;\n@mixin button($color: #fff) {\n  color: $color;\n  @content;\n  border: 1px solid $color;\n}\n\n.button-green {\n  @include button($color: red) {\n    background: $color;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n< title="scss编译后">\n\n// 编译后\n.button-green {\n  color: red;\n  background: green;\n  border: 1px solid #fff;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 使用选择器继承来精简CSS Extend\n\n//通过选择器继承继承样式\n.error {\n  border: 1px solid red;\n  background-color: #fdd;\n}\n\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n< title="scss编译后">\n\n// 编译后\n.error,\n.seriousError {\n  border: 1px solid red;\n  background-color: #fdd;\n}\n.seriousError {\n  border-width: 3px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# mixin and extend 不同\n\n/* extend */\n.button {\n  background: green;\n}\n\n.button-1 {\n  @extend .button;\n}\n\n.button-2 {\n  @extend .button;\n}\n\n/*  mixin  */\n@mixin button {\n  background-color: green;\n}\n\n.button-1 {\n  @include button;\n}\n\n.button-2 {\n  @include button;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n< title="scss编译后">\n\n// 编译后\n\n/* extend */\n.button,\n.button-1,\n.button-2 {\n  background: green;\n}\n\n/*  mixin  */\n.button-1 {\n  background-color: green;\n}\n.button-2 {\n  background-color: green;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# function 函数指令\n\n$grid-width: 40px;\n$gutter-width: 10px;\n\n@function grid-width($n) {\n  @return $n * $grid-width + ($n - 1) * $gutter-width;\n}\n\n#sidebar {\n  width: grid-width(5);\n}\n\n@function px2rem($n) {\n  @return ($n)/32;\n}\n.test {\n  height: px2rem(64rem);\n}\n\n$a: 16;\n$base: 32;\n@function p2r($n, $base: $a) {\n  @return $n/$base + rem;\n}\n\n#box {\n  width: p2r(160);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n< title="scss编译后">\n\n// 编译后\n#sidebar {\n  width: 240px;\n}\n\n.test {\n  height: 2rem;\n}\n\n#box {\n  width: 10rem;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 控制指令 (Control Directives)\n\n * @if\n\np {\n  @if 1+1==2 {\n    border: 1px solid;\n  }\n  @if 5 < 3 {\n    border: 2px dotted;\n  }\n  @if null {\n    border: 3px double;\n  }\n}\n\n$type: monster;\np {\n  @if $type==ocean {\n    color: blue;\n  } @else if $type==matador {\n    color: red;\n  } @else if $type==monster {\n    color: green;\n  } @else {\n    color: black;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n< title="scss编译后">\n\n// 编译后\np {\n  border: 1px solid;\n}\n\np {\n  color: green;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * @for\n\n@for $i from 1 through 3 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n< title="scss编译后">\n\n// 编译后\n.item-1 {\n  width: 2em;\n}\n\n.item-2 {\n  width: 4em;\n}\n\n.item-3 {\n  width: 6em;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * @each\n\n@each $animal in puma, sea-slug, egret, salamander {\n  .#{$animal}-icon {\n    background-image: url("/images/#{$animal}.png");\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n// 编译后\n.puma-icon {\n  background-image: url("/images/puma.png");\n}\n\n.sea-slug-icon {\n  background-image: url("/images/sea-slug.png");\n}\n\n.egret-icon {\n  background-image: url("/images/egret.png");\n}\n\n.salamander-icon {\n  background-image: url("/images/salamander.png");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * @while\n\n$i: 6;\n@while $i>0 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n  $i: $i - 2;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n// 编译后\n.item-6 {\n  width: 12em;\n}\n\n.item-4 {\n  width: 8em;\n}\n\n.item-2 {\n  width: 4em;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * @media\n\n.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n\n@media screen {\n  .sidebar {\n    @media (orientation: landscape) {\n      width: 500px;\n    }\n  }\n}\n\n// 2\n$media: screen;\n$feature: -webkit-min-device-pixel-ratio;\n$value: 1.5;\n@media #{$media} and ($feature: $value) {\n  .sidebar {\n    width: 500px;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n// 编译后\n.sidebar {\n  width: 300px;\n}\n\n@media screen and (orientation: landscape) {\n  .sidebar {\n    width: 500px;\n  }\n}\n\n@media screen and (orientation: landscape) {\n  .sidebar {\n    width: 500px;\n  }\n}\n\n// 2\n@media screen and (-webkit-min-device-pixel-ratio: 1.5) {\n  .sidebar {\n    width: 500px;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 插值语句\n\n可以在选择器或属性名中使用变量\n\n$name: foo;\n$attr: border;\np.#{$name} {\n  #{$attr}-color: blue;\n}\n\np {\n  $font-size: 12px;\n  $line-height: 30px;\n  font: #{$font-size}/#{$line-height};\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n// 编译后\np.foo {\n  border-color: blue;\n}\n\np {\n  font: 12px/30px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 运算: 数字运算\n\n/* 数字运算: 支持数字的加减乘除、取整等运算 (+, -, *, /, %)，如果必要会在不同单位间转换值 */\n\np {\n  font: 10px/8px; /* 纯 CSS，不是除法运算 */\n  $width: 1000px;\n  width: $width/2; /* 使用了变量，是除法运算 */\n  width: round(1.5) / 2; /* 使用了函数，是除法运算 */\n  height: (500px/2); /* 使用了圆括号，是除法运算 */\n  margin-left: 5px + 8px/2px; /* 使用了加（+）号，是除法运算 */\n}\n// 在纯 CSS 中使用变量和 /， 你可以用 #{} 包住变量\np {\n  $font-size: 12px;\n  $line-height: 30px;\n  font: #{$font-size}/#{$line-height};\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n// 编译后\n/* 数字运算: 支持数字的加减乘除、取整等运算 (+, -, *, /, %)，如果必要会在不同单位间转换值 */\np {\n  font: 10px/8px;\n  /* 纯 CSS，不是除法运算 */\n  width: 500px;\n  /* 使用了变量，是除法运算 */\n  width: 1;\n  /* 使用了函数，是除法运算 */\n  height: 250px;\n  /* 使用了圆括号，是除法运算 */\n  margin-left: 9px;\n  /* 使用了加（+）号，是除法运算 */\n}\n\n// 在纯 CSS 中使用变量和 /， 你可以用 #{} 包住变量\np {\n  font: 12px/30px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * 运算: 颜色值运算\n\np {\n  color: #010203 + #040506;\n}\n//\np {\n  color: rgba(255, 0, 0, 0.75) + rgba(0, 255, 0, 0.75);\n}\n\n/* 颜色值的 alpha channel 可以通过 opacify 或 transparentize 两个函数进行调整*/\n$translucent-red: rgba(255, 0, 0, 0.5);\np {\n  color: opacify($translucent-red, 0.3);\n  background-color: transparentize($translucent-red, 0.25);\n}\n\n$translucent-red: rgba(255, 0, 0, 0.5);\n$green: #00ff00;\ndiv {\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled=\'false\', startColorstr=\'#{ie-hex-str($green)}\', endColorstr=\'#{ie-hex-str($translucent-red)}\');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n// 编译后\n/* 颜色值运算  */\np {\n  color: #050709;\n}\n\np {\n  color: rgba(255, 255, 0, 0.75);\n}\n/* 颜色值的 alpha channel 可以通过 opacify 或 transparentize 两个函数进行调整*/\np {\n  color: rgba(255, 0, 0, 0.8);\n  background-color: rgba(255, 0, 0, 0.25);\n}\n\ndiv {\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled=\'false\', startColorstr=\'#FF00FF00\', endColorstr=\'#80FF0000\');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 字符串运算\n\np {\n  cursor: e + -resize;\n}\n\np:before {\n  content: "Foo " + Bar;\n  font-family: sans- + "serif";\n}\n\np:before {\n  content: "I ate #{5 + 10} pies!";\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n// 编译后\n/* 字符串运算 */\np {\n  cursor: e-resize;\n}\n\np:before {\n  content: "Foo Bar";\n  font-family: sans-serif;\n}\n\np:before {\n  content: "I ate 15 pies!";\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * @at-root\n\n@media print {\n  .page {\n    width: 8in;\n    @at-root (without: media) {\n      color: red;\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n// 编译后\n/* @at-root */\n@media print {\n  .page {\n    width: 8in;\n  }\n}\n\n.page {\n  color: red;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',normalizedContent:' * sass-lang 官方文档\n * sass 中文\n * rubygems 镜像\n * sass 转 css\n\n\n# 安装\n\n * 首先安装ruby\n * 安装 sass\n\n# 1.删除原gem源\ngem sources --remove https://rubygems.org/\n\n# 2.添加国内淘宝源\ngem sources -a hhttps://gems.ruby-china.com\n\n# 3.打印是否替换成功\ngem sources -l\n\n# 4.更换成功后打印如下\n*** current sources ***\nhhttps://gems.ruby-china.com\n\n#\nsudo gem install sass\nsudo gem install compass\n\n# 安装node-sass\nnpm install node-sass -g\n# 监听单个文件\nnode-sass -w src/base.scss dist/base.css --output-style expanded\n# 监听文件夹\nnode-sass -w src --output dist --output-style expanded\n# 生成source-map\nnode-sass -w src --output dist --output-style expanded --source-map=true\n# 指定source-map路径为map\nnode-sass -w src --output dist --output-style expanded --source-map=map\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 基本使用\n\n * 命令行编译\n\n# 单文件转换命令\nsass input.scss output.css\n\n# 单文件监听命令\nsass --watch input.scss:output.css\n\n# 如果你有很多的sass文件的目录，你也可以告诉sass监听整个目录：\nsass --watch app/sass:public/stylesheets\n\n# 例: sass --watch src:dist --style expanded\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * 命令行编译配置选项\n\n# 编译格式\nsass --watch input.scss:output.css --style compact\n\n# 编译添加调试map\nsass --watch input.scss:output.css --sourcemap\n\n# 选择编译格式并添加调试map\nsass --watch input.scss:output.css --style expanded --sourcemap\n\n# 开启debug信息\nsass --watch input.scss:output.css --debug-info\n\n# sass内置有四种编译格式option: nested expanded compact compressed\nsass --style [option] # 表示解析后的css是什么排版格式\n\n# 开启sourcemap调试后，会生成一个后缀名为.css.map文件\nsass --sourcemap # 表示开启sourcemap调试。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 注释\n\n// 这种注释内容不会出现在生成的css文件中\n\n/* 这种注释内容会出现在生成的css文件中 */\n\n\n1\n2\n3\n\n\n\n# 使用 $ 声明变量\n\n/* 1. 使用变量$ */\n// 变量定义在css规则块内，那么该变量只能在此规则块内使用\n$highlight-color: #f90;\n$plain-font: "myriad pro", myriad, "helvetica neue", helvetica,\n  "liberation sans", arial, sans-serif;\n\nhtml {\n  font-family: $plain-font;\n  color: $highlight-color;\n}\n\n// $变量引用, 将局部变量转换为全局变量可以添加 !global 声明\n.warp {\n  background: #ccc;\n  .selected {\n    border: 1px solid $highlight-color;\n  }\n}\n\n/* 变量名用中划线,下划线分隔都可以， 建议使用中划线 */\n\n$highlight-border: 1px solid $highlight-color;\n.selected {\n  border: $highlight-border;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n< title="scss编译后">\n\n// 编译后\nhtml {\n  font-family: "myriad pro", myriad, "helvetica neue", helvetica,\n    "liberation sans", arial, sans-serif;\n  color: #f90;\n}\n\n.selected {\n  border: 1px solid #f90;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 嵌套 css 规则\n\n#content {\n  // 默认为子代选择器\n  article {\n    h1 {\n      color: #333;\n    }\n    p {\n      margin-bottom: 1.4em;\n    }\n  }\n  aside {\n    background-color: #eee;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n< title="scss编译后">\n\n// 编译后\n#content article h1 {\n  color: #333;\n}\n\n#content article p {\n  margin-bottom: 1.4em;\n}\n\n#content aside {\n  background-color: #eee;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 父选择器的标识符&\n\narticle a {\n  color: blue; // 链接符\n  &:hover {\n    color: red;\n  }\n}\n\n#content aside {\n  color: red; // 在父级加上一层范围标识\n  body.ie & {\n    color: green;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n< title="scss编译后">\n\n// 编译后\narticle a {\n  color: blue;\n}\n\narticle a:hover {\n  color: red;\n}\n\n#content aside {\n  color: red;\n}\n\nbody.ie #content aside {\n  color: green;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 群组选择器的嵌套\n\n.container {\n  h1,\n  h2,\n  h3 {\n    margin-bottom: 0.8em;\n  }\n}\n\nnav,\naside {\n  a {\n    color: blue;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n< title="scss编译后">\n\n// 编译后\n.container h1,\n.container h2,\n.container h3 {\n  margin-bottom: 0.8em;\n}\n\nnav a,\naside a {\n  color: blue;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 子组合选择器和同层组合选择器：>、+ 和 ~\n\narticle {\n  ~ article {\n    border-top: 1px dashed #ccc;\n  }\n  > section {\n    background: #eee;\n  }\n  dl > {\n    dt {\n      color: #333;\n    }\n    dd {\n      color: #555;\n    }\n  }\n  nav + & {\n    margin-top: 0;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n< title="scss编译后">\n\n// 编译后\narticle ~ article {\n  border-top: 1px dashed #ccc;\n}\n\narticle > section {\n  background: #eee;\n}\n\narticle dl > dt {\n  color: #333;\n}\n\narticle dl > dd {\n  color: #555;\n}\n\nnav + article {\n  margin-top: 0;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 嵌套属性\n\nnav {\n  border: {\n    style: solid;\n    width: 1px;\n    color: #ccc;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n< title="scss编译后">\n\n// 编译后\nnav {\n  border-style: solid;\n  border-width: 1px;\n  border-color: #ccc;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 导入局部的 sass 文件\n\nsass 局部文件的文件名以下划线(_)开头，sass 就不会在编译时单独编译这个文件输出 css\n\n// _blue-theme.scss\naside {\n  background: blue;\n  color: white;\n}\n\n\n1\n2\n3\n4\n5\n\n\n// _tmp.scss\n/* 默认变量值\n   如果导入前没有设置变量的值则取默认值，否则取设置的值 */\n$fancybox-width: 400px !default;\n.fancybox {\n  width: $fancybox-width;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n/* 导入前设置变量的值 */\n$fancybox-width: 500px;\n@import "./_tmp";\n\n/* 嵌套导入sass :局部文件会被直接插入到css规则内导入它的地方 */\n.blue-theme {\n  @import "./_blue-theme";\n}\n\n$family: unquote("droid+sans");\n@import url("http://fonts.googleapis.com/css?family=#{$family}");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n< title="scss编译后">\n\n// 编译后\n.fancybox {\n  width: 500px;\n}\n\n// 编译后\n.blue-theme aside {\n  background: blue;\n  color: white;\n}\n\n// 编译后\n@import url("http://fonts.googleapis.com/css?family=droid+sans");\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 混合器 mixin\n\n@mixin rounded-corners {\n  -moz-border-radius: 5px;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\n\n.notice {\n  background-color: green;\n  border: 2px solid #00aa00; // 使用混合器\n  @include rounded-corners;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n< title="scss编译后">\n\n// 编译后\n.notice {\n  background-color: green;\n  border: 2px solid #00aa00;\n  -moz-border-radius: 5px;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 混合器中的 css 规则\n\n@mixin no-bullets {\n  list-style: none;\n  li {\n    list-style-image: none;\n    list-style-type: none;\n    margin-left: 0px;\n  }\n}\n\nul.plain {\n  color: #444;\n  @include no-bullets;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n< title="scss编译后">\n\n// 编译后\nul.plain {\n  color: #444;\n  list-style: none;\n}\n\nul.plain li {\n  list-style-image: none;\n  list-style-type: none;\n  margin-left: 0px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 给混合器传参\n\n@mixin link-colors($normal, $hover, $visited) {\n  color: $normal;\n  &:hover {\n    color: $hover;\n  }\n  &:visited {\n    color: $visited;\n  }\n}\n\na {\n  @include link-colors(blue, red, green);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n< title="scss编译后">\n\n// 编译后\na {\n  color: blue;\n}\n\na:hover {\n  color: red;\n}\n\na:visited {\n  color: green;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 混合器传参: sass 允许通过语法$name: value 的形式指定每个参数的值\n\n@mixin link-colors($normal, $hover, $visited) {\n  color: $normal;\n  &:hover {\n    color: $hover;\n  }\n  &:visited {\n    color: $visited;\n  }\n}\na {\n  @include link-colors($normal: blue, $visited: green, $hover: red);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n< title="scss编译后">\n\n// 编译后\na {\n  color: blue;\n}\n\na:hover {\n  color: red;\n}\n\na:visited {\n  color: green;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 混合器传参:默认参数值 默认值使用$name: default-value的声明形式\n\n@mixin link-colors($normal, $hover: $normal, $visited: $normal) {\n  color: $normal;\n  &:hover {\n    color: $hover;\n  }\n  &:visited {\n    color: $visited;\n  }\n}\n\na {\n  @include link-colors($normal: blue);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n< title="scss编译后">\n\n// 编译后\na {\n  color: blue;\n}\n\na:hover {\n  color: blue;\n}\n\na:visited {\n  color: blue;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * mixin 向混合样式中导入内容 : @content\n\n$color: green;\n@mixin button($color: #fff) {\n  color: $color;\n  @content;\n  border: 1px solid $color;\n}\n\n.button-green {\n  @include button($color: red) {\n    background: $color;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n< title="scss编译后">\n\n// 编译后\n.button-green {\n  color: red;\n  background: green;\n  border: 1px solid #fff;\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 使用选择器继承来精简css extend\n\n//通过选择器继承继承样式\n.error {\n  border: 1px solid red;\n  background-color: #fdd;\n}\n\n.seriouserror {\n  @extend .error;\n  border-width: 3px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n< title="scss编译后">\n\n// 编译后\n.error,\n.seriouserror {\n  border: 1px solid red;\n  background-color: #fdd;\n}\n.seriouserror {\n  border-width: 3px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# mixin and extend 不同\n\n/* extend */\n.button {\n  background: green;\n}\n\n.button-1 {\n  @extend .button;\n}\n\n.button-2 {\n  @extend .button;\n}\n\n/*  mixin  */\n@mixin button {\n  background-color: green;\n}\n\n.button-1 {\n  @include button;\n}\n\n.button-2 {\n  @include button;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n< title="scss编译后">\n\n// 编译后\n\n/* extend */\n.button,\n.button-1,\n.button-2 {\n  background: green;\n}\n\n/*  mixin  */\n.button-1 {\n  background-color: green;\n}\n.button-2 {\n  background-color: green;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# function 函数指令\n\n$grid-width: 40px;\n$gutter-width: 10px;\n\n@function grid-width($n) {\n  @return $n * $grid-width + ($n - 1) * $gutter-width;\n}\n\n#sidebar {\n  width: grid-width(5);\n}\n\n@function px2rem($n) {\n  @return ($n)/32;\n}\n.test {\n  height: px2rem(64rem);\n}\n\n$a: 16;\n$base: 32;\n@function p2r($n, $base: $a) {\n  @return $n/$base + rem;\n}\n\n#box {\n  width: p2r(160);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n< title="scss编译后">\n\n// 编译后\n#sidebar {\n  width: 240px;\n}\n\n.test {\n  height: 2rem;\n}\n\n#box {\n  width: 10rem;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 控制指令 (control directives)\n\n * @if\n\np {\n  @if 1+1==2 {\n    border: 1px solid;\n  }\n  @if 5 < 3 {\n    border: 2px dotted;\n  }\n  @if null {\n    border: 3px double;\n  }\n}\n\n$type: monster;\np {\n  @if $type==ocean {\n    color: blue;\n  } @else if $type==matador {\n    color: red;\n  } @else if $type==monster {\n    color: green;\n  } @else {\n    color: black;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n< title="scss编译后">\n\n// 编译后\np {\n  border: 1px solid;\n}\n\np {\n  color: green;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * @for\n\n@for $i from 1 through 3 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n< title="scss编译后">\n\n// 编译后\n.item-1 {\n  width: 2em;\n}\n\n.item-2 {\n  width: 4em;\n}\n\n.item-3 {\n  width: 6em;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * @each\n\n@each $animal in puma, sea-slug, egret, salamander {\n  .#{$animal}-icon {\n    background-image: url("/images/#{$animal}.png");\n  }\n}\n\n\n1\n2\n3\n4\n5\n\n\n// 编译后\n.puma-icon {\n  background-image: url("/images/puma.png");\n}\n\n.sea-slug-icon {\n  background-image: url("/images/sea-slug.png");\n}\n\n.egret-icon {\n  background-image: url("/images/egret.png");\n}\n\n.salamander-icon {\n  background-image: url("/images/salamander.png");\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * @while\n\n$i: 6;\n@while $i>0 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n  $i: $i - 2;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n// 编译后\n.item-6 {\n  width: 12em;\n}\n\n.item-4 {\n  width: 8em;\n}\n\n.item-2 {\n  width: 4em;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * @media\n\n.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n\n@media screen {\n  .sidebar {\n    @media (orientation: landscape) {\n      width: 500px;\n    }\n  }\n}\n\n// 2\n$media: screen;\n$feature: -webkit-min-device-pixel-ratio;\n$value: 1.5;\n@media #{$media} and ($feature: $value) {\n  .sidebar {\n    width: 500px;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n// 编译后\n.sidebar {\n  width: 300px;\n}\n\n@media screen and (orientation: landscape) {\n  .sidebar {\n    width: 500px;\n  }\n}\n\n@media screen and (orientation: landscape) {\n  .sidebar {\n    width: 500px;\n  }\n}\n\n// 2\n@media screen and (-webkit-min-device-pixel-ratio: 1.5) {\n  .sidebar {\n    width: 500px;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 插值语句\n\n可以在选择器或属性名中使用变量\n\n$name: foo;\n$attr: border;\np.#{$name} {\n  #{$attr}-color: blue;\n}\n\np {\n  $font-size: 12px;\n  $line-height: 30px;\n  font: #{$font-size}/#{$line-height};\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n// 编译后\np.foo {\n  border-color: blue;\n}\n\np {\n  font: 12px/30px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 运算: 数字运算\n\n/* 数字运算: 支持数字的加减乘除、取整等运算 (+, -, *, /, %)，如果必要会在不同单位间转换值 */\n\np {\n  font: 10px/8px; /* 纯 css，不是除法运算 */\n  $width: 1000px;\n  width: $width/2; /* 使用了变量，是除法运算 */\n  width: round(1.5) / 2; /* 使用了函数，是除法运算 */\n  height: (500px/2); /* 使用了圆括号，是除法运算 */\n  margin-left: 5px + 8px/2px; /* 使用了加（+）号，是除法运算 */\n}\n// 在纯 css 中使用变量和 /， 你可以用 #{} 包住变量\np {\n  $font-size: 12px;\n  $line-height: 30px;\n  font: #{$font-size}/#{$line-height};\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n// 编译后\n/* 数字运算: 支持数字的加减乘除、取整等运算 (+, -, *, /, %)，如果必要会在不同单位间转换值 */\np {\n  font: 10px/8px;\n  /* 纯 css，不是除法运算 */\n  width: 500px;\n  /* 使用了变量，是除法运算 */\n  width: 1;\n  /* 使用了函数，是除法运算 */\n  height: 250px;\n  /* 使用了圆括号，是除法运算 */\n  margin-left: 9px;\n  /* 使用了加（+）号，是除法运算 */\n}\n\n// 在纯 css 中使用变量和 /， 你可以用 #{} 包住变量\np {\n  font: 12px/30px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * 运算: 颜色值运算\n\np {\n  color: #010203 + #040506;\n}\n//\np {\n  color: rgba(255, 0, 0, 0.75) + rgba(0, 255, 0, 0.75);\n}\n\n/* 颜色值的 alpha channel 可以通过 opacify 或 transparentize 两个函数进行调整*/\n$translucent-red: rgba(255, 0, 0, 0.5);\np {\n  color: opacify($translucent-red, 0.3);\n  background-color: transparentize($translucent-red, 0.25);\n}\n\n$translucent-red: rgba(255, 0, 0, 0.5);\n$green: #00ff00;\ndiv {\n  filter: progid:dximagetransform.microsoft.gradient(enabled=\'false\', startcolorstr=\'#{ie-hex-str($green)}\', endcolorstr=\'#{ie-hex-str($translucent-red)}\');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n// 编译后\n/* 颜色值运算  */\np {\n  color: #050709;\n}\n\np {\n  color: rgba(255, 255, 0, 0.75);\n}\n/* 颜色值的 alpha channel 可以通过 opacify 或 transparentize 两个函数进行调整*/\np {\n  color: rgba(255, 0, 0, 0.8);\n  background-color: rgba(255, 0, 0, 0.25);\n}\n\ndiv {\n  filter: progid:dximagetransform.microsoft.gradient(enabled=\'false\', startcolorstr=\'#ff00ff00\', endcolorstr=\'#80ff0000\');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 字符串运算\n\np {\n  cursor: e + -resize;\n}\n\np:before {\n  content: "foo " + bar;\n  font-family: sans- + "serif";\n}\n\np:before {\n  content: "i ate #{5 + 10} pies!";\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n// 编译后\n/* 字符串运算 */\np {\n  cursor: e-resize;\n}\n\np:before {\n  content: "foo bar";\n  font-family: sans-serif;\n}\n\np:before {\n  content: "i ate 15 pies!";\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * @at-root\n\n@media print {\n  .page {\n    width: 8in;\n    @at-root (without: media) {\n      color: red;\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n// 编译后\n/* @at-root */\n@media print {\n  .page {\n    width: 8in;\n  }\n}\n\n.page {\n  color: red;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647945545e3,createdTime:1647945545e3},{title:"css常见问题",frontmatter:{title:"css常见问题",date:"2022-02-13T00:00:00.000Z",sidebar:"auto",tags:["1像素问题","清除浮动","css三角形","百分比单位","字体超出省略","居中"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/use-css.html",relativePath:"frontend/issues/use-css.md",key:"v-37efe66a",path:"/frontend/issues/use-css.html",headers:[{level:2,title:"水平居中",slug:"水平居中",normalizedTitle:"水平居中",charIndex:2},{level:2,title:"垂直居中",slug:"垂直居中",normalizedTitle:"垂直居中",charIndex:86},{level:2,title:"水平垂直居中",slug:"水平垂直居中",normalizedTitle:"水平垂直居中",charIndex:302},{level:3,title:"固定宽高的块级盒子",slug:"固定宽高的块级盒子",normalizedTitle:"固定宽高的块级盒子",charIndex:379},{level:3,title:"不固定宽高的块级盒子",slug:"不固定宽高的块级盒子",normalizedTitle:"不固定宽高的块级盒子",charIndex:1009},{level:2,title:"CSS的border边框",slug:"css的border边框",normalizedTitle:"css的border边框",charIndex:2220},{level:2,title:"1border(1 像素问题)",slug:"_1border-1-像素问题",normalizedTitle:"1border(1 像素问题)",charIndex:2412},{level:2,title:"清除浮动的方式",slug:"清除浮动的方式",normalizedTitle:"清除浮动的方式",charIndex:3334},{level:2,title:"横屏布局",slug:"横屏布局",normalizedTitle:"横屏布局",charIndex:4110},{level:2,title:"文字超出省略, 单行、多行文本溢出隐藏",slug:"文字超出省略-单行、多行文本溢出隐藏",normalizedTitle:"文字超出省略, 单行、多行文本溢出隐藏",charIndex:4715},{level:2,title:"css百分比单位（%）",slug:"css百分比单位",normalizedTitle:"css百分比单位（%）",charIndex:5162},{level:3,title:"子元素中的百分比到底是谁的百分比",slug:"子元素中的百分比到底是谁的百分比",normalizedTitle:"子元素中的百分比到底是谁的百分比",charIndex:5178},{level:3,title:"应用",slug:"应用",normalizedTitle:"应用",charIndex:5345},{level:3,title:"百分比单位缺点",slug:"百分比单位缺点",normalizedTitle:"百分比单位缺点",charIndex:6064},{level:2,title:"如何判断元素是否到达可视区域",slug:"如何判断元素是否到达可视区域",normalizedTitle:"如何判断元素是否到达可视区域",charIndex:6304},{level:2,title:"a 伪类的顺序",slug:"a-伪类的顺序",normalizedTitle:"a 伪类的顺序",charIndex:8034},{level:2,title:"解决 IE9 不能使用 opacity",slug:"解决-ie9-不能使用-opacity",normalizedTitle:"解决 ie9 不能使用 opacity",charIndex:8483},{level:2,title:"html 转义符",slug:"html-转义符",normalizedTitle:"html 转义符",charIndex:8634},{level:2,title:"页面三层结构",slug:"页面三层结构",normalizedTitle:"页面三层结构",charIndex:8883},{level:2,title:"css font-family",slug:"css-font-family",normalizedTitle:"css font-family",charIndex:8933}],headersStr:"水平居中 垂直居中 水平垂直居中 固定宽高的块级盒子 不固定宽高的块级盒子 CSS的border边框 1border(1 像素问题) 清除浮动的方式 横屏布局 文字超出省略, 单行、多行文本溢出隐藏 css百分比单位（%） 子元素中的百分比到底是谁的百分比 应用 百分比单位缺点 如何判断元素是否到达可视区域 a 伪类的顺序 解决 IE9 不能使用 opacity html 转义符 页面三层结构 css font-family",content:'# 水平居中\n\n * 此类元素需要水平居中，则父级元素必须是块级元素:\n\n.parent {\n    text-align: center;\n}\n\n\n1\n2\n3\n\n\n\n# 垂直居中\n\n * 通过设置上下内间距一致达到垂直居中的效果:\n\n.single-line {\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n\n\n1\n2\n3\n4\n\n * 通过设置 height 和 line-height 一致达到垂直居中:\n\n.single-line {\n  height: 100px;\n  line-height: 100px;\n}\n\n\n1\n2\n3\n4\n\n\n\n# 水平垂直居中\n\n<div class="parent">\n  <div class="child"></div>\n</div>\n\n\n1\n2\n3\n\n\n\n# 固定宽高的块级盒子\n\n * absolute + 负 margin:\n\n.parent{\n  position: relative;\n}\n.child{\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 100px;\n  height: 100px;\n  margin: -50px 0 0 -50px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * absolute + margin auto\n\n.parent{\n  position: relative;\n}\n.child{\n  width: 100px;\n  height: 100px;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * absolute + calc\n\n.parent{\n  position: relative;\n}\n.child{\n  width: 100px;\n  height: 100px;\n  position: absolute;\n  left: calc(50% - 50px);\n  top: calc(50% - 50px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 不固定宽高的块级盒子\n\n * absolute + transform\n\n.parent{\n  position: relative;\n}\n\n.child{\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * flex\n\n.parent {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n\n1\n2\n3\n4\n5\n\n * table-cell\n\n.parent {\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n  width: 600px;\n}\n.child {\n  display: inline-block;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * grid\n\n.parent {\n  display: grid;\n}\n.child {\n  align-self: center;\n  justify-self: center;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * line-height + vertical-align\n\n.parent{\n  line-height: 150px;\n  text-align: center;\n  height: 150px;\n}\n\n.child{\n  display: inline-block;\n  line-height: initial;\n  vertical-align: middle;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * writing-mode\n\n<div class="parent box">\n  <div class="middle">\n    <div class="child bg">writing-mode</div>\n  </div>\n</div>\n<style>\n.parent {\n  writing-mode: vertical-lr;\n  text-align: center;\n}\n.parent .middle {\n  display: inline-block;\n  writing-mode: horizontal-tb;\n  text-align: center;\n  width: 100%;\n}\n.parent .child {\n  display: inline-block;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# CSS的border边框\n\n/* 三角 */\n.triangle {\n  width: 0px;\n  height: 0px;\n  background: none;\n  border: 50px solid red;\n  border-color: red transparent transparent transparent;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 1border(1 像素问题)\n\n * 只设置单条底部边框\n\n.scale-1px-bottom {\n    position: relative;\n    border:none;\n}\n.scale-1px-bottom::after {\n    content: \'\';\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    background: #000;\n    width: 100%;\n    height: 1px;\n    -webkit-transform: scaleY(0.5);\n    transform: scaleY(0.5);\n    -webkit-transform-origin: 0 0;\n    transform-origin: 0 0;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * 同时设置 4 条边框\n\n.scale-1px {\n    position: relative;\n    margin-bottom: 20px;\n    border:none;\n}\n.scale-1px::after {\n    content: \'\';\n    position: absolute;\n    top: 0;\n    left: 0;\n    border: 1px solid #000;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    width: 200%;\n    height: 200%;\n    -webkit-transform: scale(0.5);\n    transform: scale(0.5);\n    -webkit-transform-origin: left top;\n    transform-origin: left top;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 清除浮动的方式\n\n * 额外标签法\n\n.clear {\n  clear: both;\n}\n\n\n1\n2\n3\n\n * 伪元素：\n\n.clearfix:after {\n  display: block;\n  overflow: hidden;\n  visibility: hidden;\n  height: 0;\n  content: "";\n  clear: both;\n}\n.clearfix {\n  zoom: 1;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 双伪元素\n\n.clearfix:after,\n.clearfix:before {\n  display: table;\n  overflow: hidden;\n  height: 0;\n  content: "";\n  clear: both;\n}\n.clearfix {\n  zoom: 1;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * BFC清除内部浮动\n\n/* parent */\n.box {\n  width: 300px;\n  border: 1px solid #000;\n  overflow: hidden; /* there */\n}\n/* child */\n.one {\n  width: 150px;\n  height: 200px;\n  background-color: pink;\n  float: left;\n}\n/* child */\n.two {\n  width: 150px;\n  height: 200px;\n  background-color: blue;\n  float: left;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 横屏布局\n\n.landscape-container {\n  position: absolute;\n  overflow: hidden;\n}\n\n// 竖屏\n@media screen and (orientation: portrait) {\n  .landscape-container {\n    width: 100vh;\n    height: 100vw;\n    top: calc((100vh - 100vw) / 2);\n    left: calc((100vw - 100vh) / 2);\n    transform: rotate(90deg);\n    transform-origin: 50% 50%;\n  }\n}\n\n// 横屏\n@media screen and (orientation: landscape) {\n  .landscape-container {\n    width: 100vw;\n    height: 100vh;\n    top: 0;\n    left: 0;\n    transform: none;\n    transform-origin: 50% 50%;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 文字超出省略, 单行、多行文本溢出隐藏\n\n * 单行文本溢出\n\n.line-camp {\n  width: 300px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 多行文本溢出\n\n.line-camp {\n  width: 300px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  /*! autoprefixer: off */\n  -webkit-box-orient: vertical;\n  /* autoprefixer: on */\n  text-overflow: -o-ellipsis-lastline;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# css百分比单位（%）\n\n\n# 子元素中的百分比到底是谁的百分比\n\n * padding: 子元素的 padding 如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的 height 无关\n\n * margin: 子元素的 margin 如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width\n\n\n# 应用\n\n> forked: https://juejin.cn/post/6936913689115099143\n\n * padding设置百分比\n\n  <div class="trangle"></div>\n\n  .trangle{\n    height:0;\n    width:100%;\n    padding-top:75%;\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * CSS 怎么画一个大小为父元素宽度一半的正方形:\n\n<div class="outer">\n  <div class="inner"></div>\n</div>\n\n.outer {\n  width: 400px;\n  height: 600px;\n  background: red;\n}\n\n.inner {\n  width: 50%;\n  padding-bottom: 50%;\n  background: blue;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * CSS实现自适应正方形、等宽高比矩形:\n\n<div class="outer">\n  <div class="inner"></div>\n</div>\n\n.outer {\n  width: 400px;\n  height: 600px;\n  background: blue;\n}\n\n.inner {\n  width: 100%;\n  height: 0;\n  padding-bottom: 100%;\n  background: red;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 百分比单位缺点\n\n * 计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位\n\n * 各个属性中如果使用百分比，相对父元素的属性并不是唯一的\n   \n   * width 和 height 相对于父元素的 width 和 height\n   \n   * margin、padding 不管垂直还是水平方向都相对比父元素的宽度\n   \n   * border-radius 则是相对于元素自身\n\n * 造成我们使用百分比单位容易使布局问题变得复杂\n\n\n# 如何判断元素是否到达可视区域\n\n> 原文: 「2021」高频前端面试题汇总之前端性能优化篇\n\n * window.innerHeight 是浏览器可视区的高度；\n * document.body.scrollTop || document.documentElement.scrollTop 是浏览器滚动的过的距离；\n * imgs.offsetTop 是元素顶部距离文档顶部的高度（包括滚动条的距离）；\n * 内容达到显示区域的：img.offsetTop < window.innerHeight + document.body.scrollTop;\n\n\n\n * code\n\n<div class="container">\n     <img src="loading.gif"  data-src="pic.png">\n     <img src="loading.gif"  data-src="pic.png">\n</div>\n<script>\nvar imgs = document.querySelectorAll(\'img\');\nfunction lozyLoad(){\n\t\tvar scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n\t\tvar winHeight= window.innerHeight;\n\t\tfor(var i=0;i < imgs.length;i++){\n\t\t\tif(imgs[i].offsetTop < scrollTop + winHeight ){\n\t\t\t\timgs[i].src = imgs[i].getAttribute(\'data-src\');\n\t\t\t}\n\t\t}\n\t}\n  window.onscroll = lozyLoad();\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * 图片懒加载（imgLazyLoad）: 36 个 JS 手写题\n\nlet imgList = [...document.querySelectorAll(\'img\')]\nlet length = imgList.length\n\n// 修正错误，需要加上自执行\nconst imgLazyLoad = (function() {\n  let count = 0\n\n   return function() {\n        let deleteIndexList = []\n        imgList.forEach((img, index) => {\n            let rect = img.getBoundingClientRect()\n            if (rect.top < window.innerHeight) {\n                img.src = img.dataset.src\n                deleteIndexList.push(index)\n                count++\n                if (count === length) {\n                    document.removeEventListener(\'scroll\', imgLazyLoad)\n                }\n            }\n        })\n        imgList = imgList.filter((img, index) => !deleteIndexList.includes(index))\n   }\n})()\n\n// 这里最好加上防抖处理\ndocument.addEventListener(\'scroll\', imgLazyLoad)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# a 伪类的顺序\n\n * link visited hover active\n   * link:平常的状态\n   * visited:被访问过之后\n   * hover:鼠标放到链接上的时候\n   * active:链接被按下的时候\n\na:link {\n  background-color: blue;\n}\na:visited {\n  background-color: pink;\n}\na:hover {\n  background-color: purple;\n}\na:active {\n  background-color: yellow;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * noreferrer/noopener\n\n<a\n  href="https://an.evil.site"\n  target="_blank"\n  rel="noopener noreferrer nofollow"\n  >a链接</a\n>\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 解决 IE9 不能使用 opacity\n\nopacity: 0.5;\nfilter: alpha(opacity = 50);\nfilter: progid:DXImageTransform.Microsoft.Alpha(style = 0, opacity = 50);\n\n\n1\n2\n3\n\n\n\n# html 转义符\n\n`&times；` -> `×`\n\n`&nbsp;` 半角的不断行的空白格（推荐使用）\n\n`&ensp;` 半角的空格\n\n`&emsp;` 全角的空格\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 兼容\n\n\x3c!-- cc:ie6 快捷键 --\x3e\n\x3c!--[if lte IE 8]>\n  <script src="http://cdn.bootcss.com/html5shiv/r29/html5.js"><\/script>\n<![endif]--\x3e\n\n\n1\n2\n3\n4\n\n\n\n# 页面三层结构\n\n * 结构层HTML\n * 表现层CSS\n * 行为层JavaScript\n\n\n# css font-family\n\n> 原视频 网页的默认全局字体该如何设置？\n\n@font-face {\n  font-family: Emoji;\n  src: local("Apple Color Emojiji"), local("Segoe UI Emoji"), local("Segoe UI Symbol"), local("Noto Color Emoji");\n  unicode-range: U+1F000-1F644, U+203C-3299;\n}\nbody {\n  font-family: system-ui, —apple-system, Segoe UI, Rototo, Emoji, Helvetica, Arial, sans-serif;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 衬线字体\n\n.font-serif {\n  font-family: Georgia, Cambria, "Times New Roman", Times, serif;\n}\n\n\n1\n2\n3\n\n * 等宽字体\n\n.font-mono {\n  font-family: Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;\n}\n\n\n1\n2\n3\n',normalizedContent:'# 水平居中\n\n * 此类元素需要水平居中，则父级元素必须是块级元素:\n\n.parent {\n    text-align: center;\n}\n\n\n1\n2\n3\n\n\n\n# 垂直居中\n\n * 通过设置上下内间距一致达到垂直居中的效果:\n\n.single-line {\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n\n\n1\n2\n3\n4\n\n * 通过设置 height 和 line-height 一致达到垂直居中:\n\n.single-line {\n  height: 100px;\n  line-height: 100px;\n}\n\n\n1\n2\n3\n4\n\n\n\n# 水平垂直居中\n\n<div class="parent">\n  <div class="child"></div>\n</div>\n\n\n1\n2\n3\n\n\n\n# 固定宽高的块级盒子\n\n * absolute + 负 margin:\n\n.parent{\n  position: relative;\n}\n.child{\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 100px;\n  height: 100px;\n  margin: -50px 0 0 -50px;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * absolute + margin auto\n\n.parent{\n  position: relative;\n}\n.child{\n  width: 100px;\n  height: 100px;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * absolute + calc\n\n.parent{\n  position: relative;\n}\n.child{\n  width: 100px;\n  height: 100px;\n  position: absolute;\n  left: calc(50% - 50px);\n  top: calc(50% - 50px);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 不固定宽高的块级盒子\n\n * absolute + transform\n\n.parent{\n  position: relative;\n}\n\n.child{\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * flex\n\n.parent {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n\n1\n2\n3\n4\n5\n\n * table-cell\n\n.parent {\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n  width: 600px;\n}\n.child {\n  display: inline-block;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * grid\n\n.parent {\n  display: grid;\n}\n.child {\n  align-self: center;\n  justify-self: center;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * line-height + vertical-align\n\n.parent{\n  line-height: 150px;\n  text-align: center;\n  height: 150px;\n}\n\n.child{\n  display: inline-block;\n  line-height: initial;\n  vertical-align: middle;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * writing-mode\n\n<div class="parent box">\n  <div class="middle">\n    <div class="child bg">writing-mode</div>\n  </div>\n</div>\n<style>\n.parent {\n  writing-mode: vertical-lr;\n  text-align: center;\n}\n.parent .middle {\n  display: inline-block;\n  writing-mode: horizontal-tb;\n  text-align: center;\n  width: 100%;\n}\n.parent .child {\n  display: inline-block;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# css的border边框\n\n/* 三角 */\n.triangle {\n  width: 0px;\n  height: 0px;\n  background: none;\n  border: 50px solid red;\n  border-color: red transparent transparent transparent;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 1border(1 像素问题)\n\n * 只设置单条底部边框\n\n.scale-1px-bottom {\n    position: relative;\n    border:none;\n}\n.scale-1px-bottom::after {\n    content: \'\';\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    background: #000;\n    width: 100%;\n    height: 1px;\n    -webkit-transform: scaley(0.5);\n    transform: scaley(0.5);\n    -webkit-transform-origin: 0 0;\n    transform-origin: 0 0;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * 同时设置 4 条边框\n\n.scale-1px {\n    position: relative;\n    margin-bottom: 20px;\n    border:none;\n}\n.scale-1px::after {\n    content: \'\';\n    position: absolute;\n    top: 0;\n    left: 0;\n    border: 1px solid #000;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    width: 200%;\n    height: 200%;\n    -webkit-transform: scale(0.5);\n    transform: scale(0.5);\n    -webkit-transform-origin: left top;\n    transform-origin: left top;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 清除浮动的方式\n\n * 额外标签法\n\n.clear {\n  clear: both;\n}\n\n\n1\n2\n3\n\n * 伪元素：\n\n.clearfix:after {\n  display: block;\n  overflow: hidden;\n  visibility: hidden;\n  height: 0;\n  content: "";\n  clear: both;\n}\n.clearfix {\n  zoom: 1;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 双伪元素\n\n.clearfix:after,\n.clearfix:before {\n  display: table;\n  overflow: hidden;\n  height: 0;\n  content: "";\n  clear: both;\n}\n.clearfix {\n  zoom: 1;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * bfc清除内部浮动\n\n/* parent */\n.box {\n  width: 300px;\n  border: 1px solid #000;\n  overflow: hidden; /* there */\n}\n/* child */\n.one {\n  width: 150px;\n  height: 200px;\n  background-color: pink;\n  float: left;\n}\n/* child */\n.two {\n  width: 150px;\n  height: 200px;\n  background-color: blue;\n  float: left;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 横屏布局\n\n.landscape-container {\n  position: absolute;\n  overflow: hidden;\n}\n\n// 竖屏\n@media screen and (orientation: portrait) {\n  .landscape-container {\n    width: 100vh;\n    height: 100vw;\n    top: calc((100vh - 100vw) / 2);\n    left: calc((100vw - 100vh) / 2);\n    transform: rotate(90deg);\n    transform-origin: 50% 50%;\n  }\n}\n\n// 横屏\n@media screen and (orientation: landscape) {\n  .landscape-container {\n    width: 100vw;\n    height: 100vh;\n    top: 0;\n    left: 0;\n    transform: none;\n    transform-origin: 50% 50%;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 文字超出省略, 单行、多行文本溢出隐藏\n\n * 单行文本溢出\n\n.line-camp {\n  width: 300px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 多行文本溢出\n\n.line-camp {\n  width: 300px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  /*! autoprefixer: off */\n  -webkit-box-orient: vertical;\n  /* autoprefixer: on */\n  text-overflow: -o-ellipsis-lastline;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# css百分比单位（%）\n\n\n# 子元素中的百分比到底是谁的百分比\n\n * padding: 子元素的 padding 如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的 height 无关\n\n * margin: 子元素的 margin 如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width\n\n\n# 应用\n\n> forked: https://juejin.cn/post/6936913689115099143\n\n * padding设置百分比\n\n  <div class="trangle"></div>\n\n  .trangle{\n    height:0;\n    width:100%;\n    padding-top:75%;\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * css 怎么画一个大小为父元素宽度一半的正方形:\n\n<div class="outer">\n  <div class="inner"></div>\n</div>\n\n.outer {\n  width: 400px;\n  height: 600px;\n  background: red;\n}\n\n.inner {\n  width: 50%;\n  padding-bottom: 50%;\n  background: blue;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * css实现自适应正方形、等宽高比矩形:\n\n<div class="outer">\n  <div class="inner"></div>\n</div>\n\n.outer {\n  width: 400px;\n  height: 600px;\n  background: blue;\n}\n\n.inner {\n  width: 100%;\n  height: 0;\n  padding-bottom: 100%;\n  background: red;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 百分比单位缺点\n\n * 计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位\n\n * 各个属性中如果使用百分比，相对父元素的属性并不是唯一的\n   \n   * width 和 height 相对于父元素的 width 和 height\n   \n   * margin、padding 不管垂直还是水平方向都相对比父元素的宽度\n   \n   * border-radius 则是相对于元素自身\n\n * 造成我们使用百分比单位容易使布局问题变得复杂\n\n\n# 如何判断元素是否到达可视区域\n\n> 原文: 「2021」高频前端面试题汇总之前端性能优化篇\n\n * window.innerheight 是浏览器可视区的高度；\n * document.body.scrolltop || document.documentelement.scrolltop 是浏览器滚动的过的距离；\n * imgs.offsettop 是元素顶部距离文档顶部的高度（包括滚动条的距离）；\n * 内容达到显示区域的：img.offsettop < window.innerheight + document.body.scrolltop;\n\n\n\n * code\n\n<div class="container">\n     <img src="loading.gif"  data-src="pic.png">\n     <img src="loading.gif"  data-src="pic.png">\n</div>\n<script>\nvar imgs = document.queryselectorall(\'img\');\nfunction lozyload(){\n\t\tvar scrolltop = document.body.scrolltop || document.documentelement.scrolltop;\n\t\tvar winheight= window.innerheight;\n\t\tfor(var i=0;i < imgs.length;i++){\n\t\t\tif(imgs[i].offsettop < scrolltop + winheight ){\n\t\t\t\timgs[i].src = imgs[i].getattribute(\'data-src\');\n\t\t\t}\n\t\t}\n\t}\n  window.onscroll = lozyload();\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * 图片懒加载（imglazyload）: 36 个 js 手写题\n\nlet imglist = [...document.queryselectorall(\'img\')]\nlet length = imglist.length\n\n// 修正错误，需要加上自执行\nconst imglazyload = (function() {\n  let count = 0\n\n   return function() {\n        let deleteindexlist = []\n        imglist.foreach((img, index) => {\n            let rect = img.getboundingclientrect()\n            if (rect.top < window.innerheight) {\n                img.src = img.dataset.src\n                deleteindexlist.push(index)\n                count++\n                if (count === length) {\n                    document.removeeventlistener(\'scroll\', imglazyload)\n                }\n            }\n        })\n        imglist = imglist.filter((img, index) => !deleteindexlist.includes(index))\n   }\n})()\n\n// 这里最好加上防抖处理\ndocument.addeventlistener(\'scroll\', imglazyload)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# a 伪类的顺序\n\n * link visited hover active\n   * link:平常的状态\n   * visited:被访问过之后\n   * hover:鼠标放到链接上的时候\n   * active:链接被按下的时候\n\na:link {\n  background-color: blue;\n}\na:visited {\n  background-color: pink;\n}\na:hover {\n  background-color: purple;\n}\na:active {\n  background-color: yellow;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * noreferrer/noopener\n\n<a\n  href="https://an.evil.site"\n  target="_blank"\n  rel="noopener noreferrer nofollow"\n  >a链接</a\n>\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 解决 ie9 不能使用 opacity\n\nopacity: 0.5;\nfilter: alpha(opacity = 50);\nfilter: progid:dximagetransform.microsoft.alpha(style = 0, opacity = 50);\n\n\n1\n2\n3\n\n\n\n# html 转义符\n\n`&times；` -> `×`\n\n`&nbsp;` 半角的不断行的空白格（推荐使用）\n\n`&ensp;` 半角的空格\n\n`&emsp;` 全角的空格\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 兼容\n\n\x3c!-- cc:ie6 快捷键 --\x3e\n\x3c!--[if lte ie 8]>\n  <script src="http://cdn.bootcss.com/html5shiv/r29/html5.js"><\/script>\n<![endif]--\x3e\n\n\n1\n2\n3\n4\n\n\n\n# 页面三层结构\n\n * 结构层html\n * 表现层css\n * 行为层javascript\n\n\n# css font-family\n\n> 原视频 网页的默认全局字体该如何设置？\n\n@font-face {\n  font-family: emoji;\n  src: local("apple color emojiji"), local("segoe ui emoji"), local("segoe ui symbol"), local("noto color emoji");\n  unicode-range: u+1f000-1f644, u+203c-3299;\n}\nbody {\n  font-family: system-ui, —apple-system, segoe ui, rototo, emoji, helvetica, arial, sans-serif;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 衬线字体\n\n.font-serif {\n  font-family: georgia, cambria, "times new roman", times, serif;\n}\n\n\n1\n2\n3\n\n * 等宽字体\n\n.font-mono {\n  font-family: menlo, monaco, consolas, "liberation mono", "courier new", monospace;\n}\n\n\n1\n2\n3\n',charsets:{cjk:!0},lastUpdated:"3/11/2023",lastUpdatedTimestamp:1678525665e3,createdTime:1645430106e3},{title:"html常见布局",frontmatter:{title:"html常见布局",date:"2022-02-13T00:00:00.000Z",sidebar:"auto",tags:["布局"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/use-html.html",relativePath:"frontend/issues/use-html.md",key:"v-953c6676",path:"/frontend/issues/use-html.html",headers:[{level:2,title:"两栏布局（边栏定宽主栏自适应）",slug:"两栏布局-边栏定宽主栏自适应",normalizedTitle:"两栏布局（边栏定宽主栏自适应）",charIndex:36},{level:2,title:"三栏布局（两侧栏定宽主栏自适应）",slug:"三栏布局-两侧栏定宽主栏自适应",normalizedTitle:"三栏布局（两侧栏定宽主栏自适应）",charIndex:1282},{level:2,title:"多列等高布局",slug:"多列等高布局",normalizedTitle:"多列等高布局",charIndex:3772},{level:2,title:"三行布局（头尾定高主栏自适应）",slug:"三行布局-头尾定高主栏自适应",normalizedTitle:"三行布局（头尾定高主栏自适应）",charIndex:4296},{level:2,title:"css实现文字两端对齐",slug:"css实现文字两端对齐",normalizedTitle:"css实现文字两端对齐",charIndex:5879}],headersStr:"两栏布局（边栏定宽主栏自适应） 三栏布局（两侧栏定宽主栏自适应） 多列等高布局 三行布局（头尾定高主栏自适应） css实现文字两端对齐",content:'> 原文：1.5 万字 CSS 基础拾遗（核心知识、常见需求）\n\n\n# 两栏布局（边栏定宽主栏自适应）\n\n * float + overflow（BFC 原理）\n\n<div class="section">\n  <div class="left">aside</div>\n  <div class="main">main</div>\n</div>\n<style>\n  .left {\n    width: 200px;\n    height: 50px;\n    float: left;\n  }\n  .main {\n    height: 100px;\n    overflow: hidden;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * float + margin\n\n<div class="section">\n  <div class="left">aside</div>\n  <div class="main">main</div>\n</div>\n<style>\n  .left {\n    width: 200px;\n    height: 50px;\n    float: left;\n  }\n  .main {\n    height: 100px;\n    margin-left: 200px;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * flex\n\n<div class="section flex">\n  <div class="left">aside</div>\n  <div class="main">main</div>\n</div>\n<style>\n  .flex{\n    display: flex;\n  }\n  .left {\n    width: 200px;\n    height: 50px;\n  }\n  .main {\n    height: 100px;\n    flex: 1;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * grid\n\n<div class="section grid">\n  <div class="left">aside</div>\n  <div class="main">main</div>\n</div>\n<style>\n  .grid {\n    display: grid;\n    grid-template-columns: 200px auto;\n  }\n  .left {\n    width: 200px;\n    height: 50px;\n  }\n  .main {\n    height: 100px;\n    flex: 1;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 三栏布局（两侧栏定宽主栏自适应）\n\n * 圣杯布局\n\n<div class="section clearfix">\n  <div class="main">main</div>\n  <div class="left">left</div>\n  <div class="right">right</div>\n</div>\n<style>\n  .section{\n    /* there */\n    padding: 0 150px;\n  }\n  .main {\n    height: 100px;\n    /* there */\n    width: 100%;\n    float: left;\n  }\n  .left {\n    width: 150px;\n    height: 50px;\n    /* there */\n    float: left;\n    position: relative;\n    left: -150px;\n    margin-left: -100%;\n  }\n  .right {\n    width: 150px;\n    height: 50px;\n    /* there */\n    float: left;\n    position: relative;\n    right: -150px;\n    margin-left: -150px;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n * 双飞翼布局\n\n<div class="section clearfix">\n  <div class="main"><div class="inner">inner</div></div>\n  <div class="left">left</div>\n  <div class="right">right</div>\n</div>\n<style>\n  .main {\n    height: 100px;\n\n    float: left;\n    width: 100%;\n  }\n  .inner{\n    margin: 0 150px;\n    height: 100px;\n  }\n\n  .left {\n    width: 150px;\n    height: 50px;\n\n    float: left;\n    margin-left: -100%;\n  }\n  .right {\n    width: 150px;\n    height: 50px;\n\n    float: left;\n    margin-left: -150px;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n * float + overflow (BFC原理)\n\n<div class="section clearfix">\n  <div class="left">left</div>\n  <div class="right">right</div>\n  <div class="main">main</div>\n</div>\n<style>\n.main {\n  height: 100px;\n\n  overflow:hidden;\n}\n\n.left {\n  width: 150px;\n  height: 50px;\n\n  float: left;\n}\n.right {\n  width: 150px;\n  height: 50px;\n\n  float: right;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * flex\n\n<div class="section flex">\n  <div class="left">left</div>\n  <div class="main">main</div>\n  <div class="right">right</div>\n</div>\n<style>\n.flex {\n  display: flex;\n}\n.main {\n  height: 100px;\n\n  flex:1;\n}\n\n.left {\n  width: 150px;\n  height: 50px;\n}\n.right {\n  width: 150px;\n  height: 50px;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * grid\n\n<div class="section grid">\n  <div class="left">left</div>\n  <div class="main">main</div>\n  <div class="right">right</div>\n</div>\n<style>\n.grid {\n  display: grid;\n  grid-template-columns: 150px auto 150px;\n}\n\n.main {\n  height: 100px;\n}\n.left {\n  width: 150px;\n  height: 50px;\n}\n.right {\n  width: 150px;\n  height: 50px;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 多列等高布局\n\n * padding + 负margin\n\n<main>\n  <section class="padmar green">\n    <p>111</p>\n  </section>\n  <section class="padmar orange">\n    <p>222</p>\n    <p>222</p>\n    <p>222</p>\n  </section>\n  <section class="padmar blue">\n    <p>333</p>\n    <p>333</p>\n  </sectoin>\n</main>\n<style>\nmain {\n  overflow: hidden;\n}\n.padmar {\n  padding-bottom: 1000px;\n  margin-bottom: -1000px;\n}\nsection {\n  float: left;\n  width: 33.33%;\n  color: #fff;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 三行布局（头尾定高主栏自适应）\n\n * calc\n\n<div class="layout">\n    <header>header</header>\n    <main>\n        <div class="inner">main</div>\n    </main>\n    <footer>footer</footer>\n</div>\n<style>\n  main{\n    height: calc(100% - 100px);\n    background: #87e8de;\n  }\n  header, footer {\n    height: 50px;\n    background: #bfbfbf;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * absolute\n\n<div class="layout">\n    <header></header>\n    <main>\n        <div class="inner"></div>\n    </main>\n    <footer></footer>\n</div>\n<style>\n.layout{\n  position: relative;\n}\nheader{\n  position: absolute;\n  top:0;\n  left:0;\n  width: 100%;\n}\nfooter{\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n}\nmain{\n  height: 100%;\n  padding: 50px 0;\n  box-sizing: border-box;\n}\nheader, footer {\n  height: 50px;\n  background: #bfbfbf;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n * flex\n\n<div class="layout">\n    <header></header>\n    <main>\n        <div class="inner"></div>\n    </main>\n    <footer></footer>\n</div>\n<style>\n.layout{\n  display: flex;\n  flex-direction: column;\n}\nmain{\n  flex: 1\n}\nheader, footer {\n  height: 50px;\n  background: #bfbfbf;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * grid\n\n<div class="layout">\n    <header></header>\n    <main>\n        <div class="inner"></div>\n    </main>\n    <footer></footer>\n</div>\n<style>\n.layout{\n  display: grid;\n  grid-template-rows: 50px 1fr 50px;\n}\nheader, footer {\n  height: 50px;\n  background: #bfbfbf;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# css实现文字两端对齐\n\n> https://zhuanlan.zhihu.com/p/53428937\n\n// html\n<div class="row">\n  <span>姓名</span><input type="text">\n</div>\n<div class="row">\n  <span>联系方式</span><input type="text">\n</div>\n\n// css 1.0\n.row span {\n    display: inline-block;\n    width: 4em;\n    text-align: justify;\n    text-align-last: justify;\n }\n\n// css 2.0\n.row input {\n  vertical-align: top;\n}\n.row span {\n  display: inline-block;\n  width: 4em;\n  text-align: justify;\n  height: 20px;\n  overflow: hidden;\n}\n.row span:after {\n  content: \'\';\n  display: inline-block;\n  width: 100%;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n',normalizedContent:'> 原文：1.5 万字 css 基础拾遗（核心知识、常见需求）\n\n\n# 两栏布局（边栏定宽主栏自适应）\n\n * float + overflow（bfc 原理）\n\n<div class="section">\n  <div class="left">aside</div>\n  <div class="main">main</div>\n</div>\n<style>\n  .left {\n    width: 200px;\n    height: 50px;\n    float: left;\n  }\n  .main {\n    height: 100px;\n    overflow: hidden;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * float + margin\n\n<div class="section">\n  <div class="left">aside</div>\n  <div class="main">main</div>\n</div>\n<style>\n  .left {\n    width: 200px;\n    height: 50px;\n    float: left;\n  }\n  .main {\n    height: 100px;\n    margin-left: 200px;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * flex\n\n<div class="section flex">\n  <div class="left">aside</div>\n  <div class="main">main</div>\n</div>\n<style>\n  .flex{\n    display: flex;\n  }\n  .left {\n    width: 200px;\n    height: 50px;\n  }\n  .main {\n    height: 100px;\n    flex: 1;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * grid\n\n<div class="section grid">\n  <div class="left">aside</div>\n  <div class="main">main</div>\n</div>\n<style>\n  .grid {\n    display: grid;\n    grid-template-columns: 200px auto;\n  }\n  .left {\n    width: 200px;\n    height: 50px;\n  }\n  .main {\n    height: 100px;\n    flex: 1;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 三栏布局（两侧栏定宽主栏自适应）\n\n * 圣杯布局\n\n<div class="section clearfix">\n  <div class="main">main</div>\n  <div class="left">left</div>\n  <div class="right">right</div>\n</div>\n<style>\n  .section{\n    /* there */\n    padding: 0 150px;\n  }\n  .main {\n    height: 100px;\n    /* there */\n    width: 100%;\n    float: left;\n  }\n  .left {\n    width: 150px;\n    height: 50px;\n    /* there */\n    float: left;\n    position: relative;\n    left: -150px;\n    margin-left: -100%;\n  }\n  .right {\n    width: 150px;\n    height: 50px;\n    /* there */\n    float: left;\n    position: relative;\n    right: -150px;\n    margin-left: -150px;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n * 双飞翼布局\n\n<div class="section clearfix">\n  <div class="main"><div class="inner">inner</div></div>\n  <div class="left">left</div>\n  <div class="right">right</div>\n</div>\n<style>\n  .main {\n    height: 100px;\n\n    float: left;\n    width: 100%;\n  }\n  .inner{\n    margin: 0 150px;\n    height: 100px;\n  }\n\n  .left {\n    width: 150px;\n    height: 50px;\n\n    float: left;\n    margin-left: -100%;\n  }\n  .right {\n    width: 150px;\n    height: 50px;\n\n    float: left;\n    margin-left: -150px;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n * float + overflow (bfc原理)\n\n<div class="section clearfix">\n  <div class="left">left</div>\n  <div class="right">right</div>\n  <div class="main">main</div>\n</div>\n<style>\n.main {\n  height: 100px;\n\n  overflow:hidden;\n}\n\n.left {\n  width: 150px;\n  height: 50px;\n\n  float: left;\n}\n.right {\n  width: 150px;\n  height: 50px;\n\n  float: right;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * flex\n\n<div class="section flex">\n  <div class="left">left</div>\n  <div class="main">main</div>\n  <div class="right">right</div>\n</div>\n<style>\n.flex {\n  display: flex;\n}\n.main {\n  height: 100px;\n\n  flex:1;\n}\n\n.left {\n  width: 150px;\n  height: 50px;\n}\n.right {\n  width: 150px;\n  height: 50px;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * grid\n\n<div class="section grid">\n  <div class="left">left</div>\n  <div class="main">main</div>\n  <div class="right">right</div>\n</div>\n<style>\n.grid {\n  display: grid;\n  grid-template-columns: 150px auto 150px;\n}\n\n.main {\n  height: 100px;\n}\n.left {\n  width: 150px;\n  height: 50px;\n}\n.right {\n  width: 150px;\n  height: 50px;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 多列等高布局\n\n * padding + 负margin\n\n<main>\n  <section class="padmar green">\n    <p>111</p>\n  </section>\n  <section class="padmar orange">\n    <p>222</p>\n    <p>222</p>\n    <p>222</p>\n  </section>\n  <section class="padmar blue">\n    <p>333</p>\n    <p>333</p>\n  </sectoin>\n</main>\n<style>\nmain {\n  overflow: hidden;\n}\n.padmar {\n  padding-bottom: 1000px;\n  margin-bottom: -1000px;\n}\nsection {\n  float: left;\n  width: 33.33%;\n  color: #fff;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 三行布局（头尾定高主栏自适应）\n\n * calc\n\n<div class="layout">\n    <header>header</header>\n    <main>\n        <div class="inner">main</div>\n    </main>\n    <footer>footer</footer>\n</div>\n<style>\n  main{\n    height: calc(100% - 100px);\n    background: #87e8de;\n  }\n  header, footer {\n    height: 50px;\n    background: #bfbfbf;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * absolute\n\n<div class="layout">\n    <header></header>\n    <main>\n        <div class="inner"></div>\n    </main>\n    <footer></footer>\n</div>\n<style>\n.layout{\n  position: relative;\n}\nheader{\n  position: absolute;\n  top:0;\n  left:0;\n  width: 100%;\n}\nfooter{\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n}\nmain{\n  height: 100%;\n  padding: 50px 0;\n  box-sizing: border-box;\n}\nheader, footer {\n  height: 50px;\n  background: #bfbfbf;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n * flex\n\n<div class="layout">\n    <header></header>\n    <main>\n        <div class="inner"></div>\n    </main>\n    <footer></footer>\n</div>\n<style>\n.layout{\n  display: flex;\n  flex-direction: column;\n}\nmain{\n  flex: 1\n}\nheader, footer {\n  height: 50px;\n  background: #bfbfbf;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * grid\n\n<div class="layout">\n    <header></header>\n    <main>\n        <div class="inner"></div>\n    </main>\n    <footer></footer>\n</div>\n<style>\n.layout{\n  display: grid;\n  grid-template-rows: 50px 1fr 50px;\n}\nheader, footer {\n  height: 50px;\n  background: #bfbfbf;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# css实现文字两端对齐\n\n> https://zhuanlan.zhihu.com/p/53428937\n\n// html\n<div class="row">\n  <span>姓名</span><input type="text">\n</div>\n<div class="row">\n  <span>联系方式</span><input type="text">\n</div>\n\n// css 1.0\n.row span {\n    display: inline-block;\n    width: 4em;\n    text-align: justify;\n    text-align-last: justify;\n }\n\n// css 2.0\n.row input {\n  vertical-align: top;\n}\n.row span {\n  display: inline-block;\n  width: 4em;\n  text-align: justify;\n  height: 20px;\n  overflow: hidden;\n}\n.row span:after {\n  content: \'\';\n  display: inline-block;\n  width: 100%;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n',charsets:{cjk:!0},lastUpdated:"2/28/2022",lastUpdatedTimestamp:1646025204e3,createdTime:1645430106e3},{title:"导航目录",frontmatter:{title:"导航目录",date:"2021-02-14T00:00:00.000Z",sidebar:"auto",categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/",relativePath:"frontend/library/README.md",key:"v-d3a38240",path:"/frontend/library/",headersStr:null,content:"> The Article Total （ 14 ）\n\n * 使用canvas生成poster\n * react使用hooks案例\n * react生命周期\n * react redux\n * React\n * vue2.x常见问题\n * vue中的工具函数\n * vue2分页组件\n * vue2插件\n * vue2.x组件通讯方法\n * vue2.x 路由\n * vue2.x的slot使用\n * Vue\n * vue2实现tab组件",normalizedContent:"> the article total （ 14 ）\n\n * 使用canvas生成poster\n * react使用hooks案例\n * react生命周期\n * react redux\n * react\n * vue2.x常见问题\n * vue中的工具函数\n * vue2分页组件\n * vue2插件\n * vue2.x组件通讯方法\n * vue2.x 路由\n * vue2.x的slot使用\n * vue\n * vue2实现tab组件",charsets:{cjk:!0},lastUpdated:"11/9/2023",lastUpdatedTimestamp:1699495575e3,createdTime:1647947183e3},{title:"web安全防范",frontmatter:{title:"web安全防范",date:"2022-01-20T00:00:00.000Z",sidebar:"auto",tags:["web安全"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/web-xss.html",relativePath:"frontend/issues/web-xss.md",key:"v-2858ebea",path:"/frontend/issues/web-xss.html",headers:[{level:2,title:"XSS",slug:"xss",normalizedTitle:"xss",charIndex:2},{level:3,title:"1. 非持久型XSS（反射型XSS）",slug:"_1-非持久型xss-反射型xss",normalizedTitle:"1. 非持久型xss（反射型xss）",charIndex:368},{level:3,title:"2. 持久型 XSS（存储型 XSS）",slug:"_2-持久型-xss-存储型-xss",normalizedTitle:"2. 持久型 xss（存储型 xss）",charIndex:617},{level:2,title:"CSRF 跨站点伪造",slug:"csrf-跨站点伪造",normalizedTitle:"csrf 跨站点伪造",charIndex:984},{level:3,title:"SameSite",slug:"samesite",normalizedTitle:"samesite",charIndex:1365},{level:2,title:"点击劫持",slug:"点击劫持",normalizedTitle:"点击劫持",charIndex:1633},{level:2,title:"URL 跳转漏洞",slug:"url-跳转漏洞",normalizedTitle:"url 跳转漏洞",charIndex:2581},{level:2,title:"SQL 注入",slug:"sql-注入",normalizedTitle:"sql 注入",charIndex:3177},{level:2,title:"OS命令注入攻击",slug:"os命令注入攻击",normalizedTitle:"os命令注入攻击",charIndex:3840},{level:2,title:"Cookie、Session、Token、JWT",slug:"cookie、session、token、jwt",normalizedTitle:"cookie、session、token、jwt",charIndex:4367},{level:2,title:"Cookie",slug:"cookie",normalizedTitle:"cookie",charIndex:185},{level:2,title:"Session",slug:"session",normalizedTitle:"session",charIndex:4374},{level:2,title:"Cookie 和 Session 的区别",slug:"cookie-和-session-的区别",normalizedTitle:"cookie 和 session 的区别",charIndex:5315},{level:2,title:"Token",slug:"token",normalizedTitle:"token",charIndex:1440},{level:3,title:"Acesss Token",slug:"acesss-token",normalizedTitle:"acesss token",charIndex:5636},{level:3,title:"Refresh Token",slug:"refresh-token",normalizedTitle:"refresh token",charIndex:5772},{level:2,title:"Token 和 Session 的区别",slug:"token-和-session-的区别",normalizedTitle:"token 和 session 的区别",charIndex:5837},{level:2,title:"JWT",slug:"jwt",normalizedTitle:"jwt",charIndex:4388},{level:2,title:"Token 和 JWT 的区别",slug:"token-和-jwt-的区别",normalizedTitle:"token 和 jwt 的区别",charIndex:6406},{level:2,title:"参考资料",slug:"参考资料",normalizedTitle:"参考资料",charIndex:6644}],headersStr:"XSS 1. 非持久型XSS（反射型XSS） 2. 持久型 XSS（存储型 XSS） CSRF 跨站点伪造 SameSite 点击劫持 URL 跳转漏洞 SQL 注入 OS命令注入攻击 Cookie、Session、Token、JWT Cookie Session Cookie 和 Session 的区别 Token Acesss Token Refresh Token Token 和 Session 的区别 JWT Token 和 JWT 的区别 参考资料",content:"# XSS\n\nXSS (Cross-Site Scripting)，跨站脚本攻击，因为缩写和 CSS 重叠，所以只能叫 XSS。跨站脚本攻击是指通过存在安全漏洞的 Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进行的一种攻击。\n\n跨站脚本攻击有可能造成以下影响:\n\n * 利用虚假输入表单骗取用户个人信息。\n * 利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求。\n * 显示伪造的文章或图片。\n\nXSS 的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。\n\nXSS 的攻击方式千变万化，但还是可以大致细分为几种类型。\n\n\n# 1. 非持久型XSS（反射型XSS）\n\n非持久型 XSS（反射型 XSS ）：一般是通过给别人发送带有恶意脚本代码参数的 URL，当 URL 地址被打开时，特有的恶意代码参数被 HTML 解析、执行。\n\n\n\n * 防御\n\n1. 即时性，不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据。\n2. 攻击者需要诱骗点击,必须要通过用户点击链接才能发起\n3. 反馈率低，所以较难发现和响应修复\n4. 盗取用户敏感保密信息\n\n\n1\n2\n3\n4\n\n\n\n# 2. 持久型 XSS（存储型 XSS）\n\n持久型 XSS（存储型 XSS）：持久型 XSS 漏洞，一般存在于 Form 表单提交等交互功能，如文章留言，提交文本信息等，黑客利用的 XSS 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，将其渲染执行\n\n\n\n举个例子，对于评论功能来说，就得防范持久型 XSS 攻击，因为我可以在评论中输入以下内容\n\n\n\n * 持久型 XSS 有以下几个特点：\n\n1.持久性，植入在数据库中\n2.盗取用户敏感私密信息\n3.危害面广\n\n\n1\n2\n3\n\n * 如何防御\n\n1. csp 建立白名单: 设置 HTTP Header 中的 Content-Security-Policy\n2. 转义字符\n3. HttpOnly Cookie\n\n\n1\n2\n3\n\n\n\n# CSRF 跨站点伪造\n\n原理： 诱导用户打开黑客的网站，在黑客的网站中，利用用户登录状态发起跨站点请求。\n\n * CSRF 攻击的原理：\n\n\n\n完成 CSRF 攻击必须要有三个条件：\n\n * 用户已经登录了站点 A，并在本地记录了 cookie\n * 在用户没有登出站点 A 的情况下（也就是 cookie 生效的情况下），访问了恶意攻击者提供的引诱危险站点 B (B 站点要求访问站点 A)。\n * 站点 A 没有做任何 CSRF 防御\n\n我们来看一个例子： 当我们登入转账页面后，突然眼前一亮惊现 \"XXX 隐私照片，不看后悔一辈子\" 的链接，耐不住内心躁动，立马点击了该危险的网站（页面代码如下图所示），但当这页面一加载，便会执行submitForm这个方法来提交转账请求，从而将 10 块转给黑客。\n\n\n\n * 如何防御\n\n1. 对 Cookie 设置 SameSite 属性\n2. Referer Check: HTTP Referer是header的一部分,对来源进行校验\n3. Anti CSRF Token： 生成token， 接口带上nonce和timesTamp\n4. 验证码\n\n\n1\n2\n3\n4\n\n\n\n# SameSite\n\n * Strict 最为严格，完全禁止第三方 Cookie，只有当前网页 URL 与请求目标 URL 完全一致才会带上Cookie。\n * Lax 允许部分第三方请求携带 Cookie\n * None 无论是否跨站都会发送 Cookie\n\n\n\n\n# 点击劫持\n\n原理：用户在登陆 A 网站的系统后，被攻击者诱惑打开第三方网站，而第三方网站通过 iframe 引入了 A 网站的页面内容，用户在第三方网站中点击某个按钮（被装饰的按钮），实际上是点击了 A 网站的按钮。 d\n\n * 特点\n   \n   * 隐蔽性较高，骗取用户操作\n   * \"UI - 覆盖攻击\"\n   * 利用 iframe 或者其它标签的属性\n\n * 点击劫持的原理\n\n\n\n从上图可知，攻击者通过图片作为页面背景，隐藏了用户操作的真实界面，当你按耐不住好奇点击按钮以后，真正的点击的其实是隐藏的那个页面的订阅按钮，然后就会在你不知情的情况下订阅了。\n\n\n\n如何防御\n\n * 1.X-FRAME-OPTIONS\n\nX-FRAME-OPTIONS是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 iframe 嵌套的点击劫持攻击\n\n该响应头有三个值可选，分别是\n\n\tDENY，表示页面不允许通过 iframe 的方式展示\n  SAMEORIGIN，表示页面可以在相同域名下通过 iframe 的方式展示\n  ALLOW-FROM，表示页面可以在指定来源的 iframe 中展示\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 2. js防御：通过 iframe 的方式加载页面时，攻击者的网页直接不显示所有内容\n\n<head>\n  <style id=\"click-jack\">\n    html {\n      display: none !important;\n    }\n  </style>\n</head>\n<body>\n  <script>\n    if (self == top) {\n      var style = document.getElementById('click-jack')\n      document.body.removeChild(style)\n    } else {\n      top.location = self.location\n    }\n  <\/script>\n</body>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# URL 跳转漏洞\n\n * 定义：借助未验证的 URL 跳转，将应用程序引导到不安全的第三方区域，从而导致的安全问题。\n * URL 跳转漏洞原理\n\n黑客利用 URL 跳转漏洞来诱导安全意识低的用户点击，导致用户信息泄露或者资金的流失。其原理是黑客构建恶意链接 (链接需要进行伪装, 尽可能迷惑), 发在 QQ 群或者是浏览量多的贴吧 / 论坛中。 安全意识低的用户点击后, 经过服务器或者浏览器解析后，跳到恶意的网站中。\n\n\n\n恶意链接需要进行伪装, 经常的做法是熟悉的链接后面加上一个恶意的网址，这样才迷惑用户。\n\n\n\n诸如伪装成像如下的网址，你是否能够识别出来是恶意网址呢？\n\nhttp://gate.baidu.com/index?act=go&url=http://t.cn/RVTatrd\nhttp://qt.qq.com/safecheck.html?flag=1&url=http://t.cn/RVTatrd\nhttp://tieba.baidu.com/f/user/passport?jumpUrl=http://t.cn/RVTatrd\n复制代码\n\n\n1\n2\n3\n4\n\n\n如何防御\n\n * referer的限制：如果确定传递URL参数进入的来源，我们可以通过该方式实现安全限制，保证该URL的有效性，避免恶意用户自己生成跳转链接\n * 加入有效性验证Token\n\n\n# SQL 注入\n\nSQL 注入是一种常见的 Web 安全漏洞，攻击者利用这个漏洞，可以访问或修改数据，或者利用潜在的数据库漏洞进行攻击。\n\n * SQL 注入的原理\n\n\n\n一次 SQL 注入的过程包括以下几个过程：\n\n * 获取用户请求参数\n * 拼接到代码当中\n * SQL 语句按照我们构造参数的语义执行成功\n\nSQL 注入的必备条件： 1. 可以控制输入的数据 2. 服务器要执行的代码拼接了控制的数据。\n\n\n\n我们会发现 SQL 注入流程中与正常请求服务器类似，只是黑客控制了数据，构造了 SQL 查询，而正常的请求不会 SQL 查询这一步，\n\nSQL 注入的本质: 数据和代码未分离，即数据当做了代码来执行。\n\n如何防御\n\n * 严格限制Web应用的数据库的操作权限，给此用户提供仅仅能够满足其工作的最低权限，从而最大限度的减少注入攻击对数据库的危害\n * 后端代码检查输入的数据是否符合预期，严格限制变量的类型，例如使用正则表达式进行一些匹配处理。\n * 对进入数据库的特殊字符（'，\"，\\，<，>，&，*，; 等）进行转义处理，或编码转换。基本上所有的后端语言都有对字符串进行转义处理的方法，比如 lodash 的 lodash._escapehtmlchar 库。\n * 所有的查询语句建议使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到 SQL 语句中，即不要直接拼接 SQL 语句。例如 Node.js 中的 mysqljs 库的 query 方法中的 ? 占位参数。\n\n\n# OS命令注入攻击\n\nOS命令注入是针对操作系统\n\n * 原理\n\n\n\n// 以 Node.js 为例，假如在接口中需要从 github 下载用户指定的 repo\nconst exec = require('mz/child_process').exec;\nlet params = {/* 用户输入的参数 */};\nexec(`git clone ${params.repo} /some/path`);\n\n\n1\n2\n3\n4\n\n\n如果 params.repo 传入的是 https://github.com/admin/admin.github.io.git 确实能从指定的 git repo 上下载到想要的代码。 但是如果 params.repo 传入的是 https://github.com/xx/xx.git && rm -rf /* && 恰好你的服务是用 root 权限起的就糟糕了。\n\n如何防御\n\n * 后端对前端提交内容进行规则限制（比如正则表达式）。\n * 在调用系统命令前对所有传入参数进行命令行参数转义过滤。\n * 不要直接拼接命令语句，借助一些工具做拼接、转义预处理，例如 Node.js 的 shell-escape 包\n\n\n# Cookie、Session、Token、JWT\n\n * 原文：Cookie、Session、Token、JWT\n\n * 什么是认证（Authentication）: 验证当前用户的身份 (用户名密码登录/邮箱发送登录链接/手机号接收验证码)\n\n * 什么是授权（Authorization）: 用户授予第三方应用访问该用户某些资源的权限 (cookie、session、token、OAuth)\n\n * 什么是凭证（Credentials）: 实现认证和授权的前提是需要一种媒介（证书） 来标记访问者的身份\n\n\n# Cookie\n\n * HTTP 是无状态的协议\n * cookie 存储在客户端\n * cookie 不可跨域, 设置 domain 属性，一级域名和二级域名之间是允许共享使用\n * 属性\n\nname=value\t键值对，设置 Cookie 的名称及相对应的值，都必须是字符串类型\ndomain      指定 cookie 所属域名，默认是当前域名\npath        指定 cookie 在哪个路径下生效，默认是 '/'\nmaxAge      cookie 失效的时间，单位秒. 值为0，表示删除，默认为 -1\nexpires     过期时间，在设置的某个时间点后该 cookie 就会失效\nsecure      该 cookie 是否仅被使用安全协议传输，默认为false\nhttpOnly    设置了 httpOnly 属性，则无法通过JS读取到该cookie信息\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 注意事项\n\n不要存储敏感数据\n使用 httpOnly 在一定程度上提高安全性\n尽量减少 cookie 的体积，能存储的数据量不能超过 4kb\n设置正确的 domain 和 path，减少数据传输\ncookie 无法跨域, 设置domain属性，一级域名和二级域名之间是允许共享使用\n\n\n1\n2\n3\n4\n5\n\n\n\n# Session\n\n * session 是另一种记录服务器和客户端会话状态的机制\n * session 是基于 cookie 实现的，session 存储在服务器端，sessionId 会被存储到客户端的 cookie 中\n\n\n\n\n# Cookie 和 Session 的区别\n\n * 安全性： Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的\n * 存取值的类型不同：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型\n * 有效期不同： Cookie 可设置为长时间保持，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效\n * 存储大小不同： 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源\n\n\n# Token\n\n\n# Acesss Token\n\n * 访问资源接口（API）时所需要的资源凭证\n * 简单 token 的组成： uid(用户唯一的身份标识)、time(时间戳)、sign（签名）\n * 特点: 服务端无状态化、可扩展性好 / 支持移动端设备 / 支持跨程序调用\n\n\n\n\n# Refresh Token\n\n * refresh token 是用于刷新 access token 的 token\n\n\n\n\n# Token 和 Session 的区别\n\n * Session 是一种记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息\n * Token 是令牌，访问资源接口（API）时所需要的资源凭证; 使服务端无状态化，不会存储会话信息\n\n\n# JWT\n\n * JSON Web Token（JWT）是跨域认证解决方案,是一种认证授权机制\n * JWT | jsonwebtoken\n\n\n\n * HTTP Request Headers\n\nAuthorization: Bearer <token>\n\n\n1\n\n * 注意事项\n\nJWT 不加密的情况下，不能将秘密数据写入 JWT\nJWT 优势：服务器不再需要存储 Session，使得服务器认证鉴权业务可以方便扩展\nJWT 缺点：由于服务器不需要存储 Session 状态，因此使用过程中无法废弃某个 Token 或者更改 Token 的权限。\n    也就是说一旦 JWT 签发了，到期之前就会始终有效，除非服务器部署额外的逻辑\nJWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限\nJWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输\nJWT 适合一次性的命令认证，颁发一个有效期极短的 JWT\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# Token 和 JWT 的区别\n\n * 相同:\n   * 访问资源的令牌\n   * 记录用户的信息\n   * 使服务端无状态化\n   * 只有验证成功后，客户端才能访问服务端上受保护的资源\n * 区别\n   * Token：服务端验证客户端发送过来的 Token 时，还需要查询数据库获取用户信息，然后验证 Token 是否有效\n   * JWT：将 Token 和 Payload 加密后存储于客户端，服务端只需要使用密钥解密进行校验，不需要查询或者减少查询数据库\n\n\n# 参考资料\n\n * 常见 Web 安全攻防总结\n * 常见六大 Web 安全攻防解析",normalizedContent:"# xss\n\nxss (cross-site scripting)，跨站脚本攻击，因为缩写和 css 重叠，所以只能叫 xss。跨站脚本攻击是指通过存在安全漏洞的 web 网站注册用户的浏览器内运行非法的 html 标签或 javascript 进行的一种攻击。\n\n跨站脚本攻击有可能造成以下影响:\n\n * 利用虚假输入表单骗取用户个人信息。\n * 利用脚本窃取用户的 cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求。\n * 显示伪造的文章或图片。\n\nxss 的原理是恶意攻击者往 web 页面里插入恶意可执行网页脚本代码，当用户浏览该页之时，嵌入其中 web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。\n\nxss 的攻击方式千变万化，但还是可以大致细分为几种类型。\n\n\n# 1. 非持久型xss（反射型xss）\n\n非持久型 xss（反射型 xss ）：一般是通过给别人发送带有恶意脚本代码参数的 url，当 url 地址被打开时，特有的恶意代码参数被 html 解析、执行。\n\n\n\n * 防御\n\n1. 即时性，不经过服务器存储，直接通过 http 的 get 和 post 请求就能完成一次攻击，拿到用户隐私数据。\n2. 攻击者需要诱骗点击,必须要通过用户点击链接才能发起\n3. 反馈率低，所以较难发现和响应修复\n4. 盗取用户敏感保密信息\n\n\n1\n2\n3\n4\n\n\n\n# 2. 持久型 xss（存储型 xss）\n\n持久型 xss（存储型 xss）：持久型 xss 漏洞，一般存在于 form 表单提交等交互功能，如文章留言，提交文本信息等，黑客利用的 xss 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，将其渲染执行\n\n\n\n举个例子，对于评论功能来说，就得防范持久型 xss 攻击，因为我可以在评论中输入以下内容\n\n\n\n * 持久型 xss 有以下几个特点：\n\n1.持久性，植入在数据库中\n2.盗取用户敏感私密信息\n3.危害面广\n\n\n1\n2\n3\n\n * 如何防御\n\n1. csp 建立白名单: 设置 http header 中的 content-security-policy\n2. 转义字符\n3. httponly cookie\n\n\n1\n2\n3\n\n\n\n# csrf 跨站点伪造\n\n原理： 诱导用户打开黑客的网站，在黑客的网站中，利用用户登录状态发起跨站点请求。\n\n * csrf 攻击的原理：\n\n\n\n完成 csrf 攻击必须要有三个条件：\n\n * 用户已经登录了站点 a，并在本地记录了 cookie\n * 在用户没有登出站点 a 的情况下（也就是 cookie 生效的情况下），访问了恶意攻击者提供的引诱危险站点 b (b 站点要求访问站点 a)。\n * 站点 a 没有做任何 csrf 防御\n\n我们来看一个例子： 当我们登入转账页面后，突然眼前一亮惊现 \"xxx 隐私照片，不看后悔一辈子\" 的链接，耐不住内心躁动，立马点击了该危险的网站（页面代码如下图所示），但当这页面一加载，便会执行submitform这个方法来提交转账请求，从而将 10 块转给黑客。\n\n\n\n * 如何防御\n\n1. 对 cookie 设置 samesite 属性\n2. referer check: http referer是header的一部分,对来源进行校验\n3. anti csrf token： 生成token， 接口带上nonce和timestamp\n4. 验证码\n\n\n1\n2\n3\n4\n\n\n\n# samesite\n\n * strict 最为严格，完全禁止第三方 cookie，只有当前网页 url 与请求目标 url 完全一致才会带上cookie。\n * lax 允许部分第三方请求携带 cookie\n * none 无论是否跨站都会发送 cookie\n\n\n\n\n# 点击劫持\n\n原理：用户在登陆 a 网站的系统后，被攻击者诱惑打开第三方网站，而第三方网站通过 iframe 引入了 a 网站的页面内容，用户在第三方网站中点击某个按钮（被装饰的按钮），实际上是点击了 a 网站的按钮。 d\n\n * 特点\n   \n   * 隐蔽性较高，骗取用户操作\n   * \"ui - 覆盖攻击\"\n   * 利用 iframe 或者其它标签的属性\n\n * 点击劫持的原理\n\n\n\n从上图可知，攻击者通过图片作为页面背景，隐藏了用户操作的真实界面，当你按耐不住好奇点击按钮以后，真正的点击的其实是隐藏的那个页面的订阅按钮，然后就会在你不知情的情况下订阅了。\n\n\n\n如何防御\n\n * 1.x-frame-options\n\nx-frame-options是一个 http 响应头，在现代浏览器有一个很好的支持。这个 http 响应头 就是为了防御用 iframe 嵌套的点击劫持攻击\n\n该响应头有三个值可选，分别是\n\n\tdeny，表示页面不允许通过 iframe 的方式展示\n  sameorigin，表示页面可以在相同域名下通过 iframe 的方式展示\n  allow-from，表示页面可以在指定来源的 iframe 中展示\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 2. js防御：通过 iframe 的方式加载页面时，攻击者的网页直接不显示所有内容\n\n<head>\n  <style id=\"click-jack\">\n    html {\n      display: none !important;\n    }\n  </style>\n</head>\n<body>\n  <script>\n    if (self == top) {\n      var style = document.getelementbyid('click-jack')\n      document.body.removechild(style)\n    } else {\n      top.location = self.location\n    }\n  <\/script>\n</body>\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# url 跳转漏洞\n\n * 定义：借助未验证的 url 跳转，将应用程序引导到不安全的第三方区域，从而导致的安全问题。\n * url 跳转漏洞原理\n\n黑客利用 url 跳转漏洞来诱导安全意识低的用户点击，导致用户信息泄露或者资金的流失。其原理是黑客构建恶意链接 (链接需要进行伪装, 尽可能迷惑), 发在 qq 群或者是浏览量多的贴吧 / 论坛中。 安全意识低的用户点击后, 经过服务器或者浏览器解析后，跳到恶意的网站中。\n\n\n\n恶意链接需要进行伪装, 经常的做法是熟悉的链接后面加上一个恶意的网址，这样才迷惑用户。\n\n\n\n诸如伪装成像如下的网址，你是否能够识别出来是恶意网址呢？\n\nhttp://gate.baidu.com/index?act=go&url=http://t.cn/rvtatrd\nhttp://qt.qq.com/safecheck.html?flag=1&url=http://t.cn/rvtatrd\nhttp://tieba.baidu.com/f/user/passport?jumpurl=http://t.cn/rvtatrd\n复制代码\n\n\n1\n2\n3\n4\n\n\n如何防御\n\n * referer的限制：如果确定传递url参数进入的来源，我们可以通过该方式实现安全限制，保证该url的有效性，避免恶意用户自己生成跳转链接\n * 加入有效性验证token\n\n\n# sql 注入\n\nsql 注入是一种常见的 web 安全漏洞，攻击者利用这个漏洞，可以访问或修改数据，或者利用潜在的数据库漏洞进行攻击。\n\n * sql 注入的原理\n\n\n\n一次 sql 注入的过程包括以下几个过程：\n\n * 获取用户请求参数\n * 拼接到代码当中\n * sql 语句按照我们构造参数的语义执行成功\n\nsql 注入的必备条件： 1. 可以控制输入的数据 2. 服务器要执行的代码拼接了控制的数据。\n\n\n\n我们会发现 sql 注入流程中与正常请求服务器类似，只是黑客控制了数据，构造了 sql 查询，而正常的请求不会 sql 查询这一步，\n\nsql 注入的本质: 数据和代码未分离，即数据当做了代码来执行。\n\n如何防御\n\n * 严格限制web应用的数据库的操作权限，给此用户提供仅仅能够满足其工作的最低权限，从而最大限度的减少注入攻击对数据库的危害\n * 后端代码检查输入的数据是否符合预期，严格限制变量的类型，例如使用正则表达式进行一些匹配处理。\n * 对进入数据库的特殊字符（'，\"，\\，<，>，&，*，; 等）进行转义处理，或编码转换。基本上所有的后端语言都有对字符串进行转义处理的方法，比如 lodash 的 lodash._escapehtmlchar 库。\n * 所有的查询语句建议使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到 sql 语句中，即不要直接拼接 sql 语句。例如 node.js 中的 mysqljs 库的 query 方法中的 ? 占位参数。\n\n\n# os命令注入攻击\n\nos命令注入是针对操作系统\n\n * 原理\n\n\n\n// 以 node.js 为例，假如在接口中需要从 github 下载用户指定的 repo\nconst exec = require('mz/child_process').exec;\nlet params = {/* 用户输入的参数 */};\nexec(`git clone ${params.repo} /some/path`);\n\n\n1\n2\n3\n4\n\n\n如果 params.repo 传入的是 https://github.com/admin/admin.github.io.git 确实能从指定的 git repo 上下载到想要的代码。 但是如果 params.repo 传入的是 https://github.com/xx/xx.git && rm -rf /* && 恰好你的服务是用 root 权限起的就糟糕了。\n\n如何防御\n\n * 后端对前端提交内容进行规则限制（比如正则表达式）。\n * 在调用系统命令前对所有传入参数进行命令行参数转义过滤。\n * 不要直接拼接命令语句，借助一些工具做拼接、转义预处理，例如 node.js 的 shell-escape 包\n\n\n# cookie、session、token、jwt\n\n * 原文：cookie、session、token、jwt\n\n * 什么是认证（authentication）: 验证当前用户的身份 (用户名密码登录/邮箱发送登录链接/手机号接收验证码)\n\n * 什么是授权（authorization）: 用户授予第三方应用访问该用户某些资源的权限 (cookie、session、token、oauth)\n\n * 什么是凭证（credentials）: 实现认证和授权的前提是需要一种媒介（证书） 来标记访问者的身份\n\n\n# cookie\n\n * http 是无状态的协议\n * cookie 存储在客户端\n * cookie 不可跨域, 设置 domain 属性，一级域名和二级域名之间是允许共享使用\n * 属性\n\nname=value\t键值对，设置 cookie 的名称及相对应的值，都必须是字符串类型\ndomain      指定 cookie 所属域名，默认是当前域名\npath        指定 cookie 在哪个路径下生效，默认是 '/'\nmaxage      cookie 失效的时间，单位秒. 值为0，表示删除，默认为 -1\nexpires     过期时间，在设置的某个时间点后该 cookie 就会失效\nsecure      该 cookie 是否仅被使用安全协议传输，默认为false\nhttponly    设置了 httponly 属性，则无法通过js读取到该cookie信息\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 注意事项\n\n不要存储敏感数据\n使用 httponly 在一定程度上提高安全性\n尽量减少 cookie 的体积，能存储的数据量不能超过 4kb\n设置正确的 domain 和 path，减少数据传输\ncookie 无法跨域, 设置domain属性，一级域名和二级域名之间是允许共享使用\n\n\n1\n2\n3\n4\n5\n\n\n\n# session\n\n * session 是另一种记录服务器和客户端会话状态的机制\n * session 是基于 cookie 实现的，session 存储在服务器端，sessionid 会被存储到客户端的 cookie 中\n\n\n\n\n# cookie 和 session 的区别\n\n * 安全性： session 比 cookie 安全，session 是存储在服务器端的，cookie 是存储在客户端的\n * 存取值的类型不同：cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，session 可以存任意数据类型\n * 有效期不同： cookie 可设置为长时间保持，session 一般失效时间较短，客户端关闭（默认情况下）或者 session 超时都会失效\n * 存储大小不同： 单个 cookie 保存的数据不能超过 4k，session 可存储数据远高于 cookie，但是当访问量过多，会占用过多的服务器资源\n\n\n# token\n\n\n# acesss token\n\n * 访问资源接口（api）时所需要的资源凭证\n * 简单 token 的组成： uid(用户唯一的身份标识)、time(时间戳)、sign（签名）\n * 特点: 服务端无状态化、可扩展性好 / 支持移动端设备 / 支持跨程序调用\n\n\n\n\n# refresh token\n\n * refresh token 是用于刷新 access token 的 token\n\n\n\n\n# token 和 session 的区别\n\n * session 是一种记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息\n * token 是令牌，访问资源接口（api）时所需要的资源凭证; 使服务端无状态化，不会存储会话信息\n\n\n# jwt\n\n * json web token（jwt）是跨域认证解决方案,是一种认证授权机制\n * jwt | jsonwebtoken\n\n\n\n * http request headers\n\nauthorization: bearer <token>\n\n\n1\n\n * 注意事项\n\njwt 不加密的情况下，不能将秘密数据写入 jwt\njwt 优势：服务器不再需要存储 session，使得服务器认证鉴权业务可以方便扩展\njwt 缺点：由于服务器不需要存储 session 状态，因此使用过程中无法废弃某个 token 或者更改 token 的权限。\n    也就是说一旦 jwt 签发了，到期之前就会始终有效，除非服务器部署额外的逻辑\njwt 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限\njwt 不应该使用 http 协议明码传输，要使用 https 协议传输\njwt 适合一次性的命令认证，颁发一个有效期极短的 jwt\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# token 和 jwt 的区别\n\n * 相同:\n   * 访问资源的令牌\n   * 记录用户的信息\n   * 使服务端无状态化\n   * 只有验证成功后，客户端才能访问服务端上受保护的资源\n * 区别\n   * token：服务端验证客户端发送过来的 token 时，还需要查询数据库获取用户信息，然后验证 token 是否有效\n   * jwt：将 token 和 payload 加密后存储于客户端，服务端只需要使用密钥解密进行校验，不需要查询或者减少查询数据库\n\n\n# 参考资料\n\n * 常见 web 安全攻防总结\n * 常见六大 web 安全攻防解析",charsets:{cjk:!0},lastUpdated:"3/25/2022",lastUpdatedTimestamp:1648203503e3,createdTime:1643899953e3},{title:"webpack",frontmatter:{title:"webpack",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["webpack","gulp","px2rem"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/issues/webpack.html",relativePath:"frontend/issues/webpack.md",key:"v-76cf7acb",path:"/frontend/issues/webpack.html",headers:[{level:2,title:"webpack",slug:"webpack",normalizedTitle:"webpack",charIndex:2},{level:2,title:"其他打包工具",slug:"其他打包工具",normalizedTitle:"其他打包工具",charIndex:68},{level:2,title:"mock server",slug:"mock-server",normalizedTitle:"mock server",charIndex:111},{level:2,title:"配置mock api",slug:"配置mock-api",normalizedTitle:"配置mock api",charIndex:172},{level:2,title:"webpack自动引入某文件夹下的文件",slug:"webpack自动引入某文件夹下的文件",normalizedTitle:"webpack自动引入某文件夹下的文件",charIndex:3620},{level:2,title:"gulp",slug:"gulp",normalizedTitle:"gulp",charIndex:4389},{level:2,title:"webpack 配置",slug:"webpack-配置",normalizedTitle:"webpack 配置",charIndex:5312},{level:2,title:"配置externals引入cdn资源",slug:"配置externals引入cdn资源",normalizedTitle:"配置externals引入cdn资源",charIndex:11337},{level:2,title:"浏览器调试vue",slug:"浏览器调试vue",normalizedTitle:"浏览器调试vue",charIndex:12856},{level:2,title:"chrome调试mouseenter事件",slug:"chrome调试mouseenter事件",normalizedTitle:"chrome调试mouseenter事件",charIndex:12950},{level:2,title:"splitChunks配置",slug:"splitchunks配置",normalizedTitle:"splitchunks配置",charIndex:13075},{level:2,title:"yapi mock",slug:"yapi-mock",normalizedTitle:"yapi mock",charIndex:17086},{level:2,title:"min-webpack",slug:"min-webpack",normalizedTitle:"min-webpack",charIndex:19874},{level:3,title:"获取import的路径",slug:"获取import的路径",normalizedTitle:"获取import的路径",charIndex:19935},{level:3,title:"require",slug:"require",normalizedTitle:"require",charIndex:358},{level:3,title:"mini",slug:"mini",normalizedTitle:"mini",charIndex:14118}],headersStr:"webpack 其他打包工具 mock server 配置mock api webpack自动引入某文件夹下的文件 gulp webpack 配置 配置externals引入cdn资源 浏览器调试vue chrome调试mouseenter事件 splitChunks配置 yapi mock min-webpack 获取import的路径 require mini",content:'# webpack\n\n * tapable（webpack核心模块）使用手册\n * 分享15个Webpack实用的插件！！！]\n\n\n# 其他打包工具\n\n * esbuild\n * parcel\n * rollup\n\n\n# mock server\n\n * YApi\n * mockjs\n * easy-mock\n * mswjs/msw\n\n\n# 配置mock api\n\n * https://github.com/jaywcjlove/mocker-api\n\n * version: "mocker-api": "^2.8.1"\n\n * 创建/mocker/index.js\n\n// mocker-api: https://github.com/jaywcjlove/mocker-api\nconst delay = require("mocker-api/lib/delay");\n\nconst noProxy = process.env.NO_PROXY === \'true\';\n\nconst proxy = {\n  _proxy: {\n    priority: "mocker",\n    proxy: {\n      "/api/(.*)": "http://xxx/mock/35",\n    },\n    changeHost: true,\n  },\n  "GET /api/info/:id": (req, res) => {},\n};\n\nmodule.exports = (noProxy ? {} : delay(proxy, 1000));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * 配置vue.config.js\n\nmodule.exports = {\n    devServer: {\n        "open": true,\n        "overlay": true,\n        "hot": true,\n        "host": "0.0.0.0",\n        "port": 8080,\n        "inline": true,\n        "disableHostCheck": true,\n        "stats": {\n          "colors": true\n        },\n        "historyApiFallback": true,\n        proxy: {\n          "/api": {\n            "target": "http://xxx.com/api", // trunk 环境\n            "changeOrigin": true,\n            "secure": false,\n            "logLevel": "debug",\n            "pathRewrite": {\n              "^/api": ""\n            }\n          },\n          // \'/\': {\n          //   target: \'//xxx.com\',\n          //   ws: false,\n          //   secure: false,\n          //   changeOrigin: true\n          // }\n        },\n        before: function (app, server, compiler) {\n          if(process.NODE_ENV !== \'production\'){\n            const mockerFile = path.resolve(\'./mocker/index.js\');\n            apiMocker(app, mockerFile, {})\n          }\n        },\n    },\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n * 配置webpack devServer\n\nmodule.exports = {\n    devServer: {\n      port: port,\n      proxy: {\n      // 代理 /api/user/login 到 http://127.0.0.1:3000/user/login\n      [process.env.VUE_APP_BASE_API]: {\n        target: \'http://127.0.0.1:3000/\',\n        changeOrigin: true,\n        pathRewrite: {\n          ["^" + process.env.VUE_APP_BASE_API]: ""\n        }\n      }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * axios\n\n// request.js\nimport axios from \'axios\'\nimport { message } from \'ant-design-vue\'\nimport store from \'@/store\'\n\nfunction showErrorMessage(errMessage) {\n  const content = errMessage || \'error\'\n  message.error(content, 5 * 1000)\n}\n// 创建axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  timeout: 15 * 1000,\n  withCredentials: true // 跨域时cookies设置该选项\n})\n\n// 请求拦截\nservice.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem(\'token\')\n    if (token) {\n      config.headers[\'authorization\'] = \'Bearer \' + token\n    }\n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n// 响应拦截\nservice.interceptors.response.use(\n  response => {\n    // 进返回数据部分\n    const res = response.data\n    // 仅仅返回数据部分\n    if (res.code !== 1) {\n      showErrorMessage(res.message)\n      //  todo\n      if (res.code === 1004) {\n        store.dispatch(\'user/resetToken\').then(() => {\n          location.reload()\n        })\n      }\n      return Promise.reject(new Error(res.message || \'Error\'))\n    } else {\n      return Promise.resolve(res)\n    }\n  },\n  error => {\n    showErrorMessage(error.message)\n    return Promise.reject(error)\n  }\n)\n\nexport default service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# webpack自动引入某文件夹下的文件\n\n/* 目录结构如下\nrouter\n├── index.js\n├── other\n│   └── index.js\n├── order\n│   └── index.js\n└── routes.js\n*/\n// 自动引入router目录下文件夹内的index.js文件（例：project/index.js）\n\n/**\nrequire.context(directory,useSubdirectories,regExp)\n\n  directory：说明需要检索的目录\n  useSubdirectories：是否检索子目录\n  regExp: 匹配文件的正则表达式,一般是文件名\n*/\n\nconst routerContext = require.context("./", true, /index\\.js$/);\nrouterContext.keys().forEach(route => {\n  // 如果是根目录的 index.js 、不处理\n  if (route.startsWith("./index")) {\n    return;\n  }\n  const routerModule = routerContext(route);\n  /**\n   * 兼容 import export 和 require module.export 两种规范\n   */\n  routes = [...routes, ...(routerModule.default || routerModule)];\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# gulp\n\n * 项目目录\n\n├── gulpfile.js\n├── output\n├── package-lock.json\n├── package.json\n└── src\n    ├── index.js\n    ├── m\n    │   └── m.css\n    ├── other\n    │   ├── m\n    │   │   └── other-m.css\n    │   └── pc\n    │       └── other-pc.css\n    └── pc\n        └── pc.css\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * gulpfile.js\n\n// 将 `src/xxx/m/xxx.css`转换为rem\n\nconst { src, dest } = require("gulp");\nvar postcss = require("gulp-postcss");\nvar pxtorem = require("postcss-pxtorem");\nexports.default = function() {\n  // https://github.com/cuth/postcss-pxtorem 配置\n  var processors = [\n    pxtorem({\n      replace: true,\n      propList: ["*"],\n      exclude: function(path) {\n        const matchPath = /src\\/(.+\\/)*m\\//.test(path);\n        return !matchPath;\n      }\n    })\n  ];\n\n  return src("src/**/*.css")\n    .pipe(postcss(processors))\n    .pipe(dest("output/css"));\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# webpack 配置\n\n * 原文地址\n\nconst path = require("path");\n\nmodule.exports = {\n  // entry 表示 入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。\n  // 类型可以是 string | object | array\n  entry: "./app/entry", // 只有1个入口，入口只有1个文件\n  entry: ["./app/entry1", "./app/entry2"], // 只有1个入口，入口有2个文件\n  entry: {\n    // 有2个入口\n    a: "./app/entry-a",\n    b: ["./app/entry-b1", "./app/entry-b2"]\n  },\n\n  // 如何输出结果：在 Webpack 经过一系列处理后，如何输出最终想要的代码。\n  output: {\n    // 输出文件存放的目录，必须是 string 类型的绝对路径。\n    path: path.resolve(__dirname, "dist"),\n\n    // 输出文件的名称\n    filename: "bundle.js", // 完整的名称\n    filename: "[name].js", // 当配置了多个 entry 时，通过名称模版为不同的 entry 生成不同的文件名称\n    filename: "[chunkhash].js", // 根据文件内容 hash 值生成文件名称，用于浏览器长时间缓存文件\n\n    // 发布到线上的所有资源的 URL 前缀，string 类型\n    publicPath: "/assets/", // 放到指定目录下\n    publicPath: "", // 放到根目录下\n    publicPath: "https://cdn.example.com/", // 放到 CDN 上去\n\n    // 导出库的名称，string 类型\n    // 不填它时，默认输出格式是匿名的立即执行函数\n    library: "MyLibrary",\n\n    // 导出库的类型，枚举类型，默认是 var\n    // 可以是 umd | umd2 | commonjs2 | commonjs | amd | this | var | assign | window | global | jsonp ，\n    libraryTarget: "umd",\n\n    // 是否包含有用的文件路径信息到生成的代码里去，boolean 类型\n    pathinfo: true,\n\n    // 附加 Chunk 的文件名称\n    chunkFilename: "[id].js",\n    chunkFilename: "[chunkhash].js",\n\n    // JSONP 异步加载资源时的回调函数名称，需要和服务端搭配使用\n    jsonpFunction: "myWebpackJsonp",\n\n    // 生成的 Source Map 文件名称\n    sourceMapFilename: "[file].map",\n\n    // 浏览器开发者工具里显示的源码模块名称\n    devtoolModuleFilenameTemplate: "webpack:///[resource-path]",\n\n    // 异步加载跨域的资源时使用的方式\n    crossOriginLoading: "use-credentials",\n    crossOriginLoading: "anonymous",\n    crossOriginLoading: false\n  },\n\n  // 配置模块相关\n  module: {\n    rules: [\n      // 配置 Loader\n      {\n        test: /\\.jsx?$/, // 正则匹配命中要使用 Loader 的文件\n        include: [\n          // 只会命中这里面的文件\n          path.resolve(__dirname, "app")\n        ],\n        exclude: [\n          // 忽略这里面的文件\n          path.resolve(__dirname, "app/demo-files")\n        ],\n        use: [\n          // 使用那些 Loader，有先后次序，从后往前执行\n          "style-loader", // 直接使用 Loader 的名称\n          {\n            loader: "css-loader",\n            options: {\n              // 给 html-loader 传一些参数\n            }\n          }\n        ]\n      }\n    ],\n    noParse: [\n      // 不用解析和处理的模块\n      /special-library\\.js$/ // 用正则匹配\n    ]\n  },\n\n  // 配置插件\n  plugins: [],\n\n  // 配置寻找模块的规则\n  resolve: {\n    modules: [\n      // 寻找模块的根目录，array 类型，默认以 node_modules 为根目录\n      // "node_modules",\n      path.resolve(__dirname, \'node_modules\'), // 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤\n      path.resolve(__dirname, "app")\n    ],\n    extensions: [".js", ".json", ".jsx", ".css"], // 模块的后缀名\n    alias: {\n      // 模块别名配置，用于映射模块\n      // 把 \'module\' 映射 \'new-module\'，同样的 \'module/path/file\' 也会被映射成 \'new-module/path/file\'\n      module: "new-module",\n      // 使用结尾符号 $ 后，把 \'only-module\' 映射成 \'new-module\'，\n      // 但是不像上面的，\'module/path/file\' 不会被映射成 \'new-module/path/file\'\n      "only-module$": "new-module"\n    },\n    alias: [\n      // alias 还支持使用数组来更详细的配置\n      {\n        name: "module", // 老的模块\n        alias: "new-module", // 新的模块\n        // 是否是只映射模块，如果是 true 只有 \'module\' 会被映射，如果是 false \'module/inner/path\' 也会被映射\n        onlyModule: true\n      }\n    ],\n    symlinks: true, // 是否跟随文件软链接去搜寻模块的路径\n    descriptionFiles: ["package.json"], // 模块的描述文件\n    mainFields: ["main"], // 模块的描述文件里的描述入口的文件的字段名称\n    enforceExtension: false // 是否强制导入语句必须要写明文件后缀\n  },\n\n  // 输出文件性能检查配置\n  performance: {\n    hints: "warning", // 有性能问题时输出警告\n    hints: "error", // 有性能问题时输出错误\n    hints: false, // 关闭性能检查\n    maxAssetSize: 200000, // 最大文件大小 (单位 bytes)\n    maxEntrypointSize: 400000, // 最大入口文件大小 (单位 bytes)\n    assetFilter: function(assetFilename) {\n      // 过滤要检查的文件\n      return assetFilename.endsWith(".css") || assetFilename.endsWith(".js");\n    }\n  },\n\n  devtool: "source-map", // 配置 source-map 类型\n\n  context: __dirname, // Webpack 使用的根目录，string 类型必须是绝对路径\n\n  // 配置输出代码的运行环境\n  target: "web", // 浏览器，默认\n  target: "webworker", // WebWorker\n  target: "node", // Node.js，使用 `require` 语句加载 Chunk 代码\n  target: "async-node", // Node.js，异步加载 Chunk 代码\n  target: "node-webkit", // nw.js\n  target: "electron-main", // electron, 主线程\n  target: "electron-renderer", // electron, 渲染线程\n\n  // Webpack 在打包时忽略文件\n  externals: {\n    // 使用来自 JavaScript 运行环境提供的全局变量\n    jquery: "jQuery"\n  },\n\n  stats: {\n    // 控制台输出日志控制\n    assets: true,\n    colors: true,\n    errors: true,\n    errorDetails: true,\n    hash: true\n  },\n\n  devServer: {\n    // DevServer 相关的配置\n    proxy: {\n      // 代理到后端服务接口\n      "/api": "http://localhost:3000"\n    },\n    contentBase: path.join(__dirname, "public"), // 配置 DevServer HTTP 服务器的文件根目录\n    compress: true, // 是否开启 gzip 压缩\n    historyApiFallback: true, // 是否开发 HTML5 History API 网页\n    hot: true, // 是否开启模块热替换功能\n    https: false // 是否开启 HTTPS 模式\n  },\n\n  profile: true, // 是否捕捉 Webpack 构建的性能信息，用于分析什么原因导致构建性能不佳\n\n  cache: false, // 是否启用缓存提升构建速度\n\n  watch: true, // 是否开始\n  watchOptions: {\n    // 监听模式选项\n    // 不监听的文件或文件夹，支持正则匹配。默认为空\n    ignored: /node_modules/,\n    // 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高\n    // 默认为300ms\n    aggregateTimeout: 300,\n    // 判断文件是否发生变化是不停的去询问系统指定文件有没有变化，默认每隔1000毫秒询问一次\n    poll: 1000\n  },\n  // 用来告诉 Webpack 如何去寻找 Loader\n  resolveLoader:{\n    // 去哪个目录下寻找 Loader\n    modules: [\'node_modules\'],\n    // 入口文件的后缀\n    extensions: [\'.js\', \'.json\'],\n    // 指明入口文件位置的字段\n    mainFields: [\'loader\', \'main\']\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n\n\n\n# 配置externals引入cdn资源\n\n * webpack.config.js\n\nmodule.exports = {\n  configureWebpack: config => {\n    config.externals = {\n      vue: "Vue",\n      "element-ui": "ELEMENT",\n      "vue-router": "VueRouter",\n      vuex: "Vuex",\n      axios: "axios"\n    };\n  },\n  chainWebpack: config => {\n    const cdn = {\n      // 访问https://unpkg.com/element-ui/lib/theme-chalk/index.css获取最新版本\n      css: ["//unpkg.com/element-ui@2.10.1/lib/theme-chalk/index.css"],\n      js: [\n        "//unpkg.com/vue@2.6.10/dist/vue.min.js", // 访问https://unpkg.com/vue/dist/vue.min.js获取最新版本\n        "//unpkg.com/vue-router@3.0.6/dist/vue-router.min.js",\n        "//unpkg.com/vuex@3.1.1/dist/vuex.min.js",\n        "//unpkg.com/axios@0.19.0/dist/axios.min.js",\n        "//unpkg.com/element-ui@2.10.1/lib/index.js"\n      ]\n    };\n\n    // 如果使用多页面打包，使用vue inspect --plugins查看html是否在结果数组中\n    config.plugin("html").tap(args => {\n      // html中添加cdn\n      args[0].cdn = cdn;\n      return args;\n    });\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n * html template\n\n\x3c!-- 使用CDN的CSS文件 --\x3e\n<% for (var i in htmlWebpackPlugin.options.cdn &&\nhtmlWebpackPlugin.options.cdn.css) { %>\n<link rel="stylesheet" href="<%= htmlWebpackPlugin.options.cdn.css[i] %>" />\n<% } %>\n\n\x3c!-- 使用CDN的JS文件 --\x3e\n<% for (var i in htmlWebpackPlugin.options.cdn &&\nhtmlWebpackPlugin.options.cdn.js) { %>\n<script\n  type="text/javascript"\n  src="<%= htmlWebpackPlugin.options.cdn.js[i] %>"\n><\/script>\n<% } %>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 浏览器调试vue\n\n * 快速获取浏览器中选中dom节点的vue实例。$0.vue\n * 本地调试https，跳过https证书验证方法，在浏览器里输入：thisisunsafe\n\n\n# chrome调试mouseenter事件\n\n * 1.选中调试的element节点\n * 2.控制台执行：$0.dispatchEvent(new MouseEvent(\'mouseenter\', { \'bubbles\': true }))\n\n\n# splitChunks配置\n\nconst path = require("path")\nconst BundleAnalyzerPlugin = require("webpack-bundle-analyzer")\n\t.BundleAnalyzerPlugin\nconst TerserPlugin = require("terser-webpack-plugin")\n\nconst { name } = require("./package")\nconst resolve = (dir) => path.join(__dirname, dir)\n\nconst isProd = ["production", "prod"].includes(process.env.NODE_ENV)\nconst port = 8081\n\n// console.log("isProd", isProd, process.env)\n\nmodule.exports = {\n\tpublicPath:\n\t\tprocess.env.NODE_ENV === "production" ? "/xxx/" : "./",\n\tlintOnSave: false,\n\toutputDir: "dist",\n\tassetsDir: "static",\n\tfilenameHashing: true,\n\tproductionSourceMap: !isProd, // 生产环境的 source map\n\tparallel: require("os").cpus().length > 1,\n\tdevServer: {\n\t\topen: true,\n\t\thost: "0.0.0.0",\n\t\t// 监听端口\n\t\tport,\n\t\thot: true,\n\t\t// 关闭主机检查，使微应用可以被 fetch\n\t\tdisableHostCheck: true,\n\t\toverlay: {\n\t\t\twarnings: false,\n\t\t\terrors: true,\n\t\t},\n\t\t// 配置跨域请求头，解决开发环境的跨域问题\n\t\theaders: {\n\t\t\t"Access-Control-Allow-Origin": "*",\n\t\t},\n\t},\n\t// 自定义webpack配置\n\tconfigureWebpack: (config) => {\n\n\t\tif (isProd) {\n\t\t\tconfig.optimization.minimizer.push(\n\t\t\t\tnew TerserPlugin({\n\t\t\t\t\tsourceMap: !isProd, // Must be set to true if using source-maps in production\n\t\t\t\t\tterserOptions: {\n\t\t\t\t\t\tcompress: {\n\t\t\t\t\t\t\tdrop_console: true,\n\t\t\t\t\t\t\tdrop_debugger: true,\n\t\t\t\t\t\t\tpure_funcs: [\n\t\t\t\t\t\t\t\t"console.log",\n\t\t\t\t\t\t\t\t"console.info",\n\t\t\t\t\t\t\t\t"console.debug",\n\t\t\t\t\t\t\t\t"console.warn",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t)\n\t\t\t// 利用 splitChunks 单独打包第三方模块\n\t\t\tconfig.optimization.splitChunks = {\n\t\t\t\tcacheGroups: {\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: "chunk-common",\n\t\t\t\t\t\tchunks: "initial",\n\t\t\t\t\t\tminChunks: 2,\n\t\t\t\t\t\tmaxInitialRequests: 5,\n\t\t\t\t\t\tminSize: 0,\n\t\t\t\t\t\tpriority: 1,\n\t\t\t\t\t\treuseExistingChunk: true,\n\t\t\t\t\t\tenforce: true,\n\t\t\t\t\t},\n\t\t\t\t\tvendors: {\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]/,\n\t\t\t\t\t\tname(module) {\n\t\t\t\t\t\t\t// get the name. E.g. node_modules/packageName/not/this/part.js\n\t\t\t\t\t\t\t// or node_modules/packageName\n\t\t\t\t\t\t\tconst packageName = module.context.match(\n\t\t\t\t\t\t\t\t/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/,\n\t\t\t\t\t\t\t)[1]\n\t\t\t\t\t\t\t// https://docs.npmjs.com/cli/v7/configuring-npm/package-json\n\t\t\t\t\t\t\t// npm包名满足URL-safe\n\t\t\t\t\t\t\treturn `npm.${packageName.replace("@", "")}`\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// name: "chunk-vendors",\n\t\t\t\t\t\tchunks: "all",\n\t\t\t\t\t\tpriority: 2,\n\t\t\t\t\t\treuseExistingChunk: true,\n\t\t\t\t\t\tenforce: true,\n\t\t\t\t\t},\n\t\t\t\t\tvue: {\n\t\t\t\t\t\tname: "chunk-vue",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/](vue|vuex|vue-router)[\\\\/]/,\n\t\t\t\t\t\tchunks: "all",\n\t\t\t\t\t\tpriority: 3,\n\t\t\t\t\t\treuseExistingChunk: true,\n\t\t\t\t\t\tenforce: true,\n\t\t\t\t\t},\n\t\t\t\t\telementUI: {\n\t\t\t\t\t\tname: "chunk-element",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]element-ui[\\\\/]/,\n\t\t\t\t\t\tchunks: "all",\n\t\t\t\t\t\tpriority: 4,\n\t\t\t\t\t\treuseExistingChunk: true,\n\t\t\t\t\t\tenforce: true,\n\t\t\t\t\t},\n\t\t\t\t\techarts: {\n\t\t\t\t\t\tname: "chunk-echarts",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/](vue-)?echarts[\\\\/]/,\n\t\t\t\t\t\tchunks: "all",\n\t\t\t\t\t\tpriority: 5,\n\t\t\t\t\t\treuseExistingChunk: true,\n\t\t\t\t\t\tenforce: true,\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\tconfig.devtool = "source-map"\n\t\t}\n\t},\n\tchainWebpack: (config) => {\n\t\t// 修复HMR\n\t\tconfig.resolve.symlinks(true)\n\n\t\tconfig.resolve.alias\n\t\t\t.set("@", resolve("src"))\n\t\t\t.set("@components", resolve("src/components"))\n\t\t\t.set("@router", resolve("src/router"))\n\t\t\t.set("@store", resolve("src/store"))\n\n\t\tif (isProd) {\n\t\t\tconfig.optimization.delete("splitChunks")\n\t\t}\n\n\t\tif (process.env.npm_config_report) {\n\t\t\tconfig.plugin("webpack-bundle-analyzer").use(BundleAnalyzerPlugin, [\n\t\t\t\t{\n\t\t\t\t\tanalyzerMode: "static",\n\t\t\t\t},\n\t\t\t])\n\t\t}\n\n\t\treturn config\n\t},\n\tcss: {\n\t\tsourceMap: !isProd,\n\t},\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n\n\n\n# yapi mock\n\n * 结构\n\ndev-server\n├── index.js\n├── module\n│   ├── a.js\n│   └── b.js\n└── proxy.js\n\n\n1\n2\n3\n4\n5\n6\n\n * index.js\n\nconst chalk = require(\'chalk\')\nconst proxy = require(\'./proxy\')\n\nconst isDev = process.env.ENV === \'test\'\n\n// 输入日志\nfunction printProxyLog () {\n  console.log(chalk.green(\'\\nRunning yApi Mock Server: \'), chalk.yellow(process.env.VUE_APP_USE_MOCK ? \'Yes\' : \'No\'))\n  console.log(chalk.red(\'\\n =========接口代理列表 start=========\'))\n  Object.keys(proxy).forEach(key => {\n    const target = proxy[key].target\n    console.log(chalk.green(`路径：${key}-----\x3e目标地址：${target}`))\n  })\n  console.log(chalk.red(\'=========接口代理列表 end========= \\n\'))\n}\n\nif (isDev) { printProxyLog() }\n\nmodule.exports = {\n  host: process.env.HOST || \'dev.xueersi.com\',\n  proxyTable: proxy\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n * proxy.js\n\nconst chalk = require(\'chalk\')\nconst fs = require(\'fs\')\nconst path = require(\'path\')\n\n// 获取模块目录\nconst moduleName = process.argv[2] || \'\'\nconsole.log(chalk.green(\'Running moduleName: \', moduleName))\n\nif (!moduleName) {\n  console.log(chalk.red(\'\\n Please enter the module name \\n\'))\n  process.exit(1)\n}\n\nlet defaultMockApi = {}\nlet createYapiMockProxy\n\nconst findModuleDir = function () {\n  const result = []\n  fs.readdirSync(path.join(__dirname, \'../module\')).forEach(file => {\n    let filePath = path.join(__dirname, \'../module/\' + file)\n    let isDir = fs.statSync(filePath).isDirectory()\n    if (isDir) { result.push(file) }\n  })\n  return result\n}\n\ntry {\n  const MockProxy = require(`./module/${moduleName}.js`)\n  defaultMockApi = MockProxy.defaultMockApi\n  createYapiMockProxy = MockProxy.createYapiMockProxy\n} catch (error) {\n  console.error(chalk.red(\'\\nerror: \'), error)\n  const moduleDirStr = findModuleDir().join(\'|\')\n  console.info(chalk.red(\'\\n 请使用: npm run [dev|build] [\' + moduleDirStr + \'] \\n\'))\n  process.exit(1)\n}\n\nconst yapiProxyConfig = process.env.VUE_APP_USE_MOCK ? createYapiMockProxy() : {}\nmodule.exports = {\n  ...yapiProxyConfig,\n  ...defaultMockApi\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n * module/a.js\n\n// 默认的代理地址\nconst defaultMockApi = {\n  \'/api1\': {\n    \'target\': \'https://api.domain.com\',\n    \'changeOrigin\': true\n  },\n  \'/api2\': {\n    \'target\': \'http://abc.domain.com\',\n    \'changeOrigin\': true\n  }\n}\n\nconst YapiMockApi = []\n\n/**\n * @desc: 生成yapi的proxy\n */\nconst createYapiMockProxy = () => {\n  let obj = {}\n  YapiMockApi.forEach(key => {\n    obj[key] = {\n      target: \'http://yapi.domain.com/mock/1767\', // yapi代理的接口地址\n      ws: false,\n      changeOrigin: true\n    }\n  })\n  return obj\n}\n\nmodule.exports = { defaultMockApi, createYapiMockProxy }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# min-webpack\n\n> video: 手摸手带你实现打包器 仅需 80 行代码理解 webpack 的核心\n\n\n# 获取import的路径\n\nimport parser from \'@babel/parser\'\nimport traverse from \'@babel/traverse\'\n\nfunction createAssets(filePath){\n\tconst source = fs.readFileSync(filePath, {encoding: \'UTF8\'})\n  const ast = paser.parser(source, {sourceType: \'module\'})\n  const deps = []\n\n  traverse.default(ast, {\n    // 获取 import 后的 路径\n  \tImportDeclaration({node}){\n    \tdeps.push(node.source.value)\n    }\n  })\n\n  return {source, deps}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# require\n\n(function(modules){\n  function require(id){\n  \tconst [fn, mapping] = modules[id]\n\n    const module = { exports: {} }\n\n    function localRequire(filePath){\n    \tconst id = mapping[filePath]\n      return require(id)\n    }\n\n    fn(localRequire, module, module.exports)\n\n    return module.exports\n  }\n\n  require(1)\n})({\n\t1: [function(require, module, module.exports){\n        const { foo } = require(\'./foo.js\')\n        foo()\n        console.log(\'main.js\')\n      },{\'./foo.js: 2}\n    ],\n\t2: [function(require, module, module.exports){\n        function foo(){\n          console.log(\'foo\')\n        }\n    \t\tmodule.exports = { foo }\n  \t\t}, {}\n   ]\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# mini\n\nimport fs from \'fs\'\nimport path from \'path\'\nimport ejs from \'ejs\'\nimport parser from \'@babel/parser\'\nimport traverse from \'@babel/traverse\'\nimport { transformFromAst } from \'babel-core\'\nlet id = 0\n\nfunction createAssets(filePath){\n\tconst source = fs.readFileSync(filePath, {encoding: \'utf-8\'})\n\n  const ast = parser.parser(source, {sourceType: \'module\'})\n\n  const deps = []\n\n  traverse.default(ast, {\n  \tImportDeclaration({node}){\n    \tdeps.push(node.source.value)\n    }\n  })\n  // install babel-preset-env\n  const code = transformFromAst(ast, null, { presets: [\'env\'] })\n\n  return { filePath, code , deps, mapping: {}, id: id++ }\n}\n\nfunction createGraph(){\n  const mainAssets = createAssets(\'./example/main.js\');\n\n  const queue = [mainAssets]\n  for( const asset of queue ) {\n  \tasset.deps.forEach( relativePath => {\n    \tconst child = createAssets(path.resolve(\'./example\', relativePath))\n    \tasset.mapping[relativePath] = child.id\n      queue.push(child)\n    })\n  }\n  return queue\n}\n\nfunction build(graph){\n\tconst template = fs.readFileSync(\'./template/build.ejs\', {encoding: \'utf-8\'})\n\n  const data = graph.map(asset => {\n  \tconst { id, code, mapping } = asset\n    return { id, code, mapping}\n  })\n\n  const code = ejs.render(tempalte, {data})\n\n  fs.writeFileSync( \'./dist/bundle.js\', {encoding: \'utf-8\'})\n}\n\n// use\nconst graph = createGraph()\nbuild(graph)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n',normalizedContent:'# webpack\n\n * tapable（webpack核心模块）使用手册\n * 分享15个webpack实用的插件！！！]\n\n\n# 其他打包工具\n\n * esbuild\n * parcel\n * rollup\n\n\n# mock server\n\n * yapi\n * mockjs\n * easy-mock\n * mswjs/msw\n\n\n# 配置mock api\n\n * https://github.com/jaywcjlove/mocker-api\n\n * version: "mocker-api": "^2.8.1"\n\n * 创建/mocker/index.js\n\n// mocker-api: https://github.com/jaywcjlove/mocker-api\nconst delay = require("mocker-api/lib/delay");\n\nconst noproxy = process.env.no_proxy === \'true\';\n\nconst proxy = {\n  _proxy: {\n    priority: "mocker",\n    proxy: {\n      "/api/(.*)": "http://xxx/mock/35",\n    },\n    changehost: true,\n  },\n  "get /api/info/:id": (req, res) => {},\n};\n\nmodule.exports = (noproxy ? {} : delay(proxy, 1000));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * 配置vue.config.js\n\nmodule.exports = {\n    devserver: {\n        "open": true,\n        "overlay": true,\n        "hot": true,\n        "host": "0.0.0.0",\n        "port": 8080,\n        "inline": true,\n        "disablehostcheck": true,\n        "stats": {\n          "colors": true\n        },\n        "historyapifallback": true,\n        proxy: {\n          "/api": {\n            "target": "http://xxx.com/api", // trunk 环境\n            "changeorigin": true,\n            "secure": false,\n            "loglevel": "debug",\n            "pathrewrite": {\n              "^/api": ""\n            }\n          },\n          // \'/\': {\n          //   target: \'//xxx.com\',\n          //   ws: false,\n          //   secure: false,\n          //   changeorigin: true\n          // }\n        },\n        before: function (app, server, compiler) {\n          if(process.node_env !== \'production\'){\n            const mockerfile = path.resolve(\'./mocker/index.js\');\n            apimocker(app, mockerfile, {})\n          }\n        },\n    },\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n * 配置webpack devserver\n\nmodule.exports = {\n    devserver: {\n      port: port,\n      proxy: {\n      // 代理 /api/user/login 到 http://127.0.0.1:3000/user/login\n      [process.env.vue_app_base_api]: {\n        target: \'http://127.0.0.1:3000/\',\n        changeorigin: true,\n        pathrewrite: {\n          ["^" + process.env.vue_app_base_api]: ""\n        }\n      }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * axios\n\n// request.js\nimport axios from \'axios\'\nimport { message } from \'ant-design-vue\'\nimport store from \'@/store\'\n\nfunction showerrormessage(errmessage) {\n  const content = errmessage || \'error\'\n  message.error(content, 5 * 1000)\n}\n// 创建axios 实例\nconst service = axios.create({\n  baseurl: process.env.vue_app_base_api,\n  timeout: 15 * 1000,\n  withcredentials: true // 跨域时cookies设置该选项\n})\n\n// 请求拦截\nservice.interceptors.request.use(\n  config => {\n    const token = localstorage.getitem(\'token\')\n    if (token) {\n      config.headers[\'authorization\'] = \'bearer \' + token\n    }\n    return config\n  },\n  error => {\n    return promise.reject(error)\n  }\n)\n// 响应拦截\nservice.interceptors.response.use(\n  response => {\n    // 进返回数据部分\n    const res = response.data\n    // 仅仅返回数据部分\n    if (res.code !== 1) {\n      showerrormessage(res.message)\n      //  todo\n      if (res.code === 1004) {\n        store.dispatch(\'user/resettoken\').then(() => {\n          location.reload()\n        })\n      }\n      return promise.reject(new error(res.message || \'error\'))\n    } else {\n      return promise.resolve(res)\n    }\n  },\n  error => {\n    showerrormessage(error.message)\n    return promise.reject(error)\n  }\n)\n\nexport default service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# webpack自动引入某文件夹下的文件\n\n/* 目录结构如下\nrouter\n├── index.js\n├── other\n│   └── index.js\n├── order\n│   └── index.js\n└── routes.js\n*/\n// 自动引入router目录下文件夹内的index.js文件（例：project/index.js）\n\n/**\nrequire.context(directory,usesubdirectories,regexp)\n\n  directory：说明需要检索的目录\n  usesubdirectories：是否检索子目录\n  regexp: 匹配文件的正则表达式,一般是文件名\n*/\n\nconst routercontext = require.context("./", true, /index\\.js$/);\nroutercontext.keys().foreach(route => {\n  // 如果是根目录的 index.js 、不处理\n  if (route.startswith("./index")) {\n    return;\n  }\n  const routermodule = routercontext(route);\n  /**\n   * 兼容 import export 和 require module.export 两种规范\n   */\n  routes = [...routes, ...(routermodule.default || routermodule)];\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# gulp\n\n * 项目目录\n\n├── gulpfile.js\n├── output\n├── package-lock.json\n├── package.json\n└── src\n    ├── index.js\n    ├── m\n    │   └── m.css\n    ├── other\n    │   ├── m\n    │   │   └── other-m.css\n    │   └── pc\n    │       └── other-pc.css\n    └── pc\n        └── pc.css\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * gulpfile.js\n\n// 将 `src/xxx/m/xxx.css`转换为rem\n\nconst { src, dest } = require("gulp");\nvar postcss = require("gulp-postcss");\nvar pxtorem = require("postcss-pxtorem");\nexports.default = function() {\n  // https://github.com/cuth/postcss-pxtorem 配置\n  var processors = [\n    pxtorem({\n      replace: true,\n      proplist: ["*"],\n      exclude: function(path) {\n        const matchpath = /src\\/(.+\\/)*m\\//.test(path);\n        return !matchpath;\n      }\n    })\n  ];\n\n  return src("src/**/*.css")\n    .pipe(postcss(processors))\n    .pipe(dest("output/css"));\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# webpack 配置\n\n * 原文地址\n\nconst path = require("path");\n\nmodule.exports = {\n  // entry 表示 入口，webpack 执行构建的第一步将从 entry 开始，可抽象成输入。\n  // 类型可以是 string | object | array\n  entry: "./app/entry", // 只有1个入口，入口只有1个文件\n  entry: ["./app/entry1", "./app/entry2"], // 只有1个入口，入口有2个文件\n  entry: {\n    // 有2个入口\n    a: "./app/entry-a",\n    b: ["./app/entry-b1", "./app/entry-b2"]\n  },\n\n  // 如何输出结果：在 webpack 经过一系列处理后，如何输出最终想要的代码。\n  output: {\n    // 输出文件存放的目录，必须是 string 类型的绝对路径。\n    path: path.resolve(__dirname, "dist"),\n\n    // 输出文件的名称\n    filename: "bundle.js", // 完整的名称\n    filename: "[name].js", // 当配置了多个 entry 时，通过名称模版为不同的 entry 生成不同的文件名称\n    filename: "[chunkhash].js", // 根据文件内容 hash 值生成文件名称，用于浏览器长时间缓存文件\n\n    // 发布到线上的所有资源的 url 前缀，string 类型\n    publicpath: "/assets/", // 放到指定目录下\n    publicpath: "", // 放到根目录下\n    publicpath: "https://cdn.example.com/", // 放到 cdn 上去\n\n    // 导出库的名称，string 类型\n    // 不填它时，默认输出格式是匿名的立即执行函数\n    library: "mylibrary",\n\n    // 导出库的类型，枚举类型，默认是 var\n    // 可以是 umd | umd2 | commonjs2 | commonjs | amd | this | var | assign | window | global | jsonp ，\n    librarytarget: "umd",\n\n    // 是否包含有用的文件路径信息到生成的代码里去，boolean 类型\n    pathinfo: true,\n\n    // 附加 chunk 的文件名称\n    chunkfilename: "[id].js",\n    chunkfilename: "[chunkhash].js",\n\n    // jsonp 异步加载资源时的回调函数名称，需要和服务端搭配使用\n    jsonpfunction: "mywebpackjsonp",\n\n    // 生成的 source map 文件名称\n    sourcemapfilename: "[file].map",\n\n    // 浏览器开发者工具里显示的源码模块名称\n    devtoolmodulefilenametemplate: "webpack:///[resource-path]",\n\n    // 异步加载跨域的资源时使用的方式\n    crossoriginloading: "use-credentials",\n    crossoriginloading: "anonymous",\n    crossoriginloading: false\n  },\n\n  // 配置模块相关\n  module: {\n    rules: [\n      // 配置 loader\n      {\n        test: /\\.jsx?$/, // 正则匹配命中要使用 loader 的文件\n        include: [\n          // 只会命中这里面的文件\n          path.resolve(__dirname, "app")\n        ],\n        exclude: [\n          // 忽略这里面的文件\n          path.resolve(__dirname, "app/demo-files")\n        ],\n        use: [\n          // 使用那些 loader，有先后次序，从后往前执行\n          "style-loader", // 直接使用 loader 的名称\n          {\n            loader: "css-loader",\n            options: {\n              // 给 html-loader 传一些参数\n            }\n          }\n        ]\n      }\n    ],\n    noparse: [\n      // 不用解析和处理的模块\n      /special-library\\.js$/ // 用正则匹配\n    ]\n  },\n\n  // 配置插件\n  plugins: [],\n\n  // 配置寻找模块的规则\n  resolve: {\n    modules: [\n      // 寻找模块的根目录，array 类型，默认以 node_modules 为根目录\n      // "node_modules",\n      path.resolve(__dirname, \'node_modules\'), // 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤\n      path.resolve(__dirname, "app")\n    ],\n    extensions: [".js", ".json", ".jsx", ".css"], // 模块的后缀名\n    alias: {\n      // 模块别名配置，用于映射模块\n      // 把 \'module\' 映射 \'new-module\'，同样的 \'module/path/file\' 也会被映射成 \'new-module/path/file\'\n      module: "new-module",\n      // 使用结尾符号 $ 后，把 \'only-module\' 映射成 \'new-module\'，\n      // 但是不像上面的，\'module/path/file\' 不会被映射成 \'new-module/path/file\'\n      "only-module$": "new-module"\n    },\n    alias: [\n      // alias 还支持使用数组来更详细的配置\n      {\n        name: "module", // 老的模块\n        alias: "new-module", // 新的模块\n        // 是否是只映射模块，如果是 true 只有 \'module\' 会被映射，如果是 false \'module/inner/path\' 也会被映射\n        onlymodule: true\n      }\n    ],\n    symlinks: true, // 是否跟随文件软链接去搜寻模块的路径\n    descriptionfiles: ["package.json"], // 模块的描述文件\n    mainfields: ["main"], // 模块的描述文件里的描述入口的文件的字段名称\n    enforceextension: false // 是否强制导入语句必须要写明文件后缀\n  },\n\n  // 输出文件性能检查配置\n  performance: {\n    hints: "warning", // 有性能问题时输出警告\n    hints: "error", // 有性能问题时输出错误\n    hints: false, // 关闭性能检查\n    maxassetsize: 200000, // 最大文件大小 (单位 bytes)\n    maxentrypointsize: 400000, // 最大入口文件大小 (单位 bytes)\n    assetfilter: function(assetfilename) {\n      // 过滤要检查的文件\n      return assetfilename.endswith(".css") || assetfilename.endswith(".js");\n    }\n  },\n\n  devtool: "source-map", // 配置 source-map 类型\n\n  context: __dirname, // webpack 使用的根目录，string 类型必须是绝对路径\n\n  // 配置输出代码的运行环境\n  target: "web", // 浏览器，默认\n  target: "webworker", // webworker\n  target: "node", // node.js，使用 `require` 语句加载 chunk 代码\n  target: "async-node", // node.js，异步加载 chunk 代码\n  target: "node-webkit", // nw.js\n  target: "electron-main", // electron, 主线程\n  target: "electron-renderer", // electron, 渲染线程\n\n  // webpack 在打包时忽略文件\n  externals: {\n    // 使用来自 javascript 运行环境提供的全局变量\n    jquery: "jquery"\n  },\n\n  stats: {\n    // 控制台输出日志控制\n    assets: true,\n    colors: true,\n    errors: true,\n    errordetails: true,\n    hash: true\n  },\n\n  devserver: {\n    // devserver 相关的配置\n    proxy: {\n      // 代理到后端服务接口\n      "/api": "http://localhost:3000"\n    },\n    contentbase: path.join(__dirname, "public"), // 配置 devserver http 服务器的文件根目录\n    compress: true, // 是否开启 gzip 压缩\n    historyapifallback: true, // 是否开发 html5 history api 网页\n    hot: true, // 是否开启模块热替换功能\n    https: false // 是否开启 https 模式\n  },\n\n  profile: true, // 是否捕捉 webpack 构建的性能信息，用于分析什么原因导致构建性能不佳\n\n  cache: false, // 是否启用缓存提升构建速度\n\n  watch: true, // 是否开始\n  watchoptions: {\n    // 监听模式选项\n    // 不监听的文件或文件夹，支持正则匹配。默认为空\n    ignored: /node_modules/,\n    // 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高\n    // 默认为300ms\n    aggregatetimeout: 300,\n    // 判断文件是否发生变化是不停的去询问系统指定文件有没有变化，默认每隔1000毫秒询问一次\n    poll: 1000\n  },\n  // 用来告诉 webpack 如何去寻找 loader\n  resolveloader:{\n    // 去哪个目录下寻找 loader\n    modules: [\'node_modules\'],\n    // 入口文件的后缀\n    extensions: [\'.js\', \'.json\'],\n    // 指明入口文件位置的字段\n    mainfields: [\'loader\', \'main\']\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n\n\n\n# 配置externals引入cdn资源\n\n * webpack.config.js\n\nmodule.exports = {\n  configurewebpack: config => {\n    config.externals = {\n      vue: "vue",\n      "element-ui": "element",\n      "vue-router": "vuerouter",\n      vuex: "vuex",\n      axios: "axios"\n    };\n  },\n  chainwebpack: config => {\n    const cdn = {\n      // 访问https://unpkg.com/element-ui/lib/theme-chalk/index.css获取最新版本\n      css: ["//unpkg.com/element-ui@2.10.1/lib/theme-chalk/index.css"],\n      js: [\n        "//unpkg.com/vue@2.6.10/dist/vue.min.js", // 访问https://unpkg.com/vue/dist/vue.min.js获取最新版本\n        "//unpkg.com/vue-router@3.0.6/dist/vue-router.min.js",\n        "//unpkg.com/vuex@3.1.1/dist/vuex.min.js",\n        "//unpkg.com/axios@0.19.0/dist/axios.min.js",\n        "//unpkg.com/element-ui@2.10.1/lib/index.js"\n      ]\n    };\n\n    // 如果使用多页面打包，使用vue inspect --plugins查看html是否在结果数组中\n    config.plugin("html").tap(args => {\n      // html中添加cdn\n      args[0].cdn = cdn;\n      return args;\n    });\n  }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n * html template\n\n\x3c!-- 使用cdn的css文件 --\x3e\n<% for (var i in htmlwebpackplugin.options.cdn &&\nhtmlwebpackplugin.options.cdn.css) { %>\n<link rel="stylesheet" href="<%= htmlwebpackplugin.options.cdn.css[i] %>" />\n<% } %>\n\n\x3c!-- 使用cdn的js文件 --\x3e\n<% for (var i in htmlwebpackplugin.options.cdn &&\nhtmlwebpackplugin.options.cdn.js) { %>\n<script\n  type="text/javascript"\n  src="<%= htmlwebpackplugin.options.cdn.js[i] %>"\n><\/script>\n<% } %>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 浏览器调试vue\n\n * 快速获取浏览器中选中dom节点的vue实例。$0.vue\n * 本地调试https，跳过https证书验证方法，在浏览器里输入：thisisunsafe\n\n\n# chrome调试mouseenter事件\n\n * 1.选中调试的element节点\n * 2.控制台执行：$0.dispatchevent(new mouseevent(\'mouseenter\', { \'bubbles\': true }))\n\n\n# splitchunks配置\n\nconst path = require("path")\nconst bundleanalyzerplugin = require("webpack-bundle-analyzer")\n\t.bundleanalyzerplugin\nconst terserplugin = require("terser-webpack-plugin")\n\nconst { name } = require("./package")\nconst resolve = (dir) => path.join(__dirname, dir)\n\nconst isprod = ["production", "prod"].includes(process.env.node_env)\nconst port = 8081\n\n// console.log("isprod", isprod, process.env)\n\nmodule.exports = {\n\tpublicpath:\n\t\tprocess.env.node_env === "production" ? "/xxx/" : "./",\n\tlintonsave: false,\n\toutputdir: "dist",\n\tassetsdir: "static",\n\tfilenamehashing: true,\n\tproductionsourcemap: !isprod, // 生产环境的 source map\n\tparallel: require("os").cpus().length > 1,\n\tdevserver: {\n\t\topen: true,\n\t\thost: "0.0.0.0",\n\t\t// 监听端口\n\t\tport,\n\t\thot: true,\n\t\t// 关闭主机检查，使微应用可以被 fetch\n\t\tdisablehostcheck: true,\n\t\toverlay: {\n\t\t\twarnings: false,\n\t\t\terrors: true,\n\t\t},\n\t\t// 配置跨域请求头，解决开发环境的跨域问题\n\t\theaders: {\n\t\t\t"access-control-allow-origin": "*",\n\t\t},\n\t},\n\t// 自定义webpack配置\n\tconfigurewebpack: (config) => {\n\n\t\tif (isprod) {\n\t\t\tconfig.optimization.minimizer.push(\n\t\t\t\tnew terserplugin({\n\t\t\t\t\tsourcemap: !isprod, // must be set to true if using source-maps in production\n\t\t\t\t\tterseroptions: {\n\t\t\t\t\t\tcompress: {\n\t\t\t\t\t\t\tdrop_console: true,\n\t\t\t\t\t\t\tdrop_debugger: true,\n\t\t\t\t\t\t\tpure_funcs: [\n\t\t\t\t\t\t\t\t"console.log",\n\t\t\t\t\t\t\t\t"console.info",\n\t\t\t\t\t\t\t\t"console.debug",\n\t\t\t\t\t\t\t\t"console.warn",\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t)\n\t\t\t// 利用 splitchunks 单独打包第三方模块\n\t\t\tconfig.optimization.splitchunks = {\n\t\t\t\tcachegroups: {\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: "chunk-common",\n\t\t\t\t\t\tchunks: "initial",\n\t\t\t\t\t\tminchunks: 2,\n\t\t\t\t\t\tmaxinitialrequests: 5,\n\t\t\t\t\t\tminsize: 0,\n\t\t\t\t\t\tpriority: 1,\n\t\t\t\t\t\treuseexistingchunk: true,\n\t\t\t\t\t\tenforce: true,\n\t\t\t\t\t},\n\t\t\t\t\tvendors: {\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]/,\n\t\t\t\t\t\tname(module) {\n\t\t\t\t\t\t\t// get the name. e.g. node_modules/packagename/not/this/part.js\n\t\t\t\t\t\t\t// or node_modules/packagename\n\t\t\t\t\t\t\tconst packagename = module.context.match(\n\t\t\t\t\t\t\t\t/[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/,\n\t\t\t\t\t\t\t)[1]\n\t\t\t\t\t\t\t// https://docs.npmjs.com/cli/v7/configuring-npm/package-json\n\t\t\t\t\t\t\t// npm包名满足url-safe\n\t\t\t\t\t\t\treturn `npm.${packagename.replace("@", "")}`\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// name: "chunk-vendors",\n\t\t\t\t\t\tchunks: "all",\n\t\t\t\t\t\tpriority: 2,\n\t\t\t\t\t\treuseexistingchunk: true,\n\t\t\t\t\t\tenforce: true,\n\t\t\t\t\t},\n\t\t\t\t\tvue: {\n\t\t\t\t\t\tname: "chunk-vue",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/](vue|vuex|vue-router)[\\\\/]/,\n\t\t\t\t\t\tchunks: "all",\n\t\t\t\t\t\tpriority: 3,\n\t\t\t\t\t\treuseexistingchunk: true,\n\t\t\t\t\t\tenforce: true,\n\t\t\t\t\t},\n\t\t\t\t\telementui: {\n\t\t\t\t\t\tname: "chunk-element",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]element-ui[\\\\/]/,\n\t\t\t\t\t\tchunks: "all",\n\t\t\t\t\t\tpriority: 4,\n\t\t\t\t\t\treuseexistingchunk: true,\n\t\t\t\t\t\tenforce: true,\n\t\t\t\t\t},\n\t\t\t\t\techarts: {\n\t\t\t\t\t\tname: "chunk-echarts",\n\t\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/](vue-)?echarts[\\\\/]/,\n\t\t\t\t\t\tchunks: "all",\n\t\t\t\t\t\tpriority: 5,\n\t\t\t\t\t\treuseexistingchunk: true,\n\t\t\t\t\t\tenforce: true,\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}\n\t\t} else {\n\t\t\tconfig.devtool = "source-map"\n\t\t}\n\t},\n\tchainwebpack: (config) => {\n\t\t// 修复hmr\n\t\tconfig.resolve.symlinks(true)\n\n\t\tconfig.resolve.alias\n\t\t\t.set("@", resolve("src"))\n\t\t\t.set("@components", resolve("src/components"))\n\t\t\t.set("@router", resolve("src/router"))\n\t\t\t.set("@store", resolve("src/store"))\n\n\t\tif (isprod) {\n\t\t\tconfig.optimization.delete("splitchunks")\n\t\t}\n\n\t\tif (process.env.npm_config_report) {\n\t\t\tconfig.plugin("webpack-bundle-analyzer").use(bundleanalyzerplugin, [\n\t\t\t\t{\n\t\t\t\t\tanalyzermode: "static",\n\t\t\t\t},\n\t\t\t])\n\t\t}\n\n\t\treturn config\n\t},\n\tcss: {\n\t\tsourcemap: !isprod,\n\t},\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n\n\n\n# yapi mock\n\n * 结构\n\ndev-server\n├── index.js\n├── module\n│   ├── a.js\n│   └── b.js\n└── proxy.js\n\n\n1\n2\n3\n4\n5\n6\n\n * index.js\n\nconst chalk = require(\'chalk\')\nconst proxy = require(\'./proxy\')\n\nconst isdev = process.env.env === \'test\'\n\n// 输入日志\nfunction printproxylog () {\n  console.log(chalk.green(\'\\nrunning yapi mock server: \'), chalk.yellow(process.env.vue_app_use_mock ? \'yes\' : \'no\'))\n  console.log(chalk.red(\'\\n =========接口代理列表 start=========\'))\n  object.keys(proxy).foreach(key => {\n    const target = proxy[key].target\n    console.log(chalk.green(`路径：${key}-----\x3e目标地址：${target}`))\n  })\n  console.log(chalk.red(\'=========接口代理列表 end========= \\n\'))\n}\n\nif (isdev) { printproxylog() }\n\nmodule.exports = {\n  host: process.env.host || \'dev.xueersi.com\',\n  proxytable: proxy\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n * proxy.js\n\nconst chalk = require(\'chalk\')\nconst fs = require(\'fs\')\nconst path = require(\'path\')\n\n// 获取模块目录\nconst modulename = process.argv[2] || \'\'\nconsole.log(chalk.green(\'running modulename: \', modulename))\n\nif (!modulename) {\n  console.log(chalk.red(\'\\n please enter the module name \\n\'))\n  process.exit(1)\n}\n\nlet defaultmockapi = {}\nlet createyapimockproxy\n\nconst findmoduledir = function () {\n  const result = []\n  fs.readdirsync(path.join(__dirname, \'../module\')).foreach(file => {\n    let filepath = path.join(__dirname, \'../module/\' + file)\n    let isdir = fs.statsync(filepath).isdirectory()\n    if (isdir) { result.push(file) }\n  })\n  return result\n}\n\ntry {\n  const mockproxy = require(`./module/${modulename}.js`)\n  defaultmockapi = mockproxy.defaultmockapi\n  createyapimockproxy = mockproxy.createyapimockproxy\n} catch (error) {\n  console.error(chalk.red(\'\\nerror: \'), error)\n  const moduledirstr = findmoduledir().join(\'|\')\n  console.info(chalk.red(\'\\n 请使用: npm run [dev|build] [\' + moduledirstr + \'] \\n\'))\n  process.exit(1)\n}\n\nconst yapiproxyconfig = process.env.vue_app_use_mock ? createyapimockproxy() : {}\nmodule.exports = {\n  ...yapiproxyconfig,\n  ...defaultmockapi\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n * module/a.js\n\n// 默认的代理地址\nconst defaultmockapi = {\n  \'/api1\': {\n    \'target\': \'https://api.domain.com\',\n    \'changeorigin\': true\n  },\n  \'/api2\': {\n    \'target\': \'http://abc.domain.com\',\n    \'changeorigin\': true\n  }\n}\n\nconst yapimockapi = []\n\n/**\n * @desc: 生成yapi的proxy\n */\nconst createyapimockproxy = () => {\n  let obj = {}\n  yapimockapi.foreach(key => {\n    obj[key] = {\n      target: \'http://yapi.domain.com/mock/1767\', // yapi代理的接口地址\n      ws: false,\n      changeorigin: true\n    }\n  })\n  return obj\n}\n\nmodule.exports = { defaultmockapi, createyapimockproxy }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# min-webpack\n\n> video: 手摸手带你实现打包器 仅需 80 行代码理解 webpack 的核心\n\n\n# 获取import的路径\n\nimport parser from \'@babel/parser\'\nimport traverse from \'@babel/traverse\'\n\nfunction createassets(filepath){\n\tconst source = fs.readfilesync(filepath, {encoding: \'utf8\'})\n  const ast = paser.parser(source, {sourcetype: \'module\'})\n  const deps = []\n\n  traverse.default(ast, {\n    // 获取 import 后的 路径\n  \timportdeclaration({node}){\n    \tdeps.push(node.source.value)\n    }\n  })\n\n  return {source, deps}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# require\n\n(function(modules){\n  function require(id){\n  \tconst [fn, mapping] = modules[id]\n\n    const module = { exports: {} }\n\n    function localrequire(filepath){\n    \tconst id = mapping[filepath]\n      return require(id)\n    }\n\n    fn(localrequire, module, module.exports)\n\n    return module.exports\n  }\n\n  require(1)\n})({\n\t1: [function(require, module, module.exports){\n        const { foo } = require(\'./foo.js\')\n        foo()\n        console.log(\'main.js\')\n      },{\'./foo.js: 2}\n    ],\n\t2: [function(require, module, module.exports){\n        function foo(){\n          console.log(\'foo\')\n        }\n    \t\tmodule.exports = { foo }\n  \t\t}, {}\n   ]\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# mini\n\nimport fs from \'fs\'\nimport path from \'path\'\nimport ejs from \'ejs\'\nimport parser from \'@babel/parser\'\nimport traverse from \'@babel/traverse\'\nimport { transformfromast } from \'babel-core\'\nlet id = 0\n\nfunction createassets(filepath){\n\tconst source = fs.readfilesync(filepath, {encoding: \'utf-8\'})\n\n  const ast = parser.parser(source, {sourcetype: \'module\'})\n\n  const deps = []\n\n  traverse.default(ast, {\n  \timportdeclaration({node}){\n    \tdeps.push(node.source.value)\n    }\n  })\n  // install babel-preset-env\n  const code = transformfromast(ast, null, { presets: [\'env\'] })\n\n  return { filepath, code , deps, mapping: {}, id: id++ }\n}\n\nfunction creategraph(){\n  const mainassets = createassets(\'./example/main.js\');\n\n  const queue = [mainassets]\n  for( const asset of queue ) {\n  \tasset.deps.foreach( relativepath => {\n    \tconst child = createassets(path.resolve(\'./example\', relativepath))\n    \tasset.mapping[relativepath] = child.id\n      queue.push(child)\n    })\n  }\n  return queue\n}\n\nfunction build(graph){\n\tconst template = fs.readfilesync(\'./template/build.ejs\', {encoding: \'utf-8\'})\n\n  const data = graph.map(asset => {\n  \tconst { id, code, mapping } = asset\n    return { id, code, mapping}\n  })\n\n  const code = ejs.render(tempalte, {data})\n\n  fs.writefilesync( \'./dist/bundle.js\', {encoding: \'utf-8\'})\n}\n\n// use\nconst graph = creategraph()\nbuild(graph)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n',charsets:{cjk:!0},lastUpdated:"5/23/2022",lastUpdatedTimestamp:1653275711e3,createdTime:1647945545e3},{title:"使用canvas生成poster",frontmatter:{title:"使用canvas生成poster",date:"2020-07-21T00:00:00.000Z",sidebar:"auto",tags:["react"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/rc-canvas-poster.html",relativePath:"frontend/library/rc-canvas-poster.md",key:"v-7d772acb",path:"/frontend/library/rc-canvas-poster.html",headers:[{level:2,title:"poster",slug:"poster",normalizedTitle:"poster",charIndex:2},{level:2,title:"compress",slug:"compress",normalizedTitle:"compress",charIndex:8914},{level:2,title:"参考文档",slug:"参考文档",normalizedTitle:"参考文档",charIndex:11377}],headersStr:"poster compress 参考文档",content:'# poster\n\n * poster/util.js\n\n// 二维码\nimport QRCode from "qrcode";\n\nvar opts = {\n  errorCorrectionLevel: "H",\n  type: "image/jpeg",\n  quality: 0.3,\n  margin: 1\n  // color: {\n  //   dark: "#010599FF",\n  //   light: "#FFBF60FF"\n  // }\n};\n\nexport function GetQrCodeImages(link) {\n  return new Promise((resolve, reject) => {\n    QRCode.toDataURL(link, opts, function(err, url) {\n      if (err) throw err;\n      resolve(url);\n    });\n  });\n}\n\nconst PIXEL_RATIO = (function() {\n  var ctx = document.createElement("canvas").getContext("2d"),\n    dpr =\n      window.devicePixelRatio ||\n      window.webkitDevicePixelRatio ||\n      window.mozDevicePixelRatio ||\n      1,\n    bsr =\n      ctx.webkitBackingStorePixelRatio ||\n      ctx.mozBackingStorePixelRatio ||\n      ctx.msBackingStorePixelRatio ||\n      ctx.oBackingStorePixelRatio ||\n      ctx.backingStorePixelRatio ||\n      1;\n\n  return dpr / bsr;\n})();\n\nexport const createHiDPICanvas = function(w, h, ratio) {\n  if (!ratio) {\n    ratio = PIXEL_RATIO;\n  }\n  var can = document.createElement("canvas");\n  can.width = Math.round(w * ratio);\n  can.height = Math.round(h * ratio);\n  can.style.width = w + "px";\n  can.style.height = h + "px";\n  can.getContext("2d").setTransform(ratio, 0, 0, ratio, 0, 0);\n  return can;\n};\n\nexport function loadImg(imgUrl) {\n  return new Promise((resolve, reject) => {\n    const imgEl = new Image();\n    imgEl.crossOrigin = "Anonymous";\n    imgEl.onload = function() {\n      resolve(this);\n    };\n    imgEl.src = imgUrl;\n  });\n}\n\nexport function fetchImage(url) {\n  return new Promise((resolve, reject) => {\n    let xhr = new XMLHttpRequest();\n    xhr.onload = function() {\n      let url = URL.createObjectURL(this.response);\n      let img = new Image();\n      img.onload = function() {\n        resolve(this);\n        console.log(this);\n        URL.revokeObjectURL(url);\n      };\n      img.src = url;\n    };\n    xhr.open("GET", url, true);\n    xhr.responseType = "blob";\n    xhr.send();\n  });\n}\n\nexport async function drawerImg(ctx, imgUrl, x, y, w, h) {\n  ctx.save();\n  let img = await loadImg(imgUrl);\n  ctx.drawImage(img, x, y, w, h);\n  ctx.restore();\n}\n\nexport function drawerTxt(ctx, option) {\n  var {\n    text,\n    width,\n    lineNum,\n    lineHeight,\n    left,\n    top,\n    fontSize,\n    fontFamily,\n    fontWeight,\n    opacity,\n    textAlign,\n    baseLine,\n    color\n  } = option;\n\n  ctx.save();\n  ctx.font = "normal "\n    .concat(fontWeight || "normal", " ")\n    .concat(fontSize || 14, "px ")\n    .concat(fontFamily || "Arial");\n\n  ctx.globalAlpha = opacity || 1;\n  ctx.textAlign = textAlign || "center";\n  ctx.textBaseline = baseLine || "middle";\n  ctx.fillStyle = color || "white";\n\n  var textWidth = ctx.measureText(text).width;\n  var textArr = [];\n\n  if (textWidth > width) {\n    var fillText = "";\n    var line = 1;\n    for (var i = 0; i <= text.length - 1; i += 1) {\n      // 将文字转为数组\n      fillText += text[i];\n      if (ctx.measureText(fillText).width >= width) {\n        if (line === lineNum) {\n          if (i !== text.length - 1) {\n            fillText = "".concat(\n              fillText.substring(0, fillText.length - 1),\n              "..."\n            );\n          }\n        }\n\n        if (line <= lineNum) {\n          textArr.push(fillText);\n        }\n        fillText = "";\n        line += 1;\n      } else if (line <= lineNum) {\n        if (i === text.length - 1) {\n          textArr.push(fillText);\n        }\n      }\n    }\n    textWidth = width;\n  } else {\n    textArr.push(text);\n  }\n\n  textArr.forEach(function(item, index) {\n    ctx.fillText(item, left, top + (lineHeight || fontSize) * index);\n  });\n\n  ctx.restore();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n\n * poster/create.js\n\nimport {\n  GetQrCodeImages,\n  createHiDPICanvas,\n  drawerImg,\n  drawerTxt\n} from "./util";\nimport BgPic from "./skin-1.png";\n\nexport async function DrawQRPoster(url, width, height) {\n  const imgWidth = 210;\n  const posY = 420;\n\n  const canvas = createHiDPICanvas(width, height);\n  const ctx = canvas.getContext("2d");\n\n  ctx.mozImageSmoothingEnabled = false;\n  ctx.webkitImageSmoothingEnabled = false;\n  ctx.msImageSmoothingEnabled = false;\n  ctx.imageSmoothingEnabled = false; //获取设备像素比\n\n  // 750 x 1094\n  const gap = 20;\n  await drawerImg(ctx, BgPic, gap, gap, width - gap * 2, height - gap * 2);\n\n  const qrCodeImg = await GetQrCodeImages(url);\n\n  await drawerImg(\n    ctx,\n    qrCodeImg,\n    (width - imgWidth) / 2,\n    154,\n    imgWidth,\n    imgWidth\n  );\n\n  drawerTxt(ctx, {\n    text: "xxx-xxx",\n    fontSize: 16,\n    color: "#f7f7f7",\n    textAlign: "center",\n    top: posY + 20,\n    left: width / 2,\n    width: 200,\n    lineNum: 2,\n    lineHeight: 20,\n    baseLine: "middle"\n  });\n\n  const imageBase64 = canvas.toDataURL();\n  return imageBase64;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n * /poster/download.js\n\nimport QRCode from "qrcode";\n\nfunction downloadBlob(url) {\n  return new Promise((resolve, reject) => {\n    let xhr = new XMLHttpRequest();\n    xhr.open("GET", url);\n    xhr.responseType = "blob";\n\n    xhr.onload = () => {\n      resolve(xhr.response);\n    };\n    xhr.onerror = () => {\n      reject(new Error("Download failed."));\n    };\n    xhr.send();\n  });\n}\nexport function downloadFile(url, fileName = "") {\n  return downloadBlob(url, fileName)\n    .then(resp => {\n      if (resp.blob) {\n        return resp.blob();\n      }\n      return new Blob([resp]);\n    })\n    .then(blob => {\n      if ("msSaveOrOpenBlob" in navigator) {\n        window.navigator.msSaveOrOpenBlob(blob, fileName);\n      } else {\n        const obj = URL.createObjectURL(blob);\n        downloadURL(obj, fileName);\n        URL.revokeObjectURL(obj);\n      }\n    })\n    .catch(err => {\n      throw new Error(err.message);\n    });\n}\n\nexport function downloadURL(url, name = "") {\n  const link = document.createElement("a");\n  link.download = name;\n  link.href = url;\n  if ("download" in document.createElement("a")) {\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  } else {\n    // 对不支持download进行兼容\n    click(link, (link.target = "_blank"));\n  }\n}\n// clone https://github.com/eligrey/FileSaver.js/blob/master/src/FileSaver.js\nfunction click(node) {\n  try {\n    node.dispatchEvent(new MouseEvent("click"));\n  } catch (e) {\n    let evt = document.createEvent("MouseEvents");\n    evt.initMouseEvent(\n      "click",\n      true,\n      true,\n      window,\n      0,\n      0,\n      0,\n      80,\n      20,\n      false,\n      false,\n      false,\n      false,\n      0,\n      null\n    );\n    node.dispatchEvent(evt);\n  }\n}\n\nlet opts = {\n  errorCorrectionLevel: "H",\n  type: "image/jpeg",\n  quality: 0.3,\n  margin: 5\n  // color: {\n  //   dark: "#010599FF",\n  //   light: "#FFBF60FF"\n  // }\n};\n\nexport function GetQrCodeImages(link) {\n  return new Promise((resolve, reject) => {\n    QRCode.toDataURL(link, opts, (err, url) => {\n      if (err) throw err;\n      resolve(url);\n    });\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n\n * poster/index.js\n\nimport React, { useEffect, useState } from "react";\nimport { DrawQRPoster } from "./create";\nimport { downloadFile } from "./download";\n\nexport default function Poster() {\n  const [poster, setPoster] = useState();\n  const width = 375;\n  const height = 546;\n  useEffect(() => {\n    async function getPoster() {\n      const link = "https://www.baidu.com";\n      let imgUrl = await DrawQRPoster(link, width, height);\n      setPoster(imgUrl);\n    }\n    getPoster();\n  }, []);\n\n  const handleDownload = () => {\n    let image = new Image();\n    image.src = poster;\n    image.style.width = width + "px";\n    image.style.height = height + "px";\n    let fileName = `${+new Date()}.png`;\n    downloadFile(image.src, fileName);\n\n    // let fileName = `${+new Date()}.png`;\n    // downloadFile(poster.src, fileName);\n  };\n\n  return (\n    <div className="poster">\n      <img style={{ width, height }} src={poster} alt="" />\n      <p></p>\n      <button onClick={handleDownload}>download</button>\n    </div>\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n\n# compress\n\n// compress.js\nconst MAX_WIDTH = 800; // 图片最大宽度\n\nfunction compress(base64, quality, mimeType) {\n  let canvas = document.createElement("canvas");\n  let img = document.createElement("img");\n  img.crossOrigin = "anonymous";\n  return new Promise((resolve, reject) => {\n    img.src = base64;\n    img.onload = () => {\n      let targetWidth, targetHeight;\n      if (img.width > MAX_WIDTH) {\n        targetWidth = MAX_WIDTH;\n        targetHeight = (img.height * MAX_WIDTH) / img.width;\n      } else {\n        targetWidth = img.width;\n        targetHeight = img.height;\n      }\n      canvas.width = targetWidth;\n      canvas.height = targetHeight;\n      let ctx = canvas.getContext("2d");\n      ctx.clearRect(0, 0, targetWidth, targetHeight); // 清除画布\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      let imageData = canvas.toDataURL(mimeType, quality / 100);\n      resolve(imageData);\n    };\n  });\n}\n\nfunction dataUrlToBlob(base64, mimeType) {\n  //\n  let bytes = window.atob(base64.split(",")[1]);\n  //\n  let ab = new ArrayBuffer(bytes.length);\n  let ia = new Uint8Array(ab);\n\n  for (let i = 0; i < bytes.length; i++) {\n    ia[i] = bytes.charCodeAt(i);\n  }\n  return new Blob([ab], { type: mimeType });\n}\n\nfunction uploadFile(url, blob) {\n  let formData = new FormData();\n  let request = new XMLHttpRequest();\n  formData.append("image", blob);\n  request.open("POST", url, true);\n  request.send(formData);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n * use\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>本地图片压缩</title>\n  </head>\n  <body>\n    <input type="file" accept="image/*" onchange="loadFile(event)" />\n    <script src="./compress.js"><\/script>\n    <script>\n      const loadFile = function(event) {\n        const reader = new FileReader();\n        reader.onload = async function() {\n          let compressedDataURL = await compress(\n            reader.result,\n            90,\n            "image/jpeg"\n          );\n          let compressedImageBlob = dataUrlToBlob(compressedDataURL);\n          uploadFile("https://httpbin.org/post", compressedImageBlob);\n        };\n        reader.readAsDataURL(event.target.files[0]);\n      };\n    <\/script>\n  </body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 参考文档\n\n * how-do-i-fix-blurry-text-in-my-html5-canvas\n * node-qrcode\n * react-canvas-poster',normalizedContent:'# poster\n\n * poster/util.js\n\n// 二维码\nimport qrcode from "qrcode";\n\nvar opts = {\n  errorcorrectionlevel: "h",\n  type: "image/jpeg",\n  quality: 0.3,\n  margin: 1\n  // color: {\n  //   dark: "#010599ff",\n  //   light: "#ffbf60ff"\n  // }\n};\n\nexport function getqrcodeimages(link) {\n  return new promise((resolve, reject) => {\n    qrcode.todataurl(link, opts, function(err, url) {\n      if (err) throw err;\n      resolve(url);\n    });\n  });\n}\n\nconst pixel_ratio = (function() {\n  var ctx = document.createelement("canvas").getcontext("2d"),\n    dpr =\n      window.devicepixelratio ||\n      window.webkitdevicepixelratio ||\n      window.mozdevicepixelratio ||\n      1,\n    bsr =\n      ctx.webkitbackingstorepixelratio ||\n      ctx.mozbackingstorepixelratio ||\n      ctx.msbackingstorepixelratio ||\n      ctx.obackingstorepixelratio ||\n      ctx.backingstorepixelratio ||\n      1;\n\n  return dpr / bsr;\n})();\n\nexport const createhidpicanvas = function(w, h, ratio) {\n  if (!ratio) {\n    ratio = pixel_ratio;\n  }\n  var can = document.createelement("canvas");\n  can.width = math.round(w * ratio);\n  can.height = math.round(h * ratio);\n  can.style.width = w + "px";\n  can.style.height = h + "px";\n  can.getcontext("2d").settransform(ratio, 0, 0, ratio, 0, 0);\n  return can;\n};\n\nexport function loadimg(imgurl) {\n  return new promise((resolve, reject) => {\n    const imgel = new image();\n    imgel.crossorigin = "anonymous";\n    imgel.onload = function() {\n      resolve(this);\n    };\n    imgel.src = imgurl;\n  });\n}\n\nexport function fetchimage(url) {\n  return new promise((resolve, reject) => {\n    let xhr = new xmlhttprequest();\n    xhr.onload = function() {\n      let url = url.createobjecturl(this.response);\n      let img = new image();\n      img.onload = function() {\n        resolve(this);\n        console.log(this);\n        url.revokeobjecturl(url);\n      };\n      img.src = url;\n    };\n    xhr.open("get", url, true);\n    xhr.responsetype = "blob";\n    xhr.send();\n  });\n}\n\nexport async function drawerimg(ctx, imgurl, x, y, w, h) {\n  ctx.save();\n  let img = await loadimg(imgurl);\n  ctx.drawimage(img, x, y, w, h);\n  ctx.restore();\n}\n\nexport function drawertxt(ctx, option) {\n  var {\n    text,\n    width,\n    linenum,\n    lineheight,\n    left,\n    top,\n    fontsize,\n    fontfamily,\n    fontweight,\n    opacity,\n    textalign,\n    baseline,\n    color\n  } = option;\n\n  ctx.save();\n  ctx.font = "normal "\n    .concat(fontweight || "normal", " ")\n    .concat(fontsize || 14, "px ")\n    .concat(fontfamily || "arial");\n\n  ctx.globalalpha = opacity || 1;\n  ctx.textalign = textalign || "center";\n  ctx.textbaseline = baseline || "middle";\n  ctx.fillstyle = color || "white";\n\n  var textwidth = ctx.measuretext(text).width;\n  var textarr = [];\n\n  if (textwidth > width) {\n    var filltext = "";\n    var line = 1;\n    for (var i = 0; i <= text.length - 1; i += 1) {\n      // 将文字转为数组\n      filltext += text[i];\n      if (ctx.measuretext(filltext).width >= width) {\n        if (line === linenum) {\n          if (i !== text.length - 1) {\n            filltext = "".concat(\n              filltext.substring(0, filltext.length - 1),\n              "..."\n            );\n          }\n        }\n\n        if (line <= linenum) {\n          textarr.push(filltext);\n        }\n        filltext = "";\n        line += 1;\n      } else if (line <= linenum) {\n        if (i === text.length - 1) {\n          textarr.push(filltext);\n        }\n      }\n    }\n    textwidth = width;\n  } else {\n    textarr.push(text);\n  }\n\n  textarr.foreach(function(item, index) {\n    ctx.filltext(item, left, top + (lineheight || fontsize) * index);\n  });\n\n  ctx.restore();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n\n * poster/create.js\n\nimport {\n  getqrcodeimages,\n  createhidpicanvas,\n  drawerimg,\n  drawertxt\n} from "./util";\nimport bgpic from "./skin-1.png";\n\nexport async function drawqrposter(url, width, height) {\n  const imgwidth = 210;\n  const posy = 420;\n\n  const canvas = createhidpicanvas(width, height);\n  const ctx = canvas.getcontext("2d");\n\n  ctx.mozimagesmoothingenabled = false;\n  ctx.webkitimagesmoothingenabled = false;\n  ctx.msimagesmoothingenabled = false;\n  ctx.imagesmoothingenabled = false; //获取设备像素比\n\n  // 750 x 1094\n  const gap = 20;\n  await drawerimg(ctx, bgpic, gap, gap, width - gap * 2, height - gap * 2);\n\n  const qrcodeimg = await getqrcodeimages(url);\n\n  await drawerimg(\n    ctx,\n    qrcodeimg,\n    (width - imgwidth) / 2,\n    154,\n    imgwidth,\n    imgwidth\n  );\n\n  drawertxt(ctx, {\n    text: "xxx-xxx",\n    fontsize: 16,\n    color: "#f7f7f7",\n    textalign: "center",\n    top: posy + 20,\n    left: width / 2,\n    width: 200,\n    linenum: 2,\n    lineheight: 20,\n    baseline: "middle"\n  });\n\n  const imagebase64 = canvas.todataurl();\n  return imagebase64;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n\n * /poster/download.js\n\nimport qrcode from "qrcode";\n\nfunction downloadblob(url) {\n  return new promise((resolve, reject) => {\n    let xhr = new xmlhttprequest();\n    xhr.open("get", url);\n    xhr.responsetype = "blob";\n\n    xhr.onload = () => {\n      resolve(xhr.response);\n    };\n    xhr.onerror = () => {\n      reject(new error("download failed."));\n    };\n    xhr.send();\n  });\n}\nexport function downloadfile(url, filename = "") {\n  return downloadblob(url, filename)\n    .then(resp => {\n      if (resp.blob) {\n        return resp.blob();\n      }\n      return new blob([resp]);\n    })\n    .then(blob => {\n      if ("mssaveoropenblob" in navigator) {\n        window.navigator.mssaveoropenblob(blob, filename);\n      } else {\n        const obj = url.createobjecturl(blob);\n        downloadurl(obj, filename);\n        url.revokeobjecturl(obj);\n      }\n    })\n    .catch(err => {\n      throw new error(err.message);\n    });\n}\n\nexport function downloadurl(url, name = "") {\n  const link = document.createelement("a");\n  link.download = name;\n  link.href = url;\n  if ("download" in document.createelement("a")) {\n    document.body.appendchild(link);\n    link.click();\n    document.body.removechild(link);\n  } else {\n    // 对不支持download进行兼容\n    click(link, (link.target = "_blank"));\n  }\n}\n// clone https://github.com/eligrey/filesaver.js/blob/master/src/filesaver.js\nfunction click(node) {\n  try {\n    node.dispatchevent(new mouseevent("click"));\n  } catch (e) {\n    let evt = document.createevent("mouseevents");\n    evt.initmouseevent(\n      "click",\n      true,\n      true,\n      window,\n      0,\n      0,\n      0,\n      80,\n      20,\n      false,\n      false,\n      false,\n      false,\n      0,\n      null\n    );\n    node.dispatchevent(evt);\n  }\n}\n\nlet opts = {\n  errorcorrectionlevel: "h",\n  type: "image/jpeg",\n  quality: 0.3,\n  margin: 5\n  // color: {\n  //   dark: "#010599ff",\n  //   light: "#ffbf60ff"\n  // }\n};\n\nexport function getqrcodeimages(link) {\n  return new promise((resolve, reject) => {\n    qrcode.todataurl(link, opts, (err, url) => {\n      if (err) throw err;\n      resolve(url);\n    });\n  });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n\n * poster/index.js\n\nimport react, { useeffect, usestate } from "react";\nimport { drawqrposter } from "./create";\nimport { downloadfile } from "./download";\n\nexport default function poster() {\n  const [poster, setposter] = usestate();\n  const width = 375;\n  const height = 546;\n  useeffect(() => {\n    async function getposter() {\n      const link = "https://www.baidu.com";\n      let imgurl = await drawqrposter(link, width, height);\n      setposter(imgurl);\n    }\n    getposter();\n  }, []);\n\n  const handledownload = () => {\n    let image = new image();\n    image.src = poster;\n    image.style.width = width + "px";\n    image.style.height = height + "px";\n    let filename = `${+new date()}.png`;\n    downloadfile(image.src, filename);\n\n    // let filename = `${+new date()}.png`;\n    // downloadfile(poster.src, filename);\n  };\n\n  return (\n    <div classname="poster">\n      <img style={{ width, height }} src={poster} alt="" />\n      <p></p>\n      <button onclick={handledownload}>download</button>\n    </div>\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n\n# compress\n\n// compress.js\nconst max_width = 800; // 图片最大宽度\n\nfunction compress(base64, quality, mimetype) {\n  let canvas = document.createelement("canvas");\n  let img = document.createelement("img");\n  img.crossorigin = "anonymous";\n  return new promise((resolve, reject) => {\n    img.src = base64;\n    img.onload = () => {\n      let targetwidth, targetheight;\n      if (img.width > max_width) {\n        targetwidth = max_width;\n        targetheight = (img.height * max_width) / img.width;\n      } else {\n        targetwidth = img.width;\n        targetheight = img.height;\n      }\n      canvas.width = targetwidth;\n      canvas.height = targetheight;\n      let ctx = canvas.getcontext("2d");\n      ctx.clearrect(0, 0, targetwidth, targetheight); // 清除画布\n      ctx.drawimage(img, 0, 0, canvas.width, canvas.height);\n      let imagedata = canvas.todataurl(mimetype, quality / 100);\n      resolve(imagedata);\n    };\n  });\n}\n\nfunction dataurltoblob(base64, mimetype) {\n  //\n  let bytes = window.atob(base64.split(",")[1]);\n  //\n  let ab = new arraybuffer(bytes.length);\n  let ia = new uint8array(ab);\n\n  for (let i = 0; i < bytes.length; i++) {\n    ia[i] = bytes.charcodeat(i);\n  }\n  return new blob([ab], { type: mimetype });\n}\n\nfunction uploadfile(url, blob) {\n  let formdata = new formdata();\n  let request = new xmlhttprequest();\n  formdata.append("image", blob);\n  request.open("post", url, true);\n  request.send(formdata);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n * use\n\n<!doctype html>\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>本地图片压缩</title>\n  </head>\n  <body>\n    <input type="file" accept="image/*" onchange="loadfile(event)" />\n    <script src="./compress.js"><\/script>\n    <script>\n      const loadfile = function(event) {\n        const reader = new filereader();\n        reader.onload = async function() {\n          let compresseddataurl = await compress(\n            reader.result,\n            90,\n            "image/jpeg"\n          );\n          let compressedimageblob = dataurltoblob(compresseddataurl);\n          uploadfile("https://httpbin.org/post", compressedimageblob);\n        };\n        reader.readasdataurl(event.target.files[0]);\n      };\n    <\/script>\n  </body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 参考文档\n\n * how-do-i-fix-blurry-text-in-my-html5-canvas\n * node-qrcode\n * react-canvas-poster',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647947183e3,createdTime:1647947183e3},{title:"react使用hooks案例",frontmatter:{title:"react使用hooks案例",date:"2020-07-21T00:00:00.000Z",sidebar:"auto",tags:["react"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/rc-hooks-reducer.html",relativePath:"frontend/library/rc-hooks-reducer.md",key:"v-404c7aaa",path:"/frontend/library/rc-hooks-reducer.html",headers:[{level:2,title:"asyncDelay",slug:"asyncdelay",normalizedTitle:"asyncdelay",charIndex:2},{level:2,title:"sleep",slug:"sleep",normalizedTitle:"sleep",charIndex:95},{level:2,title:"Portal",slug:"portal",normalizedTitle:"portal",charIndex:292},{level:2,title:"useModal",slug:"usemodal",normalizedTitle:"usemodal",charIndex:870},{level:2,title:"hooks-reducer",slug:"hooks-reducer",normalizedTitle:"hooks-reducer",charIndex:2488},{level:2,title:"hooks-redux",slug:"hooks-redux",normalizedTitle:"hooks-redux",charIndex:4356},{level:2,title:"hooks-unstated-next",slug:"hooks-unstated-next",normalizedTitle:"hooks-unstated-next",charIndex:7856}],headersStr:"asyncDelay sleep Portal useModal hooks-reducer hooks-redux hooks-unstated-next",content:'# asyncDelay\n\n// 测试延迟\nconst asyncDelay = ms => new Promise(r => setTimeout(r, ms));\n\n\n1\n2\n\n\n\n# sleep\n\nfunction sleep(sleepTime){\n    var start=new Date().getTime();\n    while(true){\n        if(new Date().getTime()-start>sleepTime){\n            break;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# Portal\n\nimport React from "react";\nimport { createPortal } from "react-dom";\n\nclass Dialog extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    const doc = window.document;\n    this.node = doc.createElement("div");\n    doc.body.appendChild(this.node);\n  }\n\n  render() {\n    return createPortal(\n      <div class="dialog">{this.props.children}</div>, //塞进传送门的JSX\n      this.node //传送门的另一端DOM node\n    );\n  }\n\n  componentWillUnmount() {\n    window.document.body.removeChild(this.node);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# useModal\n\n * create Modal.js\n\n// Modal.js\nimport React from \'react\'\nimport ReactDOM from \'react-dom\'\n\nconst Modal = React.memo(({ children, closeModal }) => {\n  const domEl = document.getElementById(\'modal-root\')\n\n  if (!domEl) return null\n  return ReactDOM.createPortal(\n    <div>\n      <button onClick={closeModal}>Close</button>\n      {children}\n    </div>,\n    domEl\n  )\n})\n\nexport default Modal\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * create useModal.js\n\n// useModal.js\nimport React, { useState } from "react";\n\nimport Modal from "./Modal";\n\n// Modal组件最基础的两个事件，show/hide\nexport const useModal = () => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const show = () => setIsVisible(true);\n  const hide = () => setIsVisible(false);\n\n  const RenderModal = ({ children }: { children: React.ReactChild }) => (\n    <React.Fragment>\n      {isVisible && <Modal closeModal={hide}>{children}</Modal>}\n    </React.Fragment>\n  );\n\n  return {\n    show,\n    hide,\n    RenderModal\n  };\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * use modal\n\nimport React from "react";\n\nimport { useModal } from "./useModal";\n\nconst App = React.memo(() => {\n  const { show, hide, RenderModal } = useModal();\n  return (\n    <div>\n      <div>\n        <p>some content...</p>\n        <button onClick={show}>打开</button>\n        <button onClick={hide}>关闭</button>\n        <RenderModal>\n          <p>这里面的内容将会被渲染到\'modal-root\'容器里.</p>\n        </RenderModal>\n      </div>\n      <div id="modal-root" />\n    </div>\n  );\n});\n\nexport default App;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# hooks-reducer\n\n * create store/context.js\n\nimport { createContext } from "react";\n\nconst Context = createContext();\n\nexport default Context;\n\n\n1\n2\n3\n4\n5\n\n * create store/redux.js\n\nimport React, { useReducer } from "react";\nimport ContextContainer from "./context";\n\nconst defaultState = {\n  count: 0\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case "increment":\n      return { ...state, count: state.count + 1 };\n    case "decrement":\n      return { ...state, count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\nconst ContextProvider = props => {\n  const [state, dispatch] = useReducer(reducer, defaultState);\n  return (\n    <ContextContainer.Provider value={{ state, dispatch }}>\n      {props.children}\n    </ContextContainer.Provider>\n  );\n};\n\nexport { reducer, ContextProvider };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n * use index.js\n\nimport React from "react";\nimport ReactDOM from "react-dom";\nimport { ContextProvider } from "./store/redux";\nimport App from "./App";\n\nconst rootElement = document.getElementById("root");\nReactDOM.render(\n  <React.StrictMode>\n    <ContextProvider>\n      <App />\n    </ContextProvider>\n  </React.StrictMode>,\n  rootElement\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * use App.js\n\nimport React, { useContext } from "react";\nimport "./styles.css";\nimport CounterContext from "./store/context";\nexport default function App() {\n  const { state, dispatch } = useContext(CounterContext);\n  return (\n    <div className="App">\n      <h1>React Hooks</h1>\n      <h2>useContext and useReducer</h2>\n      <p>Count: {state.count}</p>\n      <button onClick={() => dispatch({ type: "increment" })}>+1</button>\n      <span> - </span>\n      <button onClick={() => dispatch({ type: "decrement" })}>-1</button>\n    </div>\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# hooks-redux\n\n * create store/index.js\n\nimport { combineReducer } from "./redux";\nimport User from "./userModule";\nimport Counter from "./counterModule";\n\nconst state = {\n  user: User.state,\n  counter: Counter.state\n};\n\nconst reducers = combineReducer({\n  user: User.reducer,\n  counter: Counter.reducer\n});\n\nexport default {\n  state,\n  reducers\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * create store/redux.js\n\nimport React, { useContext, useReducer } from "react";\n\nconst EMPTY = Symbol("store context");\nconst StoreContext = React.createContext(EMPTY);\n\nexport const Provider = ({ children, store }) => {\n  // console.log(store)\n  const [state, dispatch] = useReducer(store.reducers, store.state);\n  return (\n    <StoreContext.Provider value={{ state, dispatch }}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n\nexport const useRedux = () => {\n  const store = useContext(StoreContext);\n  if (store === EMPTY) {\n    throw new Error("App Component must be wrapped with <Provider>");\n  } else {\n    const { state, dispatch } = store;\n    return { state, dispatch };\n  }\n};\n\nexport const combineReducer = reducers => {\n  return (state = {}, action) => {\n    let result = Object.keys(reducers).reduce((newState, key) => {\n      newState[key] = reducers[key](state[key], action);\n      return newState;\n    }, {});\n    return result;\n  };\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n * create store/counterModule.js\n\nconst CounterModule = {\n  state: {\n    count: 0\n  },\n  reducer: (state, action) => {\n    switch (action.type) {\n      case "increment":\n        return { ...state, count: state.count + 1 };\n      case "decrement":\n        return { ...state, count: state.count - 1 };\n      default:\n        return state;\n    }\n  }\n};\n\nexport default CounterModule;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * create store/UserModule.js\n\nconst UserModule = {\n  state: {\n    login: "未登录"\n  },\n  reducer: (state, action) => {\n    switch (action.type) {\n      case "SET_TOKEN":\n        return { ...state, login: "已登录" };\n      case "RESET_TOKEN":\n        return { ...state, login: "未登录" };\n      default:\n        return state;\n    }\n  }\n};\n\nexport default UserModule;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * use index.js\n\nimport React from "react";\nimport ReactDOM from "react-dom";\nimport { Provider } from "./store/redux";\nimport store from "./store/index";\nimport App from "./App";\n\nconst rootElement = document.getElementById("root");\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  rootElement\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * use App.js\n\nimport React from "react";\nimport "./styles.css";\nimport { useRedux } from "./store/redux";\n\nexport default function App() {\n  const { state, dispatch } = useRedux();\n\n  return (\n    <div className="App">\n      <h1>React Hooks</h1>\n      <h2>useContext and useReducer</h2>\n      <p>Count:{state.counter.count}</p>\n      <button onClick={() => dispatch({ type: "increment" })}>+1</button>\n      <span> - </span>\n      <button onClick={() => dispatch({ type: "decrement" })}>-1</button>\n      <hr />\n      <p>login:{state.user.login}</p>\n      <button onClick={() => dispatch({ type: "SET_TOKEN" })}>登录</button>\n      <span> - </span>\n      <button onClick={() => dispatch({ type: "RESET_TOKEN" })}>退出</button>\n    </div>\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# hooks-unstated-next\n\n * create store/index.js\n\nimport { useState } from "react";\nimport { createContainer } from "./redux";\n\nconst defaultState = {\n  count: 0\n};\n\nfunction Store(initialState = defaultState) {\n  let [state, setState] = useState(initialState);\n  let increment = () => setState(pre => ({ count: pre.count + 1 }));\n  let decrement = () => setState(pre => ({ count: pre.count - 1 }));\n  return {\n    state,\n    increment,\n    decrement\n  };\n}\n\nexport default createContainer(Store);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * create store/redux.js\n\n// https://github.com/jamiebuilds/unstated-next\nimport React from "react";\n\nconst EMPTY = Symbol("unstated-next");\n\nexport function createContainer(useHook) {\n  let Context = React.createContext(EMPTY);\n\n  function Provider(props) {\n    let value = useHook(props.initialState);\n    return <Context.Provider value={value}>{props.children}</Context.Provider>;\n  }\n\n  // eslint-disable-next-line no-shadow\n  function useContainer() {\n    let value = React.useContext(Context);\n    if (value === EMPTY) {\n      throw new Error("Component must be wrapped with <Container.Provider>");\n    }\n    return value;\n  }\n\n  return { Provider, useContainer };\n}\n\nexport function useContainer(container) {\n  return container.useContainer();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n * use index.js\n\nimport React from "react";\nimport ReactDOM from "react-dom";\nimport Counter from "./store/index";\nimport App from "./App";\n\nconst rootElement = document.getElementById("root");\nReactDOM.render(\n  <React.StrictMode>\n    <Counter.Provider>\n      <App />\n    </Counter.Provider>\n  </React.StrictMode>,\n  rootElement\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * use App.js\n\nimport React from "react";\nimport "./styles.css";\nimport Counter from "./store/index";\n\nexport default function App() {\n  const store = Counter.useContainer();\n  return (\n    <div className="App">\n      <h1>React Hooks</h1>\n      <h2>use unstated-next</h2>\n      <p>Count: {store.state.count}</p>\n      <div>\n        <button onClick={store.increment}>+1</button> ~{" "}\n        <button onClick={store.decrement}>-1</button>\n      </div>\n    </div>\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n',normalizedContent:'# asyncdelay\n\n// 测试延迟\nconst asyncdelay = ms => new promise(r => settimeout(r, ms));\n\n\n1\n2\n\n\n\n# sleep\n\nfunction sleep(sleeptime){\n    var start=new date().gettime();\n    while(true){\n        if(new date().gettime()-start>sleeptime){\n            break;\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# portal\n\nimport react from "react";\nimport { createportal } from "react-dom";\n\nclass dialog extends react.component {\n  constructor() {\n    super(...arguments);\n\n    const doc = window.document;\n    this.node = doc.createelement("div");\n    doc.body.appendchild(this.node);\n  }\n\n  render() {\n    return createportal(\n      <div class="dialog">{this.props.children}</div>, //塞进传送门的jsx\n      this.node //传送门的另一端dom node\n    );\n  }\n\n  componentwillunmount() {\n    window.document.body.removechild(this.node);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# usemodal\n\n * create modal.js\n\n// modal.js\nimport react from \'react\'\nimport reactdom from \'react-dom\'\n\nconst modal = react.memo(({ children, closemodal }) => {\n  const domel = document.getelementbyid(\'modal-root\')\n\n  if (!domel) return null\n  return reactdom.createportal(\n    <div>\n      <button onclick={closemodal}>close</button>\n      {children}\n    </div>,\n    domel\n  )\n})\n\nexport default modal\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * create usemodal.js\n\n// usemodal.js\nimport react, { usestate } from "react";\n\nimport modal from "./modal";\n\n// modal组件最基础的两个事件，show/hide\nexport const usemodal = () => {\n  const [isvisible, setisvisible] = usestate(false);\n\n  const show = () => setisvisible(true);\n  const hide = () => setisvisible(false);\n\n  const rendermodal = ({ children }: { children: react.reactchild }) => (\n    <react.fragment>\n      {isvisible && <modal closemodal={hide}>{children}</modal>}\n    </react.fragment>\n  );\n\n  return {\n    show,\n    hide,\n    rendermodal\n  };\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * use modal\n\nimport react from "react";\n\nimport { usemodal } from "./usemodal";\n\nconst app = react.memo(() => {\n  const { show, hide, rendermodal } = usemodal();\n  return (\n    <div>\n      <div>\n        <p>some content...</p>\n        <button onclick={show}>打开</button>\n        <button onclick={hide}>关闭</button>\n        <rendermodal>\n          <p>这里面的内容将会被渲染到\'modal-root\'容器里.</p>\n        </rendermodal>\n      </div>\n      <div id="modal-root" />\n    </div>\n  );\n});\n\nexport default app;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# hooks-reducer\n\n * create store/context.js\n\nimport { createcontext } from "react";\n\nconst context = createcontext();\n\nexport default context;\n\n\n1\n2\n3\n4\n5\n\n * create store/redux.js\n\nimport react, { usereducer } from "react";\nimport contextcontainer from "./context";\n\nconst defaultstate = {\n  count: 0\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case "increment":\n      return { ...state, count: state.count + 1 };\n    case "decrement":\n      return { ...state, count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\nconst contextprovider = props => {\n  const [state, dispatch] = usereducer(reducer, defaultstate);\n  return (\n    <contextcontainer.provider value={{ state, dispatch }}>\n      {props.children}\n    </contextcontainer.provider>\n  );\n};\n\nexport { reducer, contextprovider };\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n * use index.js\n\nimport react from "react";\nimport reactdom from "react-dom";\nimport { contextprovider } from "./store/redux";\nimport app from "./app";\n\nconst rootelement = document.getelementbyid("root");\nreactdom.render(\n  <react.strictmode>\n    <contextprovider>\n      <app />\n    </contextprovider>\n  </react.strictmode>,\n  rootelement\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * use app.js\n\nimport react, { usecontext } from "react";\nimport "./styles.css";\nimport countercontext from "./store/context";\nexport default function app() {\n  const { state, dispatch } = usecontext(countercontext);\n  return (\n    <div classname="app">\n      <h1>react hooks</h1>\n      <h2>usecontext and usereducer</h2>\n      <p>count: {state.count}</p>\n      <button onclick={() => dispatch({ type: "increment" })}>+1</button>\n      <span> - </span>\n      <button onclick={() => dispatch({ type: "decrement" })}>-1</button>\n    </div>\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# hooks-redux\n\n * create store/index.js\n\nimport { combinereducer } from "./redux";\nimport user from "./usermodule";\nimport counter from "./countermodule";\n\nconst state = {\n  user: user.state,\n  counter: counter.state\n};\n\nconst reducers = combinereducer({\n  user: user.reducer,\n  counter: counter.reducer\n});\n\nexport default {\n  state,\n  reducers\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * create store/redux.js\n\nimport react, { usecontext, usereducer } from "react";\n\nconst empty = symbol("store context");\nconst storecontext = react.createcontext(empty);\n\nexport const provider = ({ children, store }) => {\n  // console.log(store)\n  const [state, dispatch] = usereducer(store.reducers, store.state);\n  return (\n    <storecontext.provider value={{ state, dispatch }}>\n      {children}\n    </storecontext.provider>\n  );\n};\n\nexport const useredux = () => {\n  const store = usecontext(storecontext);\n  if (store === empty) {\n    throw new error("app component must be wrapped with <provider>");\n  } else {\n    const { state, dispatch } = store;\n    return { state, dispatch };\n  }\n};\n\nexport const combinereducer = reducers => {\n  return (state = {}, action) => {\n    let result = object.keys(reducers).reduce((newstate, key) => {\n      newstate[key] = reducers[key](state[key], action);\n      return newstate;\n    }, {});\n    return result;\n  };\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n * create store/countermodule.js\n\nconst countermodule = {\n  state: {\n    count: 0\n  },\n  reducer: (state, action) => {\n    switch (action.type) {\n      case "increment":\n        return { ...state, count: state.count + 1 };\n      case "decrement":\n        return { ...state, count: state.count - 1 };\n      default:\n        return state;\n    }\n  }\n};\n\nexport default countermodule;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * create store/usermodule.js\n\nconst usermodule = {\n  state: {\n    login: "未登录"\n  },\n  reducer: (state, action) => {\n    switch (action.type) {\n      case "set_token":\n        return { ...state, login: "已登录" };\n      case "reset_token":\n        return { ...state, login: "未登录" };\n      default:\n        return state;\n    }\n  }\n};\n\nexport default usermodule;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * use index.js\n\nimport react from "react";\nimport reactdom from "react-dom";\nimport { provider } from "./store/redux";\nimport store from "./store/index";\nimport app from "./app";\n\nconst rootelement = document.getelementbyid("root");\nreactdom.render(\n  <react.strictmode>\n    <provider store={store}>\n      <app />\n    </provider>\n  </react.strictmode>,\n  rootelement\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * use app.js\n\nimport react from "react";\nimport "./styles.css";\nimport { useredux } from "./store/redux";\n\nexport default function app() {\n  const { state, dispatch } = useredux();\n\n  return (\n    <div classname="app">\n      <h1>react hooks</h1>\n      <h2>usecontext and usereducer</h2>\n      <p>count:{state.counter.count}</p>\n      <button onclick={() => dispatch({ type: "increment" })}>+1</button>\n      <span> - </span>\n      <button onclick={() => dispatch({ type: "decrement" })}>-1</button>\n      <hr />\n      <p>login:{state.user.login}</p>\n      <button onclick={() => dispatch({ type: "set_token" })}>登录</button>\n      <span> - </span>\n      <button onclick={() => dispatch({ type: "reset_token" })}>退出</button>\n    </div>\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# hooks-unstated-next\n\n * create store/index.js\n\nimport { usestate } from "react";\nimport { createcontainer } from "./redux";\n\nconst defaultstate = {\n  count: 0\n};\n\nfunction store(initialstate = defaultstate) {\n  let [state, setstate] = usestate(initialstate);\n  let increment = () => setstate(pre => ({ count: pre.count + 1 }));\n  let decrement = () => setstate(pre => ({ count: pre.count - 1 }));\n  return {\n    state,\n    increment,\n    decrement\n  };\n}\n\nexport default createcontainer(store);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * create store/redux.js\n\n// https://github.com/jamiebuilds/unstated-next\nimport react from "react";\n\nconst empty = symbol("unstated-next");\n\nexport function createcontainer(usehook) {\n  let context = react.createcontext(empty);\n\n  function provider(props) {\n    let value = usehook(props.initialstate);\n    return <context.provider value={value}>{props.children}</context.provider>;\n  }\n\n  // eslint-disable-next-line no-shadow\n  function usecontainer() {\n    let value = react.usecontext(context);\n    if (value === empty) {\n      throw new error("component must be wrapped with <container.provider>");\n    }\n    return value;\n  }\n\n  return { provider, usecontainer };\n}\n\nexport function usecontainer(container) {\n  return container.usecontainer();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n * use index.js\n\nimport react from "react";\nimport reactdom from "react-dom";\nimport counter from "./store/index";\nimport app from "./app";\n\nconst rootelement = document.getelementbyid("root");\nreactdom.render(\n  <react.strictmode>\n    <counter.provider>\n      <app />\n    </counter.provider>\n  </react.strictmode>,\n  rootelement\n);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * use app.js\n\nimport react from "react";\nimport "./styles.css";\nimport counter from "./store/index";\n\nexport default function app() {\n  const store = counter.usecontainer();\n  return (\n    <div classname="app">\n      <h1>react hooks</h1>\n      <h2>use unstated-next</h2>\n      <p>count: {store.state.count}</p>\n      <div>\n        <button onclick={store.increment}>+1</button> ~{" "}\n        <button onclick={store.decrement}>-1</button>\n      </div>\n    </div>\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647947183e3,createdTime:1647947183e3},{title:"react生命周期",frontmatter:{title:"react生命周期",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["react"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/rc-lifecycle.html",relativePath:"frontend/library/rc-lifecycle.md",key:"v-3c6fea4b",path:"/frontend/library/rc-lifecycle.html",headers:[{level:2,title:"生命周期",slug:"生命周期",normalizedTitle:"生命周期",charIndex:2},{level:2,title:"react类组件生命周期",slug:"react类组件生命周期",normalizedTitle:"react类组件生命周期",charIndex:177},{level:2,title:"static getDerivedStateFromProps",slug:"static-getderivedstatefromprops",normalizedTitle:"static getderivedstatefromprops",charIndex:499},{level:2,title:"getSnapshotBeforeUpdate",slug:"getsnapshotbeforeupdate",normalizedTitle:"getsnapshotbeforeupdate",charIndex:447}],headersStr:"生命周期 react类组件生命周期 static getDerivedStateFromProps getSnapshotBeforeUpdate",content:'# 生命周期\n\n * react 生命周期图谱\n   \n   \n\n * 旧版\n   \n   \n\n * 父子组件触发示意图\n\n\n\n * 即将废弃的生命周期\n\nUNSAFE_componentWillMount\nUNSAFE_componentWillReceiveProps\nUNSAFE_componentWillUpdate\n\n\n1\n2\n3\n\n\n\n# react类组件生命周期\n\n> 来源：React 进阶实践指南\n\n * 初始化阶段：constructor -> getDerivedStateFromProps / componentWillMount -> render -> componentDidMount\n\n\n\n * 更新阶段: componentWillReceiveProps( props 改变) / getDerivedStateFromProp -> shouldComponentUpdate -> componentWillUpdate -> render -> getSnapshotBeforeUpdate -> componentDidUpdate\n\n\n\n\n# static getDerivedStateFromProps\n\n * 接收父组件传递过来的 props 和组件之前的状态，返回一个对象来更新 state 或者返回 null 来表示接收到的 props 没有变化，不需要更新 state\n * 该生命周期钩子的作用： 将父组件传递过来的 props 映射 到子组件的 state 上面，这样组件内部就不用再通过 this.props.xxx 获取属性值了，统一通过 this.state.xxx 获取。映射就相当于拷贝了一份父组件传过来的 props ，作为子组件自己的状态。注意：子组件通过 setState 更新自身状态时，不会改变父组件的 props\n\nimport React from "react";\nimport ReactDOM from "react-dom";\nimport "./styles.css";\n\nfunction App() {\n  return (\n    <div className="App">\n      <AAA />\n    </div>\n  );\n}\n\nclass AAA extends React.Component {\n  state = {\n    age: 666\n  };\n\n  add = () => {\n    this.setState({ age: this.state.age + 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        <ChildA onChangeParent={this.add} age={this.state.age} />\n      </div>\n    );\n  }\n}\n\nclass ChildA extends React.Component {\n  state = {\n    num: 888\n  };\n  // 根据新的属性对象派生状态对象\n  // nextProps——新的属性对象 prevState——旧的状态对象\n  static getDerivedStateFromProps(nextprops, state) {\n    console.log("props", nextprops);\n    // 返回一个对象来更新 state 或者返回 null 来表示接收到的 props 不需要更新 state\n    if (nextprops.age !== state.age) {\n      console.log("更新吧");\n      return {\n        onChangeParent: nextprops.onChangeParent,\n        age: nextprops.age\n        // 注意：这里不需要把组件自身的状态也放进来\n        // num:state.num\n      };\n    }\n    return null;\n  }\n\n  add = () => {\n    this.setState({ num: this.state.num + 1 });\n  };\n  render() {\n    const { onChangeParent } = this.state;\n    console.log("state", this.state);\n    return (\n      <>\n        <div onClick={onChangeParent}>change</div>\n        <div onClick={this.add}>add</div>\n      </>\n    );\n  }\n}\n\nconst rootElement = document.getElementById("root");\nReactDOM.render(<App />, rootElement);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n\n\n\n# getSnapshotBeforeUpdate\n\n * 接收父组件传递过来的 props 和组件之前的状态，此生命周期钩子必须有返回值，返回值将作为第三个参数传递给componentDidUpdate。\n * 该生命周期钩子触发的时机 ：被调用于 render 之后、更新 DOM 和 refs 之前\n * getSnapshotBeforeUpdate要与componentDidUpdate 一起使用，否则会报错\n\nimport React, { Component } from "react";\nimport ReactDOM from "react-dom";\n\nimport "./styles.css";\n\nfunction App() {\n  return (\n    <div className="App">\n      <GetSnapshotBeforeUpdate />\n    </div>\n  );\n}\n\nclass GetSnapshotBeforeUpdate extends Component {\n  constructor(props) {\n    super(props);\n    this.wrapper = React.createRef();\n    this.state = { messages: [] };\n  }\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        messages: ["msg:" + this.state.messages.length, ...this.state.messages]\n      });\n      //this.setState({messages:[...this.state.messages,this.state.messages.length]});\n    }, 1000);\n  }\n  getSnapshotBeforeUpdate() {\n    // 返回更新内容的高度 300px\n    return this.wrapper.current.scrollHeight;\n  }\n  componentDidUpdate(prevProps, prevState, prevScrollHeight) {\n    this.wrapper.current.scrollTop =\n      this.wrapper.current.scrollTop +\n      (this.wrapper.current.scrollHeight - prevScrollHeight);\n  }\n  render() {\n    let style = {\n      height: "100px",\n      width: "200px",\n      border: "1px solid red",\n      overflow: "auto"\n    };\n    return (\n      <ul style={style} ref={this.wrapper}>\n        {this.state.messages.map((message, index) => (\n          <li key={index}>{message}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nconst rootElement = document.getElementById("root");\nReactDOM.render(<App />, rootElement);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n',normalizedContent:'# 生命周期\n\n * react 生命周期图谱\n   \n   \n\n * 旧版\n   \n   \n\n * 父子组件触发示意图\n\n\n\n * 即将废弃的生命周期\n\nunsafe_componentwillmount\nunsafe_componentwillreceiveprops\nunsafe_componentwillupdate\n\n\n1\n2\n3\n\n\n\n# react类组件生命周期\n\n> 来源：react 进阶实践指南\n\n * 初始化阶段：constructor -> getderivedstatefromprops / componentwillmount -> render -> componentdidmount\n\n\n\n * 更新阶段: componentwillreceiveprops( props 改变) / getderivedstatefromprop -> shouldcomponentupdate -> componentwillupdate -> render -> getsnapshotbeforeupdate -> componentdidupdate\n\n\n\n\n# static getderivedstatefromprops\n\n * 接收父组件传递过来的 props 和组件之前的状态，返回一个对象来更新 state 或者返回 null 来表示接收到的 props 没有变化，不需要更新 state\n * 该生命周期钩子的作用： 将父组件传递过来的 props 映射 到子组件的 state 上面，这样组件内部就不用再通过 this.props.xxx 获取属性值了，统一通过 this.state.xxx 获取。映射就相当于拷贝了一份父组件传过来的 props ，作为子组件自己的状态。注意：子组件通过 setstate 更新自身状态时，不会改变父组件的 props\n\nimport react from "react";\nimport reactdom from "react-dom";\nimport "./styles.css";\n\nfunction app() {\n  return (\n    <div classname="app">\n      <aaa />\n    </div>\n  );\n}\n\nclass aaa extends react.component {\n  state = {\n    age: 666\n  };\n\n  add = () => {\n    this.setstate({ age: this.state.age + 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        <childa onchangeparent={this.add} age={this.state.age} />\n      </div>\n    );\n  }\n}\n\nclass childa extends react.component {\n  state = {\n    num: 888\n  };\n  // 根据新的属性对象派生状态对象\n  // nextprops——新的属性对象 prevstate——旧的状态对象\n  static getderivedstatefromprops(nextprops, state) {\n    console.log("props", nextprops);\n    // 返回一个对象来更新 state 或者返回 null 来表示接收到的 props 不需要更新 state\n    if (nextprops.age !== state.age) {\n      console.log("更新吧");\n      return {\n        onchangeparent: nextprops.onchangeparent,\n        age: nextprops.age\n        // 注意：这里不需要把组件自身的状态也放进来\n        // num:state.num\n      };\n    }\n    return null;\n  }\n\n  add = () => {\n    this.setstate({ num: this.state.num + 1 });\n  };\n  render() {\n    const { onchangeparent } = this.state;\n    console.log("state", this.state);\n    return (\n      <>\n        <div onclick={onchangeparent}>change</div>\n        <div onclick={this.add}>add</div>\n      </>\n    );\n  }\n}\n\nconst rootelement = document.getelementbyid("root");\nreactdom.render(<app />, rootelement);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n\n\n\n# getsnapshotbeforeupdate\n\n * 接收父组件传递过来的 props 和组件之前的状态，此生命周期钩子必须有返回值，返回值将作为第三个参数传递给componentdidupdate。\n * 该生命周期钩子触发的时机 ：被调用于 render 之后、更新 dom 和 refs 之前\n * getsnapshotbeforeupdate要与componentdidupdate 一起使用，否则会报错\n\nimport react, { component } from "react";\nimport reactdom from "react-dom";\n\nimport "./styles.css";\n\nfunction app() {\n  return (\n    <div classname="app">\n      <getsnapshotbeforeupdate />\n    </div>\n  );\n}\n\nclass getsnapshotbeforeupdate extends component {\n  constructor(props) {\n    super(props);\n    this.wrapper = react.createref();\n    this.state = { messages: [] };\n  }\n  componentdidmount() {\n    setinterval(() => {\n      this.setstate({\n        messages: ["msg:" + this.state.messages.length, ...this.state.messages]\n      });\n      //this.setstate({messages:[...this.state.messages,this.state.messages.length]});\n    }, 1000);\n  }\n  getsnapshotbeforeupdate() {\n    // 返回更新内容的高度 300px\n    return this.wrapper.current.scrollheight;\n  }\n  componentdidupdate(prevprops, prevstate, prevscrollheight) {\n    this.wrapper.current.scrolltop =\n      this.wrapper.current.scrolltop +\n      (this.wrapper.current.scrollheight - prevscrollheight);\n  }\n  render() {\n    let style = {\n      height: "100px",\n      width: "200px",\n      border: "1px solid red",\n      overflow: "auto"\n    };\n    return (\n      <ul style={style} ref={this.wrapper}>\n        {this.state.messages.map((message, index) => (\n          <li key={index}>{message}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nconst rootelement = document.getelementbyid("root");\nreactdom.render(<app />, rootelement);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647947183e3,createdTime:1647947183e3},{title:"react redux",frontmatter:{title:"react redux",date:"2020-07-30T00:00:00.000Z",sidebar:"auto",tags:["react"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/rc-redux.html",relativePath:"frontend/library/rc-redux.md",key:"v-b6401aea",path:"/frontend/library/rc-redux.html",headers:[{level:2,title:"Provider",slug:"provider",normalizedTitle:"provider",charIndex:138},{level:2,title:"reducer",slug:"reducer",normalizedTitle:"reducer",charIndex:483},{level:2,title:"combineReducers",slug:"combinereducers",normalizedTitle:"combinereducers",charIndex:829},{level:2,title:"createStore",slug:"createstore",normalizedTitle:"createstore",charIndex:1052},{level:2,title:"connect",slug:"connect",normalizedTitle:"connect",charIndex:1455},{level:2,title:"applyMiddleware",slug:"applymiddleware",normalizedTitle:"applymiddleware",charIndex:2275},{level:2,title:"Rematch",slug:"rematch",normalizedTitle:"rematch",charIndex:2564}],headersStr:"Provider reducer combineReducers createStore connect applyMiddleware Rematch",content:" * redux\n * awesome-redux\n * redux-actions\n * redux-thunk\n * redux-immutable\n * react/rematch\n * redux-toolkit\n\n * Redux 关系图解\n   \n   \n\n\n# Provider\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport App from './App'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# reducer\n\nconst todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ]\n    default:\n      return state\n  }\n}\n\nexport default todos\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# combineReducers\n\nimport { combineReducers } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\n\nexport default combineReducers({\n  todos,\n  visibilityFilter\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# createStore\n\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# connect\n\nimport { connect } from 'react-redux'\n\nconst increment = () => ({ type: 'INCREMENT' })\nconst decrement = () => ({ type: 'DECREMENT' })\nconst reset = () => ({ type: 'RESET' })\n\nfunction mapStateToProps(state, ownProps) {\n  const { visibilityFilter } = state\n  const { id } = ownProps\n  const todo = getTodoById(state, id)\n\n  // component receives additionally:\n  return { todo, visibilityFilter }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    toggleTodo: () => dispatch(toggleTodo(ownProps.todoId)),\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset())\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Counter)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# applyMiddleware\n\n * redux-thunk\n\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\n\n// Note: this API requires redux@>=3.1.0\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# Rematch\n\n * install\n\nyarn add @rematch/core\n\n\n1\n\n * step1: init\n\nimport { init } from '@rematch/core'\nimport * as models from './models'\n\nconst store = init({\n\tmodels,\n})\n\nexport default store\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * step2: models.js\n\nexport const count = {\n\tstate: 0, // initial state\n\treducers: {\n\t\t// handle state changes with pure functions\n\t\tincrement(state, payload) {\n\t\t\treturn state + payload\n\t\t},\n\t},\n\teffects: dispatch => ({\n\t\t// handle state changes with impure functions.\n\t\t// use async/await for async actions\n\t\tasync incrementAsync(payload, rootState) {\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 1000))\n\t\t\tdispatch.count.increment(payload)\n\t\t},\n\t}),\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * step3: dispatch\n\n// state = { count: 0 }\n// reducers\ndispatch({ type: 'count/increment', payload: 1 }) // state = { count: 1 }\ndispatch.count.increment(1) // state = { count: 2 }\n\n// effects\ndispatch({ type: 'count/incrementAsync', payload: 1 }) // state = { count: 3 } after delay\ndispatch.count.incrementAsync(1) // state = { count: 4 } after delay\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * step 4: View\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider, connect } from 'react-redux'\nimport store from './store'\n\nconst Count = props => (\n\t<div>\n\t\tThe count is {props.count}\n\t\t<button onClick={props.increment}>increment</button>\n\t\t<button onClick={props.incrementAsync}>incrementAsync</button>\n\t</div>\n)\n\nconst mapState = state => ({\n\tcount: state.count,\n})\n\nconst mapDispatch = ({ count: { increment, incrementAsync } }) => ({\n\tincrement: () => increment(1),\n\tincrementAsync: () => incrementAsync(1),\n})\n\nconst CountContainer = connect(\n\tmapState,\n\tmapDispatch\n)(Count)\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<CountContainer />\n\t</Provider>,\n\tdocument.getElementById('root')\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n",normalizedContent:" * redux\n * awesome-redux\n * redux-actions\n * redux-thunk\n * redux-immutable\n * react/rematch\n * redux-toolkit\n\n * redux 关系图解\n   \n   \n\n\n# provider\n\nimport react from 'react'\nimport reactdom from 'react-dom'\n\nimport { provider } from 'react-redux'\nimport store from './store'\n\nimport app from './app'\n\nconst rootelement = document.getelementbyid('root')\nreactdom.render(\n  <provider store={store}>\n    <app />\n  </provider>,\n  rootelement\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# reducer\n\nconst todos = (state = [], action) => {\n  switch (action.type) {\n    case 'add_todo':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ]\n    default:\n      return state\n  }\n}\n\nexport default todos\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# combinereducers\n\nimport { combinereducers } from 'redux'\nimport todos from './todos'\nimport visibilityfilter from './visibilityfilter'\n\nexport default combinereducers({\n  todos,\n  visibilityfilter\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# createstore\n\nimport react from 'react'\nimport { render } from 'react-dom'\nimport { createstore } from 'redux'\nimport { provider } from 'react-redux'\nimport app from './components/app'\nimport rootreducer from './reducers'\n\nconst store = createstore(rootreducer)\n\nrender(\n  <provider store={store}>\n    <app />\n  </provider>,\n  document.getelementbyid('root')\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# connect\n\nimport { connect } from 'react-redux'\n\nconst increment = () => ({ type: 'increment' })\nconst decrement = () => ({ type: 'decrement' })\nconst reset = () => ({ type: 'reset' })\n\nfunction mapstatetoprops(state, ownprops) {\n  const { visibilityfilter } = state\n  const { id } = ownprops\n  const todo = gettodobyid(state, id)\n\n  // component receives additionally:\n  return { todo, visibilityfilter }\n}\n\nconst mapdispatchtoprops = (dispatch, ownprops) => {\n  return {\n    toggletodo: () => dispatch(toggletodo(ownprops.todoid)),\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset())\n  }\n}\n\nexport default connect(\n  mapstatetoprops,\n  mapdispatchtoprops\n)(counter)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# applymiddleware\n\n * redux-thunk\n\nimport { createstore, applymiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootreducer from './reducers/index';\n\n// note: this api requires redux@>=3.1.0\nconst store = createstore(rootreducer, applymiddleware(thunk));\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# rematch\n\n * install\n\nyarn add @rematch/core\n\n\n1\n\n * step1: init\n\nimport { init } from '@rematch/core'\nimport * as models from './models'\n\nconst store = init({\n\tmodels,\n})\n\nexport default store\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * step2: models.js\n\nexport const count = {\n\tstate: 0, // initial state\n\treducers: {\n\t\t// handle state changes with pure functions\n\t\tincrement(state, payload) {\n\t\t\treturn state + payload\n\t\t},\n\t},\n\teffects: dispatch => ({\n\t\t// handle state changes with impure functions.\n\t\t// use async/await for async actions\n\t\tasync incrementasync(payload, rootstate) {\n\t\t\tawait new promise(resolve => settimeout(resolve, 1000))\n\t\t\tdispatch.count.increment(payload)\n\t\t},\n\t}),\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * step3: dispatch\n\n// state = { count: 0 }\n// reducers\ndispatch({ type: 'count/increment', payload: 1 }) // state = { count: 1 }\ndispatch.count.increment(1) // state = { count: 2 }\n\n// effects\ndispatch({ type: 'count/incrementasync', payload: 1 }) // state = { count: 3 } after delay\ndispatch.count.incrementasync(1) // state = { count: 4 } after delay\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * step 4: view\n\nimport react from 'react'\nimport reactdom from 'react-dom'\nimport { provider, connect } from 'react-redux'\nimport store from './store'\n\nconst count = props => (\n\t<div>\n\t\tthe count is {props.count}\n\t\t<button onclick={props.increment}>increment</button>\n\t\t<button onclick={props.incrementasync}>incrementasync</button>\n\t</div>\n)\n\nconst mapstate = state => ({\n\tcount: state.count,\n})\n\nconst mapdispatch = ({ count: { increment, incrementasync } }) => ({\n\tincrement: () => increment(1),\n\tincrementasync: () => incrementasync(1),\n})\n\nconst countcontainer = connect(\n\tmapstate,\n\tmapdispatch\n)(count)\n\nreactdom.render(\n\t<provider store={store}>\n\t\t<countcontainer />\n\t</provider>,\n\tdocument.getelementbyid('root')\n)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n",charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647947183e3,createdTime:1647947183e3},{title:"React",frontmatter:{title:"React",date:"2022-02-14T00:00:00.000Z",sidebar:"auto",tags:["react"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/rc.html",relativePath:"frontend/library/rc.md",key:"v-cace3e2a",path:"/frontend/library/rc.html",headers:[{level:2,title:"网站导航",slug:"网站导航",normalizedTitle:"网站导航",charIndex:2},{level:2,title:"cli",slug:"cli",normalizedTitle:"cli",charIndex:492},{level:2,title:"router",slug:"router",normalizedTitle:"router",charIndex:551},{level:2,title:"React16中的setState是同步还是异步",slug:"react16中的setstate是同步还是异步",normalizedTitle:"react16中的setstate是同步还是异步",charIndex:579},{level:2,title:"libs",slug:"libs",normalizedTitle:"libs",charIndex:731},{level:2,title:"hooks",slug:"hooks",normalizedTitle:"hooks",charIndex:875},{level:2,title:"参考文档",slug:"参考文档",normalizedTitle:"参考文档",charIndex:928}],headersStr:"网站导航 cli router React16中的setState是同步还是异步 libs hooks 参考文档",content:"# 网站导航\n\n * facebook/react\n * react.js\n * 30-seconds-of-react\n * https://esprima.org/demo/parse.html#\n * https://astexplorer.net/\n * https://babeljs.io/repl\n * overreacted\n * useEffect 完整指南\n * 为什么 React 元素有一个$$typeof 属性？\n * 将 React 作为 UI 运行时\n\nReact15 架构可以分为两层：\n\n * Reconciler（协调器）—— 负责找出变化的组件\n\n * Renderer（渲染器）—— 负责将变化的组件渲染到页面上\n\nReact16 架构可以分为三层：\n\n * Scheduler（调度器）—— 调度任务的优先级，高优任务优先进入Reconciler\n\n * Reconciler（协调器）—— 负责找出变化的组件 （render 阶段）\n\n * Renderer（渲染器）—— 负责将变化的组件渲染到页面上 (commit 阶段)\n\n\n\n\n# cli\n\n * create-react-app\n * react-app-rewired\n * craco\n\n\n# router\n\n * react-router\n\n\n# React16中的setState是同步还是异步\n\n> https://vue3js.cn/interview/React/setState.html\n\n * 在组件生命周期或React合成事件中，setState是异步\n * 在setTimeout或者原生dom事件中，setState是同步\n\n\n# libs\n\n * mobx\n * awesome-mobx\n * DvaJS\n * umiJS\n * nextjs\n * ramda\n * lodash\n * RxJS\n * react-loadable-visibility\n * react-spinkit\n * remix\n\n\n# hooks\n\n * awesome-react-hooks\n * hooks.umijs.org\n\n\n# 参考文档\n\n * react-transition-group\n * styled-components\n * hoist-non-react-statics\n * classnames\n * React 源码解析\n * React 技术揭秘\n * 详解 requestIdleCallback\n * react live\n * 「React进阶」 React 全部 api 解读+基础实践大全\n * 图解react\n * 100行代码实现React核心调度功能\n * React 框架运行时优化方案的演进\n * web前端面试 - 面试官系列",normalizedContent:"# 网站导航\n\n * facebook/react\n * react.js\n * 30-seconds-of-react\n * https://esprima.org/demo/parse.html#\n * https://astexplorer.net/\n * https://babeljs.io/repl\n * overreacted\n * useeffect 完整指南\n * 为什么 react 元素有一个$$typeof 属性？\n * 将 react 作为 ui 运行时\n\nreact15 架构可以分为两层：\n\n * reconciler（协调器）—— 负责找出变化的组件\n\n * renderer（渲染器）—— 负责将变化的组件渲染到页面上\n\nreact16 架构可以分为三层：\n\n * scheduler（调度器）—— 调度任务的优先级，高优任务优先进入reconciler\n\n * reconciler（协调器）—— 负责找出变化的组件 （render 阶段）\n\n * renderer（渲染器）—— 负责将变化的组件渲染到页面上 (commit 阶段)\n\n\n\n\n# cli\n\n * create-react-app\n * react-app-rewired\n * craco\n\n\n# router\n\n * react-router\n\n\n# react16中的setstate是同步还是异步\n\n> https://vue3js.cn/interview/react/setstate.html\n\n * 在组件生命周期或react合成事件中，setstate是异步\n * 在settimeout或者原生dom事件中，setstate是同步\n\n\n# libs\n\n * mobx\n * awesome-mobx\n * dvajs\n * umijs\n * nextjs\n * ramda\n * lodash\n * rxjs\n * react-loadable-visibility\n * react-spinkit\n * remix\n\n\n# hooks\n\n * awesome-react-hooks\n * hooks.umijs.org\n\n\n# 参考文档\n\n * react-transition-group\n * styled-components\n * hoist-non-react-statics\n * classnames\n * react 源码解析\n * react 技术揭秘\n * 详解 requestidlecallback\n * react live\n * 「react进阶」 react 全部 api 解读+基础实践大全\n * 图解react\n * 100行代码实现react核心调度功能\n * react 框架运行时优化方案的演进\n * web前端面试 - 面试官系列",charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647947183e3,createdTime:1647947183e3},{title:"vue2.x常见问题",frontmatter:{title:"vue2.x常见问题",date:"2020-07-21T00:00:00.000Z",sidebar:"auto",tags:["vue"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/vue-issues.html",relativePath:"frontend/library/vue-issues.md",key:"v-c0454a2a",path:"/frontend/library/vue-issues.html",headers:[{level:2,title:"异步组件",slug:"异步组件",normalizedTitle:"异步组件",charIndex:2},{level:2,title:"动态组件",slug:"动态组件",normalizedTitle:"动态组件",charIndex:329},{level:2,title:"递归组件",slug:"递归组件",normalizedTitle:"递归组件",charIndex:944},{level:2,title:"函数式组件",slug:"函数式组件",normalizedTitle:"函数式组件",charIndex:1548},{level:2,title:"components和 Vue.component",slug:"components和-vue-component",normalizedTitle:"components和 vue.component",charIndex:1917},{level:2,title:"Vue.extend",slug:"vue-extend",normalizedTitle:"vue.extend",charIndex:2049},{level:2,title:"mixins",slug:"mixins",normalizedTitle:"mixins",charIndex:2521},{level:2,title:"extends",slug:"extends",normalizedTitle:"extends",charIndex:2755},{level:2,title:"install",slug:"install",normalizedTitle:"install",charIndex:2991},{level:2,title:"Vue.nextTick",slug:"vue-nexttick",normalizedTitle:"vue.nexttick",charIndex:3522},{level:2,title:"Vue.directive",slug:"vue-directive",normalizedTitle:"vue.directive",charIndex:3105},{level:2,title:"Vue.filter",slug:"vue-filter",normalizedTitle:"vue.filter",charIndex:4728},{level:2,title:"Vue.compile",slug:"vue-compile",normalizedTitle:"vue.compile",charIndex:5270},{level:2,title:"Vue.set",slug:"vue-set",normalizedTitle:"vue.set",charIndex:5474},{level:2,title:"errorHandler/warnHandler",slug:"errorhandler-warnhandler",normalizedTitle:"errorhandler/warnhandler",charIndex:5559},{level:2,title:"Vue.config.warnHandler",slug:"vue-config-warnhandler",normalizedTitle:"vue.config.warnhandler",charIndex:5717},{level:2,title:"vue-cli为路径设置别名",slug:"vue-cli为路径设置别名",normalizedTitle:"vue-cli为路径设置别名",charIndex:5855},{level:2,title:"deep 属性",slug:"deep-属性",normalizedTitle:"deep 属性",charIndex:6450},{level:2,title:"Object.freeze",slug:"object-freeze",normalizedTitle:"object.freeze",charIndex:6633},{level:2,title:"调试 template log 技巧",slug:"调试-template-log-技巧",normalizedTitle:"调试 template log 技巧",charIndex:7215},{level:2,title:"vue2 element-ui",slug:"vue2-element-ui",normalizedTitle:"vue2 element-ui",charIndex:7339}],headersStr:"异步组件 动态组件 递归组件 函数式组件 components和 Vue.component Vue.extend mixins extends install Vue.nextTick Vue.directive Vue.filter Vue.compile Vue.set errorHandler/warnHandler Vue.config.warnHandler vue-cli为路径设置别名 deep 属性 Object.freeze 调试 template log 技巧 vue2 element-ui",content:"# 异步组件\n\n * 工厂函数返回 Promise\n\nVue.component(\n  'async-webpack-example',\n  // 这个 `import` 函数会返回一个 `Promise` 对象。\n  () => import('./my-async-component')\n)\n\n\n1\n2\n3\n4\n5\n\n * 路由的按需加载\n\nconst Home = () => import(/* webpackChunkName: \"group-home\" */ './views/Home.vue')\n\n{\n  path:'/',\n  name:'home',\n  components: Home\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 动态组件\n\n<component v-bind:is=\"currentTabComponent\"></component>\n\n\n1\n\n * keep-alive\n\n<keep-alive>\n  <component v-bind:is=\"currentTabComponent\"></component>\n</keep-alive>\n\n\n\n\n1\n2\n3\n4\n5\n\n * 根据配置参数cache\n\n<template>\n  <div>\n    <keep-alive>\n      <router-view v-if=\"$route.meta.keepAlive\" />\n    </keep-alive>\n    <router-view v-if=\"!$route.meta.keepAlive\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'RouterCache'\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * transition\n\n<transition>\n<keep-alive>\n  <component v-bind:is=\"currentTabComponent\"></component>\n</keep-alive>\n</transition>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 递归组件\n\n<template>\n  <div v-for=\"(item,index) in treeArr\">\n      子组件，当前层级值： {{index}} <br/>\n      \x3c!-- 递归调用自身, 后台判断是否不存在改值 --\x3e\n      <tree :item=\"item.children\" v-if=\"item.children\"></tree>\n  </div>\n</template>\n<script>\nexport default {\n  // 必须定义name，组件内部才能递归调用\n  name: 'tree',\n  data(){\n    return {}\n  },\n  // 接收外部传入的值\n  props: {\n     item: {\n      type:Array,\n      default: ()=>[]\n    }\n  }\n}\n<\/script>\n\n// 父级\nimport Tree from \"./components/Tree\";\n<Tree :item=\"arr\"/>\n\narr = [{name:'A', chilren:[{name: 'A-1'}]},...]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 函数式组件\n\n * template\n\n<template functional>\n  <div v-for=\"(item,index) in props.arr\">{{item}}</div>\n</template>\n\n\n1\n2\n3\n\n * js\n\nexport default {\n  functional: true,\n  props: {\n    row: {\n      type: Object\n    },\n    render: {\n      type: Function\n    }\n  },\n  render (h, ctx) {\n    return ctx.props.render(h, ctx.props.row)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# components和 Vue.component\n\n * 局部注册组件\n\nexport default{\n  components:{home}\n}\n\n\n1\n2\n3\n\n * 全局注册组件\n\nVue.component('home',home)\n\n\n1\n\n\n\n# Vue.extend\n\n// 创建构造器\nvar Profile = Vue.extend({\n  template: '<p>{{extendData}}</br>实例传入的数据为:{{propsExtend}}</p>',//template对应的标签最外层必须只有一个标签\n  data: function () {\n    return {\n      extendData: '这是extend扩展的数据',\n    }\n  },\n  props:['propsExtend']\n})\n\n// 创建的构造器可以挂载到元素上, 通过propsData传参\nnew Profile({propsData:{propsExtend:'我是实例传入的数据'}}).$mount('#app-extend')\n\n// 通过 components 或 Vue.component()注册\nVue.component('Profile',Profile)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# mixins\n\nconst mixin={\n    created(){\n      this.dealTime()\n    },\n    methods:{\n      dealTime(){\n        console.log('这是mixin的dealTime里面的方法');\n      }\n  }\n}\n\nexport default{\n  mixins:[mixin]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# extends\n\nconst extend={\n    created(){\n      this.dealTime()\n    },\n    methods:{\n      dealTime(){\n        console.log('这是mixin的dealTime里面的方法');\n      }\n  }\n}\n\nexport default{\n  extends:extend\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# install\n\nvar MyPlugin = {};\nMyPlugin.install = function (Vue, options) {\n  // 方式一：添加全局资源,第二个参数传一个值默认是update对应的值\n  Vue.directive('xxx', {})\n\n  // 方式二：注入组件\n  Vue.mixin({\n    created: function () {\n      console.log('options的值为',options)\n    }\n  })\n\n  // 方式三：添加实例方法\n  Vue.prototype.$myMethod = function (methodOptions) {\n    console.log('实例方法myMethod被调用啦');\n  }\n}\n\n// Vue 调用 MyPlugin\nVue.use(MyPlugin,{someOption: true })\n\n// 挂载Vue实例\nnew Vue({\n  el: '#app'\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# Vue.nextTick\n\nmounted(){ //因为 mounted 阶段 dom 并未渲染完毕,所以需要$nextTick\n  this.$nextTick(() => {\n    this.$refs.inputs.focus() //通过 $refs 获取dom 并绑定 focus 方法\n  })\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# Vue.directive\n\nVue.directive('click', {\n  bind(el, binding, vnode, oldVnode) {\n    // binding {name, value, oldValue, expression, arg, modifiers}\n    // 只调用一次 做绑定的准备工作,添加事件监听\n    console.log('bind');\n  },\n  inserted: function(el){\n    // 被绑定元素插入父节点时调用\n    // 获取绑定的元素\n    console.log('inserted');\n  },\n  update: function(){\n    // 所在组件的 VNode 更新时调用\n    // 对于初始值也会调用一次\n    console.log('update');\n  },\n  componentUpdated: function(){\n    // 指令所在组件的 VNode 及其子 VNode 全部更新后调用\n    console.log('componentUpdated');\n  },\n  unbind: function(){\n    // 只调用一次，指令与元素解绑时调用\n    // 比如移除bind时绑定的事件监听器\n    console.log('unbind');\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n * 使用\n\n// 全局定义\nVue.directive(\"change-color\",function(el,binding,vnode){\n  el.style[\"color\"]= binding.value;\n})\n\n// 使用\n<template>\n<div v-change-color=“color”>{{message}}</div>\n</template>\n<script>\n  export default{\n    data(){\n      return{\n        color:'green'\n      }\n    }\n  }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# Vue.filter\n\n// 使用\n// 在双花括号中\n{{ message | capitalize }}\n\n// 在 `v-bind` 中\n<div v-bind:id=\"rawId | formatId\"></div>\n\n// 全局注册\nVue.filter('stampToYYMMDD', (value) =>{\n  // 处理逻辑\n})\n\n// 局部注册\nfilters: {\n  stampToYYMMDD: (value)=> {\n    // 处理逻辑\n  }\n}\n\n// 多个过滤器全局注册\n// /src/common/filters.js\nlet dateServer = value => value.replace(/(\\d{4})(\\d{2})(\\d{2})/g, '$1/$2/$3')\nexport { dateServer }\n\n// /src/main.js\nObject.keys(customs).forEach(key => Vue.filter(key, customs[key]))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# Vue.compile\n\nvar res = Vue.compile('<div><span>{{ msg }}</span></div>')\n\nnew Vue({\n  data: {\n    msg: 'hello'\n  },\n  render: res.render,\n  staticRenderFns: res.staticRenderFns\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# Vue.set\n\n// 利用 set\nthis.$set(arr,index,item)\n\n// 利用数组 push(),splice()\n\n\n1\n2\n3\n4\n\n\n\n# errorHandler/warnHandler\n\nVue.config.errorHandler = function (err, vm, info) {\n  // handle error\n  // `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子\n  // 只在 2.2.0+ 可用\n}\n\nVue.config.warnHandler = function (msg, vm, trace) {\n  // `trace` 是组件的继承关系追踪\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# Vue.config.warnHandler\n\n\n\n\n1\n\n\n\n# vue-cli为路径设置别名\n\n * vue-cli 2.x\n\n// 在 webpack.base.config.js中的 resolve 配置项，在其 alias 中增加别名\nresolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src'),\n    }\n  },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * vue-cli 3.x\n\n// 在根目录下创建vue.config.js\nvar path = require('path')\nfunction resolve (dir) {\n  console.log(__dirname)\n  return path.join(__dirname, dir)\n}\nmodule.exports = {\n  chainWebpack: config => {\n    config.resolve.alias\n      .set(key, value) // key,value自行定义，比如.set('@@', resolve('src/components'))\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# deep 属性\n\n * 深度作用选择器\n\n/* 上面样式加一个 /deep/ */\n<style lang=\"less\" scoped>\n  .demo{\n    font-size: 14px;\n  }\n  .demo /deep/ .content{\n    color: blue;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# Object.freeze\n\nnew Vue({\n    data: {\n        // vue不会对list里的object做getter、setter绑定\n        list: Object.freeze([\n            { value: 1 },\n            { value: 2 }\n        ])\n    },\n    mounted () {\n        // 界面不会有响应,因为单个属性被冻结\n        this.list[0].value = 100;\n\n        // 下面两种做法，界面都会响应\n        this.list = [\n            { value: 100 },\n            { value: 200 }\n        ];\n\n        // 冻结object\n        this.list = Object.freeze([\n            { value: 100 },\n            { value: 200 }\n        ]);\n    }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 调试 template log 技巧\n\n// main.js\nVue.prototype.$log = window.console.log;\n\n// 组件内部\n<div>{{$log(info)}}</div>\n\n\n1\n2\n3\n4\n5\n\n\n\n# vue2 element-ui\n\n * loadmore\n\nexport const loadmore = {\n    bind(el, binding) {\n        const SELECTWRAP = el.querySelector(\n            '.el-select-dropdown .el-select-dropdown__wrap'\n        );\n        SELECTWRAP.addEventListener('scroll', function() {\n            const CONDITION =\n                this.scrollHeight - Math.ceil(this.scrollTop) <= this.clientHeight;\n            if (CONDITION && this.scrollTop !== 0) {\n                binding.value();\n            }\n        });\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * v-int\n\n// directives.js\nconst trigger = (el, type) => {\n    const e = document.createEvent('HTMLEvents');\n    e.initEvent(type, true, true);\n    el.dispatchEvent(e);\n};\n\nexport const int = {\n    bind: function (el) {\n        const input = el.getElementsByTagName('input')[0];\n        input.onkeyup = function () {\n            input.value = input.value.replace(/[^\\d.-]/g, '');\n            input.value = input.value.replace(/\\.+/g, '.');\n            input.value = input.value.replace(/-+/g, '-');\n            trigger(input, 'input');\n        };\n        input.onblur = function () {\n            input.value = input.value.replace(/[^\\d.-]/g, '');\n            input.value = input.value.replace(/\\.+/g, '.');\n            input.value = input.value.replace(/-+/g, '-');\n            trigger(input, 'input');\n            trigger(input, 'input');\n        };\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * input 输入数字问题\n\n// onKeypress=\"return (/[\\d\\.]/.test(String.fromCharCode(event.keyCode)))\"\n// onkeypress=\"return (event.keyCode>=48&&event.keyCode<=57)||(event.keyCode === 46)\"\n// https://juejin.im/post/6844903838009294855\n<el-input\n  :disabled=\"!editable\"\n  onkeypress=\"return (event.keyCode>=48&&event.keyCode<=57)||(event.keyCode === 46)\"\n  v-model.trim=\"formData.totalCostAmount\">\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * table合计显示问题\n\n<xx-table-pro\n  name=\"table\"\n  source=\"local\"\n  :localData=\"tableData\"\n  :columns=\"columns\"\n  :show-summary=\"showSummary\"\n  :summary-method=\"getSummaries\"\n>\n  <el-table-column>\n    <template>\n    <div slot=\"append\">重要提示：合计计算规则 未税金额合计=含税金额合计/（1+税率）</div>\n  </template>\n  </el-table-column>\n</xx-table-pro>\n\n// 合计\n        getSummaries(params) {\n            const { columns } = params;\n            const popoverEl = <el-popover\n                placement=\"top\"\n                trigger=\"hover\">\n                <span class=\"red\">计算公式：未税金额合计=含税金额合计/（1+税率）</span>\n                <span slot=\"reference\">合计 <i class=\"el-icon-warning\" style=\"color: #409EFF\"></i></span>\n            </el-popover>;\n            return columns.slice(1).reduce(\n                (prev, cur) => {\n                    const { property } = cur;\n                    let total = '';\n                    if(['amountWithTaxYuan', 'amountWithoutTaxYuan'].includes(property)) {\n                        total = this.totalFields[property];\n                    }\n                    prev.push(total);\n                    return prev;\n                },\n                [popoverEl]\n            );\n        },\n\n// css\n/deep/ .el-table{\n    overflow: auto;\n}\n/deep/ .el-table .el-table__body-wrapper,\n/deep/ .el-table .el-table__header-wrapper,\n/deep/ .el-table .el-table__footer-wrapper{\n    overflow: visible;\n}\n/deep/ .el-table::after{\n    position:relative !important;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n\n * table校验问题\n\n<template>\n  <div class=\"app-container\">\n    <el-form :model=\"fromData\" ref=\"from\">\n      <el-table :data=\"fromData.domains\">\n        <el-table-column label=\"age\">\n          <template slot-scope=\"scope\">\n            <el-form-item\n              :prop=\"'domains.' + scope.$index + '.age'\"\n              :rules=\"fromData.fromaDataRules.age\"\n            >\n              <el-input v-model.number=\"scope.row.age\"></el-input>\n            </el-form-item>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-form>\n    <el-button type=\"warning\" @click=\"submit('from')\">submit</el-button>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      fromData: {\n        fromaDataRules: {\n          age: [\n            {\n              required: true,\n              type: \"number\",\n              message: \"非数字\",\n              trigger: \"blur\",\n            },\n          ],\n        },\n        domains: [\n          {\n            age: \"1\",\n          },\n          {\n            age: \"2\",\n          },\n        ],\n      },\n    };\n  },\n  methods: {\n    submit(formName) {\n      this.$refs[formName].validate((valid) => {\n        if (valid) {\n          alert(\"submit!\");\n        } else {\n          console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    },\n  },\n};\n<\/script>\n\n// 自定义校验\n<template>\n  <div class=\"app-container\">\n    <el-form :model=\"fromData\" ref=\"from\">\n      <el-table :data=\"fromData.domains\">\n        <el-table-column label=\"age\">\n          <template slot-scope=\"scope\">\n            <el-form-item\n              :prop=\"'domains.' + scope.$index + '.age'\"\n              :rules=\"fromData.fromaDataRules.age\"\n            >\n              <el-input v-model.number=\"scope.row.age\"></el-input>\n            </el-form-item>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-form>\n    <el-button type=\"warning\" @click=\"submit('from')\">submit</el-button>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    let validateAge = (rule, value, callback) => {\n      console.log(\"value\", value);\n      if (!value) {\n        return callback(new Error(\"年龄不能为空\"));\n      }\n      setTimeout(() => {\n        if (!Number.isInteger(value)) {\n          callback(new Error(\"请输入数字值\"));\n        } else {\n          if (value < 18) {\n            callback(new Error(\"必须年满18岁\"));\n          } else {\n            callback();\n          }\n        }\n      }, 1000);\n    };\n    return {\n      fromData: {\n        fromaDataRules: {\n          age: [\n            {\n              validator: validateAge,\n              trigger: \"blur\",\n            },\n          ],\n        },\n        domains: [\n          {\n            age: \"1\",\n          },\n          {\n            age: \"2\",\n          },\n        ],\n      },\n    };\n  },\n  methods: {\n    submit(formName) {\n      this.$refs[formName].validate((valid) => {\n        if (valid) {\n          alert(\"submit!\");\n        } else {\n          console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    },\n  },\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n\n * element Input number\n\n<template>\n    <el-input\n        v-model.number=\"val\"\n        v-int\n        v-bind=\"$attrs\"\n        v-on=\"$listeners\"\n        @input=\"$emit('input', $event)\"\n    />\n</template>\n\n<script>\n\nconst trigger = (el, type) => {\n    const e = document.createEvent('HTMLEvents');\n    e.initEvent(type, true, true);\n    el.dispatchEvent(e);\n};\n\nexport default {\n    name: 'IntElInput',\n    directives: {\n        int: {\n            bind(el) {\n                const input = el.getElementsByTagName('input')[0];\n                el.handler = () => {\n                    input.value = input.value.replace(/[^\\d.-]/g, '');\n                    input.value = input.value.replace(/\\.+/g, '.');\n                    input.value = input.value.replace(/-+/g, '-');\n                    trigger(input, 'input');\n                };\n                el.addEventListener('keyup', el.handler);\n                el.addEventListener('blur', el.handler);\n            },\n            unbind(el) {\n                el.removeEventListener('keydown', el.handler);\n                el.removeEventListener('blur', el.handler);\n            },\n        },\n    },\n    model: {\n        prop: 'value',\n        event: 'input',\n    },\n    props: {\n        value: {\n            type: [Number, String],\n            required: true,\n        },\n    },\n    data() {\n        return {\n            val: this.value,\n        };\n    },\n    watch: {\n        value(value) {\n            this.val = value;\n        },\n    },\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n",normalizedContent:"# 异步组件\n\n * 工厂函数返回 promise\n\nvue.component(\n  'async-webpack-example',\n  // 这个 `import` 函数会返回一个 `promise` 对象。\n  () => import('./my-async-component')\n)\n\n\n1\n2\n3\n4\n5\n\n * 路由的按需加载\n\nconst home = () => import(/* webpackchunkname: \"group-home\" */ './views/home.vue')\n\n{\n  path:'/',\n  name:'home',\n  components: home\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 动态组件\n\n<component v-bind:is=\"currenttabcomponent\"></component>\n\n\n1\n\n * keep-alive\n\n<keep-alive>\n  <component v-bind:is=\"currenttabcomponent\"></component>\n</keep-alive>\n\n\n\n\n1\n2\n3\n4\n5\n\n * 根据配置参数cache\n\n<template>\n  <div>\n    <keep-alive>\n      <router-view v-if=\"$route.meta.keepalive\" />\n    </keep-alive>\n    <router-view v-if=\"!$route.meta.keepalive\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'routercache'\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * transition\n\n<transition>\n<keep-alive>\n  <component v-bind:is=\"currenttabcomponent\"></component>\n</keep-alive>\n</transition>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 递归组件\n\n<template>\n  <div v-for=\"(item,index) in treearr\">\n      子组件，当前层级值： {{index}} <br/>\n      \x3c!-- 递归调用自身, 后台判断是否不存在改值 --\x3e\n      <tree :item=\"item.children\" v-if=\"item.children\"></tree>\n  </div>\n</template>\n<script>\nexport default {\n  // 必须定义name，组件内部才能递归调用\n  name: 'tree',\n  data(){\n    return {}\n  },\n  // 接收外部传入的值\n  props: {\n     item: {\n      type:array,\n      default: ()=>[]\n    }\n  }\n}\n<\/script>\n\n// 父级\nimport tree from \"./components/tree\";\n<tree :item=\"arr\"/>\n\narr = [{name:'a', chilren:[{name: 'a-1'}]},...]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 函数式组件\n\n * template\n\n<template functional>\n  <div v-for=\"(item,index) in props.arr\">{{item}}</div>\n</template>\n\n\n1\n2\n3\n\n * js\n\nexport default {\n  functional: true,\n  props: {\n    row: {\n      type: object\n    },\n    render: {\n      type: function\n    }\n  },\n  render (h, ctx) {\n    return ctx.props.render(h, ctx.props.row)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# components和 vue.component\n\n * 局部注册组件\n\nexport default{\n  components:{home}\n}\n\n\n1\n2\n3\n\n * 全局注册组件\n\nvue.component('home',home)\n\n\n1\n\n\n\n# vue.extend\n\n// 创建构造器\nvar profile = vue.extend({\n  template: '<p>{{extenddata}}</br>实例传入的数据为:{{propsextend}}</p>',//template对应的标签最外层必须只有一个标签\n  data: function () {\n    return {\n      extenddata: '这是extend扩展的数据',\n    }\n  },\n  props:['propsextend']\n})\n\n// 创建的构造器可以挂载到元素上, 通过propsdata传参\nnew profile({propsdata:{propsextend:'我是实例传入的数据'}}).$mount('#app-extend')\n\n// 通过 components 或 vue.component()注册\nvue.component('profile',profile)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# mixins\n\nconst mixin={\n    created(){\n      this.dealtime()\n    },\n    methods:{\n      dealtime(){\n        console.log('这是mixin的dealtime里面的方法');\n      }\n  }\n}\n\nexport default{\n  mixins:[mixin]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# extends\n\nconst extend={\n    created(){\n      this.dealtime()\n    },\n    methods:{\n      dealtime(){\n        console.log('这是mixin的dealtime里面的方法');\n      }\n  }\n}\n\nexport default{\n  extends:extend\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# install\n\nvar myplugin = {};\nmyplugin.install = function (vue, options) {\n  // 方式一：添加全局资源,第二个参数传一个值默认是update对应的值\n  vue.directive('xxx', {})\n\n  // 方式二：注入组件\n  vue.mixin({\n    created: function () {\n      console.log('options的值为',options)\n    }\n  })\n\n  // 方式三：添加实例方法\n  vue.prototype.$mymethod = function (methodoptions) {\n    console.log('实例方法mymethod被调用啦');\n  }\n}\n\n// vue 调用 myplugin\nvue.use(myplugin,{someoption: true })\n\n// 挂载vue实例\nnew vue({\n  el: '#app'\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# vue.nexttick\n\nmounted(){ //因为 mounted 阶段 dom 并未渲染完毕,所以需要$nexttick\n  this.$nexttick(() => {\n    this.$refs.inputs.focus() //通过 $refs 获取dom 并绑定 focus 方法\n  })\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# vue.directive\n\nvue.directive('click', {\n  bind(el, binding, vnode, oldvnode) {\n    // binding {name, value, oldvalue, expression, arg, modifiers}\n    // 只调用一次 做绑定的准备工作,添加事件监听\n    console.log('bind');\n  },\n  inserted: function(el){\n    // 被绑定元素插入父节点时调用\n    // 获取绑定的元素\n    console.log('inserted');\n  },\n  update: function(){\n    // 所在组件的 vnode 更新时调用\n    // 对于初始值也会调用一次\n    console.log('update');\n  },\n  componentupdated: function(){\n    // 指令所在组件的 vnode 及其子 vnode 全部更新后调用\n    console.log('componentupdated');\n  },\n  unbind: function(){\n    // 只调用一次，指令与元素解绑时调用\n    // 比如移除bind时绑定的事件监听器\n    console.log('unbind');\n  }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n * 使用\n\n// 全局定义\nvue.directive(\"change-color\",function(el,binding,vnode){\n  el.style[\"color\"]= binding.value;\n})\n\n// 使用\n<template>\n<div v-change-color=“color”>{{message}}</div>\n</template>\n<script>\n  export default{\n    data(){\n      return{\n        color:'green'\n      }\n    }\n  }\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# vue.filter\n\n// 使用\n// 在双花括号中\n{{ message | capitalize }}\n\n// 在 `v-bind` 中\n<div v-bind:id=\"rawid | formatid\"></div>\n\n// 全局注册\nvue.filter('stamptoyymmdd', (value) =>{\n  // 处理逻辑\n})\n\n// 局部注册\nfilters: {\n  stamptoyymmdd: (value)=> {\n    // 处理逻辑\n  }\n}\n\n// 多个过滤器全局注册\n// /src/common/filters.js\nlet dateserver = value => value.replace(/(\\d{4})(\\d{2})(\\d{2})/g, '$1/$2/$3')\nexport { dateserver }\n\n// /src/main.js\nobject.keys(customs).foreach(key => vue.filter(key, customs[key]))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# vue.compile\n\nvar res = vue.compile('<div><span>{{ msg }}</span></div>')\n\nnew vue({\n  data: {\n    msg: 'hello'\n  },\n  render: res.render,\n  staticrenderfns: res.staticrenderfns\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# vue.set\n\n// 利用 set\nthis.$set(arr,index,item)\n\n// 利用数组 push(),splice()\n\n\n1\n2\n3\n4\n\n\n\n# errorhandler/warnhandler\n\nvue.config.errorhandler = function (err, vm, info) {\n  // handle error\n  // `info` 是 vue 特定的错误信息，比如错误所在的生命周期钩子\n  // 只在 2.2.0+ 可用\n}\n\nvue.config.warnhandler = function (msg, vm, trace) {\n  // `trace` 是组件的继承关系追踪\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# vue.config.warnhandler\n\n\n\n\n1\n\n\n\n# vue-cli为路径设置别名\n\n * vue-cli 2.x\n\n// 在 webpack.base.config.js中的 resolve 配置项，在其 alias 中增加别名\nresolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src'),\n    }\n  },\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * vue-cli 3.x\n\n// 在根目录下创建vue.config.js\nvar path = require('path')\nfunction resolve (dir) {\n  console.log(__dirname)\n  return path.join(__dirname, dir)\n}\nmodule.exports = {\n  chainwebpack: config => {\n    config.resolve.alias\n      .set(key, value) // key,value自行定义，比如.set('@@', resolve('src/components'))\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# deep 属性\n\n * 深度作用选择器\n\n/* 上面样式加一个 /deep/ */\n<style lang=\"less\" scoped>\n  .demo{\n    font-size: 14px;\n  }\n  .demo /deep/ .content{\n    color: blue;\n  }\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# object.freeze\n\nnew vue({\n    data: {\n        // vue不会对list里的object做getter、setter绑定\n        list: object.freeze([\n            { value: 1 },\n            { value: 2 }\n        ])\n    },\n    mounted () {\n        // 界面不会有响应,因为单个属性被冻结\n        this.list[0].value = 100;\n\n        // 下面两种做法，界面都会响应\n        this.list = [\n            { value: 100 },\n            { value: 200 }\n        ];\n\n        // 冻结object\n        this.list = object.freeze([\n            { value: 100 },\n            { value: 200 }\n        ]);\n    }\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 调试 template log 技巧\n\n// main.js\nvue.prototype.$log = window.console.log;\n\n// 组件内部\n<div>{{$log(info)}}</div>\n\n\n1\n2\n3\n4\n5\n\n\n\n# vue2 element-ui\n\n * loadmore\n\nexport const loadmore = {\n    bind(el, binding) {\n        const selectwrap = el.queryselector(\n            '.el-select-dropdown .el-select-dropdown__wrap'\n        );\n        selectwrap.addeventlistener('scroll', function() {\n            const condition =\n                this.scrollheight - math.ceil(this.scrolltop) <= this.clientheight;\n            if (condition && this.scrolltop !== 0) {\n                binding.value();\n            }\n        });\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * v-int\n\n// directives.js\nconst trigger = (el, type) => {\n    const e = document.createevent('htmlevents');\n    e.initevent(type, true, true);\n    el.dispatchevent(e);\n};\n\nexport const int = {\n    bind: function (el) {\n        const input = el.getelementsbytagname('input')[0];\n        input.onkeyup = function () {\n            input.value = input.value.replace(/[^\\d.-]/g, '');\n            input.value = input.value.replace(/\\.+/g, '.');\n            input.value = input.value.replace(/-+/g, '-');\n            trigger(input, 'input');\n        };\n        input.onblur = function () {\n            input.value = input.value.replace(/[^\\d.-]/g, '');\n            input.value = input.value.replace(/\\.+/g, '.');\n            input.value = input.value.replace(/-+/g, '-');\n            trigger(input, 'input');\n            trigger(input, 'input');\n        };\n    }\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * input 输入数字问题\n\n// onkeypress=\"return (/[\\d\\.]/.test(string.fromcharcode(event.keycode)))\"\n// onkeypress=\"return (event.keycode>=48&&event.keycode<=57)||(event.keycode === 46)\"\n// https://juejin.im/post/6844903838009294855\n<el-input\n  :disabled=\"!editable\"\n  onkeypress=\"return (event.keycode>=48&&event.keycode<=57)||(event.keycode === 46)\"\n  v-model.trim=\"formdata.totalcostamount\">\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * table合计显示问题\n\n<xx-table-pro\n  name=\"table\"\n  source=\"local\"\n  :localdata=\"tabledata\"\n  :columns=\"columns\"\n  :show-summary=\"showsummary\"\n  :summary-method=\"getsummaries\"\n>\n  <el-table-column>\n    <template>\n    <div slot=\"append\">重要提示：合计计算规则 未税金额合计=含税金额合计/（1+税率）</div>\n  </template>\n  </el-table-column>\n</xx-table-pro>\n\n// 合计\n        getsummaries(params) {\n            const { columns } = params;\n            const popoverel = <el-popover\n                placement=\"top\"\n                trigger=\"hover\">\n                <span class=\"red\">计算公式：未税金额合计=含税金额合计/（1+税率）</span>\n                <span slot=\"reference\">合计 <i class=\"el-icon-warning\" style=\"color: #409eff\"></i></span>\n            </el-popover>;\n            return columns.slice(1).reduce(\n                (prev, cur) => {\n                    const { property } = cur;\n                    let total = '';\n                    if(['amountwithtaxyuan', 'amountwithouttaxyuan'].includes(property)) {\n                        total = this.totalfields[property];\n                    }\n                    prev.push(total);\n                    return prev;\n                },\n                [popoverel]\n            );\n        },\n\n// css\n/deep/ .el-table{\n    overflow: auto;\n}\n/deep/ .el-table .el-table__body-wrapper,\n/deep/ .el-table .el-table__header-wrapper,\n/deep/ .el-table .el-table__footer-wrapper{\n    overflow: visible;\n}\n/deep/ .el-table::after{\n    position:relative !important;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n\n * table校验问题\n\n<template>\n  <div class=\"app-container\">\n    <el-form :model=\"fromdata\" ref=\"from\">\n      <el-table :data=\"fromdata.domains\">\n        <el-table-column label=\"age\">\n          <template slot-scope=\"scope\">\n            <el-form-item\n              :prop=\"'domains.' + scope.$index + '.age'\"\n              :rules=\"fromdata.fromadatarules.age\"\n            >\n              <el-input v-model.number=\"scope.row.age\"></el-input>\n            </el-form-item>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-form>\n    <el-button type=\"warning\" @click=\"submit('from')\">submit</el-button>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      fromdata: {\n        fromadatarules: {\n          age: [\n            {\n              required: true,\n              type: \"number\",\n              message: \"非数字\",\n              trigger: \"blur\",\n            },\n          ],\n        },\n        domains: [\n          {\n            age: \"1\",\n          },\n          {\n            age: \"2\",\n          },\n        ],\n      },\n    };\n  },\n  methods: {\n    submit(formname) {\n      this.$refs[formname].validate((valid) => {\n        if (valid) {\n          alert(\"submit!\");\n        } else {\n          console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    },\n  },\n};\n<\/script>\n\n// 自定义校验\n<template>\n  <div class=\"app-container\">\n    <el-form :model=\"fromdata\" ref=\"from\">\n      <el-table :data=\"fromdata.domains\">\n        <el-table-column label=\"age\">\n          <template slot-scope=\"scope\">\n            <el-form-item\n              :prop=\"'domains.' + scope.$index + '.age'\"\n              :rules=\"fromdata.fromadatarules.age\"\n            >\n              <el-input v-model.number=\"scope.row.age\"></el-input>\n            </el-form-item>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-form>\n    <el-button type=\"warning\" @click=\"submit('from')\">submit</el-button>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    let validateage = (rule, value, callback) => {\n      console.log(\"value\", value);\n      if (!value) {\n        return callback(new error(\"年龄不能为空\"));\n      }\n      settimeout(() => {\n        if (!number.isinteger(value)) {\n          callback(new error(\"请输入数字值\"));\n        } else {\n          if (value < 18) {\n            callback(new error(\"必须年满18岁\"));\n          } else {\n            callback();\n          }\n        }\n      }, 1000);\n    };\n    return {\n      fromdata: {\n        fromadatarules: {\n          age: [\n            {\n              validator: validateage,\n              trigger: \"blur\",\n            },\n          ],\n        },\n        domains: [\n          {\n            age: \"1\",\n          },\n          {\n            age: \"2\",\n          },\n        ],\n      },\n    };\n  },\n  methods: {\n    submit(formname) {\n      this.$refs[formname].validate((valid) => {\n        if (valid) {\n          alert(\"submit!\");\n        } else {\n          console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    },\n  },\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n\n * element input number\n\n<template>\n    <el-input\n        v-model.number=\"val\"\n        v-int\n        v-bind=\"$attrs\"\n        v-on=\"$listeners\"\n        @input=\"$emit('input', $event)\"\n    />\n</template>\n\n<script>\n\nconst trigger = (el, type) => {\n    const e = document.createevent('htmlevents');\n    e.initevent(type, true, true);\n    el.dispatchevent(e);\n};\n\nexport default {\n    name: 'intelinput',\n    directives: {\n        int: {\n            bind(el) {\n                const input = el.getelementsbytagname('input')[0];\n                el.handler = () => {\n                    input.value = input.value.replace(/[^\\d.-]/g, '');\n                    input.value = input.value.replace(/\\.+/g, '.');\n                    input.value = input.value.replace(/-+/g, '-');\n                    trigger(input, 'input');\n                };\n                el.addeventlistener('keyup', el.handler);\n                el.addeventlistener('blur', el.handler);\n            },\n            unbind(el) {\n                el.removeeventlistener('keydown', el.handler);\n                el.removeeventlistener('blur', el.handler);\n            },\n        },\n    },\n    model: {\n        prop: 'value',\n        event: 'input',\n    },\n    props: {\n        value: {\n            type: [number, string],\n            required: true,\n        },\n    },\n    data() {\n        return {\n            val: this.value,\n        };\n    },\n    watch: {\n        value(value) {\n            this.val = value;\n        },\n    },\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n",charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647947183e3,createdTime:1647947183e3},{title:"vue中的工具函数",frontmatter:{title:"vue中的工具函数",date:"2020-07-21T00:00:00.000Z",sidebar:"auto",tags:["vue"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/vue-libs.html",relativePath:"frontend/library/vue-libs.md",key:"v-0e09f56b",path:"/frontend/library/vue-libs.html",headers:[{level:2,title:"inBrowser: 检测当前宿主环境是否是浏览器",slug:"inbrowser-检测当前宿主环境是否是浏览器",normalizedTitle:"inbrowser: 检测当前宿主环境是否是浏览器",charIndex:31},{level:2,title:"hasProto:检查当前环境是否可以使用对象的 __proto__ 属性",slug:"hasproto-检查当前环境是否可以使用对象的-proto-属性",normalizedTitle:"hasproto:检查当前环境是否可以使用对象的 <strong>proto</strong> 属性",charIndex:null},{level:2,title:"获取当浏览器的 user Agent",slug:"获取当浏览器的-user-agent",normalizedTitle:"获取当浏览器的 user agent",charIndex:305},{level:2,title:"IE 浏览器判断",slug:"ie-浏览器判断",normalizedTitle:"ie 浏览器判断",charIndex:439},{level:2,title:"IE9| Edge | Chrome 判断",slug:"ie9-edge-chrome-判断",normalizedTitle:"ie9| edge | chrome 判断",charIndex:509},{level:2,title:"isReserved：检测字符串是否以 $ 或者 _ 开头",slug:"isreserved-检测字符串是否以-或者-开头",normalizedTitle:"isreserved：检测字符串是否以 $ 或者 _ 开头",charIndex:718},{level:2,title:"Javascript 中级算法之 charCodeAt",slug:"javascript-中级算法之-charcodeat",normalizedTitle:"javascript 中级算法之 charcodeat",charIndex:933},{level:2,title:"camelize: 连字符转驼峰",slug:"camelize-连字符转驼峰",normalizedTitle:"camelize: 连字符转驼峰",charIndex:1453},{level:2,title:"hyphenate:驼峰转连字符",slug:"hyphenate-驼峰转连字符",normalizedTitle:"hyphenate:驼峰转连字符",charIndex:1663},{level:2,title:"toString: 将给定变量的值转换为 string 类型并返回",slug:"tostring-将给定变量的值转换为-string-类型并返回",normalizedTitle:"tostring: 将给定变量的值转换为 string 类型并返回",charIndex:1849},{level:2,title:"capitalize:首字符大写",slug:"capitalize-首字符大写",normalizedTitle:"capitalize:首字符大写",charIndex:2046},{level:2,title:"isPrimitive: 判断变量是否为原型类型",slug:"isprimitive-判断变量是否为原型类型",normalizedTitle:"isprimitive: 判断变量是否为原型类型",charIndex:2194},{level:2,title:"isRegExp: 判断变量是否为正则对象",slug:"isregexp-判断变量是否为正则对象",normalizedTitle:"isregexp: 判断变量是否为正则对象",charIndex:2428},{level:2,title:"isObject: 区分对象和原始值",slug:"isobject-区分对象和原始值",normalizedTitle:"isobject: 区分对象和原始值",charIndex:2593},{level:2,title:"makeMap：判断一个变量是否包含在传入字符串里",slug:"makemap-判断一个变量是否包含在传入字符串里",normalizedTitle:"makemap：判断一个变量是否包含在传入字符串里",charIndex:2710},{level:2,title:"once:只调用一次的函数",slug:"once-只调用一次的函数",normalizedTitle:"once:只调用一次的函数",charIndex:3197},{level:2,title:"cache:创建一个缓存函数",slug:"cache-创建一个缓存函数",normalizedTitle:"cache:创建一个缓存函数",charIndex:3394}],headersStr:"inBrowser: 检测当前宿主环境是否是浏览器 hasProto:检查当前环境是否可以使用对象的 __proto__ 属性 获取当浏览器的 user Agent IE 浏览器判断 IE9| Edge | Chrome 判断 isReserved：检测字符串是否以 $ 或者 _ 开头 Javascript 中级算法之 charCodeAt camelize: 连字符转驼峰 hyphenate:驼峰转连字符 toString: 将给定变量的值转换为 string 类型并返回 capitalize:首字符大写 isPrimitive: 判断变量是否为原型类型 isRegExp: 判断变量是否为正则对象 isObject: 区分对象和原始值 makeMap：判断一个变量是否包含在传入字符串里 once:只调用一次的函数 cache:创建一个缓存函数",content:'原文：「从源码中学习」Vue 源码中的 JS 骚操作\n\n\n# inBrowser: 检测当前宿主环境是否是浏览器\n\n// 通过判断 `window` 对象是否存在即可\nexport const inBrowser = typeof window !== "undefined";\n\n\n1\n2\n\n\n\n# hasProto:检查当前环境是否可以使用对象的 __proto__ 属性\n\n// 一个对象的 __proto__ 属性指向了其构造函数的原型\n// 从一个空的对象字面量开始沿着原型链逐级检查。\nexport const hasProto = "__proto__" in {};\n\n\n1\n2\n3\n\n\n\n# 获取当浏览器的 user Agent\n\n// toLowerCase目的是 为了后续的各种环境检测\nexport const UA = inBrowser && window.navigator.userAgent.toLowerCase();\n\n\n1\n2\n\n\n\n# IE 浏览器判断\n\nexport const isIE = UA && /msie|trident/.test(UA);\n\n\n1\n\n\n\n# IE9| Edge | Chrome 判断\n\nexport const isIE9 = UA && UA.indexOf("msie 9.0") > 0;\nexport const isEdge = UA && UA.indexOf("edge/") > 0;\nexport const isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n\n1\n2\n3\n\n\n\n# isReserved：检测字符串是否以 $ 或者 _ 开头\n\n// charCodeAt() 方法可返回指定位置的字符的 Unicode 编码\nexport function isReserved(str: string): boolean {\n  const c = (str + "").charCodeAt(0);\n  return c === 0x24 || c === 0x5f;\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# Javascript 中级算法之 charCodeAt\n\n// 从传递进来的字母序列中找到缺失的字母并返回它\nfunction fearNotLetter(str) {\n  //将字符串转为ASCII码，并存入数组\n  let arr = [];\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str.charCodeAt(i));\n  }\n  for (let j = 1; j < arr.length; j++) {\n    let num = arr[j] - arr[j - 1];\n    //判断后一项减前一项是否为1，若不为1，则缺失该字符的前一项\n    if (num != 1) {\n      //将缺失字符ASCII转为字符并返回\n      return String.fromCharCode(arr[j] - 1);\n    }\n  }\n  return undefined;\n}\nfearNotLetter("abce"); // "d"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# camelize: 连字符转驼峰\n\nconst camelizeRE = /-(\\w)/g;\nexport const camelize = cached(str => {\n  return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ""));\n});\n\ncamelize("aa-bb"); // aaBb\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# hyphenate:驼峰转连字符\n\nconst hyphenateRE = /\\B([A-Z])/g;\nexport const hyphenate = cached((str: string): string => {\n  return str.replace(hyphenateRE, "-$1").toLowerCase();\n});\n\n\n1\n2\n3\n4\n\n\n\n# toString: 将给定变量的值转换为 string 类型并返回\n\nfunction toString(val) {\n  return val == null\n    ? ""\n    : typeof val === "object"\n    ? JSON.stringify(val, null, 2)\n    : String(val);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# capitalize:首字符大写\n\nexport const capitalize = cached((str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n});\n\n\n1\n2\n3\n\n\n\n# isPrimitive: 判断变量是否为原型类型\n\nexport function isPrimitive(value) {\n  return (\n    typeof value === "string" ||\n    typeof value === "number" ||\n    typeof value === "symbol" ||\n    typeof value === "boolean"\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# isRegExp: 判断变量是否为正则对象\n\nconst _toString = Object.prototype.toString;\nexport function isRegExp(v) {\n  return _toString.call(v) === "[object RegExp]";\n}\n\n\n1\n2\n3\n4\n\n\n\n# isObject: 区分对象和原始值\n\nexport function isObject(obj) {\n  return obj !== null && typeof obj === "object";\n}\n\n\n1\n2\n3\n\n\n\n# makeMap：判断一个变量是否包含在传入字符串里\n\nfunction makeMap(str, expectsLowerCase) {\n  const map = Object.create(null);\n  const list = str.split(",");\n  for (let i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase ? val => map[val.toLowerCase()] : val => map[val];\n}\n\nlet isMyName = makeMap("abc,hello", true);\nconsole.log(isMyName("hello")); // true\nconsole.log(isMyName("abc")); // true\nconsole.log(isMyName("bcd")); // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# once:只调用一次的函数\n\nexport function once(fn) {\n  let called = false;\n  return function() {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# cache:创建一个缓存函数\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached(fn) {\n  const cache = Object.create(null);\n  return function cachedFn(str) {\n    const hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\nlet ca = cached(function(str) {\n  return `ca: ${str}`;\n});\nconsole.log(ca("ac-ae"));\nconsole.log(ca("ac-ae"));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n',normalizedContent:'原文：「从源码中学习」vue 源码中的 js 骚操作\n\n\n# inbrowser: 检测当前宿主环境是否是浏览器\n\n// 通过判断 `window` 对象是否存在即可\nexport const inbrowser = typeof window !== "undefined";\n\n\n1\n2\n\n\n\n# hasproto:检查当前环境是否可以使用对象的 __proto__ 属性\n\n// 一个对象的 __proto__ 属性指向了其构造函数的原型\n// 从一个空的对象字面量开始沿着原型链逐级检查。\nexport const hasproto = "__proto__" in {};\n\n\n1\n2\n3\n\n\n\n# 获取当浏览器的 user agent\n\n// tolowercase目的是 为了后续的各种环境检测\nexport const ua = inbrowser && window.navigator.useragent.tolowercase();\n\n\n1\n2\n\n\n\n# ie 浏览器判断\n\nexport const isie = ua && /msie|trident/.test(ua);\n\n\n1\n\n\n\n# ie9| edge | chrome 判断\n\nexport const isie9 = ua && ua.indexof("msie 9.0") > 0;\nexport const isedge = ua && ua.indexof("edge/") > 0;\nexport const ischrome = ua && /chrome\\/\\d+/.test(ua) && !isedge;\n\n\n1\n2\n3\n\n\n\n# isreserved：检测字符串是否以 $ 或者 _ 开头\n\n// charcodeat() 方法可返回指定位置的字符的 unicode 编码\nexport function isreserved(str: string): boolean {\n  const c = (str + "").charcodeat(0);\n  return c === 0x24 || c === 0x5f;\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# javascript 中级算法之 charcodeat\n\n// 从传递进来的字母序列中找到缺失的字母并返回它\nfunction fearnotletter(str) {\n  //将字符串转为ascii码，并存入数组\n  let arr = [];\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str.charcodeat(i));\n  }\n  for (let j = 1; j < arr.length; j++) {\n    let num = arr[j] - arr[j - 1];\n    //判断后一项减前一项是否为1，若不为1，则缺失该字符的前一项\n    if (num != 1) {\n      //将缺失字符ascii转为字符并返回\n      return string.fromcharcode(arr[j] - 1);\n    }\n  }\n  return undefined;\n}\nfearnotletter("abce"); // "d"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# camelize: 连字符转驼峰\n\nconst camelizere = /-(\\w)/g;\nexport const camelize = cached(str => {\n  return str.replace(camelizere, (_, c) => (c ? c.touppercase() : ""));\n});\n\ncamelize("aa-bb"); // aabb\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# hyphenate:驼峰转连字符\n\nconst hyphenatere = /\\b([a-z])/g;\nexport const hyphenate = cached((str: string): string => {\n  return str.replace(hyphenatere, "-$1").tolowercase();\n});\n\n\n1\n2\n3\n4\n\n\n\n# tostring: 将给定变量的值转换为 string 类型并返回\n\nfunction tostring(val) {\n  return val == null\n    ? ""\n    : typeof val === "object"\n    ? json.stringify(val, null, 2)\n    : string(val);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# capitalize:首字符大写\n\nexport const capitalize = cached((str: string): string => {\n  return str.charat(0).touppercase() + str.slice(1);\n});\n\n\n1\n2\n3\n\n\n\n# isprimitive: 判断变量是否为原型类型\n\nexport function isprimitive(value) {\n  return (\n    typeof value === "string" ||\n    typeof value === "number" ||\n    typeof value === "symbol" ||\n    typeof value === "boolean"\n  );\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# isregexp: 判断变量是否为正则对象\n\nconst _tostring = object.prototype.tostring;\nexport function isregexp(v) {\n  return _tostring.call(v) === "[object regexp]";\n}\n\n\n1\n2\n3\n4\n\n\n\n# isobject: 区分对象和原始值\n\nexport function isobject(obj) {\n  return obj !== null && typeof obj === "object";\n}\n\n\n1\n2\n3\n\n\n\n# makemap：判断一个变量是否包含在传入字符串里\n\nfunction makemap(str, expectslowercase) {\n  const map = object.create(null);\n  const list = str.split(",");\n  for (let i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectslowercase ? val => map[val.tolowercase()] : val => map[val];\n}\n\nlet ismyname = makemap("abc,hello", true);\nconsole.log(ismyname("hello")); // true\nconsole.log(ismyname("abc")); // true\nconsole.log(ismyname("bcd")); // undefined\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# once:只调用一次的函数\n\nexport function once(fn) {\n  let called = false;\n  return function() {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  };\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# cache:创建一个缓存函数\n\n/**\n * create a cached version of a pure function.\n */\nfunction cached(fn) {\n  const cache = object.create(null);\n  return function cachedfn(str) {\n    const hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\nlet ca = cached(function(str) {\n  return `ca: ${str}`;\n});\nconsole.log(ca("ac-ae"));\nconsole.log(ca("ac-ae"));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647947183e3,createdTime:1647947183e3},{title:"vue2分页组件",frontmatter:{title:"vue2分页组件",date:"2020-07-21T00:00:00.000Z",sidebar:"auto",tags:["vue"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/vue-pagination.html",relativePath:"frontend/library/vue-pagination.md",key:"v-c2129e2a",path:"/frontend/library/vue-pagination.html",headers:[{level:2,title:"vue2.x自定义element-ui表格",slug:"vue2-x自定义element-ui表格",normalizedTitle:"vue2.x自定义element-ui表格",charIndex:2},{level:2,title:"pagination",slug:"pagination",normalizedTitle:"pagination",charIndex:1258},{level:2,title:"i18n",slug:"i18n",normalizedTitle:"i18n",charIndex:12640},{level:2,title:"alert",slug:"alert",normalizedTitle:"alert",charIndex:14249}],headersStr:"vue2.x自定义element-ui表格 pagination i18n alert",content:'# vue2.x自定义element-ui表格\n\n * custom-table.vue\n\n<template>\n  <el-table\n    :data="data"\n    v-bind="$attrs"\n    v-on="$listeners"\n  >\n    <template v-for="(column, index) of columns">\n      \x3c!-- render --\x3e\n      <el-table-column\n        v-if="column.render"\n        :key="index"\n        v-bind="column"\n      >\n        <template slot-scope="scope">\n          <extend\n            :render="column.render"\n            :row="scope"\n          />\n        </template>\n      </el-table-column>\n      \x3c!-- no render --\x3e\n      <el-table-column\n        v-else\n        :key="index"\n        v-bind="column"\n      />\n    </template>\n  </el-table>\n</template>\n<script>\nimport extend from \'./render\'\nexport default {\n  components: { extend },\n  props: {\n    data: {\n      type: Array,\n      required: true\n    },\n    columns: {\n      type: Array,\n      required: true\n    }\n  }\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n * render.js\n\nexport default {\n  functional: true,\n  props: {\n    row: {\n      type: Object\n    },\n    render: {\n      type: Function\n    }\n  },\n  render (h, ctx) {\n    return ctx.props.render(h, ctx.props.row)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# pagination\n\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />\n\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <meta http-equiv="X-UA-Compatible" content="ie=edge" />\n    <title>vue分页组件</title>\n    <style>\n      .pagination-vue .page-list {\n        display: inline-block;\n        height: 40px;\n        line-height: 40px;\n        -webkit-touch-callout: none;\n        -webkit-user-select: none;\n        -khtml-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n\n      .pagination-vue .page-list span {\n        font-size: 14px;\n        color: #333333;\n      }\n\n      .pagination-vue .page-list .jump {\n        padding: 2px 6px;\n        text-align: center;\n        cursor: pointer;\n        margin-left: 5px;\n        background: rgba(204, 204, 204, 0.3);\n        border-radius: 6px;\n      }\n\n      .pagination-vue .page-list .jump:hover {\n        cursor: pointer;\n        color: #fff;\n        background: #ff1e1b;\n        border-radius: 6px;\n      }\n\n      .pagination-vue .page-list .current {\n        cursor: default;\n        color: #fff;\n        background: #ff1e1b;\n        border-radius: 6px;\n      }\n\n      .pagination-vue .page-list .jump.disabled {\n        pointer-events: none;\n        color: #999999;\n      }\n\n      .pagination-vue .page-list .go-btn {\n        font-size: 14px;\n      }\n\n      .pagination-vue .page-list .jump-inp input {\n        width: 44px;\n        height: 20px;\n        font-size: 13px;\n        border: 1px solid #ccc;\n        -webkit-border-radius: 4px;\n        -moz-border-radius: 4px;\n        border-radius: 4px;\n        text-align: center;\n        outline: none;\n      }\n\n      .pagination-vue .page-list .ellipsis {\n        padding: 0px 8px;\n        text-align: center;\n        cursor: pointer;\n        margin-left: 5px;\n        background: rgba(204, 204, 204, 0);\n        border-radius: 6px;\n      }\n\n      .pagination-vue .page-list .jump-point {\n        margin-left: 10px;\n      }\n\n      .pagination-vue .pageNum {\n        display: inline-block;\n        height: 28px;\n        font-size: 16px;\n        font-family: PingFangSC-Regular, PingFang SC;\n        font-weight: 400;\n        color: #666666;\n        line-height: 28px;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id="app">\n      <h1>{{msg}}</h1>\n      <vue-pagination2></vue-pagination2>\n      <pagination-com\n        :total="total"\n        :current="current"\n        @update:current="handleCurrentPage"\n      ></pagination-com>\n      <pagination-com :total="total" :current.sync="current"></pagination-com>\n    </div>\n\n    <script src="https://cdn.bootcss.com/vue/2.6.11/vue.js"><\/script>\n    <script>\n      var template = `<div class="pagination-vue" v-show="show">\n      <div class="page-list">\n        <span class="jump" @click="jumpPage(1)">首页</span>\n        <span class="jump" :class="{disabled: startPage }" @click="prev">上一页</span>\n        <span class="jump" :class="{current: startPage}" @click="jumpPage(1)">1</span>\n        <span class="ellipsis" v-show="sMore">...</span>\n        <span class="jump" v-for="num in mids" :class="{current:current_page==num}" @click="jumpPage(num)">{{num}}</span>\n        <span class="ellipsis" v-show="eMore">...</span>\n        <span class="jump" :class="{current:endPage}" @click="jumpPage(total)">{{total}}</span>\n        <span :class="{disabled: endPage }" class="jump" @click="next">下一页</span>\n        <span class="jump" @click="jumpPage(total)">末页</span>\n        <span class="jump-point">前往：</span>\n        <span class="jump-inp"><input type="number" v-model.number="changePage"></span>\n        <span class="jump go-btn" @click="jumpPage(changePage)">GO</span>\n      </div>\n      <span class="pageNum">第{{current_page||1}}页/共{{total}}页</span>\n      <div>\n        Setting Pages: <input type="text" v-model="total">\n      </div>\n    </div>`;\n\n      var PaginationCom = Vue.extend({\n        data: function() {\n          return {\n            current_page: this.current, //当前页\n            page: 7,\n            changePage: "" //跳转页\n          };\n        },\n        props: {\n          total: {\n            type: Number,\n            require: true\n          },\n          current: {\n            type: Number,\n            default: 1\n          }\n        },\n        watch: {\n          current(val) {\n            this.current_page = val;\n          }\n        },\n        template: template,\n        computed: {\n          // 是否展示\n          show: function() {\n            return this.total && this.total != 1;\n          },\n          startPage: function() {\n            return this.current_page == 1;\n          },\n          endPage: function() {\n            return this.current_page == this.total;\n          },\n          // 显示前...\n          sMore: function() {\n            if (this.total <= this.page) return false;\n            var mids = this.mids;\n            var len = mids.length;\n            return mids[len - 1] > this.page - 1;\n          },\n          // 显示后...\n          eMore: function() {\n            if (this.total < this.page) return false;\n            var mids = this.mids;\n            var len = mids.length;\n            return mids[0] + len < this.total;\n          },\n          // 中间显示的页数\n          mids: function() {\n            var left = this.current_page + 1,\n              right = this.total - 1,\n              mid = this.page - 2,\n              mid_pages = [];\n\n            // 总页数大于当前显示最大页\n            if (this.total > this.page) {\n              if (\n                this.current_page > mid &&\n                this.current_page < this.total - (mid - 1)\n              ) {\n                left = Number(this.current_page) - 3;\n                right = Number(this.current_page) + 1;\n              } else {\n                if (this.current_page <= mid) {\n                  left = 2;\n                  right = this.page - 1;\n                } else {\n                  right = this.total - 1;\n                  left = this.total - this.page + 2;\n                }\n              }\n            } else {\n              right = this.total - 1;\n              left = 2;\n            }\n            while (left <= right) {\n              mid_pages.push(left);\n              left++;\n            }\n            return mid_pages;\n          }\n        },\n        methods: {\n          prev: function() {\n            this.current_page--;\n            this.$emit("update:current", this.current_page);\n          },\n          next: function() {\n            this.current_page++;\n            this.$emit("update:current", this.current_page);\n          },\n          jumpPage: function(current) {\n            if (current <= this.total && current > 0) {\n              this.current_page = current;\n              this.$emit("update:current", current);\n            }\n          }\n        }\n      });\n\n      Vue.component("vue-pagination2", {\n        data: function() {\n          return {\n            current_page: 1, //当前页\n            total: 8, //总页数\n            page: 7,\n            changePage: "" //跳转页\n          };\n        },\n        template: template,\n        computed: {\n          // 是否展示\n          show: function() {\n            return this.total && this.total != 1;\n          },\n          startPage: function() {\n            return this.current_page == 1;\n          },\n          endPage: function() {\n            return this.current_page == this.total;\n          },\n          // 显示前...\n          sMore: function() {\n            if (this.total <= this.page) return false;\n            var mids = this.mids;\n            var len = mids.length;\n            return mids[len - 1] > this.page - 1;\n          },\n          // 显示后...\n          eMore: function() {\n            if (this.total < this.page) return false;\n            var mids = this.mids;\n            var len = mids.length;\n            return mids[0] + len < this.total;\n          },\n          // 中间显示的页数\n          mids: function() {\n            var left = this.current_page + 1,\n              right = this.total - 1,\n              mid = this.page - 2,\n              mid_pages = [];\n\n            // 总页数大于当前显示最大页\n            if (this.total > this.page) {\n              if (\n                this.current_page > mid &&\n                this.current_page < this.total - (mid - 1)\n              ) {\n                left = Number(this.current_page) - 2;\n                right = Number(this.current_page) + 2;\n              } else {\n                if (this.current_page <= mid) {\n                  left = 2;\n                  right = this.page - 1;\n                } else {\n                  right = this.total - 1;\n                  left = this.total - this.page + 2;\n                }\n              }\n            } else {\n              right = this.total - 1;\n              left = 2;\n            }\n            while (left <= right) {\n              mid_pages.push(left);\n              left++;\n            }\n            return mid_pages;\n          }\n        },\n        methods: {\n          prev: function() {\n            this.current_page--;\n            this.$emit("update:current", this.current_page);\n          },\n          next: function() {\n            this.current_page++;\n            this.$emit("update:current", this.current_page);\n          },\n          jumpPage: function(current) {\n            if (current <= this.total && current > 0) {\n              this.current_page = current;\n              this.$emit("update:page", current);\n            }\n          }\n        }\n      });\n\n      new Vue({\n        el: "#app",\n        data: {\n          msg: "Hello",\n          total: 30,\n          current: 3\n        },\n        components: {\n          "pagination-com": PaginationCom\n        },\n        methods: {\n          handleCurrentPage: function(current) {\n            console.log("current page", current);\n          }\n        },\n        watch: {\n          current: function(val) {\n            console.log(val);\n          }\n        },\n        mounted() {\n          console.log("mounted");\n          this.current = 6;\n        }\n      });\n    <\/script>\n  </body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n\n\n\n# i18n\n\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <meta http-equiv="X-UA-Compatible" content="ie=edge" />\n    <title>vue i18n</title>\n  </head>\n  <body>\n    <script src="https://unpkg.com/vue/dist/vue.js"><\/script>\n    <script src="https://unpkg.com/vue-i18n/dist/vue-i18n.js"><\/script>\n\n    <div id="app">\n      <select name="" v-model="lang">\n        <option value="cn">中文</option>\n        <option value="en">英文</option>\n        <option value="ja">日文</option>\n      </select>\n\n      <p>{{ lang }}</p>\n\n      <p>{{ $t("message.hello") }}</p>\n    </div>\n    <script>\n      const messages = {\n        en: {\n          message: {\n            hello: "hello world"\n          }\n        },\n        ja: {\n          message: {\n            hello: "こんにちは、世界"\n          }\n        },\n        cn: {\n          message: {\n            hello: "你好"\n          }\n        }\n      };\n\n      // 通过选项创建 VueI18n 实例\n      const i18n = new VueI18n({\n        locale: "en", // 设置地区\n        messages // 设置地区信息\n      });\n\n      // console.log(i18n.locale = \'ja\');\n\n      // 通过 `i18n` 选项创建 Vue 实例\n      const vm = new Vue({\n        data: {\n          lang: "en"\n        },\n        i18n,\n        watch: {\n          lang(val) {\n            this.$i18n.locale = val;\n          }\n        }\n      }).$mount("#app");\n    <\/script>\n  </body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n\n\n\n# alert\n\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Vue Alert</title>\n    <style>\n      .shadow {\n        background-color: rgba(0, 0, 0, 0.5);\n        display: table;\n        height: 100%;\n        left: 0;\n        position: fixed;\n        top: 0;\n        transition: opacity 0.3s ease;\n        width: 100%;\n        z-index: 50;\n      }\n\n      .modal {\n        display: table-cell;\n        vertical-align: middle;\n        overflow-x: hidden;\n        position: fixed;\n        background-color: white;\n        box-shadow: rgba(0, 0, 0, 0.33) 0px 2px 8px;\n        border-radius: 5px;\n        outline: 0px;\n        overflow: hidden;\n        transition: all 0.3s ease;\n        width: 600px;\n        height: 400px;\n        top: 50%;\n        left: 50%;\n        margin-top: -200px;\n        margin-left: -300px;\n      }\n\n      .header {\n        align-items: center;\n        background-color: #62a39e;\n        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.16);\n        color: #fff;\n        font-weight: bold;\n        display: -ms-flexbox;\n        display: flex;\n        height: 3.5rem;\n        padding: 0 1.5rem;\n        position: relative;\n        z-index: 1;\n      }\n\n      .body {\n        align-items: center;\n        padding: 1.5rem;\n      }\n\n      .footer {\n        justify-content: flex-end;\n        padding: 1.5rem;\n        position: absolute;\n        bottom: 0;\n        width: 100%;\n        float: right;\n      }\n\n      .item {\n        color: white;\n        text-align: center;\n        border-radius: 5px;\n        padding: 10px;\n        cursor: pointer;\n        display: inline-block;\n      }\n\n      .info {\n        background-color: #2196f3;\n      }\n\n      .success {\n        background-color: #62a39e;\n      }\n\n      .red {\n        background-color: #e95358;\n      }\n\n      .smSize {\n        height: 200px;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id="app">\n      <h1>App</h1>\n      <button @click="display">Click</button>\n      <button @click="other">Click other</button>\n      <alert-modal ref="chat-modal"></alert-modal>\n    </div>\n\n    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"><\/script>\n    <script>\n      var template = `\n      <div class="shadow" v-show="showModal">\n        <div class="modal" :class="{\'smSize\': otherText.small || small}">\n            <div class="header">{{ otherText.title || title}}</div>\n            <div class="body">\n                <slot></slot>\n            </div>\n            <div class="footer">\n                <div class="item success" ref="sure" v-show="otherText.sureText || sureText">{{ otherText.sureText || sureText }}</div>\n                <div class="item red" ref="cancel" v-show="otherText.cancelText || cancelText">{{ otherText.cancelText || cancelText }}</div>\n            </div>\n        </div>\n      </div>\n      `;\n\n      var vm = {\n        template: template,\n        data() {\n          return {\n            otherText: {\n              sureText: "确认",\n              cancelText: "取消",\n              title: "标题",\n              small: true\n            },\n            showModal: false\n          };\n        },\n        methods: {\n          openModal(otherText) {\n            this.otherText = { ...this.otherText, ...otherText };\n            this.showModal = true;\n            var pms = new Promise((resolve, reject) => {\n              this.$refs["sure"].addEventListener("click", () => {\n                this.showModal = false;\n                resolve("点击了确定");\n              });\n              this.$refs["cancel"].addEventListener("click", () => {\n                this.showModal = false;\n                reject("点击了取消");\n              });\n            });\n            return pms;\n          }\n        }\n      };\n\n      var tpl = `\n        <div class="shadow">\n          <div class="modal">\n              <div class="header">{{ title }}</div>\n              <div class="body">\n                  {{content}}\n              </div>\n              <div class="footer">\n                  <div class="item success" @click="handleConfirm">{{ sureText }}</div>\n                  <div class="item red" @click="handleCancel">{{ cancelText }}</div>\n              </div>\n          </div>\n        </div>\n        `;\n\n      var Toast = Vue.extend({\n        template: tpl,\n        data() {\n          return {\n            title: "标题",\n            content: "",\n            sureText: "确认",\n            cancelText: "取消"\n          };\n        },\n        methods: {\n          handleConfirm() {\n            this.remove();\n            this.confirm && this.confirm();\n          },\n          handleCancel() {\n            this.remove();\n            this.cancel && this.cancel();\n          },\n          remove() {\n            var doc = document.body;\n            doc.removeChild(this.$el);\n          }\n        }\n      });\n\n      var showToast = function(options) {\n        options = Object.assign({}, options);\n        const instance = new Toast({\n          data: options\n        });\n        let doc = document.body;\n        instance.$mount();\n        doc.appendChild(instance.$el);\n        return instance;\n      };\n\n      Vue.prototype.$toast = showToast;\n\n      new Vue({\n        el: "#app",\n        components: {\n          "alert-modal": vm\n        },\n        methods: {\n          display() {\n            this.$refs["chat-modal"]\n              .openModal({\n                title: "弹窗标题",\n                sureText: "确认",\n                cancelText: "取消"\n              })\n              .then(\n                res => {\n                  //点击确认的回调\n                  console.log("确认", res);\n                },\n                res => {\n                  //点击取消的回调\n                  console.log("取消 ", res);\n                }\n              );\n          },\n          other() {\n            this.$toast({\n              title: "弹窗标题",\n              content: "123131"\n            });\n          }\n        }\n      });\n    <\/script>\n  </body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n',normalizedContent:'# vue2.x自定义element-ui表格\n\n * custom-table.vue\n\n<template>\n  <el-table\n    :data="data"\n    v-bind="$attrs"\n    v-on="$listeners"\n  >\n    <template v-for="(column, index) of columns">\n      \x3c!-- render --\x3e\n      <el-table-column\n        v-if="column.render"\n        :key="index"\n        v-bind="column"\n      >\n        <template slot-scope="scope">\n          <extend\n            :render="column.render"\n            :row="scope"\n          />\n        </template>\n      </el-table-column>\n      \x3c!-- no render --\x3e\n      <el-table-column\n        v-else\n        :key="index"\n        v-bind="column"\n      />\n    </template>\n  </el-table>\n</template>\n<script>\nimport extend from \'./render\'\nexport default {\n  components: { extend },\n  props: {\n    data: {\n      type: array,\n      required: true\n    },\n    columns: {\n      type: array,\n      required: true\n    }\n  }\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n * render.js\n\nexport default {\n  functional: true,\n  props: {\n    row: {\n      type: object\n    },\n    render: {\n      type: function\n    }\n  },\n  render (h, ctx) {\n    return ctx.props.render(h, ctx.props.row)\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# pagination\n\n<!doctype html>\n<html lang="en">\n  <head>\n    <meta http-equiv="content-type" content="text/html; charset=utf-8" />\n\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <meta http-equiv="x-ua-compatible" content="ie=edge" />\n    <title>vue分页组件</title>\n    <style>\n      .pagination-vue .page-list {\n        display: inline-block;\n        height: 40px;\n        line-height: 40px;\n        -webkit-touch-callout: none;\n        -webkit-user-select: none;\n        -khtml-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n\n      .pagination-vue .page-list span {\n        font-size: 14px;\n        color: #333333;\n      }\n\n      .pagination-vue .page-list .jump {\n        padding: 2px 6px;\n        text-align: center;\n        cursor: pointer;\n        margin-left: 5px;\n        background: rgba(204, 204, 204, 0.3);\n        border-radius: 6px;\n      }\n\n      .pagination-vue .page-list .jump:hover {\n        cursor: pointer;\n        color: #fff;\n        background: #ff1e1b;\n        border-radius: 6px;\n      }\n\n      .pagination-vue .page-list .current {\n        cursor: default;\n        color: #fff;\n        background: #ff1e1b;\n        border-radius: 6px;\n      }\n\n      .pagination-vue .page-list .jump.disabled {\n        pointer-events: none;\n        color: #999999;\n      }\n\n      .pagination-vue .page-list .go-btn {\n        font-size: 14px;\n      }\n\n      .pagination-vue .page-list .jump-inp input {\n        width: 44px;\n        height: 20px;\n        font-size: 13px;\n        border: 1px solid #ccc;\n        -webkit-border-radius: 4px;\n        -moz-border-radius: 4px;\n        border-radius: 4px;\n        text-align: center;\n        outline: none;\n      }\n\n      .pagination-vue .page-list .ellipsis {\n        padding: 0px 8px;\n        text-align: center;\n        cursor: pointer;\n        margin-left: 5px;\n        background: rgba(204, 204, 204, 0);\n        border-radius: 6px;\n      }\n\n      .pagination-vue .page-list .jump-point {\n        margin-left: 10px;\n      }\n\n      .pagination-vue .pagenum {\n        display: inline-block;\n        height: 28px;\n        font-size: 16px;\n        font-family: pingfangsc-regular, pingfang sc;\n        font-weight: 400;\n        color: #666666;\n        line-height: 28px;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id="app">\n      <h1>{{msg}}</h1>\n      <vue-pagination2></vue-pagination2>\n      <pagination-com\n        :total="total"\n        :current="current"\n        @update:current="handlecurrentpage"\n      ></pagination-com>\n      <pagination-com :total="total" :current.sync="current"></pagination-com>\n    </div>\n\n    <script src="https://cdn.bootcss.com/vue/2.6.11/vue.js"><\/script>\n    <script>\n      var template = `<div class="pagination-vue" v-show="show">\n      <div class="page-list">\n        <span class="jump" @click="jumppage(1)">首页</span>\n        <span class="jump" :class="{disabled: startpage }" @click="prev">上一页</span>\n        <span class="jump" :class="{current: startpage}" @click="jumppage(1)">1</span>\n        <span class="ellipsis" v-show="smore">...</span>\n        <span class="jump" v-for="num in mids" :class="{current:current_page==num}" @click="jumppage(num)">{{num}}</span>\n        <span class="ellipsis" v-show="emore">...</span>\n        <span class="jump" :class="{current:endpage}" @click="jumppage(total)">{{total}}</span>\n        <span :class="{disabled: endpage }" class="jump" @click="next">下一页</span>\n        <span class="jump" @click="jumppage(total)">末页</span>\n        <span class="jump-point">前往：</span>\n        <span class="jump-inp"><input type="number" v-model.number="changepage"></span>\n        <span class="jump go-btn" @click="jumppage(changepage)">go</span>\n      </div>\n      <span class="pagenum">第{{current_page||1}}页/共{{total}}页</span>\n      <div>\n        setting pages: <input type="text" v-model="total">\n      </div>\n    </div>`;\n\n      var paginationcom = vue.extend({\n        data: function() {\n          return {\n            current_page: this.current, //当前页\n            page: 7,\n            changepage: "" //跳转页\n          };\n        },\n        props: {\n          total: {\n            type: number,\n            require: true\n          },\n          current: {\n            type: number,\n            default: 1\n          }\n        },\n        watch: {\n          current(val) {\n            this.current_page = val;\n          }\n        },\n        template: template,\n        computed: {\n          // 是否展示\n          show: function() {\n            return this.total && this.total != 1;\n          },\n          startpage: function() {\n            return this.current_page == 1;\n          },\n          endpage: function() {\n            return this.current_page == this.total;\n          },\n          // 显示前...\n          smore: function() {\n            if (this.total <= this.page) return false;\n            var mids = this.mids;\n            var len = mids.length;\n            return mids[len - 1] > this.page - 1;\n          },\n          // 显示后...\n          emore: function() {\n            if (this.total < this.page) return false;\n            var mids = this.mids;\n            var len = mids.length;\n            return mids[0] + len < this.total;\n          },\n          // 中间显示的页数\n          mids: function() {\n            var left = this.current_page + 1,\n              right = this.total - 1,\n              mid = this.page - 2,\n              mid_pages = [];\n\n            // 总页数大于当前显示最大页\n            if (this.total > this.page) {\n              if (\n                this.current_page > mid &&\n                this.current_page < this.total - (mid - 1)\n              ) {\n                left = number(this.current_page) - 3;\n                right = number(this.current_page) + 1;\n              } else {\n                if (this.current_page <= mid) {\n                  left = 2;\n                  right = this.page - 1;\n                } else {\n                  right = this.total - 1;\n                  left = this.total - this.page + 2;\n                }\n              }\n            } else {\n              right = this.total - 1;\n              left = 2;\n            }\n            while (left <= right) {\n              mid_pages.push(left);\n              left++;\n            }\n            return mid_pages;\n          }\n        },\n        methods: {\n          prev: function() {\n            this.current_page--;\n            this.$emit("update:current", this.current_page);\n          },\n          next: function() {\n            this.current_page++;\n            this.$emit("update:current", this.current_page);\n          },\n          jumppage: function(current) {\n            if (current <= this.total && current > 0) {\n              this.current_page = current;\n              this.$emit("update:current", current);\n            }\n          }\n        }\n      });\n\n      vue.component("vue-pagination2", {\n        data: function() {\n          return {\n            current_page: 1, //当前页\n            total: 8, //总页数\n            page: 7,\n            changepage: "" //跳转页\n          };\n        },\n        template: template,\n        computed: {\n          // 是否展示\n          show: function() {\n            return this.total && this.total != 1;\n          },\n          startpage: function() {\n            return this.current_page == 1;\n          },\n          endpage: function() {\n            return this.current_page == this.total;\n          },\n          // 显示前...\n          smore: function() {\n            if (this.total <= this.page) return false;\n            var mids = this.mids;\n            var len = mids.length;\n            return mids[len - 1] > this.page - 1;\n          },\n          // 显示后...\n          emore: function() {\n            if (this.total < this.page) return false;\n            var mids = this.mids;\n            var len = mids.length;\n            return mids[0] + len < this.total;\n          },\n          // 中间显示的页数\n          mids: function() {\n            var left = this.current_page + 1,\n              right = this.total - 1,\n              mid = this.page - 2,\n              mid_pages = [];\n\n            // 总页数大于当前显示最大页\n            if (this.total > this.page) {\n              if (\n                this.current_page > mid &&\n                this.current_page < this.total - (mid - 1)\n              ) {\n                left = number(this.current_page) - 2;\n                right = number(this.current_page) + 2;\n              } else {\n                if (this.current_page <= mid) {\n                  left = 2;\n                  right = this.page - 1;\n                } else {\n                  right = this.total - 1;\n                  left = this.total - this.page + 2;\n                }\n              }\n            } else {\n              right = this.total - 1;\n              left = 2;\n            }\n            while (left <= right) {\n              mid_pages.push(left);\n              left++;\n            }\n            return mid_pages;\n          }\n        },\n        methods: {\n          prev: function() {\n            this.current_page--;\n            this.$emit("update:current", this.current_page);\n          },\n          next: function() {\n            this.current_page++;\n            this.$emit("update:current", this.current_page);\n          },\n          jumppage: function(current) {\n            if (current <= this.total && current > 0) {\n              this.current_page = current;\n              this.$emit("update:page", current);\n            }\n          }\n        }\n      });\n\n      new vue({\n        el: "#app",\n        data: {\n          msg: "hello",\n          total: 30,\n          current: 3\n        },\n        components: {\n          "pagination-com": paginationcom\n        },\n        methods: {\n          handlecurrentpage: function(current) {\n            console.log("current page", current);\n          }\n        },\n        watch: {\n          current: function(val) {\n            console.log(val);\n          }\n        },\n        mounted() {\n          console.log("mounted");\n          this.current = 6;\n        }\n      });\n    <\/script>\n  </body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n\n\n\n# i18n\n\n<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <meta http-equiv="x-ua-compatible" content="ie=edge" />\n    <title>vue i18n</title>\n  </head>\n  <body>\n    <script src="https://unpkg.com/vue/dist/vue.js"><\/script>\n    <script src="https://unpkg.com/vue-i18n/dist/vue-i18n.js"><\/script>\n\n    <div id="app">\n      <select name="" v-model="lang">\n        <option value="cn">中文</option>\n        <option value="en">英文</option>\n        <option value="ja">日文</option>\n      </select>\n\n      <p>{{ lang }}</p>\n\n      <p>{{ $t("message.hello") }}</p>\n    </div>\n    <script>\n      const messages = {\n        en: {\n          message: {\n            hello: "hello world"\n          }\n        },\n        ja: {\n          message: {\n            hello: "こんにちは、世界"\n          }\n        },\n        cn: {\n          message: {\n            hello: "你好"\n          }\n        }\n      };\n\n      // 通过选项创建 vuei18n 实例\n      const i18n = new vuei18n({\n        locale: "en", // 设置地区\n        messages // 设置地区信息\n      });\n\n      // console.log(i18n.locale = \'ja\');\n\n      // 通过 `i18n` 选项创建 vue 实例\n      const vm = new vue({\n        data: {\n          lang: "en"\n        },\n        i18n,\n        watch: {\n          lang(val) {\n            this.$i18n.locale = val;\n          }\n        }\n      }).$mount("#app");\n    <\/script>\n  </body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n\n\n\n# alert\n\n<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>vue alert</title>\n    <style>\n      .shadow {\n        background-color: rgba(0, 0, 0, 0.5);\n        display: table;\n        height: 100%;\n        left: 0;\n        position: fixed;\n        top: 0;\n        transition: opacity 0.3s ease;\n        width: 100%;\n        z-index: 50;\n      }\n\n      .modal {\n        display: table-cell;\n        vertical-align: middle;\n        overflow-x: hidden;\n        position: fixed;\n        background-color: white;\n        box-shadow: rgba(0, 0, 0, 0.33) 0px 2px 8px;\n        border-radius: 5px;\n        outline: 0px;\n        overflow: hidden;\n        transition: all 0.3s ease;\n        width: 600px;\n        height: 400px;\n        top: 50%;\n        left: 50%;\n        margin-top: -200px;\n        margin-left: -300px;\n      }\n\n      .header {\n        align-items: center;\n        background-color: #62a39e;\n        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.16);\n        color: #fff;\n        font-weight: bold;\n        display: -ms-flexbox;\n        display: flex;\n        height: 3.5rem;\n        padding: 0 1.5rem;\n        position: relative;\n        z-index: 1;\n      }\n\n      .body {\n        align-items: center;\n        padding: 1.5rem;\n      }\n\n      .footer {\n        justify-content: flex-end;\n        padding: 1.5rem;\n        position: absolute;\n        bottom: 0;\n        width: 100%;\n        float: right;\n      }\n\n      .item {\n        color: white;\n        text-align: center;\n        border-radius: 5px;\n        padding: 10px;\n        cursor: pointer;\n        display: inline-block;\n      }\n\n      .info {\n        background-color: #2196f3;\n      }\n\n      .success {\n        background-color: #62a39e;\n      }\n\n      .red {\n        background-color: #e95358;\n      }\n\n      .smsize {\n        height: 200px;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id="app">\n      <h1>app</h1>\n      <button @click="display">click</button>\n      <button @click="other">click other</button>\n      <alert-modal ref="chat-modal"></alert-modal>\n    </div>\n\n    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"><\/script>\n    <script>\n      var template = `\n      <div class="shadow" v-show="showmodal">\n        <div class="modal" :class="{\'smsize\': othertext.small || small}">\n            <div class="header">{{ othertext.title || title}}</div>\n            <div class="body">\n                <slot></slot>\n            </div>\n            <div class="footer">\n                <div class="item success" ref="sure" v-show="othertext.suretext || suretext">{{ othertext.suretext || suretext }}</div>\n                <div class="item red" ref="cancel" v-show="othertext.canceltext || canceltext">{{ othertext.canceltext || canceltext }}</div>\n            </div>\n        </div>\n      </div>\n      `;\n\n      var vm = {\n        template: template,\n        data() {\n          return {\n            othertext: {\n              suretext: "确认",\n              canceltext: "取消",\n              title: "标题",\n              small: true\n            },\n            showmodal: false\n          };\n        },\n        methods: {\n          openmodal(othertext) {\n            this.othertext = { ...this.othertext, ...othertext };\n            this.showmodal = true;\n            var pms = new promise((resolve, reject) => {\n              this.$refs["sure"].addeventlistener("click", () => {\n                this.showmodal = false;\n                resolve("点击了确定");\n              });\n              this.$refs["cancel"].addeventlistener("click", () => {\n                this.showmodal = false;\n                reject("点击了取消");\n              });\n            });\n            return pms;\n          }\n        }\n      };\n\n      var tpl = `\n        <div class="shadow">\n          <div class="modal">\n              <div class="header">{{ title }}</div>\n              <div class="body">\n                  {{content}}\n              </div>\n              <div class="footer">\n                  <div class="item success" @click="handleconfirm">{{ suretext }}</div>\n                  <div class="item red" @click="handlecancel">{{ canceltext }}</div>\n              </div>\n          </div>\n        </div>\n        `;\n\n      var toast = vue.extend({\n        template: tpl,\n        data() {\n          return {\n            title: "标题",\n            content: "",\n            suretext: "确认",\n            canceltext: "取消"\n          };\n        },\n        methods: {\n          handleconfirm() {\n            this.remove();\n            this.confirm && this.confirm();\n          },\n          handlecancel() {\n            this.remove();\n            this.cancel && this.cancel();\n          },\n          remove() {\n            var doc = document.body;\n            doc.removechild(this.$el);\n          }\n        }\n      });\n\n      var showtoast = function(options) {\n        options = object.assign({}, options);\n        const instance = new toast({\n          data: options\n        });\n        let doc = document.body;\n        instance.$mount();\n        doc.appendchild(instance.$el);\n        return instance;\n      };\n\n      vue.prototype.$toast = showtoast;\n\n      new vue({\n        el: "#app",\n        components: {\n          "alert-modal": vm\n        },\n        methods: {\n          display() {\n            this.$refs["chat-modal"]\n              .openmodal({\n                title: "弹窗标题",\n                suretext: "确认",\n                canceltext: "取消"\n              })\n              .then(\n                res => {\n                  //点击确认的回调\n                  console.log("确认", res);\n                },\n                res => {\n                  //点击取消的回调\n                  console.log("取消 ", res);\n                }\n              );\n          },\n          other() {\n            this.$toast({\n              title: "弹窗标题",\n              content: "123131"\n            });\n          }\n        }\n      });\n    <\/script>\n  </body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647947183e3,createdTime:1647947183e3},{title:"vue2插件",frontmatter:{title:"vue2插件",date:"2020-07-21T00:00:00.000Z",sidebar:"auto",tags:["vue"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/vue-plugins.html",relativePath:"frontend/library/vue-plugins.md",key:"v-e926e472",path:"/frontend/library/vue-plugins.html",headers:[{level:2,title:"vue2自动注册全局组件",slug:"vue2自动注册全局组件",normalizedTitle:"vue2自动注册全局组件",charIndex:2},{level:2,title:"自动注册views下的路由",slug:"自动注册views下的路由",normalizedTitle:"自动注册views下的路由",charIndex:1379}],headersStr:"vue2自动注册全局组件 自动注册views下的路由",content:"# vue2自动注册全局组件\n\nconst path = require(\"path\");\n/**\n * 首字母大写\n * @param str 字符串\n * @example heheHaha\n * @return {string} HeheHaha\n */\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n/**\n * 对符合'xx/xx.vue'组件格式的组件取组件名\n * @param str fileName\n * @example abc/bcd/def/basicTable.vue\n * @return {string} BasicTable\n */\nfunction validateFileName(str) {\n  return (\n    /^\\S+\\.vue$/.test(str) &&\n    str.replace(/^\\S+\\/(\\w+)\\.vue$/, (rs, $1) => capitalizeFirstLetter($1))\n  );\n}\n\nconst requireComponent = require.context(\"../../components\", true, /\\.vue$/);\n// 找到组件文件夹下以.vue命名的文件，如果文件名为index，那么取组件中的name作为注册的组件名\nrequireComponent.keys().forEach(filePath => {\n  // 解析文件路径： 返回文件内容\n  const componentConfig = requireComponent(filePath);\n  const fileName = validateFileName(filePath);\n  const _filePath = path.join(__dirname, \"../../components\", filePath);\n  if (!componentConfig.default.name) {\n    console.error(\n      `Vue Components path: (${_filePath}) should have a component name!!!`\n    );\n  }\n  const componentName = componentConfig.default.name\n    ? componentConfig.default.name\n    : fileName + \"Com\";\n\n  console.log({ componentName });\n  Vue.component(componentName, componentConfig.default || componentConfig);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 自动注册views下的路由\n\n * router.js\n\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport routes from './routes'\n\nVue.use(VueRouter)\n\nconst router = new VueRouter({\n  mode: 'history',\n  routes\n})\n\nexport default router\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * routes.js\n\n// 利用 webpack 读取 views 目录下的 router.js\nconst routerFile = require.context('../', true, /^\\.\\/views\\/[\\w.-]+\\/router.js$/)\n\n// 返回的 routerFile.keys() 是一个路由配置的路径数组列表 ['./views/Page/router.js']\n// 循环递归调用 routerFile 去解析 每一项的路径地址 './views/Page/router.js'\n// 返回 文件内容: Module { default: { path: \"/page\", name: 'xxx', children:[{},...]}, ... }\n\n// 获取返回路由集合\nconst routesConfig = (r => {\n  return r.keys().map(key => r(key).default)\n})(routerFile)\n\n// redirect\nconst redirectConfig = {\n  path: '*',\n  redirect: '/'\n}\n\nconst routes = routesConfig.concat(redirectConfig)\nreturn routes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n",normalizedContent:"# vue2自动注册全局组件\n\nconst path = require(\"path\");\n/**\n * 首字母大写\n * @param str 字符串\n * @example hehehaha\n * @return {string} hehehaha\n */\nfunction capitalizefirstletter(str) {\n  return str.charat(0).touppercase() + str.slice(1);\n}\n/**\n * 对符合'xx/xx.vue'组件格式的组件取组件名\n * @param str filename\n * @example abc/bcd/def/basictable.vue\n * @return {string} basictable\n */\nfunction validatefilename(str) {\n  return (\n    /^\\s+\\.vue$/.test(str) &&\n    str.replace(/^\\s+\\/(\\w+)\\.vue$/, (rs, $1) => capitalizefirstletter($1))\n  );\n}\n\nconst requirecomponent = require.context(\"../../components\", true, /\\.vue$/);\n// 找到组件文件夹下以.vue命名的文件，如果文件名为index，那么取组件中的name作为注册的组件名\nrequirecomponent.keys().foreach(filepath => {\n  // 解析文件路径： 返回文件内容\n  const componentconfig = requirecomponent(filepath);\n  const filename = validatefilename(filepath);\n  const _filepath = path.join(__dirname, \"../../components\", filepath);\n  if (!componentconfig.default.name) {\n    console.error(\n      `vue components path: (${_filepath}) should have a component name!!!`\n    );\n  }\n  const componentname = componentconfig.default.name\n    ? componentconfig.default.name\n    : filename + \"com\";\n\n  console.log({ componentname });\n  vue.component(componentname, componentconfig.default || componentconfig);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 自动注册views下的路由\n\n * router.js\n\nimport vue from 'vue'\nimport vuerouter from 'vue-router'\nimport routes from './routes'\n\nvue.use(vuerouter)\n\nconst router = new vuerouter({\n  mode: 'history',\n  routes\n})\n\nexport default router\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * routes.js\n\n// 利用 webpack 读取 views 目录下的 router.js\nconst routerfile = require.context('../', true, /^\\.\\/views\\/[\\w.-]+\\/router.js$/)\n\n// 返回的 routerfile.keys() 是一个路由配置的路径数组列表 ['./views/page/router.js']\n// 循环递归调用 routerfile 去解析 每一项的路径地址 './views/page/router.js'\n// 返回 文件内容: module { default: { path: \"/page\", name: 'xxx', children:[{},...]}, ... }\n\n// 获取返回路由集合\nconst routesconfig = (r => {\n  return r.keys().map(key => r(key).default)\n})(routerfile)\n\n// redirect\nconst redirectconfig = {\n  path: '*',\n  redirect: '/'\n}\n\nconst routes = routesconfig.concat(redirectconfig)\nreturn routes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n",charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647947183e3,createdTime:1647947183e3},{title:"vue2.x组件通讯方法",frontmatter:{title:"vue2.x组件通讯方法",date:"2020-07-30T00:00:00.000Z",sidebar:"auto",tags:["vue"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/vue-props.html",relativePath:"frontend/library/vue-props.md",key:"v-46d91da7",path:"/frontend/library/vue-props.html",headers:[{level:2,title:"props",slug:"props",normalizedTitle:"props",charIndex:35},{level:2,title:"$emit",slug:"emit",normalizedTitle:"$emit",charIndex:485},{level:2,title:"vuex",slug:"vuex",normalizedTitle:"vuex",charIndex:3175},{level:2,title:"attrs和listeners",slug:"attrs和listeners",normalizedTitle:"attrs和listeners",charIndex:3578},{level:2,title:"provide和inject",slug:"provide和inject",normalizedTitle:"provide和inject",charIndex:4806},{level:2,title:"parent和children",slug:"parent和children",normalizedTitle:"parent和children",charIndex:5786},{level:2,title:"$refs",slug:"refs",normalizedTitle:"$refs",charIndex:6013},{level:2,title:".sync修饰符",slug:"sync修饰符",normalizedTitle:".sync修饰符",charIndex:6150},{level:2,title:"v-slot",slug:"v-slot",normalizedTitle:"v-slot",charIndex:6390},{level:2,title:"EventBus",slug:"eventbus",normalizedTitle:"eventbus",charIndex:7331},{level:2,title:"broadcast和dispatch",slug:"broadcast和dispatch",normalizedTitle:"broadcast和dispatch",charIndex:7584},{level:2,title:"路由传参",slug:"路由传参",normalizedTitle:"路由传参",charIndex:8310},{level:2,title:"Vue.observable",slug:"vue-observable",normalizedTitle:"vue.observable",charIndex:8988},{level:2,title:"$root",slug:"root",normalizedTitle:"$root",charIndex:9752},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:9967}],headersStr:"props $emit vuex attrs和listeners provide和inject parent和children $refs .sync修饰符 v-slot EventBus broadcast和dispatch 路由传参 Vue.observable $root 其他",content:'原文地址: Vue 开发必须知道的 36 个技巧【近1W字】\n\n\n# props\n\n// 数组:不建议使用\nprops:[]\n\n// 对象\nprops:{\n inpVal:{\n  type: Number, //传入值限定类型\n  // type 值可为String,Number,Boolean,Array,Object,Date,Function,Symbol\n  // type 还可以是一个自定义的构造函数，并且通过 instanceof 来进行检查确认\n  required: true, //是否必传\n  default:200,  //默认值,对象或数组默认值必须从一个工厂函数获取如 default:()=>[]\n  validator:(value) {\n    // 这个值必须匹配下列字符串中的一个\n    return [\'success\', \'warning\', \'danger\'].indexOf(value) !== -1\n  }\n }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# $emit\n\n// 父组件\n<home @title="setTitle">\n\n// 子组件\nthis.$emit(\'title\',{title:\'这是title\'})\n\n\n1\n2\n3\n4\n5\n\n * v-model\n\n //把input输入框的value属性值和vue实例的message属性进行绑定，同时监听输入事件。\n <input v-bind:value="message" v-on:input="message = $event.target.value" />\n\n// v-model 是 @input 与 value 的语法糖\n\n\n1\n2\n3\n4\n\n * v-bind: vue2.x v-bind\n\n\x3c!-- 绑定一个 attribute --\x3e\n<img v-bind:src="imageSrc">\n\n\x3c!-- 动态 attribute 名 (2.6.0+) --\x3e\n<button v-bind:[key]="value"></button>\n\n\x3c!-- 缩写 --\x3e\n<img :src="imageSrc">\n\n\x3c!-- 动态 attribute 名缩写 (2.6.0+) --\x3e\n<button :[key]="value"></button>\n\n\x3c!-- 内联字符串拼接 --\x3e\n<img :src="\'/path/to/images/\' + fileName">\n\n\x3c!-- class 绑定 --\x3e\n<div :class="{ red: isRed }"></div>\n<div :class="[classA, classB]"></div>\n<div :class="[classA, { classB: isB, classC: isC }]">\n\n\x3c!-- style 绑定 --\x3e\n<div :style="{ fontSize: size + \'px\' }"></div>\n<div :style="[styleObjectA, styleObjectB]"></div>\n\n\x3c!-- 绑定一个全是 attribute 的对象 --\x3e\n<div v-bind="{ id: someProp, \'other-attr\': otherProp }"></div>\n\n\x3c!-- 通过 prop 修饰符绑定 DOM attribute --\x3e\n<div v-bind:text-content.prop="text"></div>\n\n\x3c!-- prop 绑定。“prop”必须在 my-component 中声明。--\x3e\n<my-component :prop="someThing"></my-component>\n\n\x3c!-- 通过 $props 将父组件的 props 一起传给子组件 --\x3e\n<child-component v-bind="$props"></child-component>\n\n\x3c!-- XLink --\x3e\n<svg><a :xlink:special="foo"></a></svg>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n * v-on: vue2.x v-on\n\n\x3c!-- 方法处理器 --\x3e\n<button v-on:click="doThis"></button>\n\n\x3c!-- 动态事件 (2.6.0+) --\x3e\n<button v-on:[event]="doThis"></button>\n\n\x3c!-- 内联语句 --\x3e\n<button v-on:click="doThat(\'hello\', $event)"></button>\n\n\x3c!-- 缩写 --\x3e\n<button @click="doThis"></button>\n\n\x3c!-- 动态事件缩写 (2.6.0+) --\x3e\n<button @[event]="doThis"></button>\n\n\x3c!-- 停止冒泡 --\x3e\n<button @click.stop="doThis"></button>\n\n\x3c!-- 阻止默认行为 --\x3e\n<button @click.prevent="doThis"></button>\n\n\x3c!-- 阻止默认行为，没有表达式 --\x3e\n<form @submit.prevent></form>\n\n\x3c!--  串联修饰符 --\x3e\n<button @click.stop.prevent="doThis"></button>\n\n\x3c!-- 键修饰符，键别名 --\x3e\n<input @keyup.enter="onEnter">\n\n\x3c!-- 键修饰符，键代码 --\x3e\n<input @keyup.13="onEnter">\n\n\x3c!-- 点击回调只会触发一次 --\x3e\n<button v-on:click.once="doThis"></button>\n\n\x3c!-- 对象语法 (2.4.0+) --\x3e\n<button v-on="{ mousedown: doThis, mouseup: doThat }"></button>\n\n\x3c!-- 监听自定义事件 --\x3e\n<my-component @my-event="handleThis"></my-component>\n\n\x3c!-- 内联语句 --\x3e\n<my-component @my-event="handleThis(123, $event)"></my-component>\n\n\x3c!-- 组件中的原生事件 --\x3e\n<my-component @click.native="onClick"></my-component>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n * v-cloak\n\n\x3c!-- css --\x3e\ndiv[v-cloak] {\n  display: none;\n}\n\n\x3c!-- body --\x3e\n<div id="app" v-cloak>\n  {{ message }}\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# vuex\n\nstate: // 定义存贮数据的仓库 ,可通过this.$store.state 或mapState访问\n\ngetter: // 获取 store 值,可认为是 store 的计算属性,可通过this.$store.getter 或 mapGetters访问\n\nmutation: // 同步改变 store 值,为什么会设计成同步,因为mutation是直接改变 store 值,\n          // vue 对操作进行了记录,如果是异步无法追踪改变.可通过mapMutations调用\n\naction: // 异步调用函数执行mutation,进而改变 store 值,可通过 this.$dispatch或mapActions访问\n\nmodules: // 模块,如果状态过多,可以拆分成模块,最后在入口通过...解构引入\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# attrs和listeners\n\n * attrs获取子传父中未在 props 定义的值\n\n// 父组件\n<home title="这是标题" width="80" height="80" imgUrl="imgUrl"/>\n\n// 子组件\nmounted() {\n  console.log(this.$attrs) //{title: "这是标题", width: "80", height: "80", imgUrl: "imgUrl"}\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 如果子组件定义了 props,打印的值就是剔除定义的属性\n\nprops: {\n  width: {\n    type: String,\n    default: \'\'\n  }\n},\nmounted() {\n  console.log(this.$attrs) //{title: "这是标题", height: "80", imgUrl: "imgUrl"}\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * listeners 传入内部组件\n\n// 父组件\n<home @change="change"/>\n\n// 子组件\nmounted() {\n  console.log(this.$listeners) //即可拿到 change 事件\n}\n\n-----------------------------\n\n// 父组件\n<home v-on="$listeners"/>\n\n// 例如 自定义 element-ui的table组件\n\n<template>\n  <el-table\n    :data="data"\n    v-bind="$attrs"\n    v-on="$listeners"\n  >\n    // ...\n  </el-table>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * inheritAttrs\n\n// 父组件\n<home title="这是标题" width="80" height="80" imgUrl="imgUrl"/>\n\n// 子组件\nmounted() {\n  console.log(this.$attrs)\n  //{title: "这是标题", width: "80", height: "80", imgUrl: "imgUrl"}\n},\n\n// inheritAttrs默认值为true，是将父组件中除了props外的属性添加到子组件的根节点上\n// 说明，即使设置为true，子组件仍然可以通过$attr获取到props意外的属性\n// 将inheritAttrs:false 后,属性就不会显示在根节点上了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# provide和inject\n\n//父组件:\nprovide: { //provide 是一个对象,提供一个属性或方法\n  foo: \'这是 foo\',\n  fooMethod:()=>{\n    console.log(\'父组件 fooMethod 被调用\')\n  }\n},\n\n// 子或者孙子组件\ninject: [\'foo\',\'fooMethod\'], //数组或者对象,注入到子组件\nmounted() {\n  this.fooMethod()\n  console.log(this.foo)\n}\n//在父组件下面所有的子组件都可以利用inject\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * provide 和 inject 绑定并不是可响应的\n\n//父组件:\nprovide: {\n  foo: \'这是 foo\'\n},\nmounted(){\n  this.foo=\'这是新的 foo\'\n}\n\n// 子或者孙子组件\ninject: [\'foo\'],\nmounted() {\n  console.log(this.foo) //子组件打印的还是\'这是 foo\'\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * provide和inject响应方法\n\n// 父组件\nprovide() {\n  return {\n    staticValue: this.staticValue, // 直接返回值，不可响应\n    staticObject: this.staticObject, // 返回一个对象，可响应\n    getReactiveValue: () => this.staticValue // 返回一个对象的函数，可响应\n  }\n},\n\n// 子组件\ninject: ["staticValue", "getReactiveValue", "staticObject"],\ncomputed: {\n  reactiveValue() {\n    return this.getReactiveValue(); // 返回注入的对象函数，通过计算属性来监听值的变化\n  },\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# parent和children\n\n//父组件\nmounted(){\n  console.log(this.$children)\n  //可以拿到 一级子组件的属性和方法\n  //所以就可以直接改变 data,或者调用 methods 方法\n}\n\n//子组件\nmounted(){\n  console.log(this.$parent)\n  //可以拿到 parent 的属性和方法\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# $refs\n\n// 父组件\n<home ref="home"/>\n\nmounted(){\n  console.log(this.$refs.home)\n  //即可拿到子组件的实例,就可以直接操作 data 和 methods\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# .sync修饰符\n\n// 父组件\n<home :title.sync="title" />\n//编译时会被扩展为\n<home :title="title"  @update:title="val => title = val"/>\n\n// 子组件\n// 所以子组件可以通过$emit 触发 update 方法改变\nmounted(){\n  this.$emit("update:title", \'这是新的title\')\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# v-slot\n\n * 默认\n\n// 父组件\n<todo-list>\n    <template v-slot:default>\n       任意内容\n       <p>我是匿名插槽 </p>\n    </template>\n</todo-list>\n\n// 子组件\n<slot>我是默认值</slot>\n//v-slot:default写上感觉和具名写法比较统一,容易理解,也可以不用写\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 具名插槽\n\n// 父组件\n<todo-list>\n    <template v-slot:todo>\n       任意内容\n       <p>我是具名插槽 </p>\n    </template>\n</todo-list>\n\n//子组件\n<slot name="todo">我是默认值</slot>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * 作用域插槽\n\n// 父组件\n<todo-list>\n <template v-slot:todo="slotProps" >\n   {{slotProps.user.firstName}}\n </template>\n</todo-list>\n//slotProps 可以随意命名\n//slotProps 接取的是子组件标签slot上属性数据的集合所有v-bind:user="user"\n\n// 子组件\n<slot name="todo" :user="user" :test="test">\n    {{ user.lastName }}\n </slot>\ndata() {\n    return {\n      user:{\n        lastName:"Zhang",\n        firstName:"yue"\n      },\n      test:[1,2,3,4]\n    }\n  },\n// {{ user.lastName }}是默认数据  v-slot:todo 当父页面没有(="slotProps")\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# EventBus\n\n// 在 main.js\nVue.prototype.$eventBus=new Vue()\n\n// 传值组件\nthis.$eventBus.$emit(\'eventTarget\',\'这是eventTarget传过来的值\')\n\n// 接收组件\nthis.$eventBus.$on("eventTarget",v=>{\n  console.log(\'eventTarget\',v);//这是eventTarget传过来的值\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# broadcast和dispatch\n\n// 派发事件\nvue.prototype.$dispatch = function(eventName, value) {\n  let parent = this.$parent;\n  while (parent) {\n    parent.$emit(eventName, value);\n    parent = parent.$parent;\n  }\n};\n\n// 广播事件\nVue.prototype.$broadcast = function(eventName, value) {\n  let broadcast = children => {\n    children.forEach(child => {\n      child.$emit(eventName, value);\n      if (child.$children) {\n        broadcast(child.$children);\n      }\n    });\n  };\n  broadcast(this.$children);\n};\n\n/*\ninheritAttrs: false // 绑定的属性不在dom上显示 ：<div name="xxx"></div> 不显示\nv-bind="$attrs"  // 将 $attrs 上所有属性绑定到dom上传递给子组件\nv-on="$listeners" // 表示将方法绑定到dom上传递给子组件\n*/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 路由传参\n\n * 方案一\n\n// 路由定义\n{\n  path: \'/describe/:id\',\n  name: \'Describe\',\n  component: Describe\n}\n// 页面传参\nthis.$router.push({\n  path: `/describe/${id}`,\n})\n// 页面获取\nthis.$route.params.id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 方案二\n\n// 路由定义\n{\n  path: \'/describe\',\n  name: \'Describe\',\n  component: Describe\n}\n// 页面传参\nthis.$router.push({\n  name: \'Describe\',\n  params: {\n    id: id\n  }\n})\n// 页面获取\nthis.$route.params.id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 方案三\n\n// 路由定义\n{\n  path: \'/describe\',\n  name: \'Describe\',\n  component: Describe\n}\n// 页面传参\nthis.$router.push({\n  path: \'/describe\',\n    query: {\n      id: id\n  `}\n)\n// 页面获取\nthis.$route.query.id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# Vue.observable\n\n// store/store.js\nimport Vue from \'vue\'\n\nexport const store = Vue.observable({ count: 0 })\nexport const mutations = {\n  setCount (count) {\n    store.count = count\n  }\n}\n\n//使用\n<template>\n    <div>\n        <label for="bookNum">数 量</label>\n        <button @click="setCount(count+1)">+</button>\n        <span>{{count}}</span>\n        <button @click="setCount(count-1)">-</button>\n    </div>\n</template>\n\n<script>\nimport { store, mutations } from \'../store/store\' // Vue2.6新增API Observable\n\nexport default {\n  name: \'Add\',\n  computed: {\n    count () {\n      return store.count\n    }\n  },\n  methods: {\n    setCount: mutations.setCount\n  }\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# $root\n\n// 父组件\nmounted(){\n  console.log(this.$root) //获取根实例,最后所有组件都是挂载到根实例上\n  console.log(this.$root.$children[0]) //获取根实例的一级子组件\n  console.log(this.$root.$children[0].$children[0]) //获取根实例的二级子组件\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 其他\n\n * window.localStorage的方式\n * 服务端接口',normalizedContent:'原文地址: vue 开发必须知道的 36 个技巧【近1w字】\n\n\n# props\n\n// 数组:不建议使用\nprops:[]\n\n// 对象\nprops:{\n inpval:{\n  type: number, //传入值限定类型\n  // type 值可为string,number,boolean,array,object,date,function,symbol\n  // type 还可以是一个自定义的构造函数，并且通过 instanceof 来进行检查确认\n  required: true, //是否必传\n  default:200,  //默认值,对象或数组默认值必须从一个工厂函数获取如 default:()=>[]\n  validator:(value) {\n    // 这个值必须匹配下列字符串中的一个\n    return [\'success\', \'warning\', \'danger\'].indexof(value) !== -1\n  }\n }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# $emit\n\n// 父组件\n<home @title="settitle">\n\n// 子组件\nthis.$emit(\'title\',{title:\'这是title\'})\n\n\n1\n2\n3\n4\n5\n\n * v-model\n\n //把input输入框的value属性值和vue实例的message属性进行绑定，同时监听输入事件。\n <input v-bind:value="message" v-on:input="message = $event.target.value" />\n\n// v-model 是 @input 与 value 的语法糖\n\n\n1\n2\n3\n4\n\n * v-bind: vue2.x v-bind\n\n\x3c!-- 绑定一个 attribute --\x3e\n<img v-bind:src="imagesrc">\n\n\x3c!-- 动态 attribute 名 (2.6.0+) --\x3e\n<button v-bind:[key]="value"></button>\n\n\x3c!-- 缩写 --\x3e\n<img :src="imagesrc">\n\n\x3c!-- 动态 attribute 名缩写 (2.6.0+) --\x3e\n<button :[key]="value"></button>\n\n\x3c!-- 内联字符串拼接 --\x3e\n<img :src="\'/path/to/images/\' + filename">\n\n\x3c!-- class 绑定 --\x3e\n<div :class="{ red: isred }"></div>\n<div :class="[classa, classb]"></div>\n<div :class="[classa, { classb: isb, classc: isc }]">\n\n\x3c!-- style 绑定 --\x3e\n<div :style="{ fontsize: size + \'px\' }"></div>\n<div :style="[styleobjecta, styleobjectb]"></div>\n\n\x3c!-- 绑定一个全是 attribute 的对象 --\x3e\n<div v-bind="{ id: someprop, \'other-attr\': otherprop }"></div>\n\n\x3c!-- 通过 prop 修饰符绑定 dom attribute --\x3e\n<div v-bind:text-content.prop="text"></div>\n\n\x3c!-- prop 绑定。“prop”必须在 my-component 中声明。--\x3e\n<my-component :prop="something"></my-component>\n\n\x3c!-- 通过 $props 将父组件的 props 一起传给子组件 --\x3e\n<child-component v-bind="$props"></child-component>\n\n\x3c!-- xlink --\x3e\n<svg><a :xlink:special="foo"></a></svg>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n * v-on: vue2.x v-on\n\n\x3c!-- 方法处理器 --\x3e\n<button v-on:click="dothis"></button>\n\n\x3c!-- 动态事件 (2.6.0+) --\x3e\n<button v-on:[event]="dothis"></button>\n\n\x3c!-- 内联语句 --\x3e\n<button v-on:click="dothat(\'hello\', $event)"></button>\n\n\x3c!-- 缩写 --\x3e\n<button @click="dothis"></button>\n\n\x3c!-- 动态事件缩写 (2.6.0+) --\x3e\n<button @[event]="dothis"></button>\n\n\x3c!-- 停止冒泡 --\x3e\n<button @click.stop="dothis"></button>\n\n\x3c!-- 阻止默认行为 --\x3e\n<button @click.prevent="dothis"></button>\n\n\x3c!-- 阻止默认行为，没有表达式 --\x3e\n<form @submit.prevent></form>\n\n\x3c!--  串联修饰符 --\x3e\n<button @click.stop.prevent="dothis"></button>\n\n\x3c!-- 键修饰符，键别名 --\x3e\n<input @keyup.enter="onenter">\n\n\x3c!-- 键修饰符，键代码 --\x3e\n<input @keyup.13="onenter">\n\n\x3c!-- 点击回调只会触发一次 --\x3e\n<button v-on:click.once="dothis"></button>\n\n\x3c!-- 对象语法 (2.4.0+) --\x3e\n<button v-on="{ mousedown: dothis, mouseup: dothat }"></button>\n\n\x3c!-- 监听自定义事件 --\x3e\n<my-component @my-event="handlethis"></my-component>\n\n\x3c!-- 内联语句 --\x3e\n<my-component @my-event="handlethis(123, $event)"></my-component>\n\n\x3c!-- 组件中的原生事件 --\x3e\n<my-component @click.native="onclick"></my-component>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n * v-cloak\n\n\x3c!-- css --\x3e\ndiv[v-cloak] {\n  display: none;\n}\n\n\x3c!-- body --\x3e\n<div id="app" v-cloak>\n  {{ message }}\n</div>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# vuex\n\nstate: // 定义存贮数据的仓库 ,可通过this.$store.state 或mapstate访问\n\ngetter: // 获取 store 值,可认为是 store 的计算属性,可通过this.$store.getter 或 mapgetters访问\n\nmutation: // 同步改变 store 值,为什么会设计成同步,因为mutation是直接改变 store 值,\n          // vue 对操作进行了记录,如果是异步无法追踪改变.可通过mapmutations调用\n\naction: // 异步调用函数执行mutation,进而改变 store 值,可通过 this.$dispatch或mapactions访问\n\nmodules: // 模块,如果状态过多,可以拆分成模块,最后在入口通过...解构引入\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# attrs和listeners\n\n * attrs获取子传父中未在 props 定义的值\n\n// 父组件\n<home title="这是标题" width="80" height="80" imgurl="imgurl"/>\n\n// 子组件\nmounted() {\n  console.log(this.$attrs) //{title: "这是标题", width: "80", height: "80", imgurl: "imgurl"}\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 如果子组件定义了 props,打印的值就是剔除定义的属性\n\nprops: {\n  width: {\n    type: string,\n    default: \'\'\n  }\n},\nmounted() {\n  console.log(this.$attrs) //{title: "这是标题", height: "80", imgurl: "imgurl"}\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * listeners 传入内部组件\n\n// 父组件\n<home @change="change"/>\n\n// 子组件\nmounted() {\n  console.log(this.$listeners) //即可拿到 change 事件\n}\n\n-----------------------------\n\n// 父组件\n<home v-on="$listeners"/>\n\n// 例如 自定义 element-ui的table组件\n\n<template>\n  <el-table\n    :data="data"\n    v-bind="$attrs"\n    v-on="$listeners"\n  >\n    // ...\n  </el-table>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * inheritattrs\n\n// 父组件\n<home title="这是标题" width="80" height="80" imgurl="imgurl"/>\n\n// 子组件\nmounted() {\n  console.log(this.$attrs)\n  //{title: "这是标题", width: "80", height: "80", imgurl: "imgurl"}\n},\n\n// inheritattrs默认值为true，是将父组件中除了props外的属性添加到子组件的根节点上\n// 说明，即使设置为true，子组件仍然可以通过$attr获取到props意外的属性\n// 将inheritattrs:false 后,属性就不会显示在根节点上了\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# provide和inject\n\n//父组件:\nprovide: { //provide 是一个对象,提供一个属性或方法\n  foo: \'这是 foo\',\n  foomethod:()=>{\n    console.log(\'父组件 foomethod 被调用\')\n  }\n},\n\n// 子或者孙子组件\ninject: [\'foo\',\'foomethod\'], //数组或者对象,注入到子组件\nmounted() {\n  this.foomethod()\n  console.log(this.foo)\n}\n//在父组件下面所有的子组件都可以利用inject\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * provide 和 inject 绑定并不是可响应的\n\n//父组件:\nprovide: {\n  foo: \'这是 foo\'\n},\nmounted(){\n  this.foo=\'这是新的 foo\'\n}\n\n// 子或者孙子组件\ninject: [\'foo\'],\nmounted() {\n  console.log(this.foo) //子组件打印的还是\'这是 foo\'\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * provide和inject响应方法\n\n// 父组件\nprovide() {\n  return {\n    staticvalue: this.staticvalue, // 直接返回值，不可响应\n    staticobject: this.staticobject, // 返回一个对象，可响应\n    getreactivevalue: () => this.staticvalue // 返回一个对象的函数，可响应\n  }\n},\n\n// 子组件\ninject: ["staticvalue", "getreactivevalue", "staticobject"],\ncomputed: {\n  reactivevalue() {\n    return this.getreactivevalue(); // 返回注入的对象函数，通过计算属性来监听值的变化\n  },\n},\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# parent和children\n\n//父组件\nmounted(){\n  console.log(this.$children)\n  //可以拿到 一级子组件的属性和方法\n  //所以就可以直接改变 data,或者调用 methods 方法\n}\n\n//子组件\nmounted(){\n  console.log(this.$parent)\n  //可以拿到 parent 的属性和方法\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# $refs\n\n// 父组件\n<home ref="home"/>\n\nmounted(){\n  console.log(this.$refs.home)\n  //即可拿到子组件的实例,就可以直接操作 data 和 methods\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# .sync修饰符\n\n// 父组件\n<home :title.sync="title" />\n//编译时会被扩展为\n<home :title="title"  @update:title="val => title = val"/>\n\n// 子组件\n// 所以子组件可以通过$emit 触发 update 方法改变\nmounted(){\n  this.$emit("update:title", \'这是新的title\')\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# v-slot\n\n * 默认\n\n// 父组件\n<todo-list>\n    <template v-slot:default>\n       任意内容\n       <p>我是匿名插槽 </p>\n    </template>\n</todo-list>\n\n// 子组件\n<slot>我是默认值</slot>\n//v-slot:default写上感觉和具名写法比较统一,容易理解,也可以不用写\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 具名插槽\n\n// 父组件\n<todo-list>\n    <template v-slot:todo>\n       任意内容\n       <p>我是具名插槽 </p>\n    </template>\n</todo-list>\n\n//子组件\n<slot name="todo">我是默认值</slot>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * 作用域插槽\n\n// 父组件\n<todo-list>\n <template v-slot:todo="slotprops" >\n   {{slotprops.user.firstname}}\n </template>\n</todo-list>\n//slotprops 可以随意命名\n//slotprops 接取的是子组件标签slot上属性数据的集合所有v-bind:user="user"\n\n// 子组件\n<slot name="todo" :user="user" :test="test">\n    {{ user.lastname }}\n </slot>\ndata() {\n    return {\n      user:{\n        lastname:"zhang",\n        firstname:"yue"\n      },\n      test:[1,2,3,4]\n    }\n  },\n// {{ user.lastname }}是默认数据  v-slot:todo 当父页面没有(="slotprops")\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# eventbus\n\n// 在 main.js\nvue.prototype.$eventbus=new vue()\n\n// 传值组件\nthis.$eventbus.$emit(\'eventtarget\',\'这是eventtarget传过来的值\')\n\n// 接收组件\nthis.$eventbus.$on("eventtarget",v=>{\n  console.log(\'eventtarget\',v);//这是eventtarget传过来的值\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# broadcast和dispatch\n\n// 派发事件\nvue.prototype.$dispatch = function(eventname, value) {\n  let parent = this.$parent;\n  while (parent) {\n    parent.$emit(eventname, value);\n    parent = parent.$parent;\n  }\n};\n\n// 广播事件\nvue.prototype.$broadcast = function(eventname, value) {\n  let broadcast = children => {\n    children.foreach(child => {\n      child.$emit(eventname, value);\n      if (child.$children) {\n        broadcast(child.$children);\n      }\n    });\n  };\n  broadcast(this.$children);\n};\n\n/*\ninheritattrs: false // 绑定的属性不在dom上显示 ：<div name="xxx"></div> 不显示\nv-bind="$attrs"  // 将 $attrs 上所有属性绑定到dom上传递给子组件\nv-on="$listeners" // 表示将方法绑定到dom上传递给子组件\n*/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 路由传参\n\n * 方案一\n\n// 路由定义\n{\n  path: \'/describe/:id\',\n  name: \'describe\',\n  component: describe\n}\n// 页面传参\nthis.$router.push({\n  path: `/describe/${id}`,\n})\n// 页面获取\nthis.$route.params.id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 方案二\n\n// 路由定义\n{\n  path: \'/describe\',\n  name: \'describe\',\n  component: describe\n}\n// 页面传参\nthis.$router.push({\n  name: \'describe\',\n  params: {\n    id: id\n  }\n})\n// 页面获取\nthis.$route.params.id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 方案三\n\n// 路由定义\n{\n  path: \'/describe\',\n  name: \'describe\',\n  component: describe\n}\n// 页面传参\nthis.$router.push({\n  path: \'/describe\',\n    query: {\n      id: id\n  `}\n)\n// 页面获取\nthis.$route.query.id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# vue.observable\n\n// store/store.js\nimport vue from \'vue\'\n\nexport const store = vue.observable({ count: 0 })\nexport const mutations = {\n  setcount (count) {\n    store.count = count\n  }\n}\n\n//使用\n<template>\n    <div>\n        <label for="booknum">数 量</label>\n        <button @click="setcount(count+1)">+</button>\n        <span>{{count}}</span>\n        <button @click="setcount(count-1)">-</button>\n    </div>\n</template>\n\n<script>\nimport { store, mutations } from \'../store/store\' // vue2.6新增api observable\n\nexport default {\n  name: \'add\',\n  computed: {\n    count () {\n      return store.count\n    }\n  },\n  methods: {\n    setcount: mutations.setcount\n  }\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# $root\n\n// 父组件\nmounted(){\n  console.log(this.$root) //获取根实例,最后所有组件都是挂载到根实例上\n  console.log(this.$root.$children[0]) //获取根实例的一级子组件\n  console.log(this.$root.$children[0].$children[0]) //获取根实例的二级子组件\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 其他\n\n * window.localstorage的方式\n * 服务端接口',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647947183e3,createdTime:1647947183e3},{title:"vue2.x 路由",frontmatter:{title:"vue2.x 路由",date:"2020-07-29T00:00:00.000Z",sidebar:"auto",tags:["vue"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/vue-router.html",relativePath:"frontend/library/vue-router.md",key:"v-a953fe6a",path:"/frontend/library/vue-router.html",headers:[{level:2,title:"开始使用",slug:"开始使用",normalizedTitle:"开始使用",charIndex:18},{level:2,title:"全局路由钩子",slug:"全局路由钩子",normalizedTitle:"全局路由钩子",charIndex:405},{level:2,title:"组件路由钩子",slug:"组件路由钩子",normalizedTitle:"组件路由钩子",charIndex:650},{level:2,title:"Vue.$router",slug:"vue-router",normalizedTitle:"vue.$router",charIndex:868},{level:2,title:"Vue.$route",slug:"vue-route",normalizedTitle:"vue.$route",charIndex:868},{level:2,title:"router render",slug:"router-render",normalizedTitle:"router render",charIndex:1186},{level:2,title:"路由传参",slug:"路由传参",normalizedTitle:"路由传参",charIndex:1262},{level:2,title:"路由拆分",slug:"路由拆分",normalizedTitle:"路由拆分",charIndex:1939},{level:2,title:"缓存和动画",slug:"缓存和动画",normalizedTitle:"缓存和动画",charIndex:3537},{level:2,title:"router-view 的 key",slug:"router-view-的-key",normalizedTitle:"router-view 的 key",charIndex:4118},{level:2,title:"vue-router3.x错误拦截",slug:"vue-router3-x错误拦截",normalizedTitle:"vue-router3.x错误拦截",charIndex:4252},{level:2,title:"router全局添加query参数",slug:"router全局添加query参数",normalizedTitle:"router全局添加query参数",charIndex:4957}],headersStr:"开始使用 全局路由钩子 组件路由钩子 Vue.$router Vue.$route router render 路由传参 路由拆分 缓存和动画 router-view 的 key vue-router3.x错误拦截 router全局添加query参数",content:" * vue-router\n\n\n# 开始使用\n\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nconst Foo = { template: '<div>foo</div>' }\nconst Bar = { template: '<div>bar</div>' }\n\nconst routes = [\n  { path: '/foo', component: Foo },\n  { path: '/bar', component: Bar }\n]\n\nconst router = new VueRouter({\n  routes\n})\n\nconst app = new Vue({\n  router\n}).$mount('#app')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 全局路由钩子\n\n * beforeEach\n\nrouter.beforeEach((to, from, next) => {\n  //一般登录拦截用这个,也叫导航钩子守卫\n  if (path === '/login') {\n    next()\n    return\n  }\n  if (token) {\n    next();\n  }\n})\n\n// beforeResolve\n\n// afterEach\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 组件路由钩子\n\n * beforeRouteEnter\n\nbeforeRouteEnter (to, from, next) {\n  // 这里还无法访问到组件实例，this === undefined\n  next( vm => {\n    // 通过 `vm` 访问组件实例\n  })\n}\n\n// beforeRouteUpdate\n\n// beforeRouteLeave\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# Vue.$router\n\n// 跳转到不同的url，但这个方法回向history栈添加一个记录，点击后退会返回到上一个页面\nthis.$router.push()\n// 不会有记录\nthis.$router.replace()\n// n可为正数可为负数。正数返回上一个页面,类似 window.history.go(n)\nthis.$router.go(n)\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# Vue.$route\n\n// 获取通过 params 或/:id传参的参数\nthis.$route.params.id\n\n// 获取通过 query 传参的参数\nthis.$route.query.id\n\n\n1\n2\n3\n4\n5\n\n\n\n# router render\n\ncomponent: {\n  render: h => h(\"router-view\");\n}\n\n\n1\n2\n3\n\n\n\n# 路由传参\n\n * 方式一\n\n// 路由定义\n{\n  path: '/describe/:id',\n  name: 'Describe',\n  component: Describe\n}\n// 页面传参\nthis.$router.push({\n  path: `/describe/${id}`,\n})\n// 页面获取\nthis.$route.params.id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 方式二\n\n// 路由定义\n{\n  path: '/describe',\n  name: 'Describe',\n  component: Describe\n}\n// 页面传参\nthis.$router.push({\n  name: 'Describe',\n  params: {\n    id: id\n  }\n})\n// 页面获取\nthis.$route.params.id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 方式三\n\n// 路由定义\n{\n  path: '/describe',\n  name: 'Describe',\n  component: Describe\n}\n// 页面传参\nthis.$router.push({\n  path: '/describe',\n    query: {\n      id: id\n  }\n)\n// 页面获取\nthis.$route.query.id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 路由拆分\n\n * 目录\n\n# router\n├── router\n│   ├── index.js\n│   └── router.js\n\n# views目录下\nviews\n├── Page\n│   ├── api.js # 接口定义\n│   ├── router.js # 路由配置\n│   └── src\n│       └── layered\n│           ├── detail.vue\n│           ├── index.vue\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * src/router/index.js\n\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport routes from './router'\n\nVue.use(VueRouter)\n\nconst router = new VueRouter({\n  mode: 'history',\n  routes\n})\n\nexport default router\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * src/router/router.js\n\n// 利用 webpack 读取 views 目录下的 router.js\nconst routerFile = require.context('../', true, /^\\.\\/views\\/[\\w.-]+\\/router.js$/)\n\n// 返回的 routerFile.keys() 是一个路由配置的路径数组列表 ['./views/Page/router.js']\n// 循环递归调用 routerFile 去解析 每一项的路径地址 './views/Page/router.js'\n// 返回 文件内容: Module { default: { path: \"/page\", name: 'xxx', children:[{},...]}, ... }\n\n// 获取返回路由集合\nconst routesConfig = (r => {\n  return r.keys().map(key => r(key).default)\n})(routerFile)\n\n// redirect\nconst redirectConfig = {\n  path: '*',\n  redirect: '/'\n}\n\nconst routes = routesConfig.concat(redirectConfig)\nreturn routes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * src/views/Page/router.js\n\nexport default {\n  path: '/page',\n  name: 'Page',\n  component: () => import('@/components/RouterCache.vue'),\n  meta: {\n    keepAlive: true,\n    title: 'Page A',\n  },\n  children: [\n    {\n      path: 'detail/:id',\n      name: 'PageDetail',\n      component: () => import('./src/detail/index.vue'),\n      meta: {\n        keepAlive: true,\n      }\n    }\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 缓存和动画\n\n<transition>\n  <keep-alive :include=\"['a', 'b']\">\n  //或include=\"a,b\" :include=\"/a|b/\",a 和 b 表示组件的 name\n  //因为有些页面,如试试数据统计,要实时刷新,所以就不需要缓存\n    <router-view/> //路由标签\n  </keep-alive>\n  <router-view exclude=\"c\"/>\n  // c 表示组件的 name值\n</transition>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * Cached Router: RouterCache.vue\n\n<template>\n  <div>\n    <keep-alive>\n      <router-view v-if=\"$route.meta.keepAlive\" />\n    </keep-alive>\n    <router-view v-if=\"!$route.meta.keepAlive\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'RouterCache'\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# router-view 的 key\n\n//  Vue 会复用相同组件, key可以解决 组件的 created 和 mounted 不调用问题\n<router-view :key=\"$route.fullPath\"></router-view>\n\n\n1\n2\n\n\n\n# vue-router3.x错误拦截\n\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport routes from './routes'\n\nVue.use(VueRouter)\n// 隐藏vue-router在3.0版本控制台错误信息（跳转相同路径会报错）\nconst originalPush = VueRouter.prototype.push\nVueRouter.prototype.push = function(location) {\n  return originalPush.call(this, location).catch(err => err)\n}\nconst originalReplace = VueRouter.prototype.replace\nVueRouter.prototype.replace = function(location) {\n  return originalReplace.call(this, location).catch(err => err)\n}\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.VUE_APP_HASH ? '/' : process.env.BASE_URL,\n  routes\n})\n\nexport default router\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# router全局添加query参数\n\n// 全局添加biz query参数: 仅限于vue-router\nconst QUERY_BIZID_NAME = 'bizid'\nexport const addRouterBizQuery = (router) => {\n  router.beforeEach((to, from, next) => {\n    const bizId = to.query[QUERY_BIZID_NAME]\n    const curId = getCurrentBizId()\n    if (!bizId || !isValidBizId(bizId) || bizId !== curId) {\n      const query = {\n        ...to.query,\n        [QUERY_BIZID_NAME]: curId\n      }\n      next &&\n        next({\n          ...to,\n          query: query\n        })\n    } else {\n      next && next()\n    }\n  })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",normalizedContent:" * vue-router\n\n\n# 开始使用\n\nimport vue from 'vue'\nimport vuerouter from 'vue-router'\n\nconst foo = { template: '<div>foo</div>' }\nconst bar = { template: '<div>bar</div>' }\n\nconst routes = [\n  { path: '/foo', component: foo },\n  { path: '/bar', component: bar }\n]\n\nconst router = new vuerouter({\n  routes\n})\n\nconst app = new vue({\n  router\n}).$mount('#app')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 全局路由钩子\n\n * beforeeach\n\nrouter.beforeeach((to, from, next) => {\n  //一般登录拦截用这个,也叫导航钩子守卫\n  if (path === '/login') {\n    next()\n    return\n  }\n  if (token) {\n    next();\n  }\n})\n\n// beforeresolve\n\n// aftereach\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 组件路由钩子\n\n * beforerouteenter\n\nbeforerouteenter (to, from, next) {\n  // 这里还无法访问到组件实例，this === undefined\n  next( vm => {\n    // 通过 `vm` 访问组件实例\n  })\n}\n\n// beforerouteupdate\n\n// beforerouteleave\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# vue.$router\n\n// 跳转到不同的url，但这个方法回向history栈添加一个记录，点击后退会返回到上一个页面\nthis.$router.push()\n// 不会有记录\nthis.$router.replace()\n// n可为正数可为负数。正数返回上一个页面,类似 window.history.go(n)\nthis.$router.go(n)\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# vue.$route\n\n// 获取通过 params 或/:id传参的参数\nthis.$route.params.id\n\n// 获取通过 query 传参的参数\nthis.$route.query.id\n\n\n1\n2\n3\n4\n5\n\n\n\n# router render\n\ncomponent: {\n  render: h => h(\"router-view\");\n}\n\n\n1\n2\n3\n\n\n\n# 路由传参\n\n * 方式一\n\n// 路由定义\n{\n  path: '/describe/:id',\n  name: 'describe',\n  component: describe\n}\n// 页面传参\nthis.$router.push({\n  path: `/describe/${id}`,\n})\n// 页面获取\nthis.$route.params.id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * 方式二\n\n// 路由定义\n{\n  path: '/describe',\n  name: 'describe',\n  component: describe\n}\n// 页面传参\nthis.$router.push({\n  name: 'describe',\n  params: {\n    id: id\n  }\n})\n// 页面获取\nthis.$route.params.id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * 方式三\n\n// 路由定义\n{\n  path: '/describe',\n  name: 'describe',\n  component: describe\n}\n// 页面传参\nthis.$router.push({\n  path: '/describe',\n    query: {\n      id: id\n  }\n)\n// 页面获取\nthis.$route.query.id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 路由拆分\n\n * 目录\n\n# router\n├── router\n│   ├── index.js\n│   └── router.js\n\n# views目录下\nviews\n├── page\n│   ├── api.js # 接口定义\n│   ├── router.js # 路由配置\n│   └── src\n│       └── layered\n│           ├── detail.vue\n│           ├── index.vue\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * src/router/index.js\n\nimport vue from 'vue'\nimport vuerouter from 'vue-router'\nimport routes from './router'\n\nvue.use(vuerouter)\n\nconst router = new vuerouter({\n  mode: 'history',\n  routes\n})\n\nexport default router\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * src/router/router.js\n\n// 利用 webpack 读取 views 目录下的 router.js\nconst routerfile = require.context('../', true, /^\\.\\/views\\/[\\w.-]+\\/router.js$/)\n\n// 返回的 routerfile.keys() 是一个路由配置的路径数组列表 ['./views/page/router.js']\n// 循环递归调用 routerfile 去解析 每一项的路径地址 './views/page/router.js'\n// 返回 文件内容: module { default: { path: \"/page\", name: 'xxx', children:[{},...]}, ... }\n\n// 获取返回路由集合\nconst routesconfig = (r => {\n  return r.keys().map(key => r(key).default)\n})(routerfile)\n\n// redirect\nconst redirectconfig = {\n  path: '*',\n  redirect: '/'\n}\n\nconst routes = routesconfig.concat(redirectconfig)\nreturn routes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * src/views/page/router.js\n\nexport default {\n  path: '/page',\n  name: 'page',\n  component: () => import('@/components/routercache.vue'),\n  meta: {\n    keepalive: true,\n    title: 'page a',\n  },\n  children: [\n    {\n      path: 'detail/:id',\n      name: 'pagedetail',\n      component: () => import('./src/detail/index.vue'),\n      meta: {\n        keepalive: true,\n      }\n    }\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 缓存和动画\n\n<transition>\n  <keep-alive :include=\"['a', 'b']\">\n  //或include=\"a,b\" :include=\"/a|b/\",a 和 b 表示组件的 name\n  //因为有些页面,如试试数据统计,要实时刷新,所以就不需要缓存\n    <router-view/> //路由标签\n  </keep-alive>\n  <router-view exclude=\"c\"/>\n  // c 表示组件的 name值\n</transition>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * cached router: routercache.vue\n\n<template>\n  <div>\n    <keep-alive>\n      <router-view v-if=\"$route.meta.keepalive\" />\n    </keep-alive>\n    <router-view v-if=\"!$route.meta.keepalive\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'routercache'\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# router-view 的 key\n\n//  vue 会复用相同组件, key可以解决 组件的 created 和 mounted 不调用问题\n<router-view :key=\"$route.fullpath\"></router-view>\n\n\n1\n2\n\n\n\n# vue-router3.x错误拦截\n\nimport vue from 'vue'\nimport vuerouter from 'vue-router'\nimport routes from './routes'\n\nvue.use(vuerouter)\n// 隐藏vue-router在3.0版本控制台错误信息（跳转相同路径会报错）\nconst originalpush = vuerouter.prototype.push\nvuerouter.prototype.push = function(location) {\n  return originalpush.call(this, location).catch(err => err)\n}\nconst originalreplace = vuerouter.prototype.replace\nvuerouter.prototype.replace = function(location) {\n  return originalreplace.call(this, location).catch(err => err)\n}\n\nconst router = new vuerouter({\n  mode: 'history',\n  base: process.env.vue_app_hash ? '/' : process.env.base_url,\n  routes\n})\n\nexport default router\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# router全局添加query参数\n\n// 全局添加biz query参数: 仅限于vue-router\nconst query_bizid_name = 'bizid'\nexport const addrouterbizquery = (router) => {\n  router.beforeeach((to, from, next) => {\n    const bizid = to.query[query_bizid_name]\n    const curid = getcurrentbizid()\n    if (!bizid || !isvalidbizid(bizid) || bizid !== curid) {\n      const query = {\n        ...to.query,\n        [query_bizid_name]: curid\n      }\n      next &&\n        next({\n          ...to,\n          query: query\n        })\n    } else {\n      next && next()\n    }\n  })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647947183e3,createdTime:1647947183e3},{title:"vue2.x的slot使用",frontmatter:{title:"vue2.x的slot使用",date:"2020-07-30T00:00:00.000Z",sidebar:"auto",tags:["vue"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/vue-slot.html",relativePath:"frontend/library/vue-slot.md",key:"v-373abf6b",path:"/frontend/library/vue-slot.html",headers:[{level:2,title:"old solt",slug:"old-solt",normalizedTitle:"old solt",charIndex:65},{level:2,title:"new solt (vue2.6.x)",slug:"new-solt-vue2-6-x",normalizedTitle:"new solt (vue2.6.x)",charIndex:1252}],headersStr:"old solt new solt (vue2.6.x)",content:' * codesandbox：vue2.x-slot\n\n * vue2.x solt: components-slots\n\n\n# old solt\n\n * Parent.vue\n\n<template>\n  <child>\n    \x3c!-- 默认插槽 --\x3e\n    <div slot>default solt</div>\n    \x3c!-- 具名插槽 --\x3e\n    <div slot="header">header solt</div>\n    \x3c!-- 作用域插槽 --\x3e\n    <div slot="footer" slot-scope="slotProps">\n      <span>footer solt</span>\n      <p>reviced data from child component : {{slotProps.testProps}}</p>\n    </div>\n  </child>\n</template>\n\n<script>\nimport Child from "./Child.vue";\nexport default {\n  data() {\n    return {\n      name: "old solt"\n    };\n  },\n  components: {\n    Child\n  }\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n * Child.vue\n\n<template>\n  <div>\n    <main>\n      <h3>old solt child main</h3>\n      <slot>\n        <h3>没传内容</h3>\n      </slot>\n    </main>\n    <header>\n      <slot name="header">\n        <h3>没传header插槽</h3>\n      </slot>\n    </header>\n    <footer>\n      <slot name="footer" :testProps="test">\n        <h3>没传footer插槽</h3>\n      </slot>\n    </footer>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: "child-component",\n  data() {\n    return {\n      test: "child value"\n    };\n  }\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# new solt (vue2.6.x)\n\n * Parent.vue\n\n<template>\n  <Child>\n    \x3c!--默认插槽--\x3e\n    <template v-slot>\n      <div>default slot</div>\n    </template>\n    \x3c!--具名插槽--\x3e\n    <template v-slot:header>\n      <div>header slot</div>\n    </template>\n    \x3c!--作用域插槽--\x3e\n    <template #footer="slotProps">\n      <span>footer slot</span>\n      <div>reviced data from child component : {{slotProps.testProps}}</div>\n    </template>\n  </Child>\n</template>\n\n<script>\nimport Child from "./Child";\n\n// v-slot，可以缩写为【#】\nexport default {\n  data() {\n    return {\n      name: "new solt"\n    };\n  },\n  components: {\n    Child\n  }\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n * Child.vue\n\n<template>\n  <div>\n    <main>\n      <h3>new solt child main</h3>\n      <slot>\n        <h3>没传内容</h3>\n      </slot>\n    </main>\n\n    <header>\n      <slot name="header">\n        <h3>没传header插槽</h3>\n      </slot>\n    </header>\n\n    <footer>\n      <slot name="footer" :testProps="test">\n        <h3>没传footer插槽</h3>\n      </slot>\n    </footer>\n  </div>\n</template>\n<script>\nexport default {\n  name: "child-component",\n  data() {\n    return {\n      test: "child value"\n    };\n  }\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n',normalizedContent:' * codesandbox：vue2.x-slot\n\n * vue2.x solt: components-slots\n\n\n# old solt\n\n * parent.vue\n\n<template>\n  <child>\n    \x3c!-- 默认插槽 --\x3e\n    <div slot>default solt</div>\n    \x3c!-- 具名插槽 --\x3e\n    <div slot="header">header solt</div>\n    \x3c!-- 作用域插槽 --\x3e\n    <div slot="footer" slot-scope="slotprops">\n      <span>footer solt</span>\n      <p>reviced data from child component : {{slotprops.testprops}}</p>\n    </div>\n  </child>\n</template>\n\n<script>\nimport child from "./child.vue";\nexport default {\n  data() {\n    return {\n      name: "old solt"\n    };\n  },\n  components: {\n    child\n  }\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n * child.vue\n\n<template>\n  <div>\n    <main>\n      <h3>old solt child main</h3>\n      <slot>\n        <h3>没传内容</h3>\n      </slot>\n    </main>\n    <header>\n      <slot name="header">\n        <h3>没传header插槽</h3>\n      </slot>\n    </header>\n    <footer>\n      <slot name="footer" :testprops="test">\n        <h3>没传footer插槽</h3>\n      </slot>\n    </footer>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: "child-component",\n  data() {\n    return {\n      test: "child value"\n    };\n  }\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# new solt (vue2.6.x)\n\n * parent.vue\n\n<template>\n  <child>\n    \x3c!--默认插槽--\x3e\n    <template v-slot>\n      <div>default slot</div>\n    </template>\n    \x3c!--具名插槽--\x3e\n    <template v-slot:header>\n      <div>header slot</div>\n    </template>\n    \x3c!--作用域插槽--\x3e\n    <template #footer="slotprops">\n      <span>footer slot</span>\n      <div>reviced data from child component : {{slotprops.testprops}}</div>\n    </template>\n  </child>\n</template>\n\n<script>\nimport child from "./child";\n\n// v-slot，可以缩写为【#】\nexport default {\n  data() {\n    return {\n      name: "new solt"\n    };\n  },\n  components: {\n    child\n  }\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n * child.vue\n\n<template>\n  <div>\n    <main>\n      <h3>new solt child main</h3>\n      <slot>\n        <h3>没传内容</h3>\n      </slot>\n    </main>\n\n    <header>\n      <slot name="header">\n        <h3>没传header插槽</h3>\n      </slot>\n    </header>\n\n    <footer>\n      <slot name="footer" :testprops="test">\n        <h3>没传footer插槽</h3>\n      </slot>\n    </footer>\n  </div>\n</template>\n<script>\nexport default {\n  name: "child-component",\n  data() {\n    return {\n      test: "child value"\n    };\n  }\n};\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647947183e3,createdTime:1647947183e3},{title:"Vue",frontmatter:{title:"Vue",date:"2022-02-24T00:00:00.000Z",sidebar:"auto",tags:["vue"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/vue.html",relativePath:"frontend/library/vue.md",key:"v-3fc296ad",path:"/frontend/library/vue.html",headers:[{level:2,title:"官网",slug:"官网",normalizedTitle:"官网",charIndex:2},{level:2,title:"vue2生命周期",slug:"vue2生命周期",normalizedTitle:"vue2生命周期",charIndex:89},{level:2,title:"vue3",slug:"vue3",normalizedTitle:"vue3",charIndex:151},{level:2,title:"vuex工作流",slug:"vuex工作流",normalizedTitle:"vuex工作流",charIndex:215},{level:2,title:"vue3与vue2的区别",slug:"vue3与vue2的区别",normalizedTitle:"vue3与vue2的区别",charIndex:299},{level:2,title:"相关链接",slug:"相关链接",normalizedTitle:"相关链接",charIndex:565}],headersStr:"官网 vue2生命周期 vue3 vuex工作流 vue3与vue2的区别 相关链接",content:"# 官网\n\n * vue2\n * vuex\n * vue-router\n * awesome-vue\n * vuepress\n * nuxt.js\n * vue-cli\n\n\n# vue2生命周期\n\n> https://v2.vuejs.org/v2/guide/instance.html\n\n\n\n\n# vue3\n\n> https://vuejs.org/guide/essentials/lifecycle.html\n\n\n\n\n# vuex工作流\n\nvuex 工作流程-图来源官网\n\n\n\n * store ➡️ dispatch ➡️ action ➡️ mutation ➡️ state\n\n\n# vue3与vue2的区别\n\n> 原文 https://juejin.cn/post/7146996646394462239\n\n * vue3性能比Vue2.x快\n * proxy取代Object.defineproperty\n * diff方法优化： vue3新增了静态标记（patchflag）\n * 静态提升\n * 事件侦听器缓存\n * 按需引入，通过treeSharking 体积比vue2.x更小\n * 组合API（类似react hooks），可以将data与对应的逻辑写到一起，更容易理解\n * 更好的Ts支持\n\n\n# 相关链接\n\n * 基于 vue-cli@3 的项目可行性优化方案探索\n * vue 源码解析\n * 快速搭建一个 Vue Live Markdown\n * VV-UI/VV-UI\n * QingWei-Li/vue-markdown-loader\n * wxsms/vue-md-loader\n * 深度解析！Vue3 & React Hooks 新 UI 组件原理：Modal 弹窗\n * vue-cli3\n * vue-magic-tree\n * vue3 & vite template repo",normalizedContent:"# 官网\n\n * vue2\n * vuex\n * vue-router\n * awesome-vue\n * vuepress\n * nuxt.js\n * vue-cli\n\n\n# vue2生命周期\n\n> https://v2.vuejs.org/v2/guide/instance.html\n\n\n\n\n# vue3\n\n> https://vuejs.org/guide/essentials/lifecycle.html\n\n\n\n\n# vuex工作流\n\nvuex 工作流程-图来源官网\n\n\n\n * store ➡️ dispatch ➡️ action ➡️ mutation ➡️ state\n\n\n# vue3与vue2的区别\n\n> 原文 https://juejin.cn/post/7146996646394462239\n\n * vue3性能比vue2.x快\n * proxy取代object.defineproperty\n * diff方法优化： vue3新增了静态标记（patchflag）\n * 静态提升\n * 事件侦听器缓存\n * 按需引入，通过treesharking 体积比vue2.x更小\n * 组合api（类似react hooks），可以将data与对应的逻辑写到一起，更容易理解\n * 更好的ts支持\n\n\n# 相关链接\n\n * 基于 vue-cli@3 的项目可行性优化方案探索\n * vue 源码解析\n * 快速搭建一个 vue live markdown\n * vv-ui/vv-ui\n * qingwei-li/vue-markdown-loader\n * wxsms/vue-md-loader\n * 深度解析！vue3 & react hooks 新 ui 组件原理：modal 弹窗\n * vue-cli3\n * vue-magic-tree\n * vue3 & vite template repo",charsets:{cjk:!0},lastUpdated:"3/11/2023",lastUpdatedTimestamp:1678525665e3,createdTime:1647947183e3},{title:"vue2实现tab组件",frontmatter:{title:"vue2实现tab组件",date:"2023-03-12T00:00:00.000Z",sidebar:"auto",tags:["vue"],categories:["frontend"],readingShow:"top"},regularPath:"/frontend/library/vue2-tab.html",relativePath:"frontend/library/vue2-tab.md",key:"v-04a8950b",path:"/frontend/library/vue2-tab.html",headers:[{level:2,title:"tab组件使用",slug:"tab组件使用",normalizedTitle:"tab组件使用",charIndex:47},{level:2,title:"实现tabs",slug:"实现tabs",normalizedTitle:"实现tabs",charIndex:346},{level:2,title:"实现tabPanel",slug:"实现tabpanel",normalizedTitle:"实现tabpanel",charIndex:4399}],headersStr:"tab组件使用 实现tabs 实现tabPanel",content:'> 使用Vue一步一步实现一个Tabs选项卡组件 Vue:造轮子-05:tabs组件\n\n\n# tab组件使用\n\n<tabs value="name2"\n      @change="changeTab">\n  <tab-panel label="标签1"\n             name="name1">标签一的内容</tab-panel>\n  <tab-panel label="标签2"\n             name="name2">标签二的内容</tab-panel>\n  <tab-panel label="标签3"\n             name="name3">标签三的内容</tab-panel>\n</tabs>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 实现tabs\n\n<template>\n  \x3c!--tabs容器--\x3e\n  <div class="tabs">\n    \x3c!--标签页容器--\x3e\n    <div ref="navWrap"\n         class="tabs-nav-wrap">\n      \x3c!--底部底部条--\x3e\n      <div class="tabs-inv-bar"\n           :style="barStyle" />\n      \x3c!--标签页头label--\x3e\n      <div v-for="(item, index) in navList"\n           :key="index"\n           class="tabs-tab"\n           @click="handleChange(index)">{{ item.label }}</div>\n    </div>\n    \x3c!--所有pane组件使用的slot容器--\x3e\n    <div class="pane-content">\n      <slot />\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  name: \'Tabs\',\n  provide () {\n    return { TabsInstance: this }\n  },\n  props: {\n    value: {\n      required: true,\n      type: [String, Number]\n    }\n  },\n  data () {\n    return {\n      navList: [],\n      activeKey: this.value,\n      barWidth: 0,\n      barOffset: 0\n    }\n  },\n  computed: {\n    barStyle () {\n      return {\n        width: `${this.barWidth}px`,\n        transform: `translate3d(${this.barOffset}px,0px,0px)`\n      }\n    }\n  },\n  watch: {\n    value (val) {\n      this.activeKey = val\n    },\n    activeKey () {\n      this.updateStatus()\n      this.updateBar()\n    }\n  },\n  methods: {\n    // 初始化更新\n    initTabs () {\n      this.updateNav()\n      this.updateStatus()\n      this.updateBar()\n    },\n    // 显示当前tab激活的content的内容\n    updateStatus () {\n      const tabs = this.getTabs()\n      tabs.forEach(tab => (tab.show = tab.name === this.activeKey))\n    },\n    // 获取tabs下的所有pane实例\n    getTabs () {\n      return this.$children.filter(item => item.$options.name === \'TabPanel\')\n    },\n    // 获取所有pane组件用户传入的props\n    updateNav () {\n      this.navList = []\n      this.getTabs().forEach((pane, index) => {\n        this.navList.push({\n          label: pane.label,\n          name: pane.name || index\n        })\n        // 如果不传value,默认选中第一项\n        if (index === 0 && !this.activeKey) {\n          this.activeKey = pane.name\n        }\n      })\n    },\n    // 改变activeKey，并监听activeKey重新更新显示状态\n    handleChange (index) {\n      const nav = this.navList[index]\n      this.activeKey = nav.name\n      this.$emit(\'change\', index)\n    },\n    updateBar () {\n      // 等待dom更新完毕后获取dom节点\n      this.$nextTick(() => {\n        // 当前选中的activeKey下标\n        const index = this.navList.findIndex(nav => nav.name === this.activeKey)\n        // 获取navWrap元素下的所有tab的元素\n        const elemTabs = this.$refs.navWrap.querySelectorAll(\'.tabs-tab\')\n        // 获取当前选中的元素\n        const elemTab = elemTabs[index]\n        this.barWidth = elemTab ? elemTab.offsetWidth : 0\n        // 计算需要移动的距离,当index > 0时进行累加\n        if (index > 0) {\n          let offset = 0\n          for (let i = 0; i < index; i++) {\n            offset += elemTabs[i].offsetWidth\n          }\n          this.barOffset = offset\n        } else {\n          this.barOffset = 0\n        }\n      })\n    }\n\n  }\n}\n<\/script>\n<style>\n.tabs{\n  position: relative;\n}\n.tabs-nav-wrap {\n  position: relative;\n  border-bottom: 1px solid #dcdee2;\n  margin-bottom: 16px;\n}\n.tabs-tab {\n  display: inline-block;\n  padding: 8px 16px;\n  cursor: pointer;\n}\n.tabs-inv-bar {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  background-color: #2d8cf0;\n  height: 2px;\n  transition: transform 300ms ease-in-out;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n\n * 更新 tab line css\n\nif (index > 0) {\n  let offset = elemTab.offsetWidth / 2\n  for (let i = 0; i < index; i++) {\n    offset += elemTabs[i].offsetWidth\n  }\n  this.barOffset = offset\n} else {\n  this.barOffset = elemTab.offsetWidth / 2\n}\n\nbarStyle () {\n  return {\n    // width: `${this.barWidth}px`,\n    transform: `translate3d(${this.barOffset}px,0,0) translateX(-50%)`\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 实现tabPanel\n\n<template>\n  <div v-show="show">\n    <slot />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \'TabPanel\',\n  inject: [\'TabsInstance\'],\n  props: {\n    name: {\n      type: String,\n      required: true\n    },\n    label: {\n      type: [String, Function],\n      default: \'\'\n    }\n  },\n  data () {\n    return {\n      show: true\n    }\n  },\n  watch: {\n    name () {\n      this.TabsInstance.initTabs()\n    }\n  },\n  mounted () {\n    this.TabsInstance.initTabs()\n  }\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n',normalizedContent:'> 使用vue一步一步实现一个tabs选项卡组件 vue:造轮子-05:tabs组件\n\n\n# tab组件使用\n\n<tabs value="name2"\n      @change="changetab">\n  <tab-panel label="标签1"\n             name="name1">标签一的内容</tab-panel>\n  <tab-panel label="标签2"\n             name="name2">标签二的内容</tab-panel>\n  <tab-panel label="标签3"\n             name="name3">标签三的内容</tab-panel>\n</tabs>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 实现tabs\n\n<template>\n  \x3c!--tabs容器--\x3e\n  <div class="tabs">\n    \x3c!--标签页容器--\x3e\n    <div ref="navwrap"\n         class="tabs-nav-wrap">\n      \x3c!--底部底部条--\x3e\n      <div class="tabs-inv-bar"\n           :style="barstyle" />\n      \x3c!--标签页头label--\x3e\n      <div v-for="(item, index) in navlist"\n           :key="index"\n           class="tabs-tab"\n           @click="handlechange(index)">{{ item.label }}</div>\n    </div>\n    \x3c!--所有pane组件使用的slot容器--\x3e\n    <div class="pane-content">\n      <slot />\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  name: \'tabs\',\n  provide () {\n    return { tabsinstance: this }\n  },\n  props: {\n    value: {\n      required: true,\n      type: [string, number]\n    }\n  },\n  data () {\n    return {\n      navlist: [],\n      activekey: this.value,\n      barwidth: 0,\n      baroffset: 0\n    }\n  },\n  computed: {\n    barstyle () {\n      return {\n        width: `${this.barwidth}px`,\n        transform: `translate3d(${this.baroffset}px,0px,0px)`\n      }\n    }\n  },\n  watch: {\n    value (val) {\n      this.activekey = val\n    },\n    activekey () {\n      this.updatestatus()\n      this.updatebar()\n    }\n  },\n  methods: {\n    // 初始化更新\n    inittabs () {\n      this.updatenav()\n      this.updatestatus()\n      this.updatebar()\n    },\n    // 显示当前tab激活的content的内容\n    updatestatus () {\n      const tabs = this.gettabs()\n      tabs.foreach(tab => (tab.show = tab.name === this.activekey))\n    },\n    // 获取tabs下的所有pane实例\n    gettabs () {\n      return this.$children.filter(item => item.$options.name === \'tabpanel\')\n    },\n    // 获取所有pane组件用户传入的props\n    updatenav () {\n      this.navlist = []\n      this.gettabs().foreach((pane, index) => {\n        this.navlist.push({\n          label: pane.label,\n          name: pane.name || index\n        })\n        // 如果不传value,默认选中第一项\n        if (index === 0 && !this.activekey) {\n          this.activekey = pane.name\n        }\n      })\n    },\n    // 改变activekey，并监听activekey重新更新显示状态\n    handlechange (index) {\n      const nav = this.navlist[index]\n      this.activekey = nav.name\n      this.$emit(\'change\', index)\n    },\n    updatebar () {\n      // 等待dom更新完毕后获取dom节点\n      this.$nexttick(() => {\n        // 当前选中的activekey下标\n        const index = this.navlist.findindex(nav => nav.name === this.activekey)\n        // 获取navwrap元素下的所有tab的元素\n        const elemtabs = this.$refs.navwrap.queryselectorall(\'.tabs-tab\')\n        // 获取当前选中的元素\n        const elemtab = elemtabs[index]\n        this.barwidth = elemtab ? elemtab.offsetwidth : 0\n        // 计算需要移动的距离,当index > 0时进行累加\n        if (index > 0) {\n          let offset = 0\n          for (let i = 0; i < index; i++) {\n            offset += elemtabs[i].offsetwidth\n          }\n          this.baroffset = offset\n        } else {\n          this.baroffset = 0\n        }\n      })\n    }\n\n  }\n}\n<\/script>\n<style>\n.tabs{\n  position: relative;\n}\n.tabs-nav-wrap {\n  position: relative;\n  border-bottom: 1px solid #dcdee2;\n  margin-bottom: 16px;\n}\n.tabs-tab {\n  display: inline-block;\n  padding: 8px 16px;\n  cursor: pointer;\n}\n.tabs-inv-bar {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  background-color: #2d8cf0;\n  height: 2px;\n  transition: transform 300ms ease-in-out;\n}\n</style>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n\n * 更新 tab line css\n\nif (index > 0) {\n  let offset = elemtab.offsetwidth / 2\n  for (let i = 0; i < index; i++) {\n    offset += elemtabs[i].offsetwidth\n  }\n  this.baroffset = offset\n} else {\n  this.baroffset = elemtab.offsetwidth / 2\n}\n\nbarstyle () {\n  return {\n    // width: `${this.barwidth}px`,\n    transform: `translate3d(${this.baroffset}px,0,0) translatex(-50%)`\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 实现tabpanel\n\n<template>\n  <div v-show="show">\n    <slot />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \'tabpanel\',\n  inject: [\'tabsinstance\'],\n  props: {\n    name: {\n      type: string,\n      required: true\n    },\n    label: {\n      type: [string, function],\n      default: \'\'\n    }\n  },\n  data () {\n    return {\n      show: true\n    }\n  },\n  watch: {\n    name () {\n      this.tabsinstance.inittabs()\n    }\n  },\n  mounted () {\n    this.tabsinstance.inittabs()\n  }\n}\n<\/script>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n',charsets:{cjk:!0},lastUpdated:"3/11/2023",lastUpdatedTimestamp:1678525665e3,createdTime:1678525665e3},{title:"导航目录",frontmatter:{title:"导航目录",date:"2022-01-22T00:00:00.000Z",sidebar:"auto",categories:["frontend"],readingShow:"top"},regularPath:"/services/tools/",relativePath:"services/tools/README.md",key:"v-6ad03320",path:"/services/tools/",headersStr:null,content:"> The Article Total （ 22 ）\n\n * aria2配置\n * 站点工具\n * centos7命令参数\n * curl的GET和POST使用\n * docker命令列表\n * 获取UserAgent\n * git常见命令列表\n * github的actions使用\n * gitlab的服务部署\n * linux命令参数\n * manjaro命令参数\n * meilisearch\n * nginx安装使用\n * node.js的记录\n * 搜索小技巧\n * 前端监控sentry使用\n * todo list\n * travis-ci的使用\n * ubuntu常见命名\n * vagrant虚拟机的使用\n * vim的简单使用\n * vscode",normalizedContent:"> the article total （ 22 ）\n\n * aria2配置\n * 站点工具\n * centos7命令参数\n * curl的get和post使用\n * docker命令列表\n * 获取useragent\n * git常见命令列表\n * github的actions使用\n * gitlab的服务部署\n * linux命令参数\n * manjaro命令参数\n * meilisearch\n * nginx安装使用\n * node.js的记录\n * 搜索小技巧\n * 前端监控sentry使用\n * todo list\n * travis-ci的使用\n * ubuntu常见命名\n * vagrant虚拟机的使用\n * vim的简单使用\n * vscode",charsets:{cjk:!0},lastUpdated:"3/11/2023",lastUpdatedTimestamp:1678525665e3,createdTime:1643899953e3},{title:"aria2配置",frontmatter:{title:"aria2配置",date:"2021-10-01T00:00:00.000Z",sidebar:"auto",tags:["aria2"],categories:["system"],readingShow:"top"},regularPath:"/services/tools/aria2.html",relativePath:"services/tools/aria2.md",key:"v-0cd88c0f",path:"/services/tools/aria2.html",headers:[{level:2,title:"url",slug:"url",normalizedTitle:"url",charIndex:2},{level:2,title:"网盘助手",slug:"网盘助手",normalizedTitle:"网盘助手",charIndex:85},{level:2,title:"aria2 windows",slug:"aria2-windows",normalizedTitle:"aria2 windows",charIndex:128},{level:2,title:"aria2 mac",slug:"aria2-mac",normalizedTitle:"aria2 mac",charIndex:3420}],headersStr:"url 网盘助手 aria2 windows aria2 mac",content:'# url\n\n * https://github.com/aria2/aria2\n * https://github.com/P3TERX/aria2.conf\n\n\n# 网盘助手\n\nhttps://www.baiduyun.wiki/zh-cn/\n\n\n# aria2 windows\n\n * HideRun.vbs\n\nCreateObject("WScript.Shell").Run "D:\\aria2\\aria2c.exe --conf-path=aria2.conf",0\n\n\n1\n\n * aria2.conf\n\n## \'#\'开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##\n## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##\n\n## 文件保存相关 ##\n\n# 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置（自己设置）\ndir=D:\\downloads\n# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M\n#disk-cache=32M\n# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc\n# 预分配所需时间: none < falloc ? trunc < prealloc\n# falloc和trunc则需要文件系统和内核支持\n# NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项\n#file-allocation=none\n# 断点续传\ncontinue=true\n\n## 下载连接相关 ##\n\n# 最大同时下载任务数, 运行时可修改, 默认:5 （自己设置）\n#max-concurrent-downloads=5\n# 同一服务器连接数, 添加时可指定, 默认:1 （自己设置）\nmax-connection-per-server=5\n# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M\n# 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载 （自己设置）\nmin-split-size=10M\n# 单个任务最大线程数, 添加时可指定, 默认:5 （自己设置）\n#split=5\n# 整体下载速度限制, 运行时可修改, 默认:0\n#max-overall-download-limit=0\n# 单个任务下载速度限制, 默认:0\n#max-download-limit=0\n# 整体上传速度限制, 运行时可修改, 默认:0\n#max-overall-upload-limit=0\n# 单个任务上传速度限制, 默认:0\n#max-upload-limit=0\n# 禁用IPv6, 默认:false\n#disable-ipv6=true\n# 连接超时时间, 默认:60\n#timeout=60\n# 最大重试次数, 设置为0表示不限制重试次数, 默认:5\n#max-tries=5\n# 设置重试等待的秒数, 默认:0\n#retry-wait=0\n\n## 进度保存相关 ##\n\n# 从会话文件中读取下载任务（自己设置）\ninput-file=D:\\aria2\\aria2.session\n# 在Aria2退出时保存`错误/未完成`的下载任务到会话文件（自己设置）\nsave-session=D:\\aria2\\aria2.session\n# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0\n#save-session-interval=60\n\n## RPC相关设置 ##\n\n# 启用RPC, 默认:false\nenable-rpc=true\n# 允许所有来源, 默认:false\nrpc-allow-origin-all=true\n# 允许非外部访问, 默认:false\nrpc-listen-all=true\n# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同\n#event-poll=select\n# RPC监听端口, 端口被占用时可以修改, 默认:6800\n#rpc-listen-port=6800\n# 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项\n#rpc-secret=<TOKEN>\n# 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项\n#rpc-user=<USER>\n# 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项\n#rpc-passwd=<PASSWD>\n# 是否启用 RPC 服务的 SSL/TLS 加密,\n# 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接\n#rpc-secure=true\n# 在 RPC 服务中启用 SSL/TLS 加密时的证书文件,\n# 使用 PEM 格式时，您必须通过 --rpc-private-key 指定私钥\n#rpc-certificate=/path/to/certificate.pem\n# 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件\n#rpc-private-key=/path/to/certificate.key\n\n## BT/PT下载相关 ##\n\n# 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true\n#follow-torrent=true\n# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999\nlisten-port=51413\n# 单个种子最大连接数, 默认:55\n#bt-max-peers=55\n# 打开DHT功能, PT需要禁用, 默认:true\nenable-dht=false\n# 打开IPv6 DHT功能, PT需要禁用\n#enable-dht6=false\n# DHT网络监听端口, 默认:6881-6999\n#dht-listen-port=6881-6999\n# 本地节点查找, PT需要禁用, 默认:false\n#bt-enable-lpd=false\n# 种子交换, PT需要禁用, 默认:true\nenable-peer-exchange=false\n# 每个种子限速, 对少种的PT很有用, 默认:50K\n#bt-request-peer-speed-limit=50K\n# 客户端伪装, PT需要\npeer-id-prefix=-TR2770-\nuser-agent=Transmission/2.77\n# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0\nseed-ratio=0\n# 强制保存会话, 即使任务已经完成, 默认:false\n# 较新的版本开启后会在任务完成后依然保留.aria2文件\n#force-save=false\n# BT校验相关, 默认:true\n#bt-hash-check-seed=true\n# 继续之前的BT任务时, 无需再次校验, 默认:false\nbt-seed-unverified=true\n# 保存磁力链接元数据为种子文件(.torrent文件), 默认:false\nbt-save-metadata=true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n\n\n\n# aria2 mac\n\n * https://github.com/fsaimon/aria2.conf\n * conf 注意事项\n\n使用请将配置文件中三处文件路径修改为自己的路径\n\n将 aria2.conf 放在 ~/.aria2/ 下\n\n使用 aria2 命令时，aria2 会自动加载 ~/.aria2/aria2.conf\n\n配置文件中没有启用 input-file 选项，理由在文件中有说明\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * MacOS 开机启动详细\n\n将 Aria2.sh 放在你喜欢的地方�\n\n修改 plist 中 shell 的路径\n\n将 local.Aria2.plist 放在 ~/Library/LaunchAgents/ 下\n\n打开终端执行以下命令添加启动计划\n\nlaunchctl load ~/Library/LaunchAgents/local.Aria2.plist\n添加完后任务便立刻开始\n\n可以通过以下命令查看是否添加成功\nlaunchctl list | grep Aria2\n\n\n开启 aria-rpc 使用\nlaunchctl start local.Aria2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * Aria2.sh\n\n#!/bin/sh\n\n# Aria2 RPC #\n/usr/local/bin/aria2c --enable-rpc=true --input-file=/Users/name/.aria2/aria2.session --conf-path=/Users/name/.aria2/aria2.conf\n\n\n1\n2\n3\n4\n\n * aria2.conf\n\n# Creat by FS\n\n## 下载设置 ##\n\n# 断点续传\ncontinue=true\n# 最大同时下载任务数, 运行时可修改, 默认:5\nmax-concurrent-downloads=5\n# 单个任务最大线程数, 添加时可指定, 默认:5\nsplit=16\n# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M\n# 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载\nmin-split-size=1M\n# 同一服务器连接数, 添加时可指定, 默认:1\nmax-connection-per-server=16\n# 断开速度过慢的连接\nlowest-speed-limit=0\n# 整体下载速度限制, 运行时可修改, 默认:0\n#max-overall-download-limit=0\n# 单个任务下载速度限制, 默认:0\n#max-download-limit=0\n# 整体上传速度限制, 运行时可修改, 默认:0\n#max-overall-upload-limit=0\n# 单个任务上传速度限制, 默认:0\n#max-upload-limit=0\n# 禁用IPv6, 默认:false\n#disable-ipv6=true\n# 当服务器返回503错误时, aria2会尝试重连\n# 尝试重连次数, 0代表无限, 默认:5\nmax-tries=0\n# 重连冷却, 默认:0\n#retry-wait=0\n\n## 进度保存相关 ##\n\n# 从会话文件中读取下载任务\n# 开启该参数后aria2将只接受session中的任务, 这意味着aria2一旦使用conf后将不再接受来自终端的任务, 所以该条只需要在启动rpc时加上就可以了\n#input-file=/Users/name/.aria2/aria2.session\n# 在Aria2退出时保存`错误/未完成`的下载任务到会话文件\nsave-session=/Users/name/.aria2/aria2.session\n# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0\nsave-session-interval=60\n# 强制保存会话, 即使任务已经完成, 默认:false\n# 较新的版本开启后会在任务完成后依然保留.aria2文件\n#force-save=false\n\n## RPC相关设置 ##\n\n# 启用RPC, 默认:false\n#enable-rpc=true\n# 允许所有来源, 默认:false\nrpc-allow-origin-all=true\n# 允许非外部访问, 默认:false\nrpc-listen-all=true\n# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同\nevent-poll=kqueue\n# RPC监听端口, 端口被占用时可以修改, 默认:6800\n#rpc-listen-port=6800\n# 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项\n#rpc-secret=<TOKEN>\n# 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项\n#rpc-user=<USER>\n# 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项\n#rpc-passwd=<PASSWD>\n\n## BT/PT下载相关 ##\n\n# 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true\n#follow-torrent=true\n# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999\n#listen-port=51413\n# 单个种子最大连接数, 默认:55\n#bt-max-peers=55\n# 打开DHT功能, PT需要禁用, 默认:true\n#enable-dht=false\n# 打开IPv6 DHT功能, PT需要禁用, 默认:true\n#enable-dht6=false\n# DHT网络监听端口, 默认:6881-6999\n#dht-listen-port=6881-6999\n# 本地节点查找, PT需要禁用, 默认:false\nbt-enable-lpd=true\n# 种子交换, PT需要禁用, 默认:true\n#enable-peer-exchange=true\n# 每个种子限速, 对少种的PT很有用, 默认:50K\n#bt-request-peer-speed-limit=50K\n# 客户端伪装, PT需要\n#peer-id-prefix=-TR2770-\n#user-agent=Transmission/2.77\n# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0\n#seed-ratio=0\n# BT校验相关, 默认:true\n#bt-hash-check-seed=true\n# 继续之前的BT任务时, 无需再次校验, 默认:false\nbt-seed-unverified=true\n# 保存磁力链接元数据为种子文件(.torrent文件), 默认:false\nbt-save-metadata=true\n# 强制加密, 防迅雷必备\n#bt-require-crypto=true\n\n## 磁盘相关 ##\n\n#文件保存路径, 默认为当前启动位置\ndir=/Users/name/Downloads/aria2\n#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)\nenable-mmap=true\n# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc\n# 预分配所需时间: 快none < trunc < falloc < prealloc慢\n# falloc仅仅比trunc慢0.06s\n# 磁盘碎片: 无falloc = prealloc < trunc = none有\n# 推荐优先级: 高falloc --\x3e prealloc --\x3e trunc --\x3enone低\n# EXT4, btrfs, xfs, NTFS等新型文件系统建议使用falloc, falloc(fallocate)在这些文件系统上可以瞬间创建完整的空文件\n# trunc(ftruncate) 同样是是瞬间创建文件, 但是与falloc的区别是创建出的空文件不占用实际磁盘空间\n# prealloc 传统的创建完整的空文件, aria2会一直等待直到分配结束, 也就是说如果是在HHD上下载10G文件，那么你的aria2将会一直等待你的硬盘持续满载工作直到10G文件创建完成后才会开始下载\n# none将不会预分配, 磁盘碎片程度受下面的disk-cache影响, trunc too\n# 请勿在传统文件系统如:EXT3, FAT32上使用falloc, 它的实际效果将与prealloc相同\n# MacOS建议使用prealloc, 因为它不支持falloc, 也不支持trunc, but可以尝试用brew安装truncate以支持trunc(ftruncate)\n# 事实上我有些不能理解trunc在aria2中的角色, 它与none几乎没有区别, 也就是说:太鸡肋了\nfile-allocation=trunc\n# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M\ndisk-cache=64M\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n',normalizedContent:'# url\n\n * https://github.com/aria2/aria2\n * https://github.com/p3terx/aria2.conf\n\n\n# 网盘助手\n\nhttps://www.baiduyun.wiki/zh-cn/\n\n\n# aria2 windows\n\n * hiderun.vbs\n\ncreateobject("wscript.shell").run "d:\\aria2\\aria2c.exe --conf-path=aria2.conf",0\n\n\n1\n\n * aria2.conf\n\n## \'#\'开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##\n## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##\n\n## 文件保存相关 ##\n\n# 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置（自己设置）\ndir=d:\\downloads\n# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16m\n#disk-cache=32m\n# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc\n# 预分配所需时间: none < falloc ? trunc < prealloc\n# falloc和trunc则需要文件系统和内核支持\n# ntfs建议使用falloc, ext3/4建议trunc, mac 下需要注释此项\n#file-allocation=none\n# 断点续传\ncontinue=true\n\n## 下载连接相关 ##\n\n# 最大同时下载任务数, 运行时可修改, 默认:5 （自己设置）\n#max-concurrent-downloads=5\n# 同一服务器连接数, 添加时可指定, 默认:1 （自己设置）\nmax-connection-per-server=5\n# 最小文件分片大小, 添加时可指定, 取值范围1m -1024m, 默认:20m\n# 假定size=10m, 文件为20mib 则使用两个来源下载; 文件为15mib 则使用一个来源下载 （自己设置）\nmin-split-size=10m\n# 单个任务最大线程数, 添加时可指定, 默认:5 （自己设置）\n#split=5\n# 整体下载速度限制, 运行时可修改, 默认:0\n#max-overall-download-limit=0\n# 单个任务下载速度限制, 默认:0\n#max-download-limit=0\n# 整体上传速度限制, 运行时可修改, 默认:0\n#max-overall-upload-limit=0\n# 单个任务上传速度限制, 默认:0\n#max-upload-limit=0\n# 禁用ipv6, 默认:false\n#disable-ipv6=true\n# 连接超时时间, 默认:60\n#timeout=60\n# 最大重试次数, 设置为0表示不限制重试次数, 默认:5\n#max-tries=5\n# 设置重试等待的秒数, 默认:0\n#retry-wait=0\n\n## 进度保存相关 ##\n\n# 从会话文件中读取下载任务（自己设置）\ninput-file=d:\\aria2\\aria2.session\n# 在aria2退出时保存`错误/未完成`的下载任务到会话文件（自己设置）\nsave-session=d:\\aria2\\aria2.session\n# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0\n#save-session-interval=60\n\n## rpc相关设置 ##\n\n# 启用rpc, 默认:false\nenable-rpc=true\n# 允许所有来源, 默认:false\nrpc-allow-origin-all=true\n# 允许非外部访问, 默认:false\nrpc-listen-all=true\n# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同\n#event-poll=select\n# rpc监听端口, 端口被占用时可以修改, 默认:6800\n#rpc-listen-port=6800\n# 设置的rpc授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项\n#rpc-secret=<token>\n# 设置的rpc访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项\n#rpc-user=<user>\n# 设置的rpc访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项\n#rpc-passwd=<passwd>\n# 是否启用 rpc 服务的 ssl/tls 加密,\n# 启用加密后 rpc 服务需要使用 https 或者 wss 协议连接\n#rpc-secure=true\n# 在 rpc 服务中启用 ssl/tls 加密时的证书文件,\n# 使用 pem 格式时，您必须通过 --rpc-private-key 指定私钥\n#rpc-certificate=/path/to/certificate.pem\n# 在 rpc 服务中启用 ssl/tls 加密时的私钥文件\n#rpc-private-key=/path/to/certificate.key\n\n## bt/pt下载相关 ##\n\n# 当下载的是一个种子(以.torrent结尾)时, 自动开始bt任务, 默认:true\n#follow-torrent=true\n# bt监听端口, 当端口被屏蔽时使用, 默认:6881-6999\nlisten-port=51413\n# 单个种子最大连接数, 默认:55\n#bt-max-peers=55\n# 打开dht功能, pt需要禁用, 默认:true\nenable-dht=false\n# 打开ipv6 dht功能, pt需要禁用\n#enable-dht6=false\n# dht网络监听端口, 默认:6881-6999\n#dht-listen-port=6881-6999\n# 本地节点查找, pt需要禁用, 默认:false\n#bt-enable-lpd=false\n# 种子交换, pt需要禁用, 默认:true\nenable-peer-exchange=false\n# 每个种子限速, 对少种的pt很有用, 默认:50k\n#bt-request-peer-speed-limit=50k\n# 客户端伪装, pt需要\npeer-id-prefix=-tr2770-\nuser-agent=transmission/2.77\n# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0\nseed-ratio=0\n# 强制保存会话, 即使任务已经完成, 默认:false\n# 较新的版本开启后会在任务完成后依然保留.aria2文件\n#force-save=false\n# bt校验相关, 默认:true\n#bt-hash-check-seed=true\n# 继续之前的bt任务时, 无需再次校验, 默认:false\nbt-seed-unverified=true\n# 保存磁力链接元数据为种子文件(.torrent文件), 默认:false\nbt-save-metadata=true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n\n\n\n# aria2 mac\n\n * https://github.com/fsaimon/aria2.conf\n * conf 注意事项\n\n使用请将配置文件中三处文件路径修改为自己的路径\n\n将 aria2.conf 放在 ~/.aria2/ 下\n\n使用 aria2 命令时，aria2 会自动加载 ~/.aria2/aria2.conf\n\n配置文件中没有启用 input-file 选项，理由在文件中有说明\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * macos 开机启动详细\n\n将 aria2.sh 放在你喜欢的地方�\n\n修改 plist 中 shell 的路径\n\n将 local.aria2.plist 放在 ~/library/launchagents/ 下\n\n打开终端执行以下命令添加启动计划\n\nlaunchctl load ~/library/launchagents/local.aria2.plist\n添加完后任务便立刻开始\n\n可以通过以下命令查看是否添加成功\nlaunchctl list | grep aria2\n\n\n开启 aria-rpc 使用\nlaunchctl start local.aria2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * aria2.sh\n\n#!/bin/sh\n\n# aria2 rpc #\n/usr/local/bin/aria2c --enable-rpc=true --input-file=/users/name/.aria2/aria2.session --conf-path=/users/name/.aria2/aria2.conf\n\n\n1\n2\n3\n4\n\n * aria2.conf\n\n# creat by fs\n\n## 下载设置 ##\n\n# 断点续传\ncontinue=true\n# 最大同时下载任务数, 运行时可修改, 默认:5\nmax-concurrent-downloads=5\n# 单个任务最大线程数, 添加时可指定, 默认:5\nsplit=16\n# 最小文件分片大小, 添加时可指定, 取值范围1m -1024m, 默认:20m\n# 假定size=10m, 文件为20mib 则使用两个来源下载; 文件为15mib 则使用一个来源下载\nmin-split-size=1m\n# 同一服务器连接数, 添加时可指定, 默认:1\nmax-connection-per-server=16\n# 断开速度过慢的连接\nlowest-speed-limit=0\n# 整体下载速度限制, 运行时可修改, 默认:0\n#max-overall-download-limit=0\n# 单个任务下载速度限制, 默认:0\n#max-download-limit=0\n# 整体上传速度限制, 运行时可修改, 默认:0\n#max-overall-upload-limit=0\n# 单个任务上传速度限制, 默认:0\n#max-upload-limit=0\n# 禁用ipv6, 默认:false\n#disable-ipv6=true\n# 当服务器返回503错误时, aria2会尝试重连\n# 尝试重连次数, 0代表无限, 默认:5\nmax-tries=0\n# 重连冷却, 默认:0\n#retry-wait=0\n\n## 进度保存相关 ##\n\n# 从会话文件中读取下载任务\n# 开启该参数后aria2将只接受session中的任务, 这意味着aria2一旦使用conf后将不再接受来自终端的任务, 所以该条只需要在启动rpc时加上就可以了\n#input-file=/users/name/.aria2/aria2.session\n# 在aria2退出时保存`错误/未完成`的下载任务到会话文件\nsave-session=/users/name/.aria2/aria2.session\n# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0\nsave-session-interval=60\n# 强制保存会话, 即使任务已经完成, 默认:false\n# 较新的版本开启后会在任务完成后依然保留.aria2文件\n#force-save=false\n\n## rpc相关设置 ##\n\n# 启用rpc, 默认:false\n#enable-rpc=true\n# 允许所有来源, 默认:false\nrpc-allow-origin-all=true\n# 允许非外部访问, 默认:false\nrpc-listen-all=true\n# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同\nevent-poll=kqueue\n# rpc监听端口, 端口被占用时可以修改, 默认:6800\n#rpc-listen-port=6800\n# 设置的rpc授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项\n#rpc-secret=<token>\n# 设置的rpc访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项\n#rpc-user=<user>\n# 设置的rpc访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项\n#rpc-passwd=<passwd>\n\n## bt/pt下载相关 ##\n\n# 当下载的是一个种子(以.torrent结尾)时, 自动开始bt任务, 默认:true\n#follow-torrent=true\n# bt监听端口, 当端口被屏蔽时使用, 默认:6881-6999\n#listen-port=51413\n# 单个种子最大连接数, 默认:55\n#bt-max-peers=55\n# 打开dht功能, pt需要禁用, 默认:true\n#enable-dht=false\n# 打开ipv6 dht功能, pt需要禁用, 默认:true\n#enable-dht6=false\n# dht网络监听端口, 默认:6881-6999\n#dht-listen-port=6881-6999\n# 本地节点查找, pt需要禁用, 默认:false\nbt-enable-lpd=true\n# 种子交换, pt需要禁用, 默认:true\n#enable-peer-exchange=true\n# 每个种子限速, 对少种的pt很有用, 默认:50k\n#bt-request-peer-speed-limit=50k\n# 客户端伪装, pt需要\n#peer-id-prefix=-tr2770-\n#user-agent=transmission/2.77\n# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0\n#seed-ratio=0\n# bt校验相关, 默认:true\n#bt-hash-check-seed=true\n# 继续之前的bt任务时, 无需再次校验, 默认:false\nbt-seed-unverified=true\n# 保存磁力链接元数据为种子文件(.torrent文件), 默认:false\nbt-save-metadata=true\n# 强制加密, 防迅雷必备\n#bt-require-crypto=true\n\n## 磁盘相关 ##\n\n#文件保存路径, 默认为当前启动位置\ndir=/users/name/downloads/aria2\n#另一种linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)\nenable-mmap=true\n# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc\n# 预分配所需时间: 快none < trunc < falloc < prealloc慢\n# falloc仅仅比trunc慢0.06s\n# 磁盘碎片: 无falloc = prealloc < trunc = none有\n# 推荐优先级: 高falloc --\x3e prealloc --\x3e trunc --\x3enone低\n# ext4, btrfs, xfs, ntfs等新型文件系统建议使用falloc, falloc(fallocate)在这些文件系统上可以瞬间创建完整的空文件\n# trunc(ftruncate) 同样是是瞬间创建文件, 但是与falloc的区别是创建出的空文件不占用实际磁盘空间\n# prealloc 传统的创建完整的空文件, aria2会一直等待直到分配结束, 也就是说如果是在hhd上下载10g文件，那么你的aria2将会一直等待你的硬盘持续满载工作直到10g文件创建完成后才会开始下载\n# none将不会预分配, 磁盘碎片程度受下面的disk-cache影响, trunc too\n# 请勿在传统文件系统如:ext3, fat32上使用falloc, 它的实际效果将与prealloc相同\n# macos建议使用prealloc, 因为它不支持falloc, 也不支持trunc, but可以尝试用brew安装truncate以支持trunc(ftruncate)\n# 事实上我有些不能理解trunc在aria2中的角色, 它与none几乎没有区别, 也就是说:太鸡肋了\nfile-allocation=trunc\n# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16m\ndisk-cache=64m\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n',charsets:{cjk:!0},lastUpdated:"3/23/2022",lastUpdatedTimestamp:1648018006e3,createdTime:1647517837e3},{title:"centos7命令参数",frontmatter:{title:"centos7命令参数",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["centos7"],categories:["system"],readingShow:"top"},regularPath:"/services/tools/centos7.html",relativePath:"services/tools/centos7.md",key:"v-6af8ea4b",path:"/services/tools/centos7.html",headers:[{level:2,title:"ip 查看",slug:"ip-查看",normalizedTitle:"ip 查看",charIndex:2},{level:2,title:"网络配置",slug:"网络配置",normalizedTitle:"网络配置",charIndex:24},{level:2,title:"修改 hosts",slug:"修改-hosts",normalizedTitle:"修改 hosts",charIndex:43},{level:2,title:"systemctl 服务",slug:"systemctl-服务",normalizedTitle:"systemctl 服务",charIndex:126},{level:2,title:"passwd",slug:"passwd",normalizedTitle:"passwd",charIndex:487},{level:2,title:"curl",slug:"curl",normalizedTitle:"curl",charIndex:520},{level:2,title:"rsync 同步",slug:"rsync-同步",normalizedTitle:"rsync 同步",charIndex:810},{level:2,title:"ssh root 禁用",slug:"ssh-root-禁用",normalizedTitle:"ssh root 禁用",charIndex:1301},{level:2,title:"禁止 root 本地登录",slug:"禁止-root-本地登录",normalizedTitle:"禁止 root 本地登录",charIndex:1458},{level:2,title:"vmware-tools",slug:"vmware-tools",normalizedTitle:"vmware-tools",charIndex:1566},{level:2,title:"port 修改",slug:"port-修改",normalizedTitle:"port 修改",charIndex:1667},{level:2,title:"SELINUX",slug:"selinux",normalizedTitle:"selinux",charIndex:1790},{level:2,title:"关闭 SELINUX",slug:"关闭-selinux",normalizedTitle:"关闭 selinux",charIndex:1802},{level:2,title:"不关 SELINUX",slug:"不关-selinux",normalizedTitle:"不关 selinux",charIndex:1972},{level:2,title:"通过软件源在线安装",slug:"通过软件源在线安装",normalizedTitle:"通过软件源在线安装",charIndex:3362},{level:2,title:"通过本地 rpm 包安装",slug:"通过本地-rpm-包安装",normalizedTitle:"通过本地 rpm 包安装",charIndex:3439},{level:2,title:"安装 nginx",slug:"安装-nginx",normalizedTitle:"安装 nginx",charIndex:3505},{level:2,title:"nvm 安装换源",slug:"nvm-安装换源",normalizedTitle:"nvm 安装换源",charIndex:4045},{level:2,title:"firewall-cmd",slug:"firewall-cmd",normalizedTitle:"firewall-cmd",charIndex:2533},{level:2,title:"Yum 命令",slug:"yum-命令",normalizedTitle:"yum 命令",charIndex:7520},{level:2,title:"命令行命令失效",slug:"命令行命令失效",normalizedTitle:"命令行命令失效",charIndex:7725},{level:2,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:7760},{level:2,title:"ss server",slug:"ss-server",normalizedTitle:"ss server",charIndex:8282},{level:2,title:"相关链接",slug:"相关链接",normalizedTitle:"相关链接",charIndex:9534}],headersStr:"ip 查看 网络配置 修改 hosts systemctl 服务 passwd curl rsync 同步 ssh root 禁用 禁止 root 本地登录 vmware-tools port 修改 SELINUX 关闭 SELINUX 不关 SELINUX 通过软件源在线安装 通过本地 rpm 包安装 安装 nginx nvm 安装换源 firewall-cmd Yum 命令 命令行命令失效 常用命令 ss server 相关链接",content:'# ip 查看\n\n * ip addr\n\n\n# 网络配置\n\n * nmtui\n\n\n# 修改 hosts\n\nvi /etc/hosts\n# 保存后重启网络\nsudo /etc/init.d/networking restart\n\n\n1\n2\n3\n\n\n\n# systemctl 服务\n\nsudo systemctl start service_name   # 启动服务\nsudo systemctl stop service_name    # 停止服务\nsudo systemctl status service_name  # 服务状态\nsudo systemctl restart service_name # 重启服务\nsudo systemctl reload service_name  # 重载服务\n\n# 启用与禁用\nsudo systemctl enable service_name   # 开机自启用可以用enable启用\nsudo systemctl disable service_name  # 禁用\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# passwd\n\n * 修改密码: passwd root\n\n\n# curl\n\ncurl https://www.baidu.com\ncurl -v https://www.baidu.com\n\n# 把地址内容下载到某个文件里\ncurl -o file_name url\ncurl -o test.html https://www.baidu.com\n\n# 用远程地址是文件，把文件下载下来，文件名使用远程文件的名字\ncurl -O file_url\ncurl -O https://raw.githubusercontent.com/amix/vimrc/master/README.md\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# rsync 同步\n\n# 参数\nr（recursive）# 递归复制，复制同步的文件不保留文件的权限，创建与修改时间\na（archive）# 存档模式，可以递归复制，保留文件替身，复制同步的文件会保留文件的拥有者，用户名，时间，权限\nz（compress）# 压缩传输，传输文件时会压缩文件\nn（dry-run）# 假装同步，看看都有什么东西可以同步的，不会真正执行同步\nh（human-readable）# 用人类都看懂的方式显示数字\nP（progress）# 进度\n\n# 基本用法：rsync 选项 源 目标\n# 递归同步：\nrsync -r 源 目标   # 递归模式同步不保留文件属性。\n# 存档模式：\nrsync -a 源 目标   # 保留文件属性\n# 显示进度：\nrsync -a -P 源 目标\nrsync -aP 源 目标\n# 删 除：\nrsync -a -P --delete 源 目标\n# 远 程：\nrsync -a -P 用户@主机:源 目标\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# ssh root 禁用\n\n# 查找：\n/etc/ssh/sshd_config\n# 将PermitRootLogin yes\n# 修改为：\nPermitRootLogin no\n\n# 重新启动 sshd：\nsystemctl restart sshd.service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 禁止 root 本地登录\n\n# 修改配置 /etc/pam.d/login ，增加如下一行\nauth required pam_succeed_if.so user != root quiet\n\n\n1\n2\n\n\n\n# vmware-tools\n\n * vmware 虚拟机工具\n\nsu root\ncd vmware-tools-distrib\nls\n./vmware-install.pl\n\n\n1\n2\n3\n4\n\n\n\n# port 修改\n\n# 查找：/etc/ssh/sshd_config\n＃Port 22\n# 修改为：\nPort 5000\n\n# 重启ssh：\nsystemctl restart sshd.service\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# SELINUX\n\n\n# 关闭 SELINUX\n\nvi /etc/selinux/config  修改 SELINUX=disabled\n\n# 查看selinux状态sestatus 如果是enabled就是开启状态\nsestatus -v\n\n# 重启ssh：\nsystemctl restart sshd.service\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 不关 SELINUX\n\n * 但是需要添加一下 SELINUX 的端口, 使用 semanage 工具\n * 安装 semanage\n\nyum -y install policycoreutils-python\n\n# 使用以下命令查看当前SElinux 允许的ssh端口\nsemanage port -l | grep ssh\n\n# 添加20000端口到 SELinux\nsemanage port -a -t ssh_port_t -p tcp 5000\n\n# 然后确认一下是否添加进去\nsemanage port -l | grep ssh\n\n# 如果成功会输出\nssh_port_t   --\x3e  tcp    5000, 22\n\n# 重启ssh\nsystemctl restart sshd.service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n * 防火墙中放行新加入端口\n   \n   * 方法 1\n   \n   # 启动 systemctl\n   systemctl start firewalld.service\n   # 开机时启用服务\n   systemctl enable firewalld.service\n   \n   # 添加允许新端口号\n   firewall-cmd --permanent --add-port=5000/tcp\n   \n   # 用该命令查询\n   firewall-cmd --permanent --query-port=5000/tcp\n   # 如果是yes就是添加成功，如果是no就是没成功\n   \n   # 成功后重载防火墙\n   firewall-cmd --reload\n   \n   # 配置iptable\n   \n   iptables -A INPUT -p tcp --dport 5000 -j ACCEPT\n   \n   # 重启 iptable\n   service iptables restart\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   \n   * 方法 2\n   \n   # 复制 firewalld 有关 sshd 的设定档案：\n   cp /usr/lib/firewalld/services/ssh.xml /etc/firewalld/services/\n   \n   # 使用 vim  (或任何文本编辑器) 开启 /etc/firewalld/services/ssh.xml，寻找：\n   <port protocol="tcp" port="22"/>\n   # 修改为：\n   <port protocol="tcp" port="5000"/>\n   \n   # 储存后重新加载 firewalld：\n   firewall-cmd --reload\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n\n\n# 通过软件源在线安装\n\nsudo yum -y install 软件名\n# 其中参数-y为所有选项均选则yes，不加-y则要手动确认\n\n\n1\n2\n\n\n\n# 通过本地 rpm 包安装\n\nsudo rpm -ivh 软件名\n# 其中参数-i为安装，-vh为列出安装过程\n\n\n1\n2\n\n\n\n# 安装 nginx\n\nyum install epel-release -y\nyum install nginx -y\nnginx -t # 检测nginx的语法\nservice nginx status # 查看状态\nservice nginx start / reload\nservice nginx stop\nsystemctl enable nginx\n\n# firewall设置：\nsystemctl start firewalld.service    #启动firewall\nsystemctl stop firewalld.service     #停止firewall\nsystemctl disable firewalld.service  #禁止firewall开机启动\n\n# firewalld默认已经安装并启用了，如果需要nginx可以访问需要执行以下命令：\nfirewall-cmd --permanent --add-service=http\nfirewall-cmd --permanent --zone=trusted --add-port=80/tcp\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# nvm 安装换源\n\n * Node Version Manager: nvm\n\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n\nvim .bashrc\nexport NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node\n\nsource ~/git/nvm/nvm.sh\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# firewall-cmd\n\n * firewalld\n\n# 启动：\nsystemctl start firewalld\n# 查状态：\nsystemctl status firewalld\n# 停止：\nsystemctl disable firewalld\n# 禁用：\nsystemctl stop firewalld\n# 在开机时启用一个服务：\nsystemctl enable firewalld.service\n# 在开机时禁用一个服务：\nsystemctl disable firewalld.service\n# 查看服务是否开机启动：\nsystemctl is-enabled firewalld.service\n# 查看已启动的服务列表：\nsystemctl list-unit-files|grep enabled\n# 查看启动失败的服务列表：\nsystemctl --failed\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 配置 firewalld-cmd\n\n# 查看版本：\nfirewall-cmd --version\n# 查看帮助：\nfirewall-cmd --help\n# 显示状态：\nfirewall-cmd --state\n\n# 查看所有打开的端口：\nfirewall-cmd --zone=public --list-ports\nfirewall-cmd --permanent --zone=public --list-ports\n# 查看开启的服务\nfirewall-cmd --permanent --zone=public --list-services\n\n# 更新防火墙规则：\nfirewall-cmd --reload\n# 查看区域信息:\nfirewall-cmd --get-active-zones\n# 查看指定接口所属区域：\nfirewall-cmd --get-zone-of-interface=eth0\n# 拒绝所有包：\nfirewall-cmd --panic-on\n# 取消拒绝状态：\nfirewall-cmd --panic-off\n# 查看是否拒绝：\nfirewall-cmd --query-panic\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * 开启端口\n\n# /etc/firewalld/zones/public.xml\n\nfirewall-cmd --zone=public(作用域) --add-port=80/tcp(端口和访问类型) --permanent(永久生效)\n\nfirewall-cmd --zone=public --add-service=http --permanent\n\nfirewall-cmd --zone=public --query-port=80/tcp  #查看\nfirewall-cmd --zone=public --remove-port=80/tcp --permanent  # 删除\n\nfirewall-cmd --list-services\nfirewall-cmd --get-services\nfirewall-cmd --add-service=<service>\nfirewall-cmd --delete-service=<service>\n\n# 参数解释\n--add-service #添加的服务\n--zone #作用域\n--add-port=80/tcp #添加端口，格式为：端口/通讯协议\n--permanent #永久生效，没有此参数重启后失效\n\n# 开启某个端口\nfirewall-cmd --permanent --zone=public --add-port=8080-8081/tcp # 永久\nfirewall-cmd --zone=public --add-port=8080-8081/tcp # 临时\n\n# 启用某个服务\nfirewall-cmd --zone=public --add-service=https # 临时\nfirewall-cmd --permanent --zone=public --add-service=https # 永久\n\n# 查看开启的端口和服务\nfirewall-cmd --permanent --zone=public --list-services # 服务空格隔开 例如 dhcpv6-client https ss\nfirewall-cmd --permanent --zone=public --list-ports # 端口空格隔开 例如 8080-8081/tcp 8388/tcp 80/tcp\n\n# 重新载入，更新防火墙规则\nfirewall-cmd --reload\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n * 详细使用\n\n# 设置某个ip访问某个服务\nfirewall-cmd --permanent --zone=public --add-rich-rule=\'rule family="ipv4" source address="192.168.0.4/24" service name="http" accept\'\n# 删除配置\nfirewall-cmd --permanent --zone=public --remove-rich-rule=\'rule family="ipv4" source address="192.168.0.4/24" service name="http" accept\'\n# 设置某个ip访问某个端口\nfirewall-cmd --permanent --add-rich-rule \'rule family=ipv4 source address=192.168.0.1/2 port port=80 protocol=tcp accept\'\n# 删除配置\nfirewall-cmd --permanent --remove-rich-rule \'rule family=ipv4 source address=192.168.0.1/2 port port=80 protocol=tcp accept\'\n\n# 检查是否允许伪装IP\nfirewall-cmd --query-masquerade\n# 允许防火墙伪装IP\nfirewall-cmd --add-masquerade\n# 禁止防火墙伪装IP\nfirewall-cmd --remove-masquerade\n\n# 将80端口的流量转发至8080\nfirewall-cmd --add-forward-port=port=80:proto=tcp:toport=8080\n# 将80端口的流量转发至192.168.0.1\nfirewall-cmd --add-forward-port=proto=80:proto=tcp:toaddr=192.168.1.0.1\n# 将80端口的流量转发至192.168.0.1的8080端口\nfirewall-cmd --add-forward-port=proto=80:proto=tcp:toaddr=192.168.0.1:toport=8080\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# Yum 命令\n\nyum(选项)(参数)\n\nh  # 显示帮助信息\ny  # 对所有的提问都回答"yes"\nc  # 指定配置文件\nq  # 安静模式\nv  # 详细模式\nd  # 设置调试等级(0-10)\ne  # 设置错误等级(0-10)\nR  # 设置yum处理一个命令的最大等待时间\nC  # 完全从缓存中运行，而不去下载或者更新任何头文件\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 命令行命令失效\n\n * PATH=/bin:/usr/bin\n\n\n# 常用命令\n\nyum repolist\nyum search xxx\nyum info xxx\nyum install xxx -y\nyum -y install vim\t# 安装vim\nyum remove xxx -y\nyum -y update && yum -y upgrade\nyum install wget -y\nyum install -y epel-release\nyum -y install gcc gcc-c++\nyum -y install gcc automake autoconf libtool make\nyum -y install net-tools\nnetstat –apn\nnetstat -ntlp\nps -aux | grep tomcat\nnetstat -ntulp |grep 80  # 查看80端口\nssh # 远程登录，如ssh root@gitlab.study.com\ncat /etc/redhat-release # 查看系统版本\nps -ef | grep nginx\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# ss server\n\nmac SSR: https://github.com/qinyuhang/ShadowsocksX-NG-R\nwin SSR : https://github.com/shadowsocksr-backup/shadowsocksr-csharp\nandroid SSR: https://github.com/shadowsocksr-backup/shadowsocksr-android\nandroid SSRR: https://github.com/shadowsocksrr/shadowsocksr-android\n\nwin : https://github.com/shadowsocks/shadowsocks-windows\nmac : https://github.com/shadowsocks/ShadowsocksX-NG\nandroid : https://github.com/shadowsocks/shadowsocks-android\n\nbase: https://github.com/shadowsocks/shadowsocks/tree/master\n\nhttps://segmentfault.com/a/1190000013242438\nhttps://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E\nhttps://segmentfault.com/a/1190000012654072\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * install\n\n# 需要安装git\nyum install python-setuptools && easy_install pip\npip install git+https://github.com/shadowsocks/shadowsocks.git@master\nssserver -c /etc/shadowsocks.json\nvim /etc/rc.d/rc.local\nssserver -c /etc/shadowsocks.json -d start\n\n\n1\n2\n3\n4\n5\n6\n\n * config\n\n# shadowsocks.json\n# server ip : 101.*.*.*\n\n{\n    "server":"server ip",\n    "server_port":23345,\n    "local_address":"127.0.0.1",\n    "local_port":1080,\n    "password":"password",\n    "timeout":300,\n    "method":"aes-256-cfb",\n    "fast_open":false\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 相关链接\n\n * centos7 开机界面出现多个选项\n * Centos7 修改 SSH 端口\n * judasn/Linux-Tutorial\n * amix/vimrc\n * systemctl 命令\n * linux 基础命令介绍\n * firewall 防火墙',normalizedContent:'# ip 查看\n\n * ip addr\n\n\n# 网络配置\n\n * nmtui\n\n\n# 修改 hosts\n\nvi /etc/hosts\n# 保存后重启网络\nsudo /etc/init.d/networking restart\n\n\n1\n2\n3\n\n\n\n# systemctl 服务\n\nsudo systemctl start service_name   # 启动服务\nsudo systemctl stop service_name    # 停止服务\nsudo systemctl status service_name  # 服务状态\nsudo systemctl restart service_name # 重启服务\nsudo systemctl reload service_name  # 重载服务\n\n# 启用与禁用\nsudo systemctl enable service_name   # 开机自启用可以用enable启用\nsudo systemctl disable service_name  # 禁用\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# passwd\n\n * 修改密码: passwd root\n\n\n# curl\n\ncurl https://www.baidu.com\ncurl -v https://www.baidu.com\n\n# 把地址内容下载到某个文件里\ncurl -o file_name url\ncurl -o test.html https://www.baidu.com\n\n# 用远程地址是文件，把文件下载下来，文件名使用远程文件的名字\ncurl -o file_url\ncurl -o https://raw.githubusercontent.com/amix/vimrc/master/readme.md\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# rsync 同步\n\n# 参数\nr（recursive）# 递归复制，复制同步的文件不保留文件的权限，创建与修改时间\na（archive）# 存档模式，可以递归复制，保留文件替身，复制同步的文件会保留文件的拥有者，用户名，时间，权限\nz（compress）# 压缩传输，传输文件时会压缩文件\nn（dry-run）# 假装同步，看看都有什么东西可以同步的，不会真正执行同步\nh（human-readable）# 用人类都看懂的方式显示数字\np（progress）# 进度\n\n# 基本用法：rsync 选项 源 目标\n# 递归同步：\nrsync -r 源 目标   # 递归模式同步不保留文件属性。\n# 存档模式：\nrsync -a 源 目标   # 保留文件属性\n# 显示进度：\nrsync -a -p 源 目标\nrsync -ap 源 目标\n# 删 除：\nrsync -a -p --delete 源 目标\n# 远 程：\nrsync -a -p 用户@主机:源 目标\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# ssh root 禁用\n\n# 查找：\n/etc/ssh/sshd_config\n# 将permitrootlogin yes\n# 修改为：\npermitrootlogin no\n\n# 重新启动 sshd：\nsystemctl restart sshd.service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 禁止 root 本地登录\n\n# 修改配置 /etc/pam.d/login ，增加如下一行\nauth required pam_succeed_if.so user != root quiet\n\n\n1\n2\n\n\n\n# vmware-tools\n\n * vmware 虚拟机工具\n\nsu root\ncd vmware-tools-distrib\nls\n./vmware-install.pl\n\n\n1\n2\n3\n4\n\n\n\n# port 修改\n\n# 查找：/etc/ssh/sshd_config\n＃port 22\n# 修改为：\nport 5000\n\n# 重启ssh：\nsystemctl restart sshd.service\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# selinux\n\n\n# 关闭 selinux\n\nvi /etc/selinux/config  修改 selinux=disabled\n\n# 查看selinux状态sestatus 如果是enabled就是开启状态\nsestatus -v\n\n# 重启ssh：\nsystemctl restart sshd.service\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 不关 selinux\n\n * 但是需要添加一下 selinux 的端口, 使用 semanage 工具\n * 安装 semanage\n\nyum -y install policycoreutils-python\n\n# 使用以下命令查看当前selinux 允许的ssh端口\nsemanage port -l | grep ssh\n\n# 添加20000端口到 selinux\nsemanage port -a -t ssh_port_t -p tcp 5000\n\n# 然后确认一下是否添加进去\nsemanage port -l | grep ssh\n\n# 如果成功会输出\nssh_port_t   --\x3e  tcp    5000, 22\n\n# 重启ssh\nsystemctl restart sshd.service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n * 防火墙中放行新加入端口\n   \n   * 方法 1\n   \n   # 启动 systemctl\n   systemctl start firewalld.service\n   # 开机时启用服务\n   systemctl enable firewalld.service\n   \n   # 添加允许新端口号\n   firewall-cmd --permanent --add-port=5000/tcp\n   \n   # 用该命令查询\n   firewall-cmd --permanent --query-port=5000/tcp\n   # 如果是yes就是添加成功，如果是no就是没成功\n   \n   # 成功后重载防火墙\n   firewall-cmd --reload\n   \n   # 配置iptable\n   \n   iptables -a input -p tcp --dport 5000 -j accept\n   \n   # 重启 iptable\n   service iptables restart\n   \n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   \n   * 方法 2\n   \n   # 复制 firewalld 有关 sshd 的设定档案：\n   cp /usr/lib/firewalld/services/ssh.xml /etc/firewalld/services/\n   \n   # 使用 vim  (或任何文本编辑器) 开启 /etc/firewalld/services/ssh.xml，寻找：\n   <port protocol="tcp" port="22"/>\n   # 修改为：\n   <port protocol="tcp" port="5000"/>\n   \n   # 储存后重新加载 firewalld：\n   firewall-cmd --reload\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   \n\n\n# 通过软件源在线安装\n\nsudo yum -y install 软件名\n# 其中参数-y为所有选项均选则yes，不加-y则要手动确认\n\n\n1\n2\n\n\n\n# 通过本地 rpm 包安装\n\nsudo rpm -ivh 软件名\n# 其中参数-i为安装，-vh为列出安装过程\n\n\n1\n2\n\n\n\n# 安装 nginx\n\nyum install epel-release -y\nyum install nginx -y\nnginx -t # 检测nginx的语法\nservice nginx status # 查看状态\nservice nginx start / reload\nservice nginx stop\nsystemctl enable nginx\n\n# firewall设置：\nsystemctl start firewalld.service    #启动firewall\nsystemctl stop firewalld.service     #停止firewall\nsystemctl disable firewalld.service  #禁止firewall开机启动\n\n# firewalld默认已经安装并启用了，如果需要nginx可以访问需要执行以下命令：\nfirewall-cmd --permanent --add-service=http\nfirewall-cmd --permanent --zone=trusted --add-port=80/tcp\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# nvm 安装换源\n\n * node version manager: nvm\n\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n\nvim .bashrc\nexport nvm_nodejs_org_mirror=https://npm.taobao.org/mirrors/node\n\nsource ~/git/nvm/nvm.sh\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# firewall-cmd\n\n * firewalld\n\n# 启动：\nsystemctl start firewalld\n# 查状态：\nsystemctl status firewalld\n# 停止：\nsystemctl disable firewalld\n# 禁用：\nsystemctl stop firewalld\n# 在开机时启用一个服务：\nsystemctl enable firewalld.service\n# 在开机时禁用一个服务：\nsystemctl disable firewalld.service\n# 查看服务是否开机启动：\nsystemctl is-enabled firewalld.service\n# 查看已启动的服务列表：\nsystemctl list-unit-files|grep enabled\n# 查看启动失败的服务列表：\nsystemctl --failed\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * 配置 firewalld-cmd\n\n# 查看版本：\nfirewall-cmd --version\n# 查看帮助：\nfirewall-cmd --help\n# 显示状态：\nfirewall-cmd --state\n\n# 查看所有打开的端口：\nfirewall-cmd --zone=public --list-ports\nfirewall-cmd --permanent --zone=public --list-ports\n# 查看开启的服务\nfirewall-cmd --permanent --zone=public --list-services\n\n# 更新防火墙规则：\nfirewall-cmd --reload\n# 查看区域信息:\nfirewall-cmd --get-active-zones\n# 查看指定接口所属区域：\nfirewall-cmd --get-zone-of-interface=eth0\n# 拒绝所有包：\nfirewall-cmd --panic-on\n# 取消拒绝状态：\nfirewall-cmd --panic-off\n# 查看是否拒绝：\nfirewall-cmd --query-panic\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * 开启端口\n\n# /etc/firewalld/zones/public.xml\n\nfirewall-cmd --zone=public(作用域) --add-port=80/tcp(端口和访问类型) --permanent(永久生效)\n\nfirewall-cmd --zone=public --add-service=http --permanent\n\nfirewall-cmd --zone=public --query-port=80/tcp  #查看\nfirewall-cmd --zone=public --remove-port=80/tcp --permanent  # 删除\n\nfirewall-cmd --list-services\nfirewall-cmd --get-services\nfirewall-cmd --add-service=<service>\nfirewall-cmd --delete-service=<service>\n\n# 参数解释\n--add-service #添加的服务\n--zone #作用域\n--add-port=80/tcp #添加端口，格式为：端口/通讯协议\n--permanent #永久生效，没有此参数重启后失效\n\n# 开启某个端口\nfirewall-cmd --permanent --zone=public --add-port=8080-8081/tcp # 永久\nfirewall-cmd --zone=public --add-port=8080-8081/tcp # 临时\n\n# 启用某个服务\nfirewall-cmd --zone=public --add-service=https # 临时\nfirewall-cmd --permanent --zone=public --add-service=https # 永久\n\n# 查看开启的端口和服务\nfirewall-cmd --permanent --zone=public --list-services # 服务空格隔开 例如 dhcpv6-client https ss\nfirewall-cmd --permanent --zone=public --list-ports # 端口空格隔开 例如 8080-8081/tcp 8388/tcp 80/tcp\n\n# 重新载入，更新防火墙规则\nfirewall-cmd --reload\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n * 详细使用\n\n# 设置某个ip访问某个服务\nfirewall-cmd --permanent --zone=public --add-rich-rule=\'rule family="ipv4" source address="192.168.0.4/24" service name="http" accept\'\n# 删除配置\nfirewall-cmd --permanent --zone=public --remove-rich-rule=\'rule family="ipv4" source address="192.168.0.4/24" service name="http" accept\'\n# 设置某个ip访问某个端口\nfirewall-cmd --permanent --add-rich-rule \'rule family=ipv4 source address=192.168.0.1/2 port port=80 protocol=tcp accept\'\n# 删除配置\nfirewall-cmd --permanent --remove-rich-rule \'rule family=ipv4 source address=192.168.0.1/2 port port=80 protocol=tcp accept\'\n\n# 检查是否允许伪装ip\nfirewall-cmd --query-masquerade\n# 允许防火墙伪装ip\nfirewall-cmd --add-masquerade\n# 禁止防火墙伪装ip\nfirewall-cmd --remove-masquerade\n\n# 将80端口的流量转发至8080\nfirewall-cmd --add-forward-port=port=80:proto=tcp:toport=8080\n# 将80端口的流量转发至192.168.0.1\nfirewall-cmd --add-forward-port=proto=80:proto=tcp:toaddr=192.168.1.0.1\n# 将80端口的流量转发至192.168.0.1的8080端口\nfirewall-cmd --add-forward-port=proto=80:proto=tcp:toaddr=192.168.0.1:toport=8080\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# yum 命令\n\nyum(选项)(参数)\n\nh  # 显示帮助信息\ny  # 对所有的提问都回答"yes"\nc  # 指定配置文件\nq  # 安静模式\nv  # 详细模式\nd  # 设置调试等级(0-10)\ne  # 设置错误等级(0-10)\nr  # 设置yum处理一个命令的最大等待时间\nc  # 完全从缓存中运行，而不去下载或者更新任何头文件\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 命令行命令失效\n\n * path=/bin:/usr/bin\n\n\n# 常用命令\n\nyum repolist\nyum search xxx\nyum info xxx\nyum install xxx -y\nyum -y install vim\t# 安装vim\nyum remove xxx -y\nyum -y update && yum -y upgrade\nyum install wget -y\nyum install -y epel-release\nyum -y install gcc gcc-c++\nyum -y install gcc automake autoconf libtool make\nyum -y install net-tools\nnetstat –apn\nnetstat -ntlp\nps -aux | grep tomcat\nnetstat -ntulp |grep 80  # 查看80端口\nssh # 远程登录，如ssh root@gitlab.study.com\ncat /etc/redhat-release # 查看系统版本\nps -ef | grep nginx\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# ss server\n\nmac ssr: https://github.com/qinyuhang/shadowsocksx-ng-r\nwin ssr : https://github.com/shadowsocksr-backup/shadowsocksr-csharp\nandroid ssr: https://github.com/shadowsocksr-backup/shadowsocksr-android\nandroid ssrr: https://github.com/shadowsocksrr/shadowsocksr-android\n\nwin : https://github.com/shadowsocks/shadowsocks-windows\nmac : https://github.com/shadowsocks/shadowsocksx-ng\nandroid : https://github.com/shadowsocks/shadowsocks-android\n\nbase: https://github.com/shadowsocks/shadowsocks/tree/master\n\nhttps://segmentfault.com/a/1190000013242438\nhttps://github.com/neilpang/acme.sh/wiki/%e8%af%b4%e6%98%8e\nhttps://segmentfault.com/a/1190000012654072\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * install\n\n# 需要安装git\nyum install python-setuptools && easy_install pip\npip install git+https://github.com/shadowsocks/shadowsocks.git@master\nssserver -c /etc/shadowsocks.json\nvim /etc/rc.d/rc.local\nssserver -c /etc/shadowsocks.json -d start\n\n\n1\n2\n3\n4\n5\n6\n\n * config\n\n# shadowsocks.json\n# server ip : 101.*.*.*\n\n{\n    "server":"server ip",\n    "server_port":23345,\n    "local_address":"127.0.0.1",\n    "local_port":1080,\n    "password":"password",\n    "timeout":300,\n    "method":"aes-256-cfb",\n    "fast_open":false\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 相关链接\n\n * centos7 开机界面出现多个选项\n * centos7 修改 ssh 端口\n * judasn/linux-tutorial\n * amix/vimrc\n * systemctl 命令\n * linux 基础命令介绍\n * firewall 防火墙',charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1647517837e3},{title:"curl的GET和POST使用",frontmatter:{title:"curl的GET和POST使用",date:"2023-03-11T00:00:00.000Z",sidebar:"auto",tags:["curl"],categories:["system"],readingShow:"top"},regularPath:"/services/tools/curl.html",relativePath:"services/tools/curl.md",key:"v-a5b2146a",path:"/services/tools/curl.html",headers:[{level:2,title:"POST application/x-www-form-urlencoded",slug:"post-application-x-www-form-urlencoded",normalizedTitle:"post application/x-www-form-urlencoded",charIndex:45},{level:2,title:"POST application/json",slug:"post-application-json",normalizedTitle:"post application/json",charIndex:447},{level:2,title:"GET with JSON",slug:"get-with-json",normalizedTitle:"get with json",charIndex:677},{level:2,title:"GET with XML",slug:"get-with-xml",normalizedTitle:"get with xml",charIndex:807}],headersStr:"POST application/x-www-form-urlencoded POST application/json GET with JSON GET with XML",content:'> 原文 curl POST examples - gists · GitHub\n\n\n# POST application/x-www-form-urlencoded\n\n# application/x-www-form-urlencoded is the default:\ncurl -d "param1=value1&param2=value2" -X POST http://localhost:3000/data\n\n# explicit:\ncurl -d "param1=value1&param2=value2" -H "Content-Type: application/x-www-form-urlencoded" -X POST http://localhost:3000/data\n\n# with a data file\ncurl -d "@data.txt" -X POST http://localhost:3000/data\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# POST application/json\n\ncurl -d \'{"key1":"value1", "key2":"value2"}\' -H "Content-Type: application/json" -X POST http://localhost:3000/data\n\n# with a data file\ncurl -d "@data.json" -X POST http://localhost:3000/data\n\n\n1\n2\n3\n4\n\n\n\n# GET with JSON\n\ncurl -i -H "Accept: application/json" -H "Content-Type: application/json" -X GET http://hostname/resource\n\n\n1\n\n\n\n# GET with XML\n\ncurl -H "Accept: application/xml" -H "Content-Type: application/xml" -X GET http://hostname/resource\n\n\n1\n',normalizedContent:'> 原文 curl post examples - gists · github\n\n\n# post application/x-www-form-urlencoded\n\n# application/x-www-form-urlencoded is the default:\ncurl -d "param1=value1&param2=value2" -x post http://localhost:3000/data\n\n# explicit:\ncurl -d "param1=value1&param2=value2" -h "content-type: application/x-www-form-urlencoded" -x post http://localhost:3000/data\n\n# with a data file\ncurl -d "@data.txt" -x post http://localhost:3000/data\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# post application/json\n\ncurl -d \'{"key1":"value1", "key2":"value2"}\' -h "content-type: application/json" -x post http://localhost:3000/data\n\n# with a data file\ncurl -d "@data.json" -x post http://localhost:3000/data\n\n\n1\n2\n3\n4\n\n\n\n# get with json\n\ncurl -i -h "accept: application/json" -h "content-type: application/json" -x get http://hostname/resource\n\n\n1\n\n\n\n# get with xml\n\ncurl -h "accept: application/xml" -h "content-type: application/xml" -x get http://hostname/resource\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"3/11/2023",lastUpdatedTimestamp:1678525665e3,createdTime:1678525665e3},{title:"站点工具",frontmatter:{title:"站点工具",date:"2022-01-22T00:00:00.000Z",sidebar:"auto",tags:["ascii"],categories:["frontend"],readingShow:"top"},regularPath:"/services/tools/ascii.html",relativePath:"services/tools/ascii.md",key:"v-4ff7afff",path:"/services/tools/ascii.html",headers:[{level:2,title:"ASCII",slug:"ascii",normalizedTitle:"ascii",charIndex:2},{level:2,title:"博客生成器",slug:"博客生成器",normalizedTitle:"博客生成器",charIndex:67},{level:2,title:"文档工具",slug:"文档工具",normalizedTitle:"文档工具",charIndex:183},{level:2,title:"代码托管",slug:"代码托管",normalizedTitle:"代码托管",charIndex:382},{level:2,title:"集成 ci",slug:"集成-ci",normalizedTitle:"集成 ci",charIndex:421},{level:2,title:"评论系统",slug:"评论系统",normalizedTitle:"评论系统",charIndex:527},{level:2,title:"服务部署",slug:"服务部署",normalizedTitle:"服务部署",charIndex:607},{level:2,title:"线上服务",slug:"线上服务",normalizedTitle:"线上服务",charIndex:684},{level:2,title:"流程图",slug:"流程图",normalizedTitle:"流程图",charIndex:805},{level:2,title:"图床",slug:"图床",normalizedTitle:"图床",charIndex:835},{level:2,title:"free ssl",slug:"free-ssl",normalizedTitle:"free ssl",charIndex:909},{level:2,title:"js 在线编辑器",slug:"js-在线编辑器",normalizedTitle:"js 在线编辑器",charIndex:987},{level:2,title:"cdn",slug:"cdn",normalizedTitle:"cdn",charIndex:1044},{level:2,title:"为 gh-pages 添加 ssl",slug:"为-gh-pages-添加-ssl",normalizedTitle:"为 gh-pages 添加 ssl",charIndex:1108},{level:2,title:"域名服务",slug:"域名服务",normalizedTitle:"域名服务",charIndex:1263},{level:2,title:"文档接口",slug:"文档接口",normalizedTitle:"文档接口",charIndex:1346}],headersStr:"ASCII 博客生成器 文档工具 代码托管 集成 ci 评论系统 服务部署 线上服务 流程图 图床 free ssl js 在线编辑器 cdn 为 gh-pages 添加 ssl 域名服务 文档接口",content:"# ASCII\n\n * ASCII@wikipedia\n\n * ASCII 控制字符\n\n\n\n * ASCII 可显示字符\n\n\n\n\n# 博客生成器\n\n * jamstack\n * gatsby\n * vuepress\n * hexo\n * hugo\n * docsify\n * jekyll\n * docusaurus\n * gridsome\n * halo\n\n\n# 文档工具\n\n * dumi: https://d.umijs.org/zh-CN\n * docz: https://www.docz.site/docs/getting-started\n * storyBook: https://storybook.js.org/\n * nextjs: https://nextjs.org/\n * nuxtjs: https://nuxtjs.org/\n\n\n# 代码托管\n\n * github\n * gitlab\n * gitee\n\n\n# 集成 ci\n\n * 禅道\n * walle-web\n * jenkins\n * travis-ci\n * gitlab-runner\n * flow.ci\n * strider\n * atlassian\n\n\n# 评论系统\n\n * Disqus\n * Facebook\n * Gitment\n * Valine\n * gitalk\n * isso\n * Vssue\n\n\n# 服务部署\n\n * netlify\n * gh-pages@github\n * zeit.co/now\n * surge.sh\n * vercel\n\n\n# 线上服务\n\n * mlab\n * firebase\n * Parse\n * contentful\n * 语雀\n * leancloud\n * daocloud\n * wilddog\n * Heroku\n * digitalocean\n\n\n# 流程图\n\n * processOn\n * 百度脑图\n\n\n# 图床\n\n * 又拍云\n * sm.ms 图床\n * 七牛云\n * PicGo@图床工具\n * ipic@图床工具\n * mpic@图床工具\n\n\n# free ssl\n\n * letsencrypt\n * certbot\n * Neilpang/acme.sh@github\n * freessl\n\n\n# js 在线编辑器\n\n * codesandbox\n * stackblitz\n * npm.runkit\n\n\n# cdn\n\n * unpkg\n * jsdelivr\n * bootcdn\n * cdnjs\n * cloudflare\n\n\n# 为 gh-pages 添加 ssl\n\n * github 怎么绑定自己的域名？\n * Custom domain redirects for GitHub Pages sites\n * Troubleshooting custom domains\n * github graphql explorer\n\n\n# 域名服务\n\n * namesilo: https://www.namesilo.com\n * aliyun: https://www.aliyun.com/\n\n\n# 文档接口\n\n * strapi: https://github.com/strapi/strapi\n * yapi: https://github.com/YMFE/yapi",normalizedContent:"# ascii\n\n * ascii@wikipedia\n\n * ascii 控制字符\n\n\n\n * ascii 可显示字符\n\n\n\n\n# 博客生成器\n\n * jamstack\n * gatsby\n * vuepress\n * hexo\n * hugo\n * docsify\n * jekyll\n * docusaurus\n * gridsome\n * halo\n\n\n# 文档工具\n\n * dumi: https://d.umijs.org/zh-cn\n * docz: https://www.docz.site/docs/getting-started\n * storybook: https://storybook.js.org/\n * nextjs: https://nextjs.org/\n * nuxtjs: https://nuxtjs.org/\n\n\n# 代码托管\n\n * github\n * gitlab\n * gitee\n\n\n# 集成 ci\n\n * 禅道\n * walle-web\n * jenkins\n * travis-ci\n * gitlab-runner\n * flow.ci\n * strider\n * atlassian\n\n\n# 评论系统\n\n * disqus\n * facebook\n * gitment\n * valine\n * gitalk\n * isso\n * vssue\n\n\n# 服务部署\n\n * netlify\n * gh-pages@github\n * zeit.co/now\n * surge.sh\n * vercel\n\n\n# 线上服务\n\n * mlab\n * firebase\n * parse\n * contentful\n * 语雀\n * leancloud\n * daocloud\n * wilddog\n * heroku\n * digitalocean\n\n\n# 流程图\n\n * processon\n * 百度脑图\n\n\n# 图床\n\n * 又拍云\n * sm.ms 图床\n * 七牛云\n * picgo@图床工具\n * ipic@图床工具\n * mpic@图床工具\n\n\n# free ssl\n\n * letsencrypt\n * certbot\n * neilpang/acme.sh@github\n * freessl\n\n\n# js 在线编辑器\n\n * codesandbox\n * stackblitz\n * npm.runkit\n\n\n# cdn\n\n * unpkg\n * jsdelivr\n * bootcdn\n * cdnjs\n * cloudflare\n\n\n# 为 gh-pages 添加 ssl\n\n * github 怎么绑定自己的域名？\n * custom domain redirects for github pages sites\n * troubleshooting custom domains\n * github graphql explorer\n\n\n# 域名服务\n\n * namesilo: https://www.namesilo.com\n * aliyun: https://www.aliyun.com/\n\n\n# 文档接口\n\n * strapi: https://github.com/strapi/strapi\n * yapi: https://github.com/ymfe/yapi",charsets:{cjk:!0},lastUpdated:"4/15/2022",lastUpdatedTimestamp:1650002195e3,createdTime:1647517837e3},{title:"获取UserAgent",frontmatter:{title:"获取UserAgent",date:"2022-03-18T00:00:00.000Z",sidebar:"auto",categories:["frontend"],readingShow:"top"},regularPath:"/services/tools/get-ua.html",relativePath:"services/tools/get-ua.md",key:"v-719d672b",path:"/services/tools/get-ua.html",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"3/23/2022",lastUpdatedTimestamp:1648018922e3,createdTime:1644221831e3},{title:"docker命令列表",frontmatter:{title:"docker命令列表",date:"2020-07-21T00:00:00.000Z",sidebar:"auto",tags:["docker","docker-compose"],categories:["services"],readingShow:"top"},regularPath:"/services/tools/docker.html",relativePath:"services/tools/docker.md",key:"v-4fb88c8b",path:"/services/tools/docker.html",headers:[{level:2,title:"docker commands",slug:"docker-commands",normalizedTitle:"docker commands",charIndex:2},{level:2,title:"基本命令",slug:"基本命令",normalizedTitle:"基本命令",charIndex:2482},{level:2,title:"centos ssh",slug:"centos-ssh",normalizedTitle:"centos ssh",charIndex:4831},{level:3,title:"方式一",slug:"方式一",normalizedTitle:"方式一",charIndex:4846},{level:3,title:"方式二",slug:"方式二",normalizedTitle:"方式二",charIndex:6068},{level:2,title:"YApi",slug:"yapi",normalizedTitle:"yapi",charIndex:7138},{level:2,title:"nginx",slug:"nginx",normalizedTitle:"nginx",charIndex:3758},{level:2,title:"mongo",slug:"mongo",normalizedTitle:"mongo",charIndex:3449},{level:2,title:"mysql",slug:"mysql",normalizedTitle:"mysql",charIndex:2021},{level:2,title:"registry",slug:"registry",normalizedTitle:"registry",charIndex:601},{level:2,title:"docker-compose portainer",slug:"docker-compose-portainer",normalizedTitle:"docker-compose portainer",charIndex:10600},{level:2,title:"docker-compose nextcloud",slug:"docker-compose-nextcloud",normalizedTitle:"docker-compose nextcloud",charIndex:11289},{level:2,title:"参考示例",slug:"参考示例",normalizedTitle:"参考示例",charIndex:12571}],headersStr:"docker commands 基本命令 centos ssh 方式一 方式二 YApi nginx mongo mysql registry docker-compose portainer docker-compose nextcloud 参考示例",content:'# docker commands\n\n * .dockerignore\n\n.git\nnode_modules\nnpm-debug.log\n\n\n1\n2\n3\n\n * Dockerfile\n\nFROM, RUN, COPY, ADD, CMD, ENTRYPOINT, ENV, ARG,\nVOLUME, EXPOSE, WORKDIR, USER, HEALTHCHECK,\n\n# CMD\nshell 格式：CMD <命令>\nexec 格式：CMD ["可执行文件", "参数1", "参数2"...]\n\n\n1\n2\n3\n4\n5\n6\n\n * 编写Dockerfile文件\n\n# FROM node:8.4：该 image 文件继承官方的 node image，\n# 冒号表示标签，这里标签是8.4，即8.4版本的 node\nFROM node:8.4\n\n# COPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），\n# 都拷贝进入 image 文件的/app目录\nCOPY . /app\n\n# WORKDIR /app：指定接下来的工作路径为/app\nWORKDIR /app\n\n# RUN npm install：在/app目录下，运行npm install命令安装依赖。\n# 注意，安装后所有的依赖，都将打包进入 image 文件\nRUN npm install --registry=https://registry.npm.taobao.org\n\n# EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口\nEXPOSE 3000\n\n# 表示容器启动后自动执行node demos/01.js\nCMD node demos/01.js\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * RUN命令与CMD命令\n\n- RUN命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件\n\n- CMD命令则是在容器启动后执行\n\n- 一个 Dockerfile 可以包含多个RUN命令,但是只能有一个CMD命令\n\n- 指定了CMD命令以后，docker run命令就不能附加命令了\n（比如前面的/bin/bash），否则它会覆盖CMD命令\n\n- docker run --rm -p 8000:3000 -it koa-demo:0.0.1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * docker image\n\n# 列出本机的所有 image 文件。\ndocker image ls\n\n# 删除 image 文件\ndocker image rm [imageName]\n\n# -f 表示Dockerfile所在路径\ndocker image build -f ./Dockerfile\n\n# 创建 image 文件 : docker image build\n# -t参数用来指定 image 文件的名字，后面还可以用冒号指定标签，\n# 点表示 Dockerfile 文件所在的路径\n\ndocker image build -t koa-demo .\ndocker image build -t koa-demo:0.0.1 .\n\n# 发布 image 文件\ndocker login  # 登录\n# 为本地的 image 标注用户名和版本\ndocker image tag [imageName] [username]/[repository]:[tag]\ndocker image tag koa-demos:0.0.1 test/koa-demos:0.0.1\n# 也可以不标注用户名，重新构建一下 image 文件\ndocker image build -t [username]/[repository]:[tag] .\n# 发布 image 文件\ndocker image push [username]/[repository]:[tag]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * Docker Compose工具:管理多个容器的联动\n\n# https://yeasy.gitbooks.io/docker_practice/compose/commands.html\n\ndocker-compose --version # 查看版本\ndocker-compose up # 启动所有服务\ndocker-compose stop # 关闭所有服务\ndocker-compose rm  # 容器文件删除（容器必须已经停止运行）\n\n# 新建docker-compose.yml\nmysql:\n    image: mysql:5.7\n    environment:\n     - MYSQL_ROOT_PASSWORD=123456\n     - MYSQL_DATABASE=wordpress\nweb:\n    image: wordpress\n    links:\n     - mysql\n    environment:\n     - WORDPRESS_DB_PASSWORD=123456\n    ports:\n     - "127.0.0.3:8080:80"\n    working_dir: /var/www/html\n    volumes:\n     - wordpress:/var/www/html\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * 在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器\n\n\n# 基本命令\n\n * docker start与docker restart\n * docker logs\n * docker stop\n * docker exec\n * docker ps [-a]\n * docker attach 与 docker exec 进入容器\n * docker [-f] rm 删除容器\n * docker inspect\n * docker history 具体查看镜像内的历史记录\n * docker save 和 docker load\n * docker pull [选项] [Docker Registry url]<仓库名>:<标签>\n\ndocker pull ubuntu:14.04\n\nDocker Registry url：<域名/IP>[:端口号]。默认 Docker Hub\n仓库名： <用户名>/<软件名>。默认为 library，也就是官方镜像\n\n\n1\n2\n3\n4\n\n * docker run [选项]\n\ndocker run -it --rm ubuntu:14.04 bash\n\n# 参数说明\n-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端\n--rm：这个参数是说容器退出后随之将其删除\nubuntu:14.04：这是指用 ubuntu:14.04 镜像为基础来启动容器。\nbash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash\n--name：给容器起了一个名字\n-d: 容器运行在后台\n-p: 8080:80 表示端口映射，将宿主机的8080端口转发到容器内的80端口\n-v：表示需要将本地哪个目录挂载到容器中\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * docker images 列出镜像\n\ndocker images -f dangling=true  #显示虚悬镜像\ndocker rmi $(docker images -q -f dangling=true) #删除虚悬镜像\ndocker images -a  #显示中间层镜像\ndocker images ubuntu #列出部分镜像\ndocker images ubuntu:16.04\ndocker images -f since=mongo:3.2\ndocker images -f before=mongo:3.2\ndocker images -f label=com.example.version=0.1\ndocker images -q\ndocker images --format "{{.ID}}: {{.Repository}}"\ndocker images --format "table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * docker commit [选项] <容器ID或容器名> [<仓库名>[:<标签>]]\n\n# 这条命令会用 nginx 镜像启动一个容器，命名为 webserver，并且映射了 80 端口，\n# 这样我们可以用浏览器去访问这个 nginx 服务器\ndocker run --name webserver -d -p 80:80 nginx\n\n# 修改内容\ndocker exec -it webserver bash\necho \'<h1>Hello, Docker!</h1>\' > /usr/share/nginx/html/index.html\n\n# 显示容器文件系统的前后变化\ndocker diff webserver\n\ndocker commit \\\n    --author "Author <Author@gmail.com>" \\\n    --message "修改了默认网页" \\\n    webserver \\\n    nginx:v2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * docker rmi [选项] <镜像1> [<镜像2> ...] 删除本地镜像\n\ndocker rmi $(docker images -q -f dangling=true)\ndocker rmi $(docker images -q redis)\n\n\n1\n2\n\n * docker volume\n\ndocker volume help\n\n# 创建一个数据卷\ndocker volume create my-vol\n\n# 查看所有的 数据卷\ndocker volume ls\n\n# 删除数据卷\ndocker rm my-vol\n\n# 如果需要在删除容器的同时移除数据卷\n可以在删除容器的时候使用 docker rm -v 这个命令\n\n# 无主的数据卷可能会占据很多空间，要清理请使用以下命令\ndocker volume prune\n\n# 查看指定 数据卷 的信息\ndocker volume inspect my-vol\n\n# 启动一个挂载数据卷的容器\ndocker run -d -P \\\n    --name web \\\n    # -v my-vol:/wepapp \\\n    --mount source=my-vol,target=/webapp \\\n    training/webapp \\\n    python app.py\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# centos ssh\n\n\n# 方式一\n\n * Dockerfile\n\n# Dockerfile\n# 生成的新镜像以centos镜像为基础\nFROM centos\n\n# 安装openssh-server\nRUN yum install passwd openssl openssh-server openssh-clients -y\n\nRUN ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -N \'\'\nRUN ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N \'\'\nRUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key  -N \'\'\n\nRUN sed -i "s/#UsePrivilegeSeparation.*/UsePrivilegeSeparation no/g" /etc/ssh/sshd_config\nRUN sed -i "s/UsePAM.*/UsePAM no/g" /etc/ssh/sshd_config\n# 指定root密码\nRUN /bin/echo \'root:admin\'|chpasswd\n\nEXPOSE 22\n\n# CMD /usr/sbin/sshd -D\nCMD ["/usr/sbin/sshd", "-D"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * docker - run\n\n# 进入Dockerfile所在文件夹运行如下\n\n# 构建Dockerfile\ndocker build -t ssh-centos .\n\n# 运行查看构建成功的image信息\ndocker images\n\n# 运行生成的image, containername为运行容器的名字, imageid为image的id\ndocker run -itd --name containername -p 10020:20  imageid\n\n# ssh连接centos\nssh root@127.0.0.1 -p 10020\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * docker-compose.yml\n\nversion: \'2\'\nservices:\n  centos-ssh:\n    build: .\n    image: \'czh/centos-ssh\'\n    restart: always\n    container_name: centos-ssh\n    ports:\n      - \'10020:22\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * ssh 连接 centos: ssh root@127.0.0.1 -p 10020\n\n\n# 方式二\n\n * Dockerfile\n\n# Dockerfile\n# 生成的新镜像以centos镜像为基础\nFROM centos\n\n# 安装openssh-server\nRUN yum install passwd openssl openssh-server openssh-clients -y\n\nRUN ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -N \'\'\nRUN ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N \'\'\nRUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key  -N \'\'\n\nRUN sed -i "s/#UsePrivilegeSeparation.*/UsePrivilegeSeparation no/g" /etc/ssh/sshd_config\nRUN sed -i "s/UsePAM.*/UsePAM no/g" /etc/ssh/sshd_config\n\n# 指定root密码\nARG ROOTPWD\nRUN /bin/echo "${ROOTPWD}" |chpasswd\n\nEXPOSE 22\n\nCMD /usr/sbin/sshd -D\n# CMD ["/usr/sbin/sshd", "-D"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n * docker-compose.yml\n\nversion: \'3\'\nservices:\n  centos-ssh:\n    build:\n      context: .\n      dockerfile: ./Dockerfile\n      args:\n        ROOTPWD: root:admin\n    image: czh/centos-ssh\n    restart: always\n    container_name: centos-ssh\n    ports:\n      - \'10010:22\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * docker-compose -f "docker-compose.yml" up -d --build\n * ssh root@127.0.0.1 -p 10020\n\n\n# YApi\n\n * YApi for Mac\n\n- docker run -d -p 27017:27017 --name mymongo -v /Users/pc/srv/mongodb/db:/data/db  mongo:latest\n\n- npm install -g yapi-cli --registry https://registry.npm.taobao.org\n\n- yapi server\n\n- http://0.0.0.0:9090/\n\n- node vendors/server/app.js\n\n- http://127.0.0.1:3000\n\n- 账号名："admin@admin.com"，密码："ymfe.org"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# nginx\n\ndocker run --name some-nginx -v E:\\huashu\\api911\\gaiban\\nginx.conf:/etc/nginx/nginx.conf:ro -v E:\\huashu\\api911\\gaiban:/usr/share/nginx/html:ro -p 80:80 -d  4610\n\n\n1\n\n\n\n# mongo\n\n# https://brickyang.github.io/2017/03/15/%E5%88%A9%E7%94%A8-Docker-%E8%BF%90%E8%A1%8C-MongoDB/\n\ndocker pull mongo\n\n# docker run --name some-mongo -p 27017:27017  -d mongo:tag\n\n# docker run --name <YOUR-NAME> -p 27017:27017 -v /data/db:/data/db -d mongo:3.4 --auth\n\n# docker run -d -p 27017:27017 -v mongo_configdb:/data/configdb -v mongo_db:/data/db --name mongo mongo:latest\n\n# docker run -d -p 27017:27017 -v ${PWD}/data:/data/db --name mongo mongo:latest\n\ndocker volume create my-mongo-db\ndocker volume create my-mongo-configdb\n\ndocker run -d -p 27017:27017 --name mymongo -v my-mongo-db:/data/db  -v my-mongo-configdb:/data/configdb mongo:latest\n\ndocker exec -it mymongo mongo\n\nuse admin\ndb.createUser({user: "root", pwd: "root", roles: [{role: "userAdminAnyDatabase", db: "admin"}]})\ndb.auth(\'root\',\'root\') // 1\n\nuse todos\ndb.createUser({user: "czh", pwd: "czh", roles: [{role: "readWrite", db: "todos"}]})\ndb.auth(\'czh\', \'czh\') // 1\n\nuse admin\n# 删除czh用户\ndb.dropUser(\'czh\') // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# mysql\n\n# mysql版本\nmysql: 8\n\n# 下载\ndocker pull mysql\n\n# 启动容器\n# docker run -p 3306:3306 --name mymysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest\n\n# docker run -p 3306:3306 --name mymysql -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:latest\n\n# docker run -p 3306:3306 --name mymysql -v E:/mysql/logs:/logs -v E:mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:latest\n\ndocker volume create my-vol-mysql\n\ndocker run -p 3306:3306 --name mymysql -v my-vol-mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:latest\n\n# 进入容器\ndocker exec -it mymysql bash\n\n# 登录mysql\nmysql -u root -p\n\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'admin\';\n\n# 添加远程登录用户\nCREATE USER \'czh\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'admin@!123\';\n\nGRANT ALL PRIVILEGES ON *.* TO \'czh\'@\'%\';\n\n# 编码\nhttps://blog.csdn.net/m0_37639542/article/details/72852875\nhttps://www.cnblogs.com/jiangxiaobo/p/6110647.html\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# registry\n\n\ndocker run -d -p 5000:5000 --restart always -v /Users/pc/srv/registry:/var/lib/registry --name registry registry:2\n\n# 用 curl 查看仓库中的镜像\ncurl 127.0.0.1:5000/v2/_catalog\n\n# pull\ndocker pull ubuntu\n\n# tag\ndocker tag ubuntu localhost:5000/ubuntu\n\n# push\ndocker push localhost:5000/ubuntu\n\n# rm image\ndocker image rm localhost:5000/ubuntu\n\n# pull\ndocker pull localhost:5000/ubuntu\n\n# ip 推送\n{\n  "registry-mirror": [\n    "https://registry.docker-cn.com"\n  ],\n  "insecure-registries": [\n    "192.168.199.100:5000"\n  ]\n}\n\n# webui\nhttps://github.com/mkuchin/docker-registry-web\nhttps://github.com/kwk/docker-registry-frontend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# docker-compose portainer\n\n * Portainer: https://github.com/portainer/portainer\n\n// docker-compose -p portainer -f portainer.yml up -d\n\nversion: \'3.1\'\nservices:\n  portainer:\n    image: portainer/portainer-ce:latest\n    container_name: portainer\n    hostname: portainer\n    restart: always\n    volumes:\n      - "/var/run/docker.sock:/var/run/docker.sock"\n      - "/Users/czh/data/portainer/data:/data"\n    environment:\n      TZ: Asia/Shanghai\n      LANG: en_US.UTF-8\n    ports:\n      - "9000:9000"\n#     networks:\n#       portainer:\n#           ipv4_address: 172.20.0.30\n# networks:\n#     portainer:\n#        external: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# docker-compose nextcloud\n\n * dockerfile\n\ndocker volume create nextcloud_data\ndocker volume inspect nextcloud_data\n\ndocker run --name mariadb -p 3306:3306 -e MYSQL_ROOT_PASSWORD=admin123 -v /Users/czh/data/mariadb:/var/lib/mysql -d mariadb\n\ndocker exec -it mariadb bash -> mysql -uroot -p\n\n\ndocker run -d -p 9001:80 --name=nextcloud -v nextcloud_data:/var/www/html --link=mariadb:mariadb  nextcloud\n\n// 容器在运行docker服务后自启动\ndocker container update --restart=always nextcloud\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * docker-compose.yml\n\n// docker-compose -p nextcloud -f nextcloud.yml up -d\nversion: \'2\'\n\nvolumes:\n  nextcloud_data:\n  mariadb_data:\n\nservices:\n  db:\n    image: mariadb\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW\n    restart: always\n    volumes:\n      - mariadb_data:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=admin123\n      - MYSQL_PASSWORD=admin\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n\n  app:\n    image: nextcloud\n    ports:\n      - 8080:80\n    links:\n      - db\n    volumes:\n      - nextcloud_data:/var/www/html\n    restart: always\n\n// mariadb:   nextcloud -> admin\n// db name:   nextcloud\n// db link:   db:3306\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 参考示例\n\n * Docker —— 从入门到实践\n * judasn/Linux-Tutorial\n * Docker Desktop\n * Get Docker CE for CentOS\n * daocloud/Docker 入门\n * 基于 Docker 打造前端持续集成开发环境\n * Windows 下使用 docker 部署 gitlab CI 服务\n * Centos7 创建支持 ssh 服务器的 docker 容器\n * cr.console.aliyun\n * mirrors.aliyun\n * Play with Docker',normalizedContent:'# docker commands\n\n * .dockerignore\n\n.git\nnode_modules\nnpm-debug.log\n\n\n1\n2\n3\n\n * dockerfile\n\nfrom, run, copy, add, cmd, entrypoint, env, arg,\nvolume, expose, workdir, user, healthcheck,\n\n# cmd\nshell 格式：cmd <命令>\nexec 格式：cmd ["可执行文件", "参数1", "参数2"...]\n\n\n1\n2\n3\n4\n5\n6\n\n * 编写dockerfile文件\n\n# from node:8.4：该 image 文件继承官方的 node image，\n# 冒号表示标签，这里标签是8.4，即8.4版本的 node\nfrom node:8.4\n\n# copy . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），\n# 都拷贝进入 image 文件的/app目录\ncopy . /app\n\n# workdir /app：指定接下来的工作路径为/app\nworkdir /app\n\n# run npm install：在/app目录下，运行npm install命令安装依赖。\n# 注意，安装后所有的依赖，都将打包进入 image 文件\nrun npm install --registry=https://registry.npm.taobao.org\n\n# expose 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口\nexpose 3000\n\n# 表示容器启动后自动执行node demos/01.js\ncmd node demos/01.js\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * run命令与cmd命令\n\n- run命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件\n\n- cmd命令则是在容器启动后执行\n\n- 一个 dockerfile 可以包含多个run命令,但是只能有一个cmd命令\n\n- 指定了cmd命令以后，docker run命令就不能附加命令了\n（比如前面的/bin/bash），否则它会覆盖cmd命令\n\n- docker run --rm -p 8000:3000 -it koa-demo:0.0.1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * docker image\n\n# 列出本机的所有 image 文件。\ndocker image ls\n\n# 删除 image 文件\ndocker image rm [imagename]\n\n# -f 表示dockerfile所在路径\ndocker image build -f ./dockerfile\n\n# 创建 image 文件 : docker image build\n# -t参数用来指定 image 文件的名字，后面还可以用冒号指定标签，\n# 点表示 dockerfile 文件所在的路径\n\ndocker image build -t koa-demo .\ndocker image build -t koa-demo:0.0.1 .\n\n# 发布 image 文件\ndocker login  # 登录\n# 为本地的 image 标注用户名和版本\ndocker image tag [imagename] [username]/[repository]:[tag]\ndocker image tag koa-demos:0.0.1 test/koa-demos:0.0.1\n# 也可以不标注用户名，重新构建一下 image 文件\ndocker image build -t [username]/[repository]:[tag] .\n# 发布 image 文件\ndocker image push [username]/[repository]:[tag]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * docker compose工具:管理多个容器的联动\n\n# https://yeasy.gitbooks.io/docker_practice/compose/commands.html\n\ndocker-compose --version # 查看版本\ndocker-compose up # 启动所有服务\ndocker-compose stop # 关闭所有服务\ndocker-compose rm  # 容器文件删除（容器必须已经停止运行）\n\n# 新建docker-compose.yml\nmysql:\n    image: mysql:5.7\n    environment:\n     - mysql_root_password=123456\n     - mysql_database=wordpress\nweb:\n    image: wordpress\n    links:\n     - mysql\n    environment:\n     - wordpress_db_password=123456\n    ports:\n     - "127.0.0.3:8080:80"\n    working_dir: /var/www/html\n    volumes:\n     - wordpress:/var/www/html\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * 在容器的命令行，按下 ctrl + c 停止 node 进程，然后按下 ctrl + d （或者输入 exit）退出容器\n\n\n# 基本命令\n\n * docker start与docker restart\n * docker logs\n * docker stop\n * docker exec\n * docker ps [-a]\n * docker attach 与 docker exec 进入容器\n * docker [-f] rm 删除容器\n * docker inspect\n * docker history 具体查看镜像内的历史记录\n * docker save 和 docker load\n * docker pull [选项] [docker registry url]<仓库名>:<标签>\n\ndocker pull ubuntu:14.04\n\ndocker registry url：<域名/ip>[:端口号]。默认 docker hub\n仓库名： <用户名>/<软件名>。默认为 library，也就是官方镜像\n\n\n1\n2\n3\n4\n\n * docker run [选项]\n\ndocker run -it --rm ubuntu:14.04 bash\n\n# 参数说明\n-it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端\n--rm：这个参数是说容器退出后随之将其删除\nubuntu:14.04：这是指用 ubuntu:14.04 镜像为基础来启动容器。\nbash：放在镜像名后的是命令，这里我们希望有个交互式 shell，因此用的是 bash\n--name：给容器起了一个名字\n-d: 容器运行在后台\n-p: 8080:80 表示端口映射，将宿主机的8080端口转发到容器内的80端口\n-v：表示需要将本地哪个目录挂载到容器中\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * docker images 列出镜像\n\ndocker images -f dangling=true  #显示虚悬镜像\ndocker rmi $(docker images -q -f dangling=true) #删除虚悬镜像\ndocker images -a  #显示中间层镜像\ndocker images ubuntu #列出部分镜像\ndocker images ubuntu:16.04\ndocker images -f since=mongo:3.2\ndocker images -f before=mongo:3.2\ndocker images -f label=com.example.version=0.1\ndocker images -q\ndocker images --format "{{.id}}: {{.repository}}"\ndocker images --format "table {{.id}}\\t{{.repository}}\\t{{.tag}}"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * docker commit [选项] <容器id或容器名> [<仓库名>[:<标签>]]\n\n# 这条命令会用 nginx 镜像启动一个容器，命名为 webserver，并且映射了 80 端口，\n# 这样我们可以用浏览器去访问这个 nginx 服务器\ndocker run --name webserver -d -p 80:80 nginx\n\n# 修改内容\ndocker exec -it webserver bash\necho \'<h1>hello, docker!</h1>\' > /usr/share/nginx/html/index.html\n\n# 显示容器文件系统的前后变化\ndocker diff webserver\n\ndocker commit \\\n    --author "author <author@gmail.com>" \\\n    --message "修改了默认网页" \\\n    webserver \\\n    nginx:v2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * docker rmi [选项] <镜像1> [<镜像2> ...] 删除本地镜像\n\ndocker rmi $(docker images -q -f dangling=true)\ndocker rmi $(docker images -q redis)\n\n\n1\n2\n\n * docker volume\n\ndocker volume help\n\n# 创建一个数据卷\ndocker volume create my-vol\n\n# 查看所有的 数据卷\ndocker volume ls\n\n# 删除数据卷\ndocker rm my-vol\n\n# 如果需要在删除容器的同时移除数据卷\n可以在删除容器的时候使用 docker rm -v 这个命令\n\n# 无主的数据卷可能会占据很多空间，要清理请使用以下命令\ndocker volume prune\n\n# 查看指定 数据卷 的信息\ndocker volume inspect my-vol\n\n# 启动一个挂载数据卷的容器\ndocker run -d -p \\\n    --name web \\\n    # -v my-vol:/wepapp \\\n    --mount source=my-vol,target=/webapp \\\n    training/webapp \\\n    python app.py\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# centos ssh\n\n\n# 方式一\n\n * dockerfile\n\n# dockerfile\n# 生成的新镜像以centos镜像为基础\nfrom centos\n\n# 安装openssh-server\nrun yum install passwd openssl openssh-server openssh-clients -y\n\nrun ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -n \'\'\nrun ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -n \'\'\nrun ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key  -n \'\'\n\nrun sed -i "s/#useprivilegeseparation.*/useprivilegeseparation no/g" /etc/ssh/sshd_config\nrun sed -i "s/usepam.*/usepam no/g" /etc/ssh/sshd_config\n# 指定root密码\nrun /bin/echo \'root:admin\'|chpasswd\n\nexpose 22\n\n# cmd /usr/sbin/sshd -d\ncmd ["/usr/sbin/sshd", "-d"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * docker - run\n\n# 进入dockerfile所在文件夹运行如下\n\n# 构建dockerfile\ndocker build -t ssh-centos .\n\n# 运行查看构建成功的image信息\ndocker images\n\n# 运行生成的image, containername为运行容器的名字, imageid为image的id\ndocker run -itd --name containername -p 10020:20  imageid\n\n# ssh连接centos\nssh root@127.0.0.1 -p 10020\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * docker-compose.yml\n\nversion: \'2\'\nservices:\n  centos-ssh:\n    build: .\n    image: \'czh/centos-ssh\'\n    restart: always\n    container_name: centos-ssh\n    ports:\n      - \'10020:22\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * ssh 连接 centos: ssh root@127.0.0.1 -p 10020\n\n\n# 方式二\n\n * dockerfile\n\n# dockerfile\n# 生成的新镜像以centos镜像为基础\nfrom centos\n\n# 安装openssh-server\nrun yum install passwd openssl openssh-server openssh-clients -y\n\nrun ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -n \'\'\nrun ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -n \'\'\nrun ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key  -n \'\'\n\nrun sed -i "s/#useprivilegeseparation.*/useprivilegeseparation no/g" /etc/ssh/sshd_config\nrun sed -i "s/usepam.*/usepam no/g" /etc/ssh/sshd_config\n\n# 指定root密码\narg rootpwd\nrun /bin/echo "${rootpwd}" |chpasswd\n\nexpose 22\n\ncmd /usr/sbin/sshd -d\n# cmd ["/usr/sbin/sshd", "-d"]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n * docker-compose.yml\n\nversion: \'3\'\nservices:\n  centos-ssh:\n    build:\n      context: .\n      dockerfile: ./dockerfile\n      args:\n        rootpwd: root:admin\n    image: czh/centos-ssh\n    restart: always\n    container_name: centos-ssh\n    ports:\n      - \'10010:22\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * docker-compose -f "docker-compose.yml" up -d --build\n * ssh root@127.0.0.1 -p 10020\n\n\n# yapi\n\n * yapi for mac\n\n- docker run -d -p 27017:27017 --name mymongo -v /users/pc/srv/mongodb/db:/data/db  mongo:latest\n\n- npm install -g yapi-cli --registry https://registry.npm.taobao.org\n\n- yapi server\n\n- http://0.0.0.0:9090/\n\n- node vendors/server/app.js\n\n- http://127.0.0.1:3000\n\n- 账号名："admin@admin.com"，密码："ymfe.org"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# nginx\n\ndocker run --name some-nginx -v e:\\huashu\\api911\\gaiban\\nginx.conf:/etc/nginx/nginx.conf:ro -v e:\\huashu\\api911\\gaiban:/usr/share/nginx/html:ro -p 80:80 -d  4610\n\n\n1\n\n\n\n# mongo\n\n# https://brickyang.github.io/2017/03/15/%e5%88%a9%e7%94%a8-docker-%e8%bf%90%e8%a1%8c-mongodb/\n\ndocker pull mongo\n\n# docker run --name some-mongo -p 27017:27017  -d mongo:tag\n\n# docker run --name <your-name> -p 27017:27017 -v /data/db:/data/db -d mongo:3.4 --auth\n\n# docker run -d -p 27017:27017 -v mongo_configdb:/data/configdb -v mongo_db:/data/db --name mongo mongo:latest\n\n# docker run -d -p 27017:27017 -v ${pwd}/data:/data/db --name mongo mongo:latest\n\ndocker volume create my-mongo-db\ndocker volume create my-mongo-configdb\n\ndocker run -d -p 27017:27017 --name mymongo -v my-mongo-db:/data/db  -v my-mongo-configdb:/data/configdb mongo:latest\n\ndocker exec -it mymongo mongo\n\nuse admin\ndb.createuser({user: "root", pwd: "root", roles: [{role: "useradminanydatabase", db: "admin"}]})\ndb.auth(\'root\',\'root\') // 1\n\nuse todos\ndb.createuser({user: "czh", pwd: "czh", roles: [{role: "readwrite", db: "todos"}]})\ndb.auth(\'czh\', \'czh\') // 1\n\nuse admin\n# 删除czh用户\ndb.dropuser(\'czh\') // true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# mysql\n\n# mysql版本\nmysql: 8\n\n# 下载\ndocker pull mysql\n\n# 启动容器\n# docker run -p 3306:3306 --name mymysql -v $pwd/conf:/etc/mysql/conf.d -v $pwd/logs:/logs -v $pwd/data:/var/lib/mysql -e mysql_root_password=123456 -d mysql:latest\n\n# docker run -p 3306:3306 --name mymysql -v $pwd/logs:/logs -v $pwd/data:/var/lib/mysql -e mysql_root_password=admin -d mysql:latest\n\n# docker run -p 3306:3306 --name mymysql -v e:/mysql/logs:/logs -v e:mysql/data:/var/lib/mysql -e mysql_root_password=admin -d mysql:latest\n\ndocker volume create my-vol-mysql\n\ndocker run -p 3306:3306 --name mymysql -v my-vol-mysql:/var/lib/mysql -e mysql_root_password=admin -d mysql:latest\n\n# 进入容器\ndocker exec -it mymysql bash\n\n# 登录mysql\nmysql -u root -p\n\nalter user \'root\'@\'localhost\' identified by \'admin\';\n\n# 添加远程登录用户\ncreate user \'czh\'@\'%\' identified with mysql_native_password by \'admin@!123\';\n\ngrant all privileges on *.* to \'czh\'@\'%\';\n\n# 编码\nhttps://blog.csdn.net/m0_37639542/article/details/72852875\nhttps://www.cnblogs.com/jiangxiaobo/p/6110647.html\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# registry\n\n\ndocker run -d -p 5000:5000 --restart always -v /users/pc/srv/registry:/var/lib/registry --name registry registry:2\n\n# 用 curl 查看仓库中的镜像\ncurl 127.0.0.1:5000/v2/_catalog\n\n# pull\ndocker pull ubuntu\n\n# tag\ndocker tag ubuntu localhost:5000/ubuntu\n\n# push\ndocker push localhost:5000/ubuntu\n\n# rm image\ndocker image rm localhost:5000/ubuntu\n\n# pull\ndocker pull localhost:5000/ubuntu\n\n# ip 推送\n{\n  "registry-mirror": [\n    "https://registry.docker-cn.com"\n  ],\n  "insecure-registries": [\n    "192.168.199.100:5000"\n  ]\n}\n\n# webui\nhttps://github.com/mkuchin/docker-registry-web\nhttps://github.com/kwk/docker-registry-frontend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# docker-compose portainer\n\n * portainer: https://github.com/portainer/portainer\n\n// docker-compose -p portainer -f portainer.yml up -d\n\nversion: \'3.1\'\nservices:\n  portainer:\n    image: portainer/portainer-ce:latest\n    container_name: portainer\n    hostname: portainer\n    restart: always\n    volumes:\n      - "/var/run/docker.sock:/var/run/docker.sock"\n      - "/users/czh/data/portainer/data:/data"\n    environment:\n      tz: asia/shanghai\n      lang: en_us.utf-8\n    ports:\n      - "9000:9000"\n#     networks:\n#       portainer:\n#           ipv4_address: 172.20.0.30\n# networks:\n#     portainer:\n#        external: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# docker-compose nextcloud\n\n * dockerfile\n\ndocker volume create nextcloud_data\ndocker volume inspect nextcloud_data\n\ndocker run --name mariadb -p 3306:3306 -e mysql_root_password=admin123 -v /users/czh/data/mariadb:/var/lib/mysql -d mariadb\n\ndocker exec -it mariadb bash -> mysql -uroot -p\n\n\ndocker run -d -p 9001:80 --name=nextcloud -v nextcloud_data:/var/www/html --link=mariadb:mariadb  nextcloud\n\n// 容器在运行docker服务后自启动\ndocker container update --restart=always nextcloud\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * docker-compose.yml\n\n// docker-compose -p nextcloud -f nextcloud.yml up -d\nversion: \'2\'\n\nvolumes:\n  nextcloud_data:\n  mariadb_data:\n\nservices:\n  db:\n    image: mariadb\n    command: --transaction-isolation=read-committed --binlog-format=row\n    restart: always\n    volumes:\n      - mariadb_data:/var/lib/mysql\n    environment:\n      - mysql_root_password=admin123\n      - mysql_password=admin\n      - mysql_database=nextcloud\n      - mysql_user=nextcloud\n\n  app:\n    image: nextcloud\n    ports:\n      - 8080:80\n    links:\n      - db\n    volumes:\n      - nextcloud_data:/var/www/html\n    restart: always\n\n// mariadb:   nextcloud -> admin\n// db name:   nextcloud\n// db link:   db:3306\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 参考示例\n\n * docker —— 从入门到实践\n * judasn/linux-tutorial\n * docker desktop\n * get docker ce for centos\n * daocloud/docker 入门\n * 基于 docker 打造前端持续集成开发环境\n * windows 下使用 docker 部署 gitlab ci 服务\n * centos7 创建支持 ssh 服务器的 docker 容器\n * cr.console.aliyun\n * mirrors.aliyun\n * play with docker',charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1647517837e3},{title:"github的actions使用",frontmatter:{title:"github的actions使用",date:"2020-07-19T00:00:00.000Z",sidebar:"auto",tags:["github"],categories:["frontend"],readingShow:"top"},regularPath:"/services/tools/github-actions.html",relativePath:"services/tools/github-actions.md",key:"v-05798f2b",path:"/services/tools/github-actions.html",headers:[{level:2,title:"github-pages-deploy-action",slug:"github-pages-deploy-action",normalizedTitle:"github-pages-deploy-action",charIndex:94},{level:2,title:"actions schedule",slug:"actions-schedule",normalizedTitle:"actions schedule",charIndex:2602},{level:2,title:"git-mirror-action",slug:"git-mirror-action",normalizedTitle:"git-mirror-action",charIndex:3153},{level:2,title:"gitee-pages-action",slug:"gitee-pages-action",normalizedTitle:"gitee-pages-action",charIndex:3227},{level:2,title:"自动更新readme",slug:"自动更新readme",normalizedTitle:"自动更新readme",charIndex:4391},{level:2,title:"push to gitee",slug:"push-to-gitee",normalizedTitle:"push to gitee",charIndex:5908},{level:2,title:"automerge-action",slug:"automerge-action",normalizedTitle:"automerge-action",charIndex:6809},{level:2,title:"creating-a-javascript-action",slug:"creating-a-javascript-action",normalizedTitle:"creating-a-javascript-action",charIndex:7562},{level:2,title:"github to jsdelivr",slug:"github-to-jsdelivr",normalizedTitle:"github to jsdelivr",charIndex:7677},{level:2,title:"Awesome-PicGo",slug:"awesome-picgo",normalizedTitle:"awesome-picgo",charIndex:7871},{level:2,title:"github api",slug:"github-api",normalizedTitle:"github api",charIndex:7929}],headersStr:"github-pages-deploy-action actions schedule git-mirror-action gitee-pages-action 自动更新readme push to gitee automerge-action creating-a-javascript-action github to jsdelivr Awesome-PicGo github api",content:' * ruanyifeng: getting-started-with-github-actions\n\n * workflow-syntax-for-github-actions\n\n\n# github-pages-deploy-action\n\nJamesIves/github-pages-deploy-action\n\n项目根目录创建：.github/workflows/publish.yml\n\nname: Build and Deploy\non:\n  push:\n    branches:\n      - master\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [12.x]\n\n    steps:\n      - name: Checkout 🛎️\n        uses: actions/checkout@v2.3.1 # If you\'re using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly.\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v1\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Install and Build 🔧 # This example project is built using npm and outputs the result to the \'build\' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.\n        run: |\n          npm install\n          npm run build\n\n      - name: Deploy 🚀\n        uses: JamesIves/github-pages-deploy-action@3.5.7\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} #\n          BRANCH: gh-pages # The branch the action should deploy to.\n          FOLDER: build # The folder the action should deploy.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n * caching-dependencies-to-speed-up-workflows - actions/cache\n   \n   name: Caching with npm\n   \n   on: push\n   \n   jobs:\n     build:\n       runs-on: ubuntu-latest\n   \n       steps:\n         - uses: actions/checkout@v2\n   \n         - name: Cache node modules\n           uses: actions/cache@v2\n           env:\n             cache-name: cache-node-modules\n           with:\n             # npm cache files are stored in `~/.npm` on Linux/macOS\n             path: ~/.npm\n             key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles(\'**/package-lock.json\') }}\n             restore-keys: |\n               ${{ runner.os }}-build-${{ env.cache-name }}-\n               ${{ runner.os }}-build-\n               ${{ runner.os }}-\n   \n         - name: Install Dependencies\n           run: npm install\n   \n         - name: Build\n           run: npm build\n   \n         - name: Test\n           run: npm tests\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   \n\n\n# actions schedule\n\n * schedule: events-that-trigger-workflows\n\n# example\non:\n  schedule:\n    # * is a special character in YAML so you have to quote this string\n    - cron:  \'*/15 * * * *\'\n\n\n┌───────────── minute (0 - 59)\n│ ┌───────────── hour (0 - 23)\n│ │ ┌───────────── day of the month (1 - 31)\n│ │ │ ┌───────────── month (1 - 12 or JAN-DEC)\n│ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)\n│ │ │ │ │\n│ │ │ │ │\n│ │ │ │ │\n* * * * *\n\n# online website generate cron\nhttps://crontab.guru/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# git-mirror-action\n\nhttps://github.com/wearerequired/git-mirror-action\n\n\n# gitee-pages-action\n\n> https://github.com/marketplace/actions/gitee-pages-action\n\n * https://github.com/yanglbme/gitee-pages-action\n\nname: Sync\n\non: page_build\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Sync to Gitee\n        uses: wearerequired/git-mirror-action@master\n        env:\n          # 注意在 Settings->Secrets 配置 GITEE_RSA_PRIVATE_KEY\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }}\n        with:\n          # 注意替换为你的 GitHub 源仓库地址\n          source-repo: git@github.com:doocs/advanced-java.git\n          # 注意替换为你的 Gitee 目标仓库地址\n          destination-repo: git@gitee.com:Doocs/advanced-java.git\n\n      - name: Build Gitee Pages\n        uses: yanglbme/gitee-pages-action@main\n        with:\n          # 注意替换为你的 Gitee 用户名\n          gitee-username: yanglbme\n          # 注意在 Settings->Secrets 配置 GITEE_PASSWORD\n          gitee-password: ${{ secrets.GITEE_PASSWORD }}\n          # 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错\n          gitee-repo: doocs/advanced-java\n          # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）\n          branch: main\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 自动更新readme\n\n# This is a basic workflow to help you get started with Actions\n\nname: build readme\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the master branch\non:   # 触发时机\n  push:\n    branches: [ master ]  # master有更新\n  schedule:\n    - cron:  \'0 */6 * * *\'  # 每6小时运行一次\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called "build"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest   # 使用最新版ubuntu镜像\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n    - uses: actions/checkout@v2\n\n    - name: Setup Python  # 安装python环境\n      uses: actions/setup-python@v2.1.1\n\n    - name: Install Python dependencies  # 安装python爬虫依赖包\n      run: python -m pip install urllib3 lxml\n\n    - name: Run python   # 生成新的README.md文件\n      run: python generateReadme.py\n\n    - name: Record time\n      run: echo `date` > date.log\n\n    - name: Commit and push if changed   # 将README.md更新到仓库\n      run: |\n        git diff\n        git config --global user.email "xindoo@zxs.io"\n        git config --global user.name "zxs"\n        git add -A\n        git commit -m "Updated Readme" || exit\n        git push\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n# push to gitee\n\n> https://juejin.cn/post/6844904003353083918\n\nname: Push to gitee\n\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: Set SSH Key\n      env:\n        SSH_KEY: ${{ secrets.GITEE_SSH_KEY }}\n        SSH_KEY_PUB: ${{ secrets.GITEE_SSH_PUB }}\n      run: |\n        mkdir -p ~/.ssh\n        ssh-keyscan -H gitee.com >> ~/.ssh/known_hosts\n        echo ${SSH_KEY} > ~/.ssh/id_rsa\n        sed -i -e "s#\\\\\\\\n#\\n#g" ~/.ssh/id_rsa\n        chmod 600 ~/.ssh/id_rsa\n        echo ${SSH_KEY_PUB} > ~/.ssh/id_rsa.pub\n        chmod 600 ~/.ssh/id_rsa.pub\n\n    - name: Push to gitee\n      run: |\n        git switch -c master\n        git remote add gitee git@gitee.com:befovy/images.git\n        git push --set-upstream gitee master -f\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# automerge-action\n\n * https://github.com/pascalgn/automerge-action\n\nname: Merge Imgbot\n\non:\n  pull_request:\n    types:\n      - opened\n      - ready_for_review\n  pull_request_review:\n    types:\n      - submitted\n  status: {}\n\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: automerge\n        uses: "pascalgn/automerge-action@v0.6.1"\n        env:\n          GITHUB_TOKEN: "${{ secrets.GIT_MERGE_TOKEN }}"\n          MERGE_LABELS: ""\n          MERGE_METHOD: "squash"\n          MERGE_COMMIT_MESSAGE: "pull-request-description"\n          MERGE_FORKS: "false"\n          MERGE_RETRIES: "2"\n          MERGE_RETRY_SLEEP: "10000"\n          UPDATE_METHOD: "rebase"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# creating-a-javascript-action\n\nhttps://docs.github.com/cn/actions/creating-actions/creating-a-javascript-action\n\n\n# github to jsdelivr\n\n * 访问仓库文件：https://cdn.jsdelivr.net/gh/user/repo/file\n * 访问最新文件：https://cdn.jsdelivr.net/gh/user/repo@latest/file\n * 按版本号访问：https://cdn.jsdelivr.net/gh/user/repo@1.2/file\n\n\n# Awesome-PicGo\n\nhttps://github.com/PicGo/Awesome-PicGo\n\n\n# github api\n\n * octokit graphql: https://github.com/octokit/graphql.js\n * octokit rest api: https://github.com/octokit/octokit.js',normalizedContent:' * ruanyifeng: getting-started-with-github-actions\n\n * workflow-syntax-for-github-actions\n\n\n# github-pages-deploy-action\n\njamesives/github-pages-deploy-action\n\n项目根目录创建：.github/workflows/publish.yml\n\nname: build and deploy\non:\n  push:\n    branches:\n      - master\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [12.x]\n\n    steps:\n      - name: checkout 🛎️\n        uses: actions/checkout@v2.3.1 # if you\'re using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly.\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: use node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v1\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: install and build 🔧 # this example project is built using npm and outputs the result to the \'build\' folder. replace with the commands required to build your project, or remove this step entirely if your site is pre-built.\n        run: |\n          npm install\n          npm run build\n\n      - name: deploy 🚀\n        uses: jamesives/github-pages-deploy-action@3.5.7\n        with:\n          github_token: ${{ secrets.github_token }} #\n          branch: gh-pages # the branch the action should deploy to.\n          folder: build # the folder the action should deploy.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n * caching-dependencies-to-speed-up-workflows - actions/cache\n   \n   name: caching with npm\n   \n   on: push\n   \n   jobs:\n     build:\n       runs-on: ubuntu-latest\n   \n       steps:\n         - uses: actions/checkout@v2\n   \n         - name: cache node modules\n           uses: actions/cache@v2\n           env:\n             cache-name: cache-node-modules\n           with:\n             # npm cache files are stored in `~/.npm` on linux/macos\n             path: ~/.npm\n             key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashfiles(\'**/package-lock.json\') }}\n             restore-keys: |\n               ${{ runner.os }}-build-${{ env.cache-name }}-\n               ${{ runner.os }}-build-\n               ${{ runner.os }}-\n   \n         - name: install dependencies\n           run: npm install\n   \n         - name: build\n           run: npm build\n   \n         - name: test\n           run: npm tests\n   \n   \n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   \n\n\n# actions schedule\n\n * schedule: events-that-trigger-workflows\n\n# example\non:\n  schedule:\n    # * is a special character in yaml so you have to quote this string\n    - cron:  \'*/15 * * * *\'\n\n\n┌───────────── minute (0 - 59)\n│ ┌───────────── hour (0 - 23)\n│ │ ┌───────────── day of the month (1 - 31)\n│ │ │ ┌───────────── month (1 - 12 or jan-dec)\n│ │ │ │ ┌───────────── day of the week (0 - 6 or sun-sat)\n│ │ │ │ │\n│ │ │ │ │\n│ │ │ │ │\n* * * * *\n\n# online website generate cron\nhttps://crontab.guru/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# git-mirror-action\n\nhttps://github.com/wearerequired/git-mirror-action\n\n\n# gitee-pages-action\n\n> https://github.com/marketplace/actions/gitee-pages-action\n\n * https://github.com/yanglbme/gitee-pages-action\n\nname: sync\n\non: page_build\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: sync to gitee\n        uses: wearerequired/git-mirror-action@master\n        env:\n          # 注意在 settings->secrets 配置 gitee_rsa_private_key\n          ssh_private_key: ${{ secrets.gitee_rsa_private_key }}\n        with:\n          # 注意替换为你的 github 源仓库地址\n          source-repo: git@github.com:doocs/advanced-java.git\n          # 注意替换为你的 gitee 目标仓库地址\n          destination-repo: git@gitee.com:doocs/advanced-java.git\n\n      - name: build gitee pages\n        uses: yanglbme/gitee-pages-action@main\n        with:\n          # 注意替换为你的 gitee 用户名\n          gitee-username: yanglbme\n          # 注意在 settings->secrets 配置 gitee_password\n          gitee-password: ${{ secrets.gitee_password }}\n          # 注意替换为你的 gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错\n          gitee-repo: doocs/advanced-java\n          # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）\n          branch: main\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 自动更新readme\n\n# this is a basic workflow to help you get started with actions\n\nname: build readme\n\n# controls when the action will run. triggers the workflow on push or pull request\n# events but only for the master branch\non:   # 触发时机\n  push:\n    branches: [ master ]  # master有更新\n  schedule:\n    - cron:  \'0 */6 * * *\'  # 每6小时运行一次\n# a workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # this workflow contains a single job called "build"\n  build:\n    # the type of runner that the job will run on\n    runs-on: ubuntu-latest   # 使用最新版ubuntu镜像\n\n    # steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n    # checks-out your repository under $github_workspace, so your job can access it\n    - uses: actions/checkout@v2\n\n    - name: setup python  # 安装python环境\n      uses: actions/setup-python@v2.1.1\n\n    - name: install python dependencies  # 安装python爬虫依赖包\n      run: python -m pip install urllib3 lxml\n\n    - name: run python   # 生成新的readme.md文件\n      run: python generatereadme.py\n\n    - name: record time\n      run: echo `date` > date.log\n\n    - name: commit and push if changed   # 将readme.md更新到仓库\n      run: |\n        git diff\n        git config --global user.email "xindoo@zxs.io"\n        git config --global user.name "zxs"\n        git add -a\n        git commit -m "updated readme" || exit\n        git push\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n# push to gitee\n\n> https://juejin.cn/post/6844904003353083918\n\nname: push to gitee\n\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: set ssh key\n      env:\n        ssh_key: ${{ secrets.gitee_ssh_key }}\n        ssh_key_pub: ${{ secrets.gitee_ssh_pub }}\n      run: |\n        mkdir -p ~/.ssh\n        ssh-keyscan -h gitee.com >> ~/.ssh/known_hosts\n        echo ${ssh_key} > ~/.ssh/id_rsa\n        sed -i -e "s#\\\\\\\\n#\\n#g" ~/.ssh/id_rsa\n        chmod 600 ~/.ssh/id_rsa\n        echo ${ssh_key_pub} > ~/.ssh/id_rsa.pub\n        chmod 600 ~/.ssh/id_rsa.pub\n\n    - name: push to gitee\n      run: |\n        git switch -c master\n        git remote add gitee git@gitee.com:befovy/images.git\n        git push --set-upstream gitee master -f\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# automerge-action\n\n * https://github.com/pascalgn/automerge-action\n\nname: merge imgbot\n\non:\n  pull_request:\n    types:\n      - opened\n      - ready_for_review\n  pull_request_review:\n    types:\n      - submitted\n  status: {}\n\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: automerge\n        uses: "pascalgn/automerge-action@v0.6.1"\n        env:\n          github_token: "${{ secrets.git_merge_token }}"\n          merge_labels: ""\n          merge_method: "squash"\n          merge_commit_message: "pull-request-description"\n          merge_forks: "false"\n          merge_retries: "2"\n          merge_retry_sleep: "10000"\n          update_method: "rebase"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# creating-a-javascript-action\n\nhttps://docs.github.com/cn/actions/creating-actions/creating-a-javascript-action\n\n\n# github to jsdelivr\n\n * 访问仓库文件：https://cdn.jsdelivr.net/gh/user/repo/file\n * 访问最新文件：https://cdn.jsdelivr.net/gh/user/repo@latest/file\n * 按版本号访问：https://cdn.jsdelivr.net/gh/user/repo@1.2/file\n\n\n# awesome-picgo\n\nhttps://github.com/picgo/awesome-picgo\n\n\n# github api\n\n * octokit graphql: https://github.com/octokit/graphql.js\n * octokit rest api: https://github.com/octokit/octokit.js',charsets:{cjk:!0},lastUpdated:"2/3/2022",lastUpdatedTimestamp:1643899953e3,createdTime:1643899953e3},{title:"gitlab的服务部署",frontmatter:{title:"gitlab的服务部署",date:"2020-07-21T00:00:00.000Z",sidebar:"auto",tags:["gitlab"],categories:["services"],readingShow:"top"},regularPath:"/services/tools/gitlab.html",relativePath:"services/tools/gitlab.md",key:"v-90f907aa",path:"/services/tools/gitlab.html",headers:[{level:2,title:"gitlab-ce",slug:"gitlab-ce",normalizedTitle:"gitlab-ce",charIndex:78},{level:2,title:"gitlab-runner",slug:"gitlab-runner",normalizedTitle:"gitlab-runner",charIndex:2027},{level:3,title:"docker",slug:"docker",normalizedTitle:"docker",charIndex:164},{level:3,title:"docker-compose",slug:"docker-compose",normalizedTitle:"docker-compose",charIndex:164},{level:3,title:"windows",slug:"windows",normalizedTitle:"windows",charIndex:665},{level:2,title:"jenkins docker",slug:"jenkins-docker",normalizedTitle:"jenkins docker",charIndex:5799},{level:2,title:"jenkins docker-compose",slug:"jenkins-docker-compose",normalizedTitle:"jenkins docker-compose",charIndex:6557},{level:3,title:"jenkins for mac",slug:"jenkins-for-mac",normalizedTitle:"jenkins for mac",charIndex:5818},{level:3,title:"jenkins for windows",slug:"jenkins-for-windows",normalizedTitle:"jenkins for windows",charIndex:6146},{level:2,title:"GitLab-CI",slug:"gitlab-ci",normalizedTitle:"gitlab-ci",charIndex:7378}],headersStr:"gitlab-ce gitlab-runner docker docker-compose windows jenkins docker jenkins docker-compose jenkins for mac jenkins for windows GitLab-CI",content:" * hosts\n\n127.0.0.1\tjenkins.chenio.com\n127.0.0.1\tgitlab.chenio.com\n\n\n1\n2\n\n\n\n# gitlab-ce\n\n * gitlab-ce for window\n\n# local hosts add: 127.0.0.1  gitlab.chenio.com\n# docker-compose.yml\n\nversion: '2'\nservices:\n  web:\n    image: 'gitlab/gitlab-ce:latest'\n    restart: always\n    hostname: 'gitlab.chenio.com'\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url 'http://gitlab.chenio.com:9090'\n        gitlab_rails['gitlab_shell_ssh_port'] = 2224\n    ports:\n      - '9090:9090'\n      - '2224:22'\n    volumes:\n      - 'd:/docker/gitlab/config:/etc/gitlab'\n      - 'd:/docker/gitlab/logs:/var/log/gitlab'\n\n# run docker-compose.yml\ndocker-compose up -d\n\n# windows10\ndocker run -d --hostname localhost -p 9090:80 -p 10443:443 --name gitlab -v d:/docker/gitlab/config:/etc/gitlab -v d:/docker/gitlab/logs:/var/log/gitlab gitlab/gitlab-ce:latest\n\nhttp://localhost:10080/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n * gitlab-ce for Mac\n\n# https://docs.gitlab.com/omnibus/docker/#run-the-image\n\n# docker run\nsudo docker run --detach \\\n\t--hostname 0.0.0.0 \\\n\t--publish 443:443 --publish 9090:80 --publish 22:22 \\\n\t--name gitlab \\\n\t--restart always \\\n\t--volume /Users/pc/srv/gitlab/config:/etc/gitlab \\\n\t--volume /Users/pc/srv/gitlab/logs:/var/log/gitlab \\\n\t--volume /Users/pc/srv/gitlab/data:/var/opt/gitlab \\\n\tgitlab/gitlab-ce:latest\n\n# docker-compose.yml文件\nweb:\n  image: 'gitlab/gitlab-ce:latest'\n  restart: always\n  hostname: 'gitlab.example.com'\n  environment:\n    GITLAB_OMNIBUS_CONFIG: |\n      external_url 'http://gitlab.example.com:9090'\n      gitlab_rails['gitlab_shell_ssh_port'] = 2224\n  ports:\n    - '9090:9090'\n    - '2224:22'\n  volumes:\n    - '/Users/pc/srv/gitlab/config:/etc/gitlab'\n    - '/Users/pc/srv/gitlab/logs:/var/log/gitlab'\n    - '/Users/pc/srv/gitlab/data:/var/opt/gitlab'\n\n# run docker-compose.yml\ndocker-compose up -d\ndocker-compose down\n\nhttp://localhost:9090\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# gitlab-runner\n\n\n# docker\n\n# test rep\nhttps://gitlab.com/chengzao/gitlab-test.git\n\n# Windows下使用docker部署gitlab CI服务\nhttps://www.jianshu.com/p/0abe441d5d3c\n\n# docker之CI/CD持续集成—GitLab CI服务器\nhttps://zhuanlan.zhihu.com/p/54064430\nhttps://idig8.com/2018/11/20/987/\n\n# 在docker中执行gitlab-runner\nhttps://segmentfault.com/a/1190000012279248\n\nhttps://docs.gitlab.com/runner/\nhttps://docs.gitlab.com/runner/install/docker.html\nhttps://docs.gitlab.com/runner/register/\n\n# start\ndocker run -d --name gitlab-runner --restart always \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v /etc/gitlab-runner \\\n  gitlab/gitlab-runner:latest\n\n# register\ndocker exec -it gitlab-runner gitlab-ci-multi-runner register\n\nsudo docker run --rm -t -i -v /Users/pc/srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register\n\n# config\ndocker\nalpine:latest\n\n# log\ndocker logs gitlab-runner\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# docker-compose\n\n * gitab-runner\n\n# Dockerfile\nFROM gitlab/gitlab-runner:latest\n\nRUN apt-get update -y\n\n# https://github.com/nodesource/distributions/blob/master/README.md\nRUN curl -sL https://deb.nodesource.com/setup_11.x | bash -\n\nRUN apt-get install -y nodejs\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * docker-compose.yml\n\nversion: '2'\nservices:\n  web:\n    build: .\n    image: 'czh/gitlab-runner'\n    restart: always\n    container_name: gitlab-runner\n    extra_hosts:\n      - \"gitlab.chenio.com:192.168.137.138\"\n      - \"jenkins.chenio.com:192.168.137.138\"\n    volumes:\n      - '/var/run/docker.sock:/var/run/docker.sock'\n      - '/Users/pc/srv/gitlab-runner/config:/etc/gitlab-runner'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n * docker-compose -f \"docker-compose.yml\" up -d --build\n\n * docker exec -it gitlab-runner gitlab-ci-multi-runner register\n\n# step1: Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):\nhttp://gitlab.chenio.com:9090/\n# step2: Please enter the gitlab-ci token for this runner:\nraQ5xxxxxxxxxxxxWQ\n# step3: Please enter the gitlab-ci description for this runner:\nrunner-name\n# step4: Please enter the gitlab-ci tags for this runner (comma separated):\ntest, build, deploy\n# step5: Please enter the executor: parallels, shell, ssh, virtualbox, docker+machine, docker-ssh+machine, docker, docker-ssh, kubernetes:\nshell\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * gitlab-ci.yml\n\n# This file is a template, and might need editing before it works on your project.\n# see https://docs.gitlab.com/ce/ci/yaml/README.html for all available options\n# react simple demo\n# you can delete this line if you're not using Docker\nimage: node:latest\n\nbefore_script:\n  - echo \"Before script installing package\"\n  - node -v\n  - npm -v\n  - npm install\n\nafter_script:\n  - echo \"After script section\"\n\nbuild:\n  stage: build\n  script:\n    - npm run build\n\ntest:\n  stage: test\n  script:\n    - npm run test\n\ndeploy:\n  stage: deploy\n  script:\n    - echo \"Do your deploy here\"\n\ncache:\n  paths:\n  - node_modules/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# windows\n\n# runner安装下载\nhttps://docs.gitlab.com/runner/install/windows.html\n- C盘新建GitLab-Runner文件夹\n- 将下载好的文件exe文件放进GitLab-Runner， 重命名为gitlab-runner.exe\n- Windows PowerShell Run as administrator\n\n# 注册\nhttps://docs.gitlab.com/runner/register/index.html\n- ./gitlab-runner.exe register\n\n# Install the Runner as a service and start it\n- gitlab-runner install\n- gitlab-runner start\n\n# stop\n- cd C:\\GitLab-Runner\n- gitlab-runner stop\n\n# update\n- cd C:\\GitLab-Runner\n- gitlab-runner stop\n- 重复runner安装下载\n- gitlab-runner start\n\n# Uninstall\n- cd C:\\GitLab-Runner\n- gitlab-runner stop\n- gitlab-runner uninstall\n- cd ..\n- rmdir /s GitLab-Runner\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# jenkins docker\n\n * jenkins for mac\n\n# https://github.com/jenkinsci/docker/blob/master/README.md\n\n# step1\ndocker pull jenkins/jenkins:latest\n\n# step2\ndocker run -d -p 8080:8080 -p 50000:50000 --name devops-jenkins -v /Users/pc/srv/jenkins_home:/var/jenkins_home jenkins/jenkins:latest\n\n# 查看log\ndocker logs devops-jenkins\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * jenkins for windows\n\n# https://github.com/jenkinsci/docker/blob/master/README.md\n\n# step1\ndocker pull jenkins/jenkins:latest\n\n# step2\ndocker run -d -p 8080:8080 -p 50000:50000 --name devops-jenkins -v d:/docker/jenkins_home:/var/jenkins_home jenkins/jenkins:latest\n\n# 初始密码位置\nD:/docker/jenkins_home/secrets/initialAdminPassword\n\n# local hosts add: 127.0.0.1  jenkins.chenio.com\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# jenkins docker-compose\n\n\n# jenkins for mac\n\n * docker-compose.yml\n\n# docker-compose.yml\nversion: '2'\nservices:\n  web:\n    image: 'jenkins/jenkins:latest'\n    restart: always\n    hostname: 'jenkins.chenio.com'\n    pid: \"host\"\n    ports:\n      - '8080:8080'\n      - '50000:50000'\n    volumes:\n      - '/Users/pc/srv/jenkins_home:/var/jenkins_home'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * 运行：docker-compose up -d\n\n\n# jenkins for windows\n\n * docker-compose.yml\n\n# local hosts add: 127.0.0.1  jenkins.chenio.com\nversion: '3'\nservices:\n  web:\n    image: 'jenkins/jenkins:latest'\n    restart: always\n    hostname: 'jenkins.chenio.com'\n    pid: \"host\"\n    ports:\n      - '8080:8080'\n      - '50000:50000'\n    volumes:\n      - 'd:/docker/jenkins_home:/var/jenkins_home'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * 运行：docker-compose up -d\n\n\n# GitLab-CI\n\n * Configuration of your jobs with .gitlab-ci.yml\n * 原文：Gitlab-CI job 配置文件 .gitlab-ci.yml 配置方式(翻译)\n * gitlab-ci 使用 YAML 文件管理配置 job\n * Job: YAML 文件定义了一系列带有约束说明的 job, job 至少需要要包含 script\n   * script 可以直接执行系统命令(如：./configure;make;make install)或者直接执行脚本(test.sh)\n   * 任务是由 CI 接管并且在服务器执行, 并且每一个任务的执行都是独立的\n * job 的名称具有唯一性在文件中只能出现一次; 下列词汇是保留字段，不能被使用命名为 job 名称\n * 关键字: 不可以被用于 Job 名 的保留字\n\n关键字             是否必须   描述\nimage           no     用于 docker 镜像\nservices        no     用于 docker 服务\nstages          no     定义构建阶段\ntypes           no     stages 的别名(已废除)\nbefore_script   no     定义在每个 job 之前运行的命令\nafter_script    no     定义在每个 job 之后运行的命令\nvariables       no     定义构建变量\ncache           no     定义一组文件列表，可在后续运行中使用\n\n * only and except 保留字\n\n关键字         描述\nbranches    当一个分支被 push 上来\ntags        当一个打了 tag 的分支被 push 上来\napi         当一个 pipline 被 piplines api 所触发调起\nexternal    当使用了 GitLab 以外的 CI 服务\npipelines   针对多项目触发器而言，当使用 CI_JOB_TOKEN 并使用 gitlab 所提供的 api 创建多个\n            pipelines 的时候\npushes      当 pipeline 被用户的 git push 操作所触发的时候\nschedules   针对预定好的 pipline 而言（每日构建一类）\ntriggers    用 token 创建 piplines 的时候\nweb         在 GitLab 页面上 Pipelines 标签页下，你按了 run pipline 的时候\n\n * job 可以配置的参数列表\n\n参数名称            是否必须   参数说明\nscript          yes    需要在 docker 容器中运行的脚本\nimage           no     所使用的 docker 镜像\nservices        no     需要关联的 docker 服务\nstage           no     定义当前 job 运行在那个阶段 (默认: test)\nvariables       no     定义 job 级别的变量\nonly            no     定义一列 git 分支，并为其创建 job\nexcept          no     定义一列 git 分支，不创建 job\ntags            no     通过 tags 确定使用指定还是使用通用部署程序\nallow_failure   no     允许 job 失败， job 失败不会影响最终结果\nwhen            no     定义 job 在什么时候运行， 支持参数 on_success, on_failure, always 或者\n                       manual\ndependencies    no     定义 job 依赖关系，这样他们就可以互相传递 artifacts\nartifacts       no     Define list of job artifacts\ncache           no     定义应在后续运行之间缓存的文件列表\nbefore_script   no     覆盖 job 执行前需要执行的脚本设置\nafter_script    no     覆盖 job 执行后需要执行的脚本设置\nenvironment     no     定义此作业完成部署的环境名称\ncoverage        no     定义给定作业的代码覆盖率设置\nretry           no     job 执行发生故障时自动重试次数\n\n# job示例\n\nimage: ruby:2.1\nservices:\n  - postgres\n\nbefore_script:\n  - bundle install\n\nafter_script:\n  - rm secrets\n\nstages:\n  - build\n  - test\n  - deploy\n\njob1:\n  stage: build\n  script:\n    - execute-script-for-job1\n  only:\n    - master\n  tags:\n    - docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * image and services: 这两个关键字允许使用一个自定义的 Docker 镜像和一系列的服务，并且可以用于整个 job 周期\n * before_script:\n   * 必须是数组或多行字符串\n   * 支持定义为 global 和 job 类型， job 类型会覆盖掉 global 类型的值\n   * 定义在所有 job（包括 deploy job）之前运行的命令。（在 artifacts 运行之后）\n * after_script\n   * 必须是数组或多行字符串\n   * 支持定义为 global 和 job 类型， job 类型会覆盖掉 global 类型的值\n   * 定义在所有 job（包括失败的 job）之后运行的命令\n\n# script示例\n\nbefore_script:\n  - global before script\n\njob:\n  before_script:\n    - execute this instead of global before script\n  script:\n    - my command\n  after_script:\n    - execute this after my script\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * stages\n   * 只支持 global 类型\n   * 定义了 job 支持的执行阶段和顺序\n   * stages 中的元素顺序决定了对应 job 的执行顺序\n   * 下一个 阶段 的 job 只会在前一个 阶段 的 job 执行成功后开始执行\n\n# stages示例\nstages:\n  - build\n  - test\n  - deploy\n\n# 运行顺序：\n1. 运行所有的 build\n2. 如果所有作业都 build 运行成功，那么开始运行所有的 test\n3. 如果所有作业都 test 运行成功，那么开始运行所有的 deploy\n4. 如果所有作业都 deploy 成功，则标记 job 为 passed\n5. 如果在之前动作中有任何失败，则标记 job 为 failed 并终止 job 执行\n\n# 没有定义stages时的默认动作\n如果 .gitlab-ci.yml 文件中没有定义 stages , stages 将会被设置成 build -> test -> deploy.\n如果 job 没有定义 stage, 则 job 的 stage 将会被设置成 test\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * stage\n   * 相同 stage 的 job 会并行执行\n   * stage 的值必须定义在 stages 中，可以通过设置 stage 来对 job 进行分组，相同分组的 job 将会并行执行.\n\n# stage示例\nstages:\n  - build\n  - test\n  - deploy\n\njob 1:\n  stage: build\n  script: make build dependencies\n\njob 2:\n  stage: build\n  script: make build artifacts\n\njob 3:\n  stage: test\n  script: make test\n\njob 4:\n  stage: deploy\n  script: make deploy\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n * script\n   * script 是 job 运行需要的唯一一个必须字段, 通过 script 来指定应该如何执行 job\n   * script 可以设置为 string 和 array 类型\n\n# script 设置为 string 来设置 job 执行什么命令\njob:\n  script: \"bundle exec rspec\"\n\n# script 设置为 array 来指定运行多个命令\njob:\n  script:\n    - uname -a\n    - bundle exec rspec\n\n# 如果命令中包含有特殊字符, 则需要用双引号将 script 括起来\njob:\nscript:\n  - make\n  - \"ps -aux | grep gcc\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n * YAML 中的特殊字符: : 、 { 、 } 、 [ 、 ] 、, 、 & 、 * 、 # 、 ? 、 | 、 - 、 < 、 > 、 = 、 ! 、 % 、@ 、`` ` 。\n\n * only and except\n   \n   * 只有满足 only 条件的 branches 和 tags 才会被运行\n   * except 和 only 相反, 满足 except 条件的 branches 和 tags 将 不会 被运行\n\n * refs 策略的使用规则:\n   \n   * only 和 except 支持使用正则表达式.\n   * only 和 except 支持使用特殊的关键字.\n   * only 和 except 支持同时设置, 当同时设置时 only 和 except 将会同时起作用.\n   * only 和 except 也可以用来指定 forks 作业的存储库路径\n\n# job 会跳过所有分支, 只在以 issue- 开头的 ref 时运行\n\njob:\n  # use regexp\n  only:\n    - /^issue-.*$/\n  # use special keyword\n  except:\n    - branches\n\n# job 只会执行有 tags 或者通过API触发器构建的 refs\n\njob:\n  # use special keywords\n  only:\n    - tags\n    - triggers\n    - schedules\n\n# 只会在除 gitlab-org/gitlab-ce 的 master 分支外的其他分支时才会运行\n\njob:\n  only:\n    - branches@gitlab-org/gitlab-ce\n  except:\n    - master@gitlab-org/gitlab-ce\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n * artifacts:\n   * 用于指定成功后应附加到 job 的文件和目录的列表\n   * 只能使用项目工作间内的文件或目录路径\n   * 定义一个空的 dependencies 数组可以禁用 artifact 传递\n\n# artifacts示例\njob:\n  stage: build\n  script: make build\n  dependencies: []\n\n\n1\n2\n3\n4\n5\n\n * variables: GitLab CI 允许你为.gitlab-ci.yml 增加变量，该变量将会被设置入任务环境\n\n# 变量\n\nvariables:\n    DATABASE_URL: \"postgres://postgres@postgres/my_database\"\n# 注意:整数和字符串一样，对于设置变量名和变量值来说都是合法的。但浮点数是非法的。\n\n\n1\n2\n3\n4\n5\n\n * tags：用来确定使用哪个 runner 运行当前任务，如果不设置的话将使用通用 runner 运行\n\n# 只有同时定义了 ruby 和 postgres 的 runner 才能运行这个 job\n\njob:\n  tags:\n    - ruby\n    - postgres\n\n\n1\n2\n3\n4\n5\n6\n\n * allow_failure: 允许 job 失败. job 失败不会影响最终结果\n\n#  当 job1 运行失败, 也不会打断 CI 执行，CI 会继续运行下一阶段\n\njob1:\n  stage: test\n  script:\n    - execute_script_that_will_fail\n  allow_failure: true\n\njob2:\n  stage: test\n  script:\n    - execute_script_that_will_succeed\n\njob3:\n  stage: deploy\n  script:\n    - deploy_to_staging\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * when 用来指示 job 应该在什么时候开始运行\n   * on_success - 只有之前的阶段全部成功时才会执行.(默认值)\n   * on_failure - 当之前的阶段执行过程中出现过任何错误时执行\n   * always - 无论之前的阶段是否执行成功都执行\n   * manual - 手动执行\n\nstages:\n  - build\n  - cleanup_build\n  - test\n  - deploy\n  - cleanup\n\nbuild_job:\n  stage: build\n  script:\n    - make build\n\ncleanup_build_job:\n  stage: cleanup_build\n  script:\n    - cleanup build when failed\n  when: on_failure\n\ntest_job:\n  stage: test\n  script:\n    - make test\n\ndeploy_job:\n  stage: deploy\n  script:\n    - make deploy\n  when: manual\n\ncleanup_job:\n  stage: cleanup\n  script:\n    - cleanup after jobs\n  when: always\n\n# 1 cleanup_build_job 只有在 build_job 失败时才会执行\n# 2 不论其他 job 是否执行成功, cleanup_job 总会在最后一个被执行\n# 3 可以通过 Gitlab 控制台手动执行 deploy_job\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n * GitLab-CI 中的 artifacts 使用研究",normalizedContent:" * hosts\n\n127.0.0.1\tjenkins.chenio.com\n127.0.0.1\tgitlab.chenio.com\n\n\n1\n2\n\n\n\n# gitlab-ce\n\n * gitlab-ce for window\n\n# local hosts add: 127.0.0.1  gitlab.chenio.com\n# docker-compose.yml\n\nversion: '2'\nservices:\n  web:\n    image: 'gitlab/gitlab-ce:latest'\n    restart: always\n    hostname: 'gitlab.chenio.com'\n    environment:\n      gitlab_omnibus_config: |\n        external_url 'http://gitlab.chenio.com:9090'\n        gitlab_rails['gitlab_shell_ssh_port'] = 2224\n    ports:\n      - '9090:9090'\n      - '2224:22'\n    volumes:\n      - 'd:/docker/gitlab/config:/etc/gitlab'\n      - 'd:/docker/gitlab/logs:/var/log/gitlab'\n\n# run docker-compose.yml\ndocker-compose up -d\n\n# windows10\ndocker run -d --hostname localhost -p 9090:80 -p 10443:443 --name gitlab -v d:/docker/gitlab/config:/etc/gitlab -v d:/docker/gitlab/logs:/var/log/gitlab gitlab/gitlab-ce:latest\n\nhttp://localhost:10080/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n * gitlab-ce for mac\n\n# https://docs.gitlab.com/omnibus/docker/#run-the-image\n\n# docker run\nsudo docker run --detach \\\n\t--hostname 0.0.0.0 \\\n\t--publish 443:443 --publish 9090:80 --publish 22:22 \\\n\t--name gitlab \\\n\t--restart always \\\n\t--volume /users/pc/srv/gitlab/config:/etc/gitlab \\\n\t--volume /users/pc/srv/gitlab/logs:/var/log/gitlab \\\n\t--volume /users/pc/srv/gitlab/data:/var/opt/gitlab \\\n\tgitlab/gitlab-ce:latest\n\n# docker-compose.yml文件\nweb:\n  image: 'gitlab/gitlab-ce:latest'\n  restart: always\n  hostname: 'gitlab.example.com'\n  environment:\n    gitlab_omnibus_config: |\n      external_url 'http://gitlab.example.com:9090'\n      gitlab_rails['gitlab_shell_ssh_port'] = 2224\n  ports:\n    - '9090:9090'\n    - '2224:22'\n  volumes:\n    - '/users/pc/srv/gitlab/config:/etc/gitlab'\n    - '/users/pc/srv/gitlab/logs:/var/log/gitlab'\n    - '/users/pc/srv/gitlab/data:/var/opt/gitlab'\n\n# run docker-compose.yml\ndocker-compose up -d\ndocker-compose down\n\nhttp://localhost:9090\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# gitlab-runner\n\n\n# docker\n\n# test rep\nhttps://gitlab.com/chengzao/gitlab-test.git\n\n# windows下使用docker部署gitlab ci服务\nhttps://www.jianshu.com/p/0abe441d5d3c\n\n# docker之ci/cd持续集成—gitlab ci服务器\nhttps://zhuanlan.zhihu.com/p/54064430\nhttps://idig8.com/2018/11/20/987/\n\n# 在docker中执行gitlab-runner\nhttps://segmentfault.com/a/1190000012279248\n\nhttps://docs.gitlab.com/runner/\nhttps://docs.gitlab.com/runner/install/docker.html\nhttps://docs.gitlab.com/runner/register/\n\n# start\ndocker run -d --name gitlab-runner --restart always \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v /etc/gitlab-runner \\\n  gitlab/gitlab-runner:latest\n\n# register\ndocker exec -it gitlab-runner gitlab-ci-multi-runner register\n\nsudo docker run --rm -t -i -v /users/pc/srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register\n\n# config\ndocker\nalpine:latest\n\n# log\ndocker logs gitlab-runner\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# docker-compose\n\n * gitab-runner\n\n# dockerfile\nfrom gitlab/gitlab-runner:latest\n\nrun apt-get update -y\n\n# https://github.com/nodesource/distributions/blob/master/readme.md\nrun curl -sl https://deb.nodesource.com/setup_11.x | bash -\n\nrun apt-get install -y nodejs\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * docker-compose.yml\n\nversion: '2'\nservices:\n  web:\n    build: .\n    image: 'czh/gitlab-runner'\n    restart: always\n    container_name: gitlab-runner\n    extra_hosts:\n      - \"gitlab.chenio.com:192.168.137.138\"\n      - \"jenkins.chenio.com:192.168.137.138\"\n    volumes:\n      - '/var/run/docker.sock:/var/run/docker.sock'\n      - '/users/pc/srv/gitlab-runner/config:/etc/gitlab-runner'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n * docker-compose -f \"docker-compose.yml\" up -d --build\n\n * docker exec -it gitlab-runner gitlab-ci-multi-runner register\n\n# step1: please enter the gitlab-ci coordinator url (e.g. https://gitlab.com/):\nhttp://gitlab.chenio.com:9090/\n# step2: please enter the gitlab-ci token for this runner:\nraq5xxxxxxxxxxxxwq\n# step3: please enter the gitlab-ci description for this runner:\nrunner-name\n# step4: please enter the gitlab-ci tags for this runner (comma separated):\ntest, build, deploy\n# step5: please enter the executor: parallels, shell, ssh, virtualbox, docker+machine, docker-ssh+machine, docker, docker-ssh, kubernetes:\nshell\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * gitlab-ci.yml\n\n# this file is a template, and might need editing before it works on your project.\n# see https://docs.gitlab.com/ce/ci/yaml/readme.html for all available options\n# react simple demo\n# you can delete this line if you're not using docker\nimage: node:latest\n\nbefore_script:\n  - echo \"before script installing package\"\n  - node -v\n  - npm -v\n  - npm install\n\nafter_script:\n  - echo \"after script section\"\n\nbuild:\n  stage: build\n  script:\n    - npm run build\n\ntest:\n  stage: test\n  script:\n    - npm run test\n\ndeploy:\n  stage: deploy\n  script:\n    - echo \"do your deploy here\"\n\ncache:\n  paths:\n  - node_modules/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# windows\n\n# runner安装下载\nhttps://docs.gitlab.com/runner/install/windows.html\n- c盘新建gitlab-runner文件夹\n- 将下载好的文件exe文件放进gitlab-runner， 重命名为gitlab-runner.exe\n- windows powershell run as administrator\n\n# 注册\nhttps://docs.gitlab.com/runner/register/index.html\n- ./gitlab-runner.exe register\n\n# install the runner as a service and start it\n- gitlab-runner install\n- gitlab-runner start\n\n# stop\n- cd c:\\gitlab-runner\n- gitlab-runner stop\n\n# update\n- cd c:\\gitlab-runner\n- gitlab-runner stop\n- 重复runner安装下载\n- gitlab-runner start\n\n# uninstall\n- cd c:\\gitlab-runner\n- gitlab-runner stop\n- gitlab-runner uninstall\n- cd ..\n- rmdir /s gitlab-runner\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# jenkins docker\n\n * jenkins for mac\n\n# https://github.com/jenkinsci/docker/blob/master/readme.md\n\n# step1\ndocker pull jenkins/jenkins:latest\n\n# step2\ndocker run -d -p 8080:8080 -p 50000:50000 --name devops-jenkins -v /users/pc/srv/jenkins_home:/var/jenkins_home jenkins/jenkins:latest\n\n# 查看log\ndocker logs devops-jenkins\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n * jenkins for windows\n\n# https://github.com/jenkinsci/docker/blob/master/readme.md\n\n# step1\ndocker pull jenkins/jenkins:latest\n\n# step2\ndocker run -d -p 8080:8080 -p 50000:50000 --name devops-jenkins -v d:/docker/jenkins_home:/var/jenkins_home jenkins/jenkins:latest\n\n# 初始密码位置\nd:/docker/jenkins_home/secrets/initialadminpassword\n\n# local hosts add: 127.0.0.1  jenkins.chenio.com\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# jenkins docker-compose\n\n\n# jenkins for mac\n\n * docker-compose.yml\n\n# docker-compose.yml\nversion: '2'\nservices:\n  web:\n    image: 'jenkins/jenkins:latest'\n    restart: always\n    hostname: 'jenkins.chenio.com'\n    pid: \"host\"\n    ports:\n      - '8080:8080'\n      - '50000:50000'\n    volumes:\n      - '/users/pc/srv/jenkins_home:/var/jenkins_home'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * 运行：docker-compose up -d\n\n\n# jenkins for windows\n\n * docker-compose.yml\n\n# local hosts add: 127.0.0.1  jenkins.chenio.com\nversion: '3'\nservices:\n  web:\n    image: 'jenkins/jenkins:latest'\n    restart: always\n    hostname: 'jenkins.chenio.com'\n    pid: \"host\"\n    ports:\n      - '8080:8080'\n      - '50000:50000'\n    volumes:\n      - 'd:/docker/jenkins_home:/var/jenkins_home'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * 运行：docker-compose up -d\n\n\n# gitlab-ci\n\n * configuration of your jobs with .gitlab-ci.yml\n * 原文：gitlab-ci job 配置文件 .gitlab-ci.yml 配置方式(翻译)\n * gitlab-ci 使用 yaml 文件管理配置 job\n * job: yaml 文件定义了一系列带有约束说明的 job, job 至少需要要包含 script\n   * script 可以直接执行系统命令(如：./configure;make;make install)或者直接执行脚本(test.sh)\n   * 任务是由 ci 接管并且在服务器执行, 并且每一个任务的执行都是独立的\n * job 的名称具有唯一性在文件中只能出现一次; 下列词汇是保留字段，不能被使用命名为 job 名称\n * 关键字: 不可以被用于 job 名 的保留字\n\n关键字             是否必须   描述\nimage           no     用于 docker 镜像\nservices        no     用于 docker 服务\nstages          no     定义构建阶段\ntypes           no     stages 的别名(已废除)\nbefore_script   no     定义在每个 job 之前运行的命令\nafter_script    no     定义在每个 job 之后运行的命令\nvariables       no     定义构建变量\ncache           no     定义一组文件列表，可在后续运行中使用\n\n * only and except 保留字\n\n关键字         描述\nbranches    当一个分支被 push 上来\ntags        当一个打了 tag 的分支被 push 上来\napi         当一个 pipline 被 piplines api 所触发调起\nexternal    当使用了 gitlab 以外的 ci 服务\npipelines   针对多项目触发器而言，当使用 ci_job_token 并使用 gitlab 所提供的 api 创建多个\n            pipelines 的时候\npushes      当 pipeline 被用户的 git push 操作所触发的时候\nschedules   针对预定好的 pipline 而言（每日构建一类）\ntriggers    用 token 创建 piplines 的时候\nweb         在 gitlab 页面上 pipelines 标签页下，你按了 run pipline 的时候\n\n * job 可以配置的参数列表\n\n参数名称            是否必须   参数说明\nscript          yes    需要在 docker 容器中运行的脚本\nimage           no     所使用的 docker 镜像\nservices        no     需要关联的 docker 服务\nstage           no     定义当前 job 运行在那个阶段 (默认: test)\nvariables       no     定义 job 级别的变量\nonly            no     定义一列 git 分支，并为其创建 job\nexcept          no     定义一列 git 分支，不创建 job\ntags            no     通过 tags 确定使用指定还是使用通用部署程序\nallow_failure   no     允许 job 失败， job 失败不会影响最终结果\nwhen            no     定义 job 在什么时候运行， 支持参数 on_success, on_failure, always 或者\n                       manual\ndependencies    no     定义 job 依赖关系，这样他们就可以互相传递 artifacts\nartifacts       no     define list of job artifacts\ncache           no     定义应在后续运行之间缓存的文件列表\nbefore_script   no     覆盖 job 执行前需要执行的脚本设置\nafter_script    no     覆盖 job 执行后需要执行的脚本设置\nenvironment     no     定义此作业完成部署的环境名称\ncoverage        no     定义给定作业的代码覆盖率设置\nretry           no     job 执行发生故障时自动重试次数\n\n# job示例\n\nimage: ruby:2.1\nservices:\n  - postgres\n\nbefore_script:\n  - bundle install\n\nafter_script:\n  - rm secrets\n\nstages:\n  - build\n  - test\n  - deploy\n\njob1:\n  stage: build\n  script:\n    - execute-script-for-job1\n  only:\n    - master\n  tags:\n    - docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n * image and services: 这两个关键字允许使用一个自定义的 docker 镜像和一系列的服务，并且可以用于整个 job 周期\n * before_script:\n   * 必须是数组或多行字符串\n   * 支持定义为 global 和 job 类型， job 类型会覆盖掉 global 类型的值\n   * 定义在所有 job（包括 deploy job）之前运行的命令。（在 artifacts 运行之后）\n * after_script\n   * 必须是数组或多行字符串\n   * 支持定义为 global 和 job 类型， job 类型会覆盖掉 global 类型的值\n   * 定义在所有 job（包括失败的 job）之后运行的命令\n\n# script示例\n\nbefore_script:\n  - global before script\n\njob:\n  before_script:\n    - execute this instead of global before script\n  script:\n    - my command\n  after_script:\n    - execute this after my script\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * stages\n   * 只支持 global 类型\n   * 定义了 job 支持的执行阶段和顺序\n   * stages 中的元素顺序决定了对应 job 的执行顺序\n   * 下一个 阶段 的 job 只会在前一个 阶段 的 job 执行成功后开始执行\n\n# stages示例\nstages:\n  - build\n  - test\n  - deploy\n\n# 运行顺序：\n1. 运行所有的 build\n2. 如果所有作业都 build 运行成功，那么开始运行所有的 test\n3. 如果所有作业都 test 运行成功，那么开始运行所有的 deploy\n4. 如果所有作业都 deploy 成功，则标记 job 为 passed\n5. 如果在之前动作中有任何失败，则标记 job 为 failed 并终止 job 执行\n\n# 没有定义stages时的默认动作\n如果 .gitlab-ci.yml 文件中没有定义 stages , stages 将会被设置成 build -> test -> deploy.\n如果 job 没有定义 stage, 则 job 的 stage 将会被设置成 test\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * stage\n   * 相同 stage 的 job 会并行执行\n   * stage 的值必须定义在 stages 中，可以通过设置 stage 来对 job 进行分组，相同分组的 job 将会并行执行.\n\n# stage示例\nstages:\n  - build\n  - test\n  - deploy\n\njob 1:\n  stage: build\n  script: make build dependencies\n\njob 2:\n  stage: build\n  script: make build artifacts\n\njob 3:\n  stage: test\n  script: make test\n\njob 4:\n  stage: deploy\n  script: make deploy\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n * script\n   * script 是 job 运行需要的唯一一个必须字段, 通过 script 来指定应该如何执行 job\n   * script 可以设置为 string 和 array 类型\n\n# script 设置为 string 来设置 job 执行什么命令\njob:\n  script: \"bundle exec rspec\"\n\n# script 设置为 array 来指定运行多个命令\njob:\n  script:\n    - uname -a\n    - bundle exec rspec\n\n# 如果命令中包含有特殊字符, 则需要用双引号将 script 括起来\njob:\nscript:\n  - make\n  - \"ps -aux | grep gcc\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n * yaml 中的特殊字符: : 、 { 、 } 、 [ 、 ] 、, 、 & 、 * 、 # 、 ? 、 | 、 - 、 < 、 > 、 = 、 ! 、 % 、@ 、`` ` 。\n\n * only and except\n   \n   * 只有满足 only 条件的 branches 和 tags 才会被运行\n   * except 和 only 相反, 满足 except 条件的 branches 和 tags 将 不会 被运行\n\n * refs 策略的使用规则:\n   \n   * only 和 except 支持使用正则表达式.\n   * only 和 except 支持使用特殊的关键字.\n   * only 和 except 支持同时设置, 当同时设置时 only 和 except 将会同时起作用.\n   * only 和 except 也可以用来指定 forks 作业的存储库路径\n\n# job 会跳过所有分支, 只在以 issue- 开头的 ref 时运行\n\njob:\n  # use regexp\n  only:\n    - /^issue-.*$/\n  # use special keyword\n  except:\n    - branches\n\n# job 只会执行有 tags 或者通过api触发器构建的 refs\n\njob:\n  # use special keywords\n  only:\n    - tags\n    - triggers\n    - schedules\n\n# 只会在除 gitlab-org/gitlab-ce 的 master 分支外的其他分支时才会运行\n\njob:\n  only:\n    - branches@gitlab-org/gitlab-ce\n  except:\n    - master@gitlab-org/gitlab-ce\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n * artifacts:\n   * 用于指定成功后应附加到 job 的文件和目录的列表\n   * 只能使用项目工作间内的文件或目录路径\n   * 定义一个空的 dependencies 数组可以禁用 artifact 传递\n\n# artifacts示例\njob:\n  stage: build\n  script: make build\n  dependencies: []\n\n\n1\n2\n3\n4\n5\n\n * variables: gitlab ci 允许你为.gitlab-ci.yml 增加变量，该变量将会被设置入任务环境\n\n# 变量\n\nvariables:\n    database_url: \"postgres://postgres@postgres/my_database\"\n# 注意:整数和字符串一样，对于设置变量名和变量值来说都是合法的。但浮点数是非法的。\n\n\n1\n2\n3\n4\n5\n\n * tags：用来确定使用哪个 runner 运行当前任务，如果不设置的话将使用通用 runner 运行\n\n# 只有同时定义了 ruby 和 postgres 的 runner 才能运行这个 job\n\njob:\n  tags:\n    - ruby\n    - postgres\n\n\n1\n2\n3\n4\n5\n6\n\n * allow_failure: 允许 job 失败. job 失败不会影响最终结果\n\n#  当 job1 运行失败, 也不会打断 ci 执行，ci 会继续运行下一阶段\n\njob1:\n  stage: test\n  script:\n    - execute_script_that_will_fail\n  allow_failure: true\n\njob2:\n  stage: test\n  script:\n    - execute_script_that_will_succeed\n\njob3:\n  stage: deploy\n  script:\n    - deploy_to_staging\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * when 用来指示 job 应该在什么时候开始运行\n   * on_success - 只有之前的阶段全部成功时才会执行.(默认值)\n   * on_failure - 当之前的阶段执行过程中出现过任何错误时执行\n   * always - 无论之前的阶段是否执行成功都执行\n   * manual - 手动执行\n\nstages:\n  - build\n  - cleanup_build\n  - test\n  - deploy\n  - cleanup\n\nbuild_job:\n  stage: build\n  script:\n    - make build\n\ncleanup_build_job:\n  stage: cleanup_build\n  script:\n    - cleanup build when failed\n  when: on_failure\n\ntest_job:\n  stage: test\n  script:\n    - make test\n\ndeploy_job:\n  stage: deploy\n  script:\n    - make deploy\n  when: manual\n\ncleanup_job:\n  stage: cleanup\n  script:\n    - cleanup after jobs\n  when: always\n\n# 1 cleanup_build_job 只有在 build_job 失败时才会执行\n# 2 不论其他 job 是否执行成功, cleanup_job 总会在最后一个被执行\n# 3 可以通过 gitlab 控制台手动执行 deploy_job\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n * gitlab-ci 中的 artifacts 使用研究",charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1647517837e3},{title:"git常见命令列表",frontmatter:{title:"git常见命令列表",date:"2022-03-20T00:00:00.000Z",sidebar:"auto",tags:["git"],categories:["frontend"],readingShow:"top"},regularPath:"/services/tools/git.html",relativePath:"services/tools/git.md",key:"v-4bf2e7fd",path:"/services/tools/git.html",headers:[{level:2,title:"config",slug:"config",normalizedTitle:"config",charIndex:2},{level:2,title:"init",slug:"init",normalizedTitle:"init",charIndex:1132},{level:2,title:"clone",slug:"clone",normalizedTitle:"clone",charIndex:1259},{level:2,title:"add",slug:"add",normalizedTitle:"add",charIndex:1380},{level:2,title:".gitignore",slug:"gitignore",normalizedTitle:".gitignore",charIndex:1685},{level:2,title:".gitkeep",slug:"gitkeep",normalizedTitle:".gitkeep",charIndex:2280},{level:2,title:"commit",slug:"commit",normalizedTitle:"commit",charIndex:2330},{level:2,title:"status",slug:"status",normalizedTitle:"status",charIndex:2856},{level:2,title:"diff",slug:"diff",normalizedTitle:"diff",charIndex:2588},{level:2,title:"log",slug:"log",normalizedTitle:"log",charIndex:3514},{level:2,title:"blame",slug:"blame",normalizedTitle:"blame",charIndex:4218},{level:2,title:"alias",slug:"alias",normalizedTitle:"alias",charIndex:4300},{level:2,title:"tag",slug:"tag",normalizedTitle:"tag",charIndex:3227},{level:2,title:"文件恢复",slug:"文件恢复",normalizedTitle:"文件恢复",charIndex:5221},{level:2,title:"reflog",slug:"reflog",normalizedTitle:"reflog",charIndex:3988},{level:2,title:"revert",slug:"revert",normalizedTitle:"revert",charIndex:6310},{level:2,title:"show",slug:"show",normalizedTitle:"show",charIndex:4665},{level:2,title:"branch",slug:"branch",normalizedTitle:"branch",charIndex:1280},{level:2,title:"checkout",slug:"checkout",normalizedTitle:"checkout",charIndex:4698},{level:2,title:"merge",slug:"merge",normalizedTitle:"merge",charIndex:4071},{level:2,title:"stash",slug:"stash",normalizedTitle:"stash",charIndex:8242},{level:2,title:"remote",slug:"remote",normalizedTitle:"remote",charIndex:3088},{level:2,title:"pull 和 push",slug:"pull-和-push",normalizedTitle:"pull 和 push",charIndex:8710},{level:2,title:"archive",slug:"archive",normalizedTitle:"archive",charIndex:8973},{level:2,title:"rebase",slug:"rebase",normalizedTitle:"rebase",charIndex:8813},{level:2,title:"cat-file",slug:"cat-file",normalizedTitle:"cat-file",charIndex:9597},{level:2,title:"git worktree",slug:"git-worktree",normalizedTitle:"git worktree",charIndex:9716},{level:2,title:"快速clone",slug:"快速clone",normalizedTitle:"快速clone",charIndex:9765},{level:2,title:"如何使用分支",slug:"如何使用分支",normalizedTitle:"如何使用分支",charIndex:10208},{level:2,title:"分支管理策略",slug:"分支管理策略",normalizedTitle:"分支管理策略",charIndex:10578},{level:2,title:"Bug 分支",slug:"bug-分支",normalizedTitle:"bug 分支",charIndex:11087},{level:2,title:"合并分支上特定文件",slug:"合并分支上特定文件",normalizedTitle:"合并分支上特定文件",charIndex:11894},{level:2,title:"rebase 合并多个 commit",slug:"rebase-合并多个-commit",normalizedTitle:"rebase 合并多个 commit",charIndex:12274},{level:2,title:"rebase 修改 commit",slug:"rebase-修改-commit",normalizedTitle:"rebase 修改 commit",charIndex:13214},{level:2,title:"rebase 合并非连续 commit",slug:"rebase-合并非连续-commit",normalizedTitle:"rebase 合并非连续 commit",charIndex:13701},{level:2,title:"使用 cherry-pick 合并 dev 分支的 commit 到 master 中",slug:"使用-cherry-pick-合并-dev-分支的-commit-到-master-中",normalizedTitle:"使用 cherry-pick 合并 dev 分支的 commit 到 master 中",charIndex:14394},{level:2,title:"本地使用多个git存储库",slug:"本地使用多个git存储库",normalizedTitle:"本地使用多个git存储库",charIndex:15037},{level:2,title:"git快速获取特定tag分支",slug:"git快速获取特定tag分支",normalizedTitle:"git快速获取特定tag分支",charIndex:15624},{level:2,title:"git-commit语义化",slug:"git-commit语义化",normalizedTitle:"git-commit语义化",charIndex:15737},{level:2,title:"管理工具",slug:"管理工具",normalizedTitle:"管理工具",charIndex:16080},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:2069}],headersStr:"config init clone add .gitignore .gitkeep commit status diff log blame alias tag 文件恢复 reflog revert show branch checkout merge stash remote pull 和 push archive rebase cat-file git worktree 快速clone 如何使用分支 分支管理策略 Bug 分支 合并分支上特定文件 rebase 合并多个 commit rebase 修改 commit rebase 合并非连续 commit 使用 cherry-pick 合并 dev 分支的 commit 到 master 中 本地使用多个git存储库 git快速获取特定tag分支 git-commit语义化 管理工具 其他",content:'# config\n\n * 配置生效优先级：local > global > system\n\n# 配置\ngit config --global user.name "用户名"          # 配置用户名\ngit config --global user.email "用户邮箱"       # 配置邮箱\ngit config --global core.editor 编辑器          # 配置编辑器，模式使用vi或者vim\n\n# 查看配置\ngit config --global user.name       # 查看配置的用户名\ngit config --global user.email      # 查看配置的邮箱\n\n# 查看所有配置列表\ngit config --global --list      # 查看全局设置相关参数列表\ngit config --local --list       # 查看本地设置相关参数列表\ngit config --system --list      # 查看系统配置参数列表\ngit config --list               # 查看所有Git的配置(全局+本地+系统)\n\ngit config --global https.proxy http://127.0.0.1:1080\ngit config --global https.proxy https://127.0.0.1:1080\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * ssh-keygen\n\n# 存放密钥的文件夹\n~/.ssh\n\n# 创建一个 SSH key\nssh-keygen -t rsa -C "your_email@example.com"\n# -t 指定密钥类型，默认是 rsa ，可以省略\n# -C 设置注释文字，比如邮箱\n# -f 指定密钥文件存储文件名\n\n# ~/.ssh中，默认情况下生成的文件\nid_dsa  # 私钥文件\nid_dsa.pub # 公钥文件\n\n# 添加公钥到指定服务器\n~/.ssh/id_rsa.pub\n\n# 测试一下该SSH key\nssh -T git@github.com\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * Connecting to GitHub with SSH\n\n\n# init\n\ngit init rep_name     # 创建一个新的带Git仓库的项目\ngit init            # 为已存在的项目生成一个Git仓库\ngit init --bare     # 初始化裸仓库\n\n\n1\n2\n3\n\n\n\n# clone\n\ngit clone [-b branchName] [--depth=number] url [filedirname]\ngit clone -b [branch] origin_url # 克隆远程分支\n\n\n1\n2\n\n\n\n# add\n\n * 添加文件到暂存区\n\ngit add fileName  # 将工作区的某个文件添加到暂存区。\ngit add -u     # 添加所有被tracked文件中被修改或删除的文件信息到暂存区，不处理untracked的文件\ngit add -A     # 添加所有被tracked文件中被修改或删除的文件信息到暂存区，包括untracked的文件\ngit add .      # 将当前工作区的所有文件都加入暂存区\ngit add -i     # 进入交互界面模式，按需添加文件到缓存区 (不常用)\n\n# 示例\ngit add A\ngit add B\n# 配置不跟踪A和B\ngit add .gitignore\n\n# 配置跟踪A和B, 先清除标记状态，然后先添加.gitignore\ngit rm -r --cached .    # 清除版本控制标记，.代表所有文件，也可指定具体文件\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# .gitignore\n\n*      # 匹配零个或多个任意字符\n[abc]  # 只匹配括号内中的任意一个字符\n[0-9]  # - 代表范围，匹配0-9之间的任何字符\n?      # 匹配任意一个字符\n**     # 匹配任意的中间目录，例如a/*/z可以匹配:a/z,a/b/z,a/b/c/z等\n\n\n1\n2\n3\n4\n5\n\n\n# 忽略所有以 .c结尾的文件\n*.c\n\n# 但是 stream.c 会被git追踪\n!stream.c\n\n# 只忽略当前文件夹下的TODO文件, 不包括其他文件夹下的TODO例如: subdir/TODO\n/TODO\n\n# 忽略所有在build文件夹下的文件\nbuild/\n\n# 忽略 doc/notes.txt, 但不包括多层下.txt例如: doc/server/arch.txt\ndoc/*.txt\n\n# 忽略所有在doc目录下的.pdf文件\ndoc/**/*.pdf\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# .gitkeep\n\ngit 默认会忽略空的文件夹, 使用.gitkeep 来追踪空的文件夹\n\n\n# commit\n\ngit commit -m "提交说明"    # 将暂存区内容提交到本地仓库\ngit commit -a -m "提交说明" # 跳过缓存区操作，直接把工作区内容提交到本地仓库\n\n# 合并暂存区和最近的一次commit，生成新的commit并替换掉老的。如果缓存区没内容，\n# 利用amend可以修改上次commit的提交说明。\n#\n# 注：因为amend后生成的commit是一个全新的commit，旧的会被删除，所以别在公共的\n# commit上使用amend！切记！！！\n\n# 提交时显示所有diff信息\ngit commit -v\n\ngit commit --amend\ngit commit --amend --no-edit # 沿用上次commit的提交说明\n\n# 使用一次新的commit，替代上一次提交\ngit commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\ngit commit --amend [file1] [file2] ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# status\n\ngit status      # 查看工作区与暂存区的当前情况\ngit status -s   # 让结果以更简短的形式输出\n\n\n1\n2\n\n\n\n# diff\n\ngit diff                     # 比较工作区与暂存区的区别\ngit diff --cached           # 比较暂存区与HEAD的区别\ngit diff branch_name              # 工作区与某分支的差异，远程分支这样写：remotes/origin/分支名\ngit diff HEAD               # 工作区与HEAD指针指向的内容差异\ngit diff <commit-id> filename-path     # 工作区某文件当前版本与历史版本的差异\ngit diff --stage           # 工作区文件与上次提交的差异(1.6 版本前用 --cached)\ngit diff 版本TAG           # 查看从某个版本后都改动内容\ngit diff 分支A 分支B       # 比较从分支A和分支B的差异(也支持比较两个TAG)\ngit diff 分支A...分支B    # 比较两分支在分开后各自的改动\ngit diff <commit-id> <commit-id>\n\n# 注：如果只想统计哪些文件被改动，多少行被改动，可以添加--stat参数\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# log\n\n * Git-Basics-Viewing-the-Commit-History\n\ngit log                 # 查看所有commit记录(SHA-A校验和，作者名称，邮箱，提交时间，提交说明)\ngit log -p -次数                # 查看最近多少次的提交记录\ngit log --stat                  # 简略显示每次提交的内容更改\ngit log --oneline               # 让提交记录以精简的一行输出\ngit log –graph –all --online    # 图形展示分支的合并历史\ngit log --author=作者           # 查询作者的提交记录(和grep同时使用要加一个--all--match参数)\ngit log --grep=过滤信息         # 列出提交信息中包含过滤信息的提交记录\ngit log fileName              # 查看某文件的修改记录，找背锅专用\ngit reflog      #用来记录你的每一次命令,显示当前分支的最近几次提交\ngit log -p filename #查看文件的详细变更\ngit log --no-merges master..  #查看尚未合并的变更\ngit log -p --no-merges master.. #查看尚未合并的文件变更\n\n–pretty # 可以通过 –pretty 对提交信息进行定制\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# blame\n\n * 查看某个文件是谁改动的\n\ngit blame filename # 查看某文件的每一行内容的作者，最新commit和提交时间\n\n\n1\n\n\n\n# alias\n\n# status改为st\ngit config --global alias.st status\n\n# git l 代替 git log –oneline –graph\ngit config --global alias.l "log --oneline --graph"\n\n\n1\n2\n3\n4\n5\n\n\n\n# tag\n\ngit tag           \t\t\t\t # 查看标签列表\ngit tag <tagname>                    # 轻量级标签\ngit tag -a <tagname> -m "附加信息"   # 带注释的标签\n\ngit tag -a <tagname> 版本id      # 某次commit打TAG. 比如：git tag -a v1.1 bcfed96\n\ngit show tagName   \t\t\t\t # 查看具体标签\ngit checkout tagName\t\t\t     # 切换到标签\ngit fetch origin tag <tagname>  # 获取远程tag\n\ngit push [remote] [tag]    # 推送某标签到远程仓库\ngit push origin --tags\t    # 推送全部标签\n\ngit checkout -b <branch> <tagname>          # 新建分支的时候打上TAG\ngit show <tagname>                     # 查看标签对应的信息\ngit tag -d <tagname>                   # 删除本地TAG\n\ngit push origin --delete tag <tagname>  # 删除远程分支\ngit push origin :refs/tags/<tagname>  # 从远程删除命令tag\n\ngit checkout -b [branch] [tag]  # 新建一个分支，指向某个tag\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 文件恢复\n\n * 文件恢复（未commit）git checkout\n\n# 删除暂存区中的文件：\ngit rm 文件名\ngit commit -m "提交说明"\n\n# 删除工作区文件，并且将这次删除放入暂存区\ngit rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\ngit rm --cached [file]\n\ngit clean -f #把未跟踪的文件清理掉\n\n# 改名文件，并且将这个改名放入暂存区\ngit mv [file-original] [file-renamed]\n\n# 误删恢复文件（用暂存区的文件覆盖工作区的文件）\ngit checkout -- 文件名\n\n# Tip：git rm 等价于 git rm --cached 文件名 + rm 文件名\n# 务必注意：git checkout会抛弃当前工作区的更改!!!不可恢复！！！务必小心！！！\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * 文件恢复（已 add 未 commit）git reset HEAD\n\ngit reset HEAD -- filename # 暂存区恢复成HEAD\ngit checkout -- filename # 工作区恢复成暂存区\n\n\n1\n2\n\n * 版本回退（已 commit）git reset –hard\n\ngit reset HEAD^             # 恢复成上次提交的版本\ngit reset HEAD^^            # 恢复成上上次提交的版本，就是多个^，以此类推或用\ngit reset HEAD~3            # 也可以直接~次数\ngit reset --hard commitid      # git log查看到的Hash值，取前七位即可，根据版本号回退\n\n# reset提供了三个可选参数：\n# - soft：只是改变HEAD指针指向，缓存区和工作区不变\n# - mixed：修改HEAD指针指向，暂存区内容丢失，工作区不变\n# - hard：修改HEAD指针指向，暂存区内容丢失，工作区恢复以前状态\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * git reset\n\n# 在本地环境\ngit reset —soft 撤销commit\ngit reset —mixed 撤销commit和add动作\n\n\n# 已提交远程仓库\ngit reset  —hard 撤销不保留记录\ngit reset —revert 撤销，保留提交记录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# reflog\n\n * 查看输入过的指令记录\n\ngit reflog\n\n\n1\n\n\n\n# revert\n\n * 撤销某次提交: 撤销的只是文件变化，提交记录依旧存在\n\ngit revert HEAD          # 撤销最近的一个提交\ngit revert commitid     # 撤销某次commit\n\n\n1\n2\n\n\n\n# show\n\n * 查看某次提交的修改内容\n\ngit show commitid     # 查看某次commit的修改内容\ngit show --no-merges master..  #查看尚未合并的文件变更\ngit show some-branch:some-file.js  #查看其他分支中的文件\n\n\n1\n2\n3\n\n\n\n# branch\n\ngit branch [branch-name]   # 创建分支\ngit branch          # 查看本地分支\n\ngit branch -a   #查看分支\ngit branch -r   #查看远程分支\n\ngit branch -d 分支名    # 删除分支，分支上有未提交更改是不能删除的\ngit branch -D 分支名    # 强行删除分支，尽管这个分支上有未提交的更改\n\ngit log --branches="被删除的分支名"     # 找到被删分支最新的commit版本号\ngit branch 分支名 版本号(前七位即可)    # 恢复被删分支\ngit branch -m 老分支名 新分支名     # 分支重命名\n\ngit push origin --delete [branch-name]  #删除远程分支\n\ngit branch --track [branch] [remote-branch] #新建一个分支，与指定的远程分支建立追踪关系\ngit branch --set-upstream-to [branch] [remote-branch] #建立追踪关系，在现有分支和指定的远程分支之间\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# checkout\n\ngit checkout branch_name         # 切换分支\ngit checkout -b branch_name      # 创建分支同时切换到这个分支\ngit checkout -              # 切换到上一分支\n\ngit checkout -b local_branch remote_branch # 拉去远程分支到本地\ngit checkout -b dev origin/dev\n\ngit checkout remote_branch_name  # 拉取远程分支到本地并自动新建分支切换到origin_branch_name\n\ngit checkout -b [branch] [tag]  #新建一个分支，指向某个tag\n\n# 分离头指针，即HEAD不会指向任何branch，此时切换分支git不会自动保存所做的任何修改和提交的commit。\n# 如果需要保存修改需要保存到一个分支中，git branch newbranch commitid\ngit checkout commitid\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# merge\n\ngit merge [branch]      # 合并指定分支到当前分支\ngit cherry-pick [commit]    #选择一个commit，合并进当前分支\ngit merge -ff           # 快速合并，默认参数\ngit merge -ff-only      # 只有快速合并的情况才合并\ngit merge --no-ff       # 不使用快速合并\ngit merge -n 分支名     # 合并分支，不会在合并后显示合并前后的不同状态\ngit merge -stat 分支名  # 合并分支，合并结束后显示合并前后的不同状态\ngit merge -e 分支名     # 合并分支，合并前调用编辑器，可自行编写commit\n\ngit checkout master # 切换到master\ngit merge [branch_name] --no-ff #合并指定分支到当前分支master\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# stash\n\n * 切换分支时暂存未 commit 的更改\n\ngit stash   # 保存当前的改动\ngit stash apply     # 恢复保存改动, 不删除stash@{1}\ngit stash list      # 查看stash列表\ngit stash apply stash@{1}\ngit stash pop # 恢复并删除stash@{1}\n\n\n1\n2\n3\n4\n5\n\n\n\n# remote\n\ngit remote update   # 更新远程仓储\ngit remote -v   # 显示所有远程仓库\ngit remote show [remote]    # 显示某个远程仓库信息\ngit remote add [shortname] [url]    # 增加一个新的远程仓库，并命名\n# 修改remote的地址可以进入 .git 编辑 config 文件中的url\n\n# 删除不存在对应远程分支的本地分支\ngit remote prune origin\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# pull 和 push\n\ngit pull [remote] [branch]  # 取回远程仓库的变化，并与本地分支合并\n\ngit fetch remote branch\ngit merge | git rebase\n\ngit push [remote] [branch]    # 上传本地分支到远程仓库\ngit push [remote] --force   # 强行推送当前分支到远程仓库\ngit push [remote] --all    # 推送所有分支到远程仓库\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# archive\n\ngit archive     # 生成一个可供发布的压缩包\n\n\n1\n\n\n\n# rebase\n\n * 注意：不可用于多人线上操作，适用于自己开发的分支使用\n\n# 合并多个commit为一个完整commit\n\ngit rebase -i  [startpoint]  [endpoint]\ngit rebase -i 36224db\ngit rebase -i HEAD~3\n\ngit rebase --continue | --skip | --abort | --quit | --edit-todo | --show-current-patch\n\n# pick：保留该commit（缩写:p）\n# reword：保留该commit，但我需要修改该commit的注释（缩写:r）\n# edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）\n# squash：将该commit和前一个commit合并（缩写:s）\n# fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）\n# exec：执行shell命令（缩写:x）\n# drop：我要丢弃该commit（缩写:d）\n\n# git rebase 内的commit可以手动添加commit和调整commit顺序\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# cat-file\n\n * 显示版本库对象的内容、类型及大小信息\n\ngit cat-file -t commitid # 显示对象的类型\ngit cat-file -p commitid # 根据对象的类型显示其内容\n\n\n1\n2\n\n\n\n# git worktree\n\n * Git基本原理介绍(35)——git worktree\n\n\n# 快速clone\n\n * git clone --depth=1 origin_branch_url\n * git使用depth=1后的一些问题：git-shallow-clone-clone-depth-misses-remote-branches\n\n# 拉取全部\n$ git remote set-branches origin \'*\'\n$ git fetch -v\n$ git checkout your-branch-name\n\n----\n\n# 拉取指定分支\n$ git clone --depth=1 origin_branch_url\n$ git remote set-branches origin \'remote_branch_name\'\n$ git fetch --depth=1 origin remote_branch_name\n$ git checkout remote_branch_name\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 如何使用分支\n\ngit checkout -b [branch]       # 新建一个分支，并切换到该分支\ngit branch           # 命令会列出所有分支，当前分支前面会标一个*号。\ngit add .\ngit commit -m "提交分支branch"\ngit checkout master        # 切换回master分支\ngit merge [branch]         # 把branch分支合并到master分支\ngit branch -d branch       # 合并完成后删除branch分支\n\ngit branch -r   # 查看远程分支\ngit checkout -b a origin/a  # 拉去远程分支到本地\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 分支管理策略\n\ngit checkout -b dev                                 # 首先，仍然创建并切换dev分支：\ngit add readme.txt                                  # 修改readme.txt文件，并提交一个新的commit\ngit checkout master                                 # 现在，我们切换回master分支\ngit merge --no-ff -m "merge with no-ff" dev         # 准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward\ngit log --graph --pretty=oneline --abbrev-commit    # 合并后，我们用git log看看分支历史：\n\n# 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，\n# 能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# Bug 分支\n\n------------                        # 我们在dev分支上，发现master分支上有代号101号bug\ngit stash                           # 冷冻现在在dev分支上的工作状态 冻结吧！\ngit checkout master            # 这个bug发生在master主分支上,我们切回master分支\ngit checkout -b issue-101       # 创建代号101的修复bug分支\n\n# 修改你的bug\ngit add readme.txt              # 提交到暂存区\ngit commit -m "fix bug 101"     # 注意填写信息，以免日后查证\ngit checkout master             # 切换回master分支\ngit merge --no-ff -m "merged bug fix 101" issue-101     # 合并分支，注意不使用fast forward模式\ngit branch -d issue-101         # 删除issue-101分支\ngit checkout dev                 # bug 改完了，是时候回到dev继续写bug了\ngit stash list                   # 查看刚刚的冻结现场\ngit stash pop                    # git stash pop，恢复的同时把stash内容也删了：\n# 一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 合并分支上特定文件\n\ngit checkout source_branch <path>...\n\n# 将a分支中的test文件合并到主分支b\n------------------------\n# 使用git checkout 将根据b分支创建一个b_tmp分支，避免影响b分支\ngit checkout -b b_tmp  # 新建b_tmp分支并切换\ngit checkout a test # 将a分支中的test文件覆盖到b_tmp中\ngit commit -am "merge branch a"\ngit checkout b  # 切换到b分支\ngit merge --no-ff b_tmp  # 合并b_tmp到b分支\ngit branch -d b_tmp # 删除b_tmp分支\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# rebase 合并多个 commit\n\ngit log --oneline\n-----------\n972c774 (HEAD -> master) mod readme.md content\n64b9edd add index.js\n7d7d42b add index.css\n7a5e790 add index.html\nba3849c add readme.md\n-----------\n\nstep1: git rebase -i ba3849c\n# 进入编辑界面如下，修改 pick  -> s\n-----------\npick 7a5e790 add index.html\ns 7d7d42b add index.css\ns b9edd add index.js\npick 972c774 mod readme.md content\n-----------\n\nstep1保存退出后，自动跳转到这里修改\n-----------\n# This is a combination of 3 commits.\n# 自己加的commit\nadd index static objects\n\n# This is the 1st commit message:\n\nadd index.html\n\n# This is the commit message #2:\n\nadd index.css\n\n# This is the commit message #3:\n\nadd index.js\n-----------\n\nstep2: git log --oneline # 查看日志\n-----------\n1e59df0 (HEAD -> master) mod readme.md content\nba3958e add index static objects\nba3849c add readme.md\n-----------\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n# rebase 修改 commit\n\n-----------\n1c08687 (HEAD -> master) mod readme.md content\n30fa507 add index\n0aa75f0 add readme.md\n-----------\n\ngit rebase -i 0aa75f0\n-----------\npick 30fa507 add index\nr 1c08687 mod readme.md content\n-----------\n\n-----------\n# mod readme.md content\n修改 readme.md 内容\n-----------\n\ngit log --oneline\n-----------\n26d1338 (HEAD -> master) 修改 readme.md 内容\n30fa507 add index\n0aa75f0 add readme.md\n-----------\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# rebase 合并非连续 commit\n\ngit log --oneline\n-----------\n26d1338 (HEAD -> master) 修改 readme.md 内容\n30fa507 add index\n0aa75f0 add readme.md\n-----------\n\ngit rebase -i 0aa75f0\n-----------\npick 0aa75f0 add readme.md\n# pick 30fa507 add index\ns 26d1338 修改 readme.md 内容\npick 30fa507 add index\n-----------\n\ngit rebase --continue\n-----------\n# This is a combination of 2 commits.\n合并非连续的commit\n# This is the 1st commit message:\n\nadd readme.md\n\n# This is the commit message #2:\n\n修改 readme.md 内容\n-----------\n\ngit log --oneline # 查看日志\n-----------\nde9b2eb (HEAD -> master) add index\nc5a0c7a 合并非连续的commit\n-----------\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 使用 cherry-pick 合并 dev 分支的 commit 到 master 中\n\ngit log --oneline --all\n-----------\nc4570cf (dev) mod index.html content\n479e26c (HEAD -> master) mod readme.md content\n599b625 add index.js\n432febf add index.css\n8702882 add index.html\ncf5c910 add readme.md\n-----------\n\nstep1: git checkout master\nstep2: git cherry-pick c4570cf\n\ngit log --oneline --all\n-----------\n88ae02b (HEAD -> master) mod index.html content\nc4570cf (dev) mod index.html content\n479e26c mod readme.md content\n599b625 add index.js\n432febf add index.css\n8702882 add index.html\ncf5c910 add readme.md\n-----------\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 本地使用多个git存储库\n\nForked from：https://docs.github.com/en/developers/overview/managing-deploy-keys#using-multiple-repositories-on-one-server\n\n * 配置：~/.ssh/config\n\nHost github.com-repo-0\n        Hostname github.com\n        IdentityFile=/home/user/.ssh/repo-0_deploy_key\n\nHost github.com-repo-1\n        Hostname github.com\n        IdentityFile=/home/user/.ssh/repo-1_deploy_key\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * Host github.com-repo-0 - 存储库的别名\n * Hostname github.com - 配置与别名一起使用的主机名\n * IdentityFile=/home/user/.ssh/repo-0_deploy_key - 为别名分配私钥\n * 使用\n\ngit clone git@github.com-repo-1:OWNER/repo-1.git\n\n\n1\n\n\n\n# git快速获取特定tag分支\n\ngit -c protocol.version=2 fetch origin v15.0.1 --depth=1\ngit fetch origin tag v15.0.1\n\n\n1\n2\n\n\n\n# git-commit语义化\n\nbuild\t主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交\nci\t主要目的是修改项目继续集成流程(例如 Travis，Jenkins，GitLab CI，Circle等)的提交\ndocs\t文档更新\nfeat\t新增功能\nfix\tbug 修复\nperf\t性能, 体验优化\nrefactor\t重构代码(既没有新增功能，也没有修复 bug)\nstyle\t不影响程序逻辑的代码修改(修改空白字符，格式缩进，补全缺失的分号等，没有改变代码逻辑)\ntest\t新增测试用例或是更新现有测试\nrevert\t回滚某个更早之前的提交\nchore\t不属于以上类型的其他类型\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 管理工具\n\n * fossil: https://www.fossil-scm.org\n * github: https://github.com/\n * gitee: https://gitee.com/\n * gitlab: https://gitlab.com/explore\n * gitea: https://github.com/go-gitea/gitea\n * gogs: https://gogs.io/\n\n\n# 其他\n\n * git web版: isomorphic-git/isomorphic-git\n * git 官网: https://git-scm.com/',normalizedContent:'# config\n\n * 配置生效优先级：local > global > system\n\n# 配置\ngit config --global user.name "用户名"          # 配置用户名\ngit config --global user.email "用户邮箱"       # 配置邮箱\ngit config --global core.editor 编辑器          # 配置编辑器，模式使用vi或者vim\n\n# 查看配置\ngit config --global user.name       # 查看配置的用户名\ngit config --global user.email      # 查看配置的邮箱\n\n# 查看所有配置列表\ngit config --global --list      # 查看全局设置相关参数列表\ngit config --local --list       # 查看本地设置相关参数列表\ngit config --system --list      # 查看系统配置参数列表\ngit config --list               # 查看所有git的配置(全局+本地+系统)\n\ngit config --global https.proxy http://127.0.0.1:1080\ngit config --global https.proxy https://127.0.0.1:1080\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * ssh-keygen\n\n# 存放密钥的文件夹\n~/.ssh\n\n# 创建一个 ssh key\nssh-keygen -t rsa -c "your_email@example.com"\n# -t 指定密钥类型，默认是 rsa ，可以省略\n# -c 设置注释文字，比如邮箱\n# -f 指定密钥文件存储文件名\n\n# ~/.ssh中，默认情况下生成的文件\nid_dsa  # 私钥文件\nid_dsa.pub # 公钥文件\n\n# 添加公钥到指定服务器\n~/.ssh/id_rsa.pub\n\n# 测试一下该ssh key\nssh -t git@github.com\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n * connecting to github with ssh\n\n\n# init\n\ngit init rep_name     # 创建一个新的带git仓库的项目\ngit init            # 为已存在的项目生成一个git仓库\ngit init --bare     # 初始化裸仓库\n\n\n1\n2\n3\n\n\n\n# clone\n\ngit clone [-b branchname] [--depth=number] url [filedirname]\ngit clone -b [branch] origin_url # 克隆远程分支\n\n\n1\n2\n\n\n\n# add\n\n * 添加文件到暂存区\n\ngit add filename  # 将工作区的某个文件添加到暂存区。\ngit add -u     # 添加所有被tracked文件中被修改或删除的文件信息到暂存区，不处理untracked的文件\ngit add -a     # 添加所有被tracked文件中被修改或删除的文件信息到暂存区，包括untracked的文件\ngit add .      # 将当前工作区的所有文件都加入暂存区\ngit add -i     # 进入交互界面模式，按需添加文件到缓存区 (不常用)\n\n# 示例\ngit add a\ngit add b\n# 配置不跟踪a和b\ngit add .gitignore\n\n# 配置跟踪a和b, 先清除标记状态，然后先添加.gitignore\ngit rm -r --cached .    # 清除版本控制标记，.代表所有文件，也可指定具体文件\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# .gitignore\n\n*      # 匹配零个或多个任意字符\n[abc]  # 只匹配括号内中的任意一个字符\n[0-9]  # - 代表范围，匹配0-9之间的任何字符\n?      # 匹配任意一个字符\n**     # 匹配任意的中间目录，例如a/*/z可以匹配:a/z,a/b/z,a/b/c/z等\n\n\n1\n2\n3\n4\n5\n\n\n# 忽略所有以 .c结尾的文件\n*.c\n\n# 但是 stream.c 会被git追踪\n!stream.c\n\n# 只忽略当前文件夹下的todo文件, 不包括其他文件夹下的todo例如: subdir/todo\n/todo\n\n# 忽略所有在build文件夹下的文件\nbuild/\n\n# 忽略 doc/notes.txt, 但不包括多层下.txt例如: doc/server/arch.txt\ndoc/*.txt\n\n# 忽略所有在doc目录下的.pdf文件\ndoc/**/*.pdf\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# .gitkeep\n\ngit 默认会忽略空的文件夹, 使用.gitkeep 来追踪空的文件夹\n\n\n# commit\n\ngit commit -m "提交说明"    # 将暂存区内容提交到本地仓库\ngit commit -a -m "提交说明" # 跳过缓存区操作，直接把工作区内容提交到本地仓库\n\n# 合并暂存区和最近的一次commit，生成新的commit并替换掉老的。如果缓存区没内容，\n# 利用amend可以修改上次commit的提交说明。\n#\n# 注：因为amend后生成的commit是一个全新的commit，旧的会被删除，所以别在公共的\n# commit上使用amend！切记！！！\n\n# 提交时显示所有diff信息\ngit commit -v\n\ngit commit --amend\ngit commit --amend --no-edit # 沿用上次commit的提交说明\n\n# 使用一次新的commit，替代上一次提交\ngit commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\ngit commit --amend [file1] [file2] ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# status\n\ngit status      # 查看工作区与暂存区的当前情况\ngit status -s   # 让结果以更简短的形式输出\n\n\n1\n2\n\n\n\n# diff\n\ngit diff                     # 比较工作区与暂存区的区别\ngit diff --cached           # 比较暂存区与head的区别\ngit diff branch_name              # 工作区与某分支的差异，远程分支这样写：remotes/origin/分支名\ngit diff head               # 工作区与head指针指向的内容差异\ngit diff <commit-id> filename-path     # 工作区某文件当前版本与历史版本的差异\ngit diff --stage           # 工作区文件与上次提交的差异(1.6 版本前用 --cached)\ngit diff 版本tag           # 查看从某个版本后都改动内容\ngit diff 分支a 分支b       # 比较从分支a和分支b的差异(也支持比较两个tag)\ngit diff 分支a...分支b    # 比较两分支在分开后各自的改动\ngit diff <commit-id> <commit-id>\n\n# 注：如果只想统计哪些文件被改动，多少行被改动，可以添加--stat参数\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# log\n\n * git-basics-viewing-the-commit-history\n\ngit log                 # 查看所有commit记录(sha-a校验和，作者名称，邮箱，提交时间，提交说明)\ngit log -p -次数                # 查看最近多少次的提交记录\ngit log --stat                  # 简略显示每次提交的内容更改\ngit log --oneline               # 让提交记录以精简的一行输出\ngit log –graph –all --online    # 图形展示分支的合并历史\ngit log --author=作者           # 查询作者的提交记录(和grep同时使用要加一个--all--match参数)\ngit log --grep=过滤信息         # 列出提交信息中包含过滤信息的提交记录\ngit log filename              # 查看某文件的修改记录，找背锅专用\ngit reflog      #用来记录你的每一次命令,显示当前分支的最近几次提交\ngit log -p filename #查看文件的详细变更\ngit log --no-merges master..  #查看尚未合并的变更\ngit log -p --no-merges master.. #查看尚未合并的文件变更\n\n–pretty # 可以通过 –pretty 对提交信息进行定制\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# blame\n\n * 查看某个文件是谁改动的\n\ngit blame filename # 查看某文件的每一行内容的作者，最新commit和提交时间\n\n\n1\n\n\n\n# alias\n\n# status改为st\ngit config --global alias.st status\n\n# git l 代替 git log –oneline –graph\ngit config --global alias.l "log --oneline --graph"\n\n\n1\n2\n3\n4\n5\n\n\n\n# tag\n\ngit tag           \t\t\t\t # 查看标签列表\ngit tag <tagname>                    # 轻量级标签\ngit tag -a <tagname> -m "附加信息"   # 带注释的标签\n\ngit tag -a <tagname> 版本id      # 某次commit打tag. 比如：git tag -a v1.1 bcfed96\n\ngit show tagname   \t\t\t\t # 查看具体标签\ngit checkout tagname\t\t\t     # 切换到标签\ngit fetch origin tag <tagname>  # 获取远程tag\n\ngit push [remote] [tag]    # 推送某标签到远程仓库\ngit push origin --tags\t    # 推送全部标签\n\ngit checkout -b <branch> <tagname>          # 新建分支的时候打上tag\ngit show <tagname>                     # 查看标签对应的信息\ngit tag -d <tagname>                   # 删除本地tag\n\ngit push origin --delete tag <tagname>  # 删除远程分支\ngit push origin :refs/tags/<tagname>  # 从远程删除命令tag\n\ngit checkout -b [branch] [tag]  # 新建一个分支，指向某个tag\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 文件恢复\n\n * 文件恢复（未commit）git checkout\n\n# 删除暂存区中的文件：\ngit rm 文件名\ngit commit -m "提交说明"\n\n# 删除工作区文件，并且将这次删除放入暂存区\ngit rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\ngit rm --cached [file]\n\ngit clean -f #把未跟踪的文件清理掉\n\n# 改名文件，并且将这个改名放入暂存区\ngit mv [file-original] [file-renamed]\n\n# 误删恢复文件（用暂存区的文件覆盖工作区的文件）\ngit checkout -- 文件名\n\n# tip：git rm 等价于 git rm --cached 文件名 + rm 文件名\n# 务必注意：git checkout会抛弃当前工作区的更改!!!不可恢复！！！务必小心！！！\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n * 文件恢复（已 add 未 commit）git reset head\n\ngit reset head -- filename # 暂存区恢复成head\ngit checkout -- filename # 工作区恢复成暂存区\n\n\n1\n2\n\n * 版本回退（已 commit）git reset –hard\n\ngit reset head^             # 恢复成上次提交的版本\ngit reset head^^            # 恢复成上上次提交的版本，就是多个^，以此类推或用\ngit reset head~3            # 也可以直接~次数\ngit reset --hard commitid      # git log查看到的hash值，取前七位即可，根据版本号回退\n\n# reset提供了三个可选参数：\n# - soft：只是改变head指针指向，缓存区和工作区不变\n# - mixed：修改head指针指向，暂存区内容丢失，工作区不变\n# - hard：修改head指针指向，暂存区内容丢失，工作区恢复以前状态\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * git reset\n\n# 在本地环境\ngit reset —soft 撤销commit\ngit reset —mixed 撤销commit和add动作\n\n\n# 已提交远程仓库\ngit reset  —hard 撤销不保留记录\ngit reset —revert 撤销，保留提交记录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# reflog\n\n * 查看输入过的指令记录\n\ngit reflog\n\n\n1\n\n\n\n# revert\n\n * 撤销某次提交: 撤销的只是文件变化，提交记录依旧存在\n\ngit revert head          # 撤销最近的一个提交\ngit revert commitid     # 撤销某次commit\n\n\n1\n2\n\n\n\n# show\n\n * 查看某次提交的修改内容\n\ngit show commitid     # 查看某次commit的修改内容\ngit show --no-merges master..  #查看尚未合并的文件变更\ngit show some-branch:some-file.js  #查看其他分支中的文件\n\n\n1\n2\n3\n\n\n\n# branch\n\ngit branch [branch-name]   # 创建分支\ngit branch          # 查看本地分支\n\ngit branch -a   #查看分支\ngit branch -r   #查看远程分支\n\ngit branch -d 分支名    # 删除分支，分支上有未提交更改是不能删除的\ngit branch -d 分支名    # 强行删除分支，尽管这个分支上有未提交的更改\n\ngit log --branches="被删除的分支名"     # 找到被删分支最新的commit版本号\ngit branch 分支名 版本号(前七位即可)    # 恢复被删分支\ngit branch -m 老分支名 新分支名     # 分支重命名\n\ngit push origin --delete [branch-name]  #删除远程分支\n\ngit branch --track [branch] [remote-branch] #新建一个分支，与指定的远程分支建立追踪关系\ngit branch --set-upstream-to [branch] [remote-branch] #建立追踪关系，在现有分支和指定的远程分支之间\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# checkout\n\ngit checkout branch_name         # 切换分支\ngit checkout -b branch_name      # 创建分支同时切换到这个分支\ngit checkout -              # 切换到上一分支\n\ngit checkout -b local_branch remote_branch # 拉去远程分支到本地\ngit checkout -b dev origin/dev\n\ngit checkout remote_branch_name  # 拉取远程分支到本地并自动新建分支切换到origin_branch_name\n\ngit checkout -b [branch] [tag]  #新建一个分支，指向某个tag\n\n# 分离头指针，即head不会指向任何branch，此时切换分支git不会自动保存所做的任何修改和提交的commit。\n# 如果需要保存修改需要保存到一个分支中，git branch newbranch commitid\ngit checkout commitid\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# merge\n\ngit merge [branch]      # 合并指定分支到当前分支\ngit cherry-pick [commit]    #选择一个commit，合并进当前分支\ngit merge -ff           # 快速合并，默认参数\ngit merge -ff-only      # 只有快速合并的情况才合并\ngit merge --no-ff       # 不使用快速合并\ngit merge -n 分支名     # 合并分支，不会在合并后显示合并前后的不同状态\ngit merge -stat 分支名  # 合并分支，合并结束后显示合并前后的不同状态\ngit merge -e 分支名     # 合并分支，合并前调用编辑器，可自行编写commit\n\ngit checkout master # 切换到master\ngit merge [branch_name] --no-ff #合并指定分支到当前分支master\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# stash\n\n * 切换分支时暂存未 commit 的更改\n\ngit stash   # 保存当前的改动\ngit stash apply     # 恢复保存改动, 不删除stash@{1}\ngit stash list      # 查看stash列表\ngit stash apply stash@{1}\ngit stash pop # 恢复并删除stash@{1}\n\n\n1\n2\n3\n4\n5\n\n\n\n# remote\n\ngit remote update   # 更新远程仓储\ngit remote -v   # 显示所有远程仓库\ngit remote show [remote]    # 显示某个远程仓库信息\ngit remote add [shortname] [url]    # 增加一个新的远程仓库，并命名\n# 修改remote的地址可以进入 .git 编辑 config 文件中的url\n\n# 删除不存在对应远程分支的本地分支\ngit remote prune origin\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# pull 和 push\n\ngit pull [remote] [branch]  # 取回远程仓库的变化，并与本地分支合并\n\ngit fetch remote branch\ngit merge | git rebase\n\ngit push [remote] [branch]    # 上传本地分支到远程仓库\ngit push [remote] --force   # 强行推送当前分支到远程仓库\ngit push [remote] --all    # 推送所有分支到远程仓库\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# archive\n\ngit archive     # 生成一个可供发布的压缩包\n\n\n1\n\n\n\n# rebase\n\n * 注意：不可用于多人线上操作，适用于自己开发的分支使用\n\n# 合并多个commit为一个完整commit\n\ngit rebase -i  [startpoint]  [endpoint]\ngit rebase -i 36224db\ngit rebase -i head~3\n\ngit rebase --continue | --skip | --abort | --quit | --edit-todo | --show-current-patch\n\n# pick：保留该commit（缩写:p）\n# reword：保留该commit，但我需要修改该commit的注释（缩写:r）\n# edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）\n# squash：将该commit和前一个commit合并（缩写:s）\n# fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）\n# exec：执行shell命令（缩写:x）\n# drop：我要丢弃该commit（缩写:d）\n\n# git rebase 内的commit可以手动添加commit和调整commit顺序\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# cat-file\n\n * 显示版本库对象的内容、类型及大小信息\n\ngit cat-file -t commitid # 显示对象的类型\ngit cat-file -p commitid # 根据对象的类型显示其内容\n\n\n1\n2\n\n\n\n# git worktree\n\n * git基本原理介绍(35)——git worktree\n\n\n# 快速clone\n\n * git clone --depth=1 origin_branch_url\n * git使用depth=1后的一些问题：git-shallow-clone-clone-depth-misses-remote-branches\n\n# 拉取全部\n$ git remote set-branches origin \'*\'\n$ git fetch -v\n$ git checkout your-branch-name\n\n----\n\n# 拉取指定分支\n$ git clone --depth=1 origin_branch_url\n$ git remote set-branches origin \'remote_branch_name\'\n$ git fetch --depth=1 origin remote_branch_name\n$ git checkout remote_branch_name\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 如何使用分支\n\ngit checkout -b [branch]       # 新建一个分支，并切换到该分支\ngit branch           # 命令会列出所有分支，当前分支前面会标一个*号。\ngit add .\ngit commit -m "提交分支branch"\ngit checkout master        # 切换回master分支\ngit merge [branch]         # 把branch分支合并到master分支\ngit branch -d branch       # 合并完成后删除branch分支\n\ngit branch -r   # 查看远程分支\ngit checkout -b a origin/a  # 拉去远程分支到本地\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 分支管理策略\n\ngit checkout -b dev                                 # 首先，仍然创建并切换dev分支：\ngit add readme.txt                                  # 修改readme.txt文件，并提交一个新的commit\ngit checkout master                                 # 现在，我们切换回master分支\ngit merge --no-ff -m "merge with no-ff" dev         # 准备合并dev分支，请注意--no-ff参数，表示禁用fast forward\ngit log --graph --pretty=oneline --abbrev-commit    # 合并后，我们用git log看看分支历史：\n\n# 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，\n# 能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# bug 分支\n\n------------                        # 我们在dev分支上，发现master分支上有代号101号bug\ngit stash                           # 冷冻现在在dev分支上的工作状态 冻结吧！\ngit checkout master            # 这个bug发生在master主分支上,我们切回master分支\ngit checkout -b issue-101       # 创建代号101的修复bug分支\n\n# 修改你的bug\ngit add readme.txt              # 提交到暂存区\ngit commit -m "fix bug 101"     # 注意填写信息，以免日后查证\ngit checkout master             # 切换回master分支\ngit merge --no-ff -m "merged bug fix 101" issue-101     # 合并分支，注意不使用fast forward模式\ngit branch -d issue-101         # 删除issue-101分支\ngit checkout dev                 # bug 改完了，是时候回到dev继续写bug了\ngit stash list                   # 查看刚刚的冻结现场\ngit stash pop                    # git stash pop，恢复的同时把stash内容也删了：\n# 一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 合并分支上特定文件\n\ngit checkout source_branch <path>...\n\n# 将a分支中的test文件合并到主分支b\n------------------------\n# 使用git checkout 将根据b分支创建一个b_tmp分支，避免影响b分支\ngit checkout -b b_tmp  # 新建b_tmp分支并切换\ngit checkout a test # 将a分支中的test文件覆盖到b_tmp中\ngit commit -am "merge branch a"\ngit checkout b  # 切换到b分支\ngit merge --no-ff b_tmp  # 合并b_tmp到b分支\ngit branch -d b_tmp # 删除b_tmp分支\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# rebase 合并多个 commit\n\ngit log --oneline\n-----------\n972c774 (head -> master) mod readme.md content\n64b9edd add index.js\n7d7d42b add index.css\n7a5e790 add index.html\nba3849c add readme.md\n-----------\n\nstep1: git rebase -i ba3849c\n# 进入编辑界面如下，修改 pick  -> s\n-----------\npick 7a5e790 add index.html\ns 7d7d42b add index.css\ns b9edd add index.js\npick 972c774 mod readme.md content\n-----------\n\nstep1保存退出后，自动跳转到这里修改\n-----------\n# this is a combination of 3 commits.\n# 自己加的commit\nadd index static objects\n\n# this is the 1st commit message:\n\nadd index.html\n\n# this is the commit message #2:\n\nadd index.css\n\n# this is the commit message #3:\n\nadd index.js\n-----------\n\nstep2: git log --oneline # 查看日志\n-----------\n1e59df0 (head -> master) mod readme.md content\nba3958e add index static objects\nba3849c add readme.md\n-----------\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n\n\n\n# rebase 修改 commit\n\n-----------\n1c08687 (head -> master) mod readme.md content\n30fa507 add index\n0aa75f0 add readme.md\n-----------\n\ngit rebase -i 0aa75f0\n-----------\npick 30fa507 add index\nr 1c08687 mod readme.md content\n-----------\n\n-----------\n# mod readme.md content\n修改 readme.md 内容\n-----------\n\ngit log --oneline\n-----------\n26d1338 (head -> master) 修改 readme.md 内容\n30fa507 add index\n0aa75f0 add readme.md\n-----------\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# rebase 合并非连续 commit\n\ngit log --oneline\n-----------\n26d1338 (head -> master) 修改 readme.md 内容\n30fa507 add index\n0aa75f0 add readme.md\n-----------\n\ngit rebase -i 0aa75f0\n-----------\npick 0aa75f0 add readme.md\n# pick 30fa507 add index\ns 26d1338 修改 readme.md 内容\npick 30fa507 add index\n-----------\n\ngit rebase --continue\n-----------\n# this is a combination of 2 commits.\n合并非连续的commit\n# this is the 1st commit message:\n\nadd readme.md\n\n# this is the commit message #2:\n\n修改 readme.md 内容\n-----------\n\ngit log --oneline # 查看日志\n-----------\nde9b2eb (head -> master) add index\nc5a0c7a 合并非连续的commit\n-----------\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 使用 cherry-pick 合并 dev 分支的 commit 到 master 中\n\ngit log --oneline --all\n-----------\nc4570cf (dev) mod index.html content\n479e26c (head -> master) mod readme.md content\n599b625 add index.js\n432febf add index.css\n8702882 add index.html\ncf5c910 add readme.md\n-----------\n\nstep1: git checkout master\nstep2: git cherry-pick c4570cf\n\ngit log --oneline --all\n-----------\n88ae02b (head -> master) mod index.html content\nc4570cf (dev) mod index.html content\n479e26c mod readme.md content\n599b625 add index.js\n432febf add index.css\n8702882 add index.html\ncf5c910 add readme.md\n-----------\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 本地使用多个git存储库\n\nforked from：https://docs.github.com/en/developers/overview/managing-deploy-keys#using-multiple-repositories-on-one-server\n\n * 配置：~/.ssh/config\n\nhost github.com-repo-0\n        hostname github.com\n        identityfile=/home/user/.ssh/repo-0_deploy_key\n\nhost github.com-repo-1\n        hostname github.com\n        identityfile=/home/user/.ssh/repo-1_deploy_key\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * host github.com-repo-0 - 存储库的别名\n * hostname github.com - 配置与别名一起使用的主机名\n * identityfile=/home/user/.ssh/repo-0_deploy_key - 为别名分配私钥\n * 使用\n\ngit clone git@github.com-repo-1:owner/repo-1.git\n\n\n1\n\n\n\n# git快速获取特定tag分支\n\ngit -c protocol.version=2 fetch origin v15.0.1 --depth=1\ngit fetch origin tag v15.0.1\n\n\n1\n2\n\n\n\n# git-commit语义化\n\nbuild\t主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交\nci\t主要目的是修改项目继续集成流程(例如 travis，jenkins，gitlab ci，circle等)的提交\ndocs\t文档更新\nfeat\t新增功能\nfix\tbug 修复\nperf\t性能, 体验优化\nrefactor\t重构代码(既没有新增功能，也没有修复 bug)\nstyle\t不影响程序逻辑的代码修改(修改空白字符，格式缩进，补全缺失的分号等，没有改变代码逻辑)\ntest\t新增测试用例或是更新现有测试\nrevert\t回滚某个更早之前的提交\nchore\t不属于以上类型的其他类型\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 管理工具\n\n * fossil: https://www.fossil-scm.org\n * github: https://github.com/\n * gitee: https://gitee.com/\n * gitlab: https://gitlab.com/explore\n * gitea: https://github.com/go-gitea/gitea\n * gogs: https://gogs.io/\n\n\n# 其他\n\n * git web版: isomorphic-git/isomorphic-git\n * git 官网: https://git-scm.com/',charsets:{cjk:!0},lastUpdated:"3/22/2022",lastUpdatedTimestamp:1647946279e3,createdTime:1643899953e3},{title:"linux命令参数",frontmatter:{title:"linux命令参数",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["linux"],categories:["system"],readingShow:"top"},regularPath:"/services/tools/linux.html",relativePath:"services/tools/linux.md",key:"v-b6e43d0e",path:"/services/tools/linux.html",headers:[{level:2,title:"常见命令",slug:"常见命令",normalizedTitle:"常见命令",charIndex:78},{level:2,title:"标准输入输出",slug:"标准输入输出",normalizedTitle:"标准输入输出",charIndex:797},{level:2,title:"输出重定向",slug:"输出重定向",normalizedTitle:"输出重定向",charIndex:969},{level:2,title:"关机",slug:"关机",normalizedTitle:"关机",charIndex:1669},{level:2,title:"常用快捷键",slug:"常用快捷键",normalizedTitle:"常用快捷键",charIndex:1796},{level:2,title:"alias 别名",slug:"alias-别名",normalizedTitle:"alias 别名",charIndex:1961},{level:2,title:"服务启动与关闭",slug:"服务启动与关闭",normalizedTitle:"服务启动与关闭",charIndex:2141},{level:2,title:"创建文件夹",slug:"创建文件夹",normalizedTitle:"创建文件夹",charIndex:2547},{level:2,title:"创建文件",slug:"创建文件",normalizedTitle:"创建文件",charIndex:2547},{level:2,title:"查看文件",slug:"查看文件",normalizedTitle:"查看文件",charIndex:2786},{level:2,title:"编辑文件",slug:"编辑文件",normalizedTitle:"编辑文件",charIndex:3153},{level:2,title:"复制",slug:"复制",normalizedTitle:"复制",charIndex:3193},{level:2,title:"重命名与移动",slug:"重命名与移动",normalizedTitle:"重命名与移动",charIndex:3401},{level:2,title:"删除",slug:"删除",normalizedTitle:"删除",charIndex:1843},{level:2,title:"软连接和硬链接 ln",slug:"软连接和硬链接-ln",normalizedTitle:"软连接和硬链接 ln",charIndex:3636},{level:2,title:"通配符",slug:"通配符",normalizedTitle:"通配符",charIndex:3742},{level:2,title:"逻辑链接符",slug:"逻辑链接符",normalizedTitle:"逻辑链接符",charIndex:3800},{level:2,title:"工作进程",slug:"工作进程",normalizedTitle:"工作进程",charIndex:3848},{level:2,title:"系统资源查看",slug:"系统资源查看",normalizedTitle:"系统资源查看",charIndex:4040},{level:2,title:"帮助命令",slug:"帮助命令",normalizedTitle:"帮助命令",charIndex:4276},{level:2,title:"压缩/解压",slug:"压缩-解压",normalizedTitle:"压缩/解压",charIndex:4498},{level:2,title:"wc 统计",slug:"wc-统计",normalizedTitle:"wc 统计",charIndex:4875},{level:2,title:"挂载命令",slug:"挂载命令",normalizedTitle:"挂载命令",charIndex:5073},{level:2,title:"运行级别",slug:"运行级别",normalizedTitle:"运行级别",charIndex:1744},{level:2,title:"查询已安装的服务",slug:"查询已安装的服务",normalizedTitle:"查询已安装的服务",charIndex:5554},{level:2,title:"服务与端口号",slug:"服务与端口号",normalizedTitle:"服务与端口号",charIndex:5686},{level:2,title:"RPM 包服务",slug:"rpm-包服务",normalizedTitle:"rpm 包服务",charIndex:5950},{level:2,title:"源码包服务",slug:"源码包服务",normalizedTitle:"源码包服务",charIndex:7440},{level:2,title:"进程",slug:"进程",normalizedTitle:"进程",charIndex:3850},{level:2,title:"系统定时任务",slug:"系统定时任务",normalizedTitle:"系统定时任务",charIndex:9205},{level:2,title:"基本权限",slug:"基本权限",normalizedTitle:"基本权限",charIndex:10316},{level:2,title:"新建用户",slug:"新建用户",normalizedTitle:"新建用户",charIndex:10599},{level:2,title:"用户组",slug:"用户组",normalizedTitle:"用户组",charIndex:10678},{level:2,title:"chown 修改文件与目录的所有权",slug:"chown-修改文件与目录的所有权",normalizedTitle:"chown 修改文件与目录的所有权",charIndex:12751},{level:2,title:"文件权限(rwx)",slug:"文件权限-rwx",normalizedTitle:"文件权限(rwx)",charIndex:12880},{level:2,title:"chmod 修改文件与目录的权限",slug:"chmod-修改文件与目录的权限",normalizedTitle:"chmod 修改文件与目录的权限",charIndex:13408},{level:2,title:"sudo 权限命令",slug:"sudo-权限命令",normalizedTitle:"sudo 权限命令",charIndex:13749},{level:2,title:"IP 常用网段",slug:"ip-常用网段",normalizedTitle:"ip 常用网段",charIndex:14226},{level:2,title:"新建.sh 脚本",slug:"新建-sh-脚本",normalizedTitle:"新建.sh 脚本",charIndex:15380},{level:2,title:"bash 变量",slug:"bash-变量",normalizedTitle:"bash 变量",charIndex:15481},{level:2,title:"bash 执行方法",slug:"bash-执行方法",normalizedTitle:"bash 执行方法",charIndex:15538},{level:2,title:"shell",slug:"shell",normalizedTitle:"shell",charIndex:12732},{level:2,title:"环境变量",slug:"环境变量",normalizedTitle:"环境变量",charIndex:2037},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:10378},{level:2,title:"文件搜索",slug:"文件搜索",normalizedTitle:"文件搜索",charIndex:16230},{level:2,title:"Linux日期时间显示输出",slug:"linux日期时间显示输出",normalizedTitle:"linux日期时间显示输出",charIndex:17156},{level:2,title:"相关链接",slug:"相关链接",normalizedTitle:"相关链接",charIndex:17678}],headersStr:"常见命令 标准输入输出 输出重定向 关机 常用快捷键 alias 别名 服务启动与关闭 创建文件夹 创建文件 查看文件 编辑文件 复制 重命名与移动 删除 软连接和硬链接 ln 通配符 逻辑链接符 工作进程 系统资源查看 帮助命令 压缩/解压 wc 统计 挂载命令 运行级别 查询已安装的服务 服务与端口号 RPM 包服务 源码包服务 进程 系统定时任务 基本权限 新建用户 用户组 chown 修改文件与目录的所有权 文件权限(rwx) chmod 修改文件与目录的权限 sudo 权限命令 IP 常用网段 新建.sh 脚本 bash 变量 bash 执行方法 shell 环境变量 其他 文件搜索 Linux日期时间显示输出 相关链接",content:' * https://www.kernel.org 内核发布网址\n * uname -r 内核版本\n * linux 严格区分大小写,扩展名非必须\n\n\n# 常见命令\n\n * 禁用网卡: ifdown\n * 启用网卡: ifup\n * netstat\n * nslookup\n * tcpdump -i eth0 -nnX port 21\n * 链接远程 linux 服务器: ssh 用户名@服务器ip\n * 下载文件: scp [-r] 用户名@服务器ip:文件路径 本地路径\n * 上传文件: scp [-r] 本地文件 用户名@服务器ip:上传路径\n * export PATH=/bin:/usr/bin:/usr/local/bin\n * ps -ef | grep nginx\n * 显示磁盘的占用率: df -hT\n\n-a：# 显示所有文件系统的磁盘使用情况\n-h：# 方便阅读方式显示\n-i：# 显示i节点信息，而不是磁盘块\n-t：# 显示各指定类型的文件系统的磁盘空间使用情况\n-x：# 列出不是某一指定类型文件系统的磁盘空间使用情况\n-T：# 显示文件系统类型\n--no-sync：# 忽略 sync 命令\n--sync：# 在取得磁盘信息前,先执行sync命令\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * du -sh /usr # 显示usr的大小\n\n-a：# 显示目录中个别文件的大小\n-s：# 仅显示总计，只列出最后加总的值\n-h：# 提高信息的可读性\n\n\n1\n2\n3\n\n * pwd 显示当前路径\n * tab 自动补全，连按两次会将所有匹配内容显示出来\n * history 查看操作历史\n * | 管道符\n * w / who 查看用户登录\n * last 登录信息和登录记录\n * lastlog 查看所有用户最后一次的登录信息\n * whoami\n\n\n# 标准输入输出\n\n * > --\x3e 命令 > 文件 这是将命令内容写入文件中\n\n netstat -an > txt.log\n\n\n1\n\n * < --\x3e 命令 < 文件 这是将文件作为命令输入\n\nmail -s "test" linux@163.com < aa\n# 就是将文件aa作为信件的内容主题为test给收信人发去\n\n\n1\n2\n\n\n\n# 输出重定向\n\n * 标准输入 (stdin) ：代码为 0 ,使用 < 或 <<\n * 标准输出 (stdout)：代码为 1 ,使用 > 或 >>\n * 标准错误输出(stderr)：代码为 2 ,使用 2> 或 2>>\n\n>  --\x3e ps: ifconfig > test.log    # 将结果保存在test.log\n>  --\x3e ps: ifconfig 2>test.log    # 将结果(包括错误信息)保存在test.log\n>> --\x3e ps: ifconfig >> test.log   # 将结果追加保存在test.log\n>> --\x3e ps: ifconfig 2>>test.log   # 将结果(包括错误信息)追加保存在test.log\n\n> --\x3e ps: ifconfig > test.log 2>&1  # 将结果(包括错误信息)保存在test.log\n>> --\x3e ps: ifconfig >> test.log 2>&1  # 将结果(包括错误信息)追加保存在test.log\n>> --\x3e ps: ifconfig &>>test.log  # 将结果(包括错误信息)追加保存在test.log\n>> --\x3e ps: ifconfig 1>>success.log 2>>error.log  # 将成功放入success,失败放入error.log\n> --\x3e ps: ifconfig &>/dev/null\n> --\x3e ps: ifconfig > /dev/null 2>&1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 关机\n\n * shutdown + 参数 + 时间\n\n-c  # 取消\n-h  # 关机\n-r  # 重启\n\n\n1\n2\n3\n\n * runlevel 运行级别\n * reboot 重启系统\n * logout 退出登录\n * init 0 关机\n\n\n# 常用快捷键\n\n * clear / ctrl+l 清屏\n * ctrl + u 从光标所在位置删除到行首\n * ctrl + a 从光标移动到命令行首\n * ctrl + e 从光标移动到命令行尾\n * ctrl + c 强制终止当前命令\n * ctrl + z 把命令放入后台\n * ctrl + r 在历史命令中搜索\n\n\n# alias 别名\n\nalias # 查看系统已拥有别名\nalias 别名=\'原命令\'  # 临时生效,关机重启无效\n\n# alias永久生效需要写入系统环境变量 \'./bashrc\'中\nsource ./bashrc  # 立即生效\n\n# 删掉别名：\n\'unalias 别名\'  # 然后去系统关系删掉对应的条件\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 服务启动与关闭\n\n * /etc/init.d/服务名 start|stop|status|restart 启动服务 (推荐)\n * service 服务名 start|stop|status|restart 启动服务 (不推荐)\n * chkconfig --level 2345 服务名 on 启用自启动服务 (不推荐)\n * chkconfig --level 2345 服务名 off 停止自启动服务 (不推荐)\n * ntsysv 启用自启动服务 (不推荐)\n * /etc/rc.d/rc.local | /etc/rc.local 修改自启动服务 (推荐)\n * xinetd 服务的管理\n * yum install xinetd -y 安装 xinetd\n * /etc/xinetd.d/rsync vim 修改配置文件\n * service xinetd restart 启动服务\n\n\n# 创建文件夹\n\n * mkdir + 参数 + 文件夹名\n\n-p # 递归创建文件夹\n\nmkdir test\nmkdir -p test/demo/po\n\n\n1\n2\n3\n4\n\n\n\n# 创建文件\n\ntouch a.txt\nvi a.txt   # (没有相应文件)创建编辑\n# >表示覆盖, >>表示追加\nps: echo hello world! > README.md ;\necho \'Hello!!\' >> a.txt   # 文件追加内容\n\n\n1\n2\n3\n4\n5\n\n\n\n# 查看文件\n\n * more less 查看文件，如more /etc/passwd、less /etc/passwd\n * ls + 参数 + 文件\n\nls -a  # a隐藏\nls -l  # 详细\nls -d  # 目录属性\nls -h  # 文件大小\nls -i  # 显示inode\n\ncat a.txt\ncat test/a.txt\n\ntail a.txt   # 可以输出文件里的最后一小部分内容\ntail test/a.txt\n\nhead # 查看文件前几行\nhead -5 index.html\n\ntail # 查看文件后几行 –n –f\ntail index.html、tail -f -n 5 index.html\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 编辑文件\n\nvi a.txt\nvi text/a.txt\n\n\n1\n2\n\n\n\n# 复制\n\n * cp + 参数 + 源文件 + 目标文件\n\ncp -r # 复制目录\ncp -p # 文件属性\ncp -d # 源文件是链接文件则复制链接属性\ncp -a # 拷贝源文件后的所有属性一致\n\n- cp test1/a.txt test2/app/   # 复制文件\n- cp -R test1 test1-bak       # 复制文件夹test1下所有文件\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 重命名与移动\n\n- mv a.txt home/   # 移动 a.text 到该目录下的home文件夹\n- mv test1 test2   # 重命名\n\n\n1\n2\n\n\n\n# 删除\n\n * rm -rf 文件\n\nr # 删除\nf # 强制删除\n\n- rm text/a.txt # 删除文件\n- rm -rf text   # 删除非空目录\n- rmdir (Remove Directory) # 删除文件夹，只能删除空文件夹\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 软连接和硬链接 ln\n\n * ln -s 源文件绝对路径 目标文件 创建软连接 (删掉源文件,无法使用)\n * ln 源文件 目标文件 硬链接 相当于把源文件拷贝一份(删掉源文件,也可以正常使用不影响)\n\n\n# 通配符\n\n * * 匹配任意一个或多个内容\n * ? 匹配任意一个内容\n * [] 匹配中括号中的一个字符\n\n\n# 逻辑链接符\n\n * ; 顺序执行,没有逻辑关系\n * && 逻辑与\n * || 逻辑非\n\n\n# 工作进程\n\n * 运行程序 & | ctrl + z (暂停) 将进程放入到后台\n * jobs -l 查看\n * fg %工作号 将后台暂停的工作回复到前台执行\n * bg %工作号 将后台暂停的工作回复到后台执行\n * /etc/rc.local 将需要后台执行的命令加入开机启动(脱离终端执行)(推荐)\n * nohup 命令 & 将进程放入到后台执行(脱离终端执行)\n\n\n# 系统资源查看\n\n * vmstat 刷新延迟 刷新次数 ps:vmstat 1 3 监控系统资源\n * 缓存 cache 用来加速数据从硬盘读取的速度\n * 缓冲 buffer 用来加速数据的写入速度\n * dmesg ps: dmesg | grep CUP 开机时内核检测信息\n * free [-b|-k|-m|g] 查看内存使用状态\n * cat /proc/cpuinfo 查看 CPU 信息\n * uptime\n * uname -a\n * lsof\n\n\n# 帮助命令\n\n * man\n\nman ls  # 查看ls的帮助信息\n-f -> ps: man -f passwd   # 查看命令拥有的什么级别的帮助\nman -f + 命令 # 相当于 whatis + 命令\n-k -> ps: man -k passwd   # 查看和命令相关的所有帮助\nman -k + 命令 # 相当于 apropos + 命令\n\n\n1\n2\n3\n4\n5\n\n * 命令 + --help 查看该命令的帮助信息\n\n\n# 压缩/解压\n\ntar 参数\n-c：打包\n-v：显示过程\n-f：指定打包后的文件名\n-x：解压\n-t：查看内容\n-r：向压缩归档文件末尾追加文件\n-u：更新原压缩包中的文件\n-z：有gzip属性的\n-j：有bz2属性的\n\ntar -zcvf 压缩包名.tar.gz 源文件  # 压缩\ntar -zxvf 压缩包名.tar.gz         # 解压缩\ntar -jcvf 压缩包名.tar.bz2 源文件 # 压缩\ntar -jxvf 压缩包名.tar.bz2        # 解压缩\n\ntar -jtvf 压缩包名.tar.bz2        # 查看压缩文件\ntar -ztvf 压缩包名.tar.gz         # 查看压缩文件\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# wc 统计\n\n * wc 统计用来计算数字,并将统计结果显示输出\n\n-c # 统计字节数\n-l # 统计行数\n-m # 统计字符数。这个标志不能与 -c 标志一起使用\n-w # 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串\n-L # 打印最长行的长度\n\nwc -l test.txt > test.log`\nwc < test.log\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 挂载命令\n\n * 挂载命令mount\n\n\'mount\'     # 查看当前已挂载设备\n\'mount -a\'  # 挂载 "/etc/fstab" 里写入数据的设备\n\'mount [-t文件系统][-o特殊选项] + 设备文件名 + 挂载点\'\n\n\n1\n2\n3\n\n * 挂载光盘mount\n\nmkdir /mnt/cdrom\nmount -t iso9660 /dev/sr0 /mnt/cdrom/\n\n\n1\n2\n\n * 卸载光盘umount /mnt/cdrom/\n * fdisk -l 查看设备名\n * 挂载 u 盘：mount -t vfat /dev/sdb1/mnt/usb/\n\n\n# 运行级别\n\n * 运行系统级别 init 3\n * 查看运行级别 runlevel\n * 修改默认运行级别 /etc/inittab\n\n0 # 关机\n1 # 单用户模式,主要用户系统修复\n2 # 不完全的命令模式,不含NFS服务\n3 # 完全的命令模式,就是标准的字符界面\n4 # 系统保留\n5 # 图形模式\n6 # 重启\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 查询已安装的服务\n\n * RPM 包安装的服务\n\n# 查看服务自启动服务状态,可以看到所有RPM安装包的服务\nchkconfig --list   # 自启动服务\n\n\n1\n2\n\n * 源码包安装的服务: 查看服务安装位置,一般是在 /usr/local/\n\n\n# 服务与端口号\n\n * etc/services\n * 查看服务 ps aux\n * 查看系统开启端口号 netstat\n\n# 安装 net-tools 服务\n\nnetstat -tlunp   # 启动服务(监听的服务)\n-t # 列出tcp数据\n-u # 列出udp数据\n-l # 列出正在监听的网络服务(不包含已经连接的网络服务)\n-n # 用端口号来显示服务,而不是用服务名\n-p # 列出该服务的进程ID(PID)\n\nnetstat -an  # 已经启动的服务\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# RPM 包服务\n\n * rpm 常用命令组合\n\n－ivh：# 安装显示安装进度--install--verbose--hash\n－Uvh：# 升级软件包--Update\n－qpl：# 列出RPM软件包内的文件信息[Query Package list]\n－qpi：# 列出RPM软件包的描述信息[Query Package install package(s)]\n－qf：# 查找指定文件属于哪个RPM软件包[Query File]\n－Va：# 校验所有的 RPM软件包，查找丢失的文件[View Lost]\n－e：# 删除包\n\nrpm -q samba # 查询程序是否安装\n\nrpm -ivh  /media/cdrom/RedHat/RPMS/samba-3.0.10-1.4E.i386.rpm # 按路径安装并显示进度\nrpm -ivh --relocate /=/opt/gaim gaim-1.3.0-1.fc4.i386.rpm    # 指定安装目录\n\nrpm -ivh --test gaim-1.3.0-1.fc4.i386.rpm　　　 # 用来检查依赖关系；并不是真正的安装；\nrpm -Uvh --oldpackage gaim-1.3.0-1.fc4.i386.rpm # 新版本降级为旧版本\n\nrpm -qa | grep httpd　# [搜索指定rpm包是否安装]--all搜索*httpd*\nrpm -ql httpd　　　# [搜索rpm包]--list所有文件安装目录\n\nrpm -qpi Linux-1.4-6.i368.rpm　# [查看rpm包]--query--package--install package信息\nrpm -qpf Linux-1.4-6.i368.rpm　# [查看rpm包]--file\nrpm -qpR file.rpm　　　　　　　# [查看包]依赖关系\nrpm2cpio file.rpm |cpio -div    # [抽出文件]\n\nrpm -ivh file.rpm 　# [安装新的rpm]--install--verbose--hash\nrpm -ivh\n\nrpm -Uvh file.rpm    # [升级一个rpm]--upgrade\nrpm -e file.rpm      # [删除一个rpm包]--erase\n\n# .src.rpm 结尾的文件，这些文件是由软件的源代码包装而成的，用户要安装这类RPM软件包\nrpm　--recompile　vim-4.6-4.src.rpm  # 这个命令会把源代码解包并编译、安装它\nrpm　--rebuild　vim-4.6-4.src.rpm　# 在安装完成后，还会把编译生成的可执行文件重新包装成i386.rpm的RPM软件包\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n * 独立服务安装位置(一般)\n\n/etc/init.d/  # 启动脚本位置\n/etc/sysconfig/ # 初始化环境配置文件位置\n/etc/ # 配置文件位置\n/etc/xinetd.conf # xinetd配置文件\n/etc/xinetd.d/ # 基于xinetd服务的启动脚本\n/var/lib/ # 服务产生的数据放在这里\n/var/log/ # 日志文件\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 源码包服务\n\n * /usr/local/ 一般安装目录\n * 源码包安装绝对路径 start|stop|restart|status 开启服务 (推荐)\n * /etc/rc.local | /etc/rc.d/rc.local 开启自启动 (推荐)\n\n/usr/local/apache2/bin/apachectl start\n\n\n1\n\n * ln -s 源码包安装绝对路径 /etc/init.d/服务名 软连接使该服务支持 service 服务方式启动 (不推荐)\n\nln -s /usr/local/apache2/bin/apachectl /etc/init.d/apache3\nservice apache3 restart  启动apache3服务\n\n\n1\n2\n\n * 让源码包的 apache3 服务能被 chkconfig 与 ntsysv 命令管理自启动 (不推荐)\n\n# chkconfig:运行级别　启动顺序　关闭顺序\n# 启动顺序、关闭顺序:可以去"/etc/rc3.d/"查看,找没有的数字填写\nvi /etc/init.d/appache3\n  #chkconfig:35 86 76\n  #description:source package apache3\nchkconfig --add apche3\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 进程\n\n * ps aux 查看系统所有进程\n * ps -le 查看系统所有进程\n\n-a # 显示一个终端的所有进程,处理会话引线\n-u # 显示进程的归属用户及内存的使用情况\n-x # 显示没有控制终端的进程\n-l # 长格式显示 显示更加详细的信息\n-e # 显示所有进程,和-A作用一致\n\n\n1\n2\n3\n4\n5\n\n * pstree [选项] 进程树\n\n# 选项\n-p # 显示进程的PID\n-u # 显示进程的所属用户\n\n\n1\n2\n3\n\n * top 查看进程健康状态\n\n- P # 以CPU使用率排序\n- M # 以内存的使用率排序\n- N # 以PID排序\n- Q # 退出top\n\n\n1\n2\n3\n4\n\n * kill(选项) 进程或作业识别号 杀死单一进程\n\n-l：# 列出所有信号名称\n-a：# 当处理当前进程时，不限制命令名和进程号的对应关系\n-p：# 指定kill 命令只打印相关进程的进程号，而不发送任何信号；\n-s <信息名称或编号>：# 指定要送出的信息\n-u：# 指定用户\n\n-HUP    1     # 终端断线\n-INT    2     # 中断（同 Ctrl + C）\n-QUIT   3     # 退出（同 Ctrl + \\）\n-TERM   15    # 终止\n-KILL   9     # 强制终止\n-CONT   18    # 继续（与STOP相反， fg/bg命令）\n-STOP   19    # 暂停（同 Ctrl + Z）\n\nps: kill -HUP 进程号 | kill -1 进程号  # 重启进程\nps: kill -9 进程号  # 强制杀死进程\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * killall [选项I/i] [信号] 进程号\n\n-e：# 对长名称进行精确匹配\n-l：# 忽略大小写的不同\n-p：# 杀死进程所属的进程组\n-i：# 交互式杀死进程，杀死进程前需要进行确认\n-l：# 打印所有已知信号列表\n-q：# 如果没有进程被杀死。则不输出任何信息\n-r：# 使用正规表达式匹配要杀死的进程名称\n-s：# 用指定的进程号代替默认信号“SIGTERM”\n-u：# 杀死指定用户的进程\n\ni ：# 交互式,询问是否要杀死进程\nI ：# 忽略进程名的大小写\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * pkill (选项) 进程名称\n\n-o：# 仅向找到的最小（起始）进程号发送信号\n-n：# 仅向找到的最大（结束）进程号发送信号\n-P：# 指定父进程号发送信号\n-g：# 指定进程组\n-t：# 指定开启进程的终端\n\npkill -9 -t pts/1\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 系统定时任务\n\n * at\n * cron\n * anacron\n * crontab\n\nyum install vixie-cron -y\nyum install crontab -y\ncrontab -l\n"no crontab for root -> crontab -e   -> wq "\nservice crond status\n\n`vim /etc/cron.deny`  # 系统定时循环任务\n`ls /etc/cron*`  # 系统定时任务\n\ncrontab [选项]\n- e # 编辑crontab定时任务\n- l # 查询crontab定时任务\n- r # 删除当前用户所有的crontab定时任务\n\ncrontab -e # 默认绑定当前用户权限的命令；\n# 即普通用户不能执行root用户权限，命令无效\n\n* * * * *\nm h D M W\n\n# 没有精确到秒,最小单位为分钟\nm -> 0-59  # 每小时的第几分钟\nh -> 0-23  # 每天的第几小时\nD -> 1-31  # 每月的第几天\nM -> 1-12  # 每年的第几月\nW -> 0,7-6 # 一周当中的星期几 (0,7 表示星期日)\n\n- * # 表示任何时候都匹配\n- A,B,C,D # 表示A或B或C或D时执行任务\n- 1-8 # 表示1到8连续时间段执行命令任务\n- */A # 表示每A分钟(小时|周|月)执行一次命令\n\n\n"crontab -e"   # 命令行执行\n"0 */2 * * *  执行命令(绝对路径)"  # vim编辑内容\n\nps: */5 * 1-5 * 2,3 date\n# D和W同时存在是 "或" 的关系\nps: 1-20/2 * * * * date\nps: 0 */2 * * * echo \'hello...\'\n\n\n# contab通过编辑配置文件添加定时任务\nvim /etc/crontab  # vim手动编辑配置文件添加定时循环任务\nls /etc/cron.*   # 将需要定时执行的脚本复制到任意一个目录下\n\n"0 */2 * * *  用户名  执行命令(绝对路径)"  # vim编辑内容\nps: 0 */2 * * * user1 echo \'hello...\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n\n# 基本权限\n\n * 文件类型( - 普通文件 | d 目录 | l 软连接文件 )\n * u 所有者 | g 所属组 | o 其他人\n * r-4 读 | w-2 写 | x-1 执行\n\nr : 读   # 对文件的查看.例：cat、more等;对目录下文件名的查看.例：ls\n\nw : 写  # 对文件的编辑,新增,修改数据的功能;但不能删除该文件本身.\n        # 修改目录结构的权限.例：删除该目录及目录下所有文件(rm、touch、mv、cp)\n\nx : 执行 # 对文件的可执行权限;可进入目录的权限.例：cd\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 新建用户\n\n * adduser xyz 创建用户\n\n * passwd xyz 修改密码\n\n * chown 用户:群组 文件/目录 对文件或目录赋予用户和用户组\n\n * usermod -c +用户备注+用户名 给用户名添加备注\n\n * usermod -l newUsr oldUsr 更改用户名\n\n * gpasswd -a 用户名 群组 将用户加入到用户组\n\n * useradd 用户名 创建用户\n\n * chown 用户名 文件名 修改所有者(u)\n\n * umask 查看 mask 权限\n\n * /etc/profile 修改使命令永久生效\n\n * useradd -g test1 yxz1 创建 yxz1 用户加入到 test1 用户组\n\n * useradd -d /home/ddd xyz 创建 xyz 用户并指定创建的 ddd 为 xyz 用户目录\n\n * usermod -g newGroup oldGroup 更改用户组\n\n * userdel 用户名 删除用户名\n\n * userdel -r 用户名 删除用户的同时用户目录也一并删除\n\n * touch /etc/nologin 禁用其他账户登录系统(root 除外)\n\n * passwd -l 用户名 锁定用户名\n\n * passwd -u 用户名 解决用户名锁定\n\n * passwd -d 用户名 清除用户名密码\n\n * gpasswd -a 用户名 用户组 添加用户名的副所属组\n\n * gpasswd -d 用户名 用户组 删除用户名的副所属组\n\n# 加入相应用户组群拥有权限\nsudo gpasswd -a xyz wheel  # 将xyz用户加入到wheel组\n\n# 查看用户群组\ngroups xyz  # 查看用户所属的群组\n\n# 用户群组\nsudo groupadd test # 创建test用户群组\n/etc/group\n\nsudo usermod -a -G test xyz  # 把xyz这个用户放到test这个群组里\ngroups xyz\nxyz test wheel\n\nsudo usermod -g test xyz   # 把 xyz 用户的主群组修改成 test组\ngroups xyz\ntest wheel\n\n# 移除用户组\nsudo gpasswd -d xyz wheel  # 把xyz用户移除wheel组\n\n# 删除用户：\nuserdel -r xyz  # 用于删除用户帐号及相关档案\nuserdel xyz\ngroupdel xyz\nusermod –G xyz xyz # 强制删除该用户的主目录和目录下的所有文件和子目录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 用户组\n\n * chgrp 群组 文件名 修改群组\n * groupadd 群组 创建用户组\n * groups + 用户名 用户名的所属组\n * gpasswd 用户组 设置用户组密码\n * newgrp 副所属组 切换副所属组\n * chown 用户:群组 文件/目录 对文件或目录赋予用户和用户组\n * useradd -g Mgroup -G group1,group2 abc Mgroup 主 -- group1 副\n * su + 用户名 切换用户\n * whoami 显示当期用户\n * id + 用户名 用户名资料\n * chfn + 用户名 设置用户名详细资料\n * finger + 用户名 显示用户名详细资料\n * 更改用户组名 groupmod -n + 新组名 + 组名 ps: groupmod -n test2 test1\n * 组编号 groupmod -g + 编号 + 组名 ps: groupmod -g 666 test2\n * groupadd -g 888 test3 创建组号 888 组名 test3\n * groupdel test1 删除用户组\n * /etc/shadow 存储当前系统中所有用户的密码信息\n * /etc/group 存储当前系统中所有用户组信息\n\n  Group :       X         :  123   :  abc,def,xyz\n# 组名称:   组密码占位符      : 组编号  : 组中用户名列表\n\n\n1\n2\n\n * /etc/gshadow 存储当前系统中用户组的密码信息\n\n  Group :   *    :          :  abc,def,xyz\n# 组名称: 组密码   : 组管理者   : 组中用户名列表\n\n\n1\n2\n\n * /etc/passwd 存储当前系统中用户的信息\n\n  user  :  x       :   123  :    456   :    xxxx    :/home/user:/bin/bash\n# 用户名 :密码占位符  :用户编号  :用户组编号  :用户注释信息  :用户组目录:shell类型\n\n\n1\n2\n\n\n\n# chown 修改文件与目录的所有权\n\n# chown 用户:群组 文件/目录\nchown xyz:czh test\nls -l\n\n# 修改某个目录以及它里面包含的所有的子目录的所有权\nchown -R 用户:群组 目录\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 文件权限(rwx)\n\n# 字母\nr:read（读取）\nw：write（写入）\nx：excute（执行）\n\n# 第一位：\n-(常规文件)、d(目录)、l(符号链接)、c(字符特殊设备)、b(模块特殊设备)、p(FIFO)、s(套接字)\n\n# 用户列表：\n# 拥有者（owner），用户组（group），其它人（others）\n\ntouch a.txt\nls -l\n-rw-rw-r--\n\n# 数字表示的权限：\nr：4  # 读\nw：2  # 写\nx：1  # 执行\n\n\n# 例如：\n7：r + w + x # 表示所有权限\n6：r + w # 表示读取与写入权限\n4：r # 表示读取权限\n\n# 例：drwxrwxr-x\n# 第一位d表示目录\n# 从左到右每三个一组，依次表示所有者权限、组权限、其他用户权限\nd     # dir\nrwx   # 所有者拥有读、写、执行\nrwx   # 组权拥有读、写、执行\nrwx   # 其他拥有读、执行  (-表示没有)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# chmod 修改文件与目录的权限\n\n * chmod 选项 模式 文件名 修改文件权限\n\n# 选项 ：\n-R  # 递归\n\n# 模式 ：\nu+x | u-x | 755 | a=wrx\n\n\n1\n2\n3\n4\n5\n\n\n# chmod 权限 目录/文件\n\n# 数字：\n# 4 是读取，2 是写入，1 是执行\nchmod 755 目录\nchmod 644 文件\n\n# 字母：\nr 是读取，w 是写入，x 是执行\n\nu 表示拥有者，g 表示所属用户组，o 表示其它人，a 表示所有人\n\n# 配合使用 + 与 - 号，去添加或去掉权限\nchmod u+x 文件\nchmod g+w 目录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * ACL 权限\n\n\n# sudo 权限命令\n\n * sudo -l 查看可用的 sudo 命令\n * vim /etc/sudoers 赋予用户权限命令\n\n  root      ALL         =   (ALL)       ALL\n# 用户名  被管理主机的地址 = (可使用的身份)  授权命令(绝对路径)\nuser1       ALL         = (ALL)         /sbin/shutdown -r now\n\nuser2 ALL=/usr/sbin/useradd\nuser2 ALL=/usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd "", !/usr/bin/passwd root\n\n%wheel        ALL       =   (ALL)       ALL\n# %组名  被管理主机的地址 = (可使用的身份)  授权命令(绝对路径)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * sudo /sbin/shutdown -r now 普通用户自行 sudo 赋予的命令\n\n\n# IP 常用网段\n\n# 网络类别 |            IP范围            | 主机数  | 私有内网IP范围\n    A     | 1.0.0.0 - 126.255.255.255   | 2^24-2 | 10.0.0.0 - 10.255.255.255\n    B     | 128.0.0.0 - 191.255.255.255 | 2^16-2 | 172.16.0.0 - 172.31.255.255\n    C     | 192.0.0.0 - 223.255.255.255 | 2^8-2  | 192.168.0.0- 192.168.255.255\n\n\n1\n2\n3\n4\n\n\n * ip address 查看 ip 地址\n\n * TCP/UDP\n\n * netstat -an 查看端口\n\n * 常见端口号\n   \n   * FTP ： 文件传输 ： 20 21\n   * SSH ： 安全 shell 协议 ： 22\n   * telnet ： 远程登录协议 ： 23\n   * DNS ： 域名系统 ： 53\n   * http ： 超文本传输协议 ： 80\n   * SMTP ： 简单邮件传输协议 ： 25\n   * POP3 ： 邮局协议 3 代 ： 110\n\n * DNS 域名与服务器 IP 进行转换\n\n * 默认网关 在内网中进行通信以及使内网 IP 与公网 IP 进行互相转换通信\n\n * 配置 linux 的 ip\n\n# virtualBox (桥接模式):\n\nvim /etc/sysconfig/network-scripts/ifcfg-eth0\nifcfg-eth0  # 对应的网卡名\n\n# 配置说明\n  DEVICE = "eth0"   # 对应网卡设备名\n  BOOTPROTO = "none"  # 是否自动获取ip (none/static/dhcp)\n  HWADDR = XXXX    # 对应的MAC地址\n  USERCTL = "no"  # 不允许非root用户控制此网卡\n  ONBOOT = "yes"    #  是否随网络服务启动\n  IPADDR = 192.168.1.102  # 本机的IP (勿于pc机冲突)\n  NETMASK = 255.255.255.0  # 子网掩码\n  GATEWAY = 192.168.1.1   # 网关 (与pc机默认网关一致)\n  DNS1 = 114.114.114.114  # DNS\nservice network restart  # 重启网络服务\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 新建.sh 脚本\n\n * demo.sh\n\n#!/bin/bash;\n#上一句话不可省略!!!\n#This is a Test Program\necho \'Hello\';\n\n\n1\n2\n3\n4\n\n\n\n# bash 变量\n\n * 变量可以是数字,下划线和字母; 但是不能以数字开头\n * 变量默认都是字符串类型\n\n\n# bash 执行方法\n\n# 执行方式1：\nbash demo.sh\n\n# 执行方式2：\nchmod +x demo.sh   # 附加执行权限\n./demo.bash        # 运行脚本\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# shell\n\n * $? 上一行命令是否正确\n * $# 输入参数有多少个\n * $* 输出所有输入的参数\n * $n $1 $2... 输入的参数\n\n\n# 环境变量\n\n * export 变量=赋值\n * set 显示系统中已经存在的 shell 变量\n * unset 删除变量\n * env\n * PATH\n * locale 语系变量\n * source source 配置文件 | . 配置文件 使配置文件直接生效\n * 登录系统时执行的命令文件\n\n/etc/profile\n/etc/profile.d/*.sh\n~/.bash_profile\n~/.bashrc\n/etc/bashrc\n\n\n1\n2\n3\n4\n5\n\n * 退出系统时执行的命令文件\n\n~/.bash_logout\n\n\n1\n\n * /etc/issue 本地显示登录信息\n * /etc/issue.net 远程终端显示登录信息\n\n# 加入 "Banner /etc/issue.net" 行,重启ssh服务\n/etc/ssh/sshd_config\n\n\n1\n2\n\n * /etc/motd 登录后欢迎信息(支持本地和远程)\n\n\n# 其他\n\n * 释放网页缓存，目录项和索引\n\nsync; echo 3 > /proc/sys/vm/drop_caches\n\n\n1\n\n\n\n# 文件搜索\n\n * locate\n\n`locate + 文件名` # 查找`/var/lib/mlocate`中的数据,默认一天一更新\n\nupdatedb  # 用户更新/var/lib/mlocate数据\nyum install mlocate # 安装\n\n\n1\n2\n3\n4\n\n * whereis / which\n\nwhereis + 参数 + 查找系统命令\n-b  # 只查找可执行文件位置\n-m  # 只查找帮助文件\nwhereis ls\n\n\n1\n2\n3\n4\n\n * find\n\n`find + 搜索范围 + 搜索条件 + 搜索内容` # 搜索符合条件的文件\n\n# 搜索条件\n-i   # 不区分大小写\n-user # 用户\n-name # 名称\n-nouser\n-size  # 文件大小\nfind . -size +20k # 当前文件夹大于20k文件\nfind . -size -20K # 当前文件夹小于20k文件\n-atime  # 文件访问事件\nfind . -atime +10 # 10天前修改文件\nfind . -atime -10 # 10天内修改文件\nfind . -atime 10  # 10天当天内修改文件\n-ctime  # 改变文件属性\n-mtime  # 修改文件内容\n-inum   # i节点\n-a  # 逻辑与\n-o  # 逻辑或\n-exec # 对搜索结果进行处理\n\nfind /home -name "test.txt*"\nfind /home -size +20k -a -100k\nfind /home -size +20k -a -100k -exec ls -lh {} \\;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * grep\n\n`grep + 参数 + 字符串 + 文件名` # 搜索文件中的符合内容的字符串\n\n-i # 忽略大小写\n-v # 排除指定字符串\n\ngrep -i \'size\' text.txt  # 查找text.txt中包含size的行\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# Linux日期时间显示输出\n\n> https://www.cnblogs.com/xzlive/p/13368079.html\n\n * 1、输出当前年月日\n\necho $(date +%F)\n2014-02-21\n\n\n1\n2\n\n * 2、输出当前时间 (时分)\n\necho $(date +%R)\n12:45\n\n\n1\n2\n\n * 3、输出当前时间 (时分秒)\n\necho $(date +%T)\n12:52:51\n\n\n1\n2\n\n * 4、输出星期\n\necho $(date +%A)\n星期五\n\n\n1\n2\n\n * 5.1输出年月日\n\necho $(date +%Y/%m/%d)\n2014/02/21\n%Y参数: 年\n%m参数: 月\n%d参数: 日\n\n\n1\n2\n3\n4\n5\n\n * 5.2输出时分秒\n\necho $(date +%H:%M:%S)\n12:50:44\n%H参数: 时\n%M参数: 分\n%S参数: 秒\n\n\n1\n2\n3\n4\n5\n\n * 5.3输出年月日时分秒\n\necho $(date +%F%n%T)\n2014-02-21 12:56:46\n%n参数: 空格\n%F参数: 年月日\n%T参数: 时分秒\n\n\n1\n2\n3\n4\n5\n\n\n\n# 相关链接\n\n * Linux 命令大全\n * Linux rpm 命令参数使用详解［介绍和应用］\n * linux kill 命令详解\n * Linux 软件安装管理\n * iptables 命令\n * iptables INPUT 链使用实例说明\n * judasn/Linux-Tutorial\n * ping.pe',normalizedContent:' * https://www.kernel.org 内核发布网址\n * uname -r 内核版本\n * linux 严格区分大小写,扩展名非必须\n\n\n# 常见命令\n\n * 禁用网卡: ifdown\n * 启用网卡: ifup\n * netstat\n * nslookup\n * tcpdump -i eth0 -nnx port 21\n * 链接远程 linux 服务器: ssh 用户名@服务器ip\n * 下载文件: scp [-r] 用户名@服务器ip:文件路径 本地路径\n * 上传文件: scp [-r] 本地文件 用户名@服务器ip:上传路径\n * export path=/bin:/usr/bin:/usr/local/bin\n * ps -ef | grep nginx\n * 显示磁盘的占用率: df -ht\n\n-a：# 显示所有文件系统的磁盘使用情况\n-h：# 方便阅读方式显示\n-i：# 显示i节点信息，而不是磁盘块\n-t：# 显示各指定类型的文件系统的磁盘空间使用情况\n-x：# 列出不是某一指定类型文件系统的磁盘空间使用情况\n-t：# 显示文件系统类型\n--no-sync：# 忽略 sync 命令\n--sync：# 在取得磁盘信息前,先执行sync命令\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * du -sh /usr # 显示usr的大小\n\n-a：# 显示目录中个别文件的大小\n-s：# 仅显示总计，只列出最后加总的值\n-h：# 提高信息的可读性\n\n\n1\n2\n3\n\n * pwd 显示当前路径\n * tab 自动补全，连按两次会将所有匹配内容显示出来\n * history 查看操作历史\n * | 管道符\n * w / who 查看用户登录\n * last 登录信息和登录记录\n * lastlog 查看所有用户最后一次的登录信息\n * whoami\n\n\n# 标准输入输出\n\n * > --\x3e 命令 > 文件 这是将命令内容写入文件中\n\n netstat -an > txt.log\n\n\n1\n\n * < --\x3e 命令 < 文件 这是将文件作为命令输入\n\nmail -s "test" linux@163.com < aa\n# 就是将文件aa作为信件的内容主题为test给收信人发去\n\n\n1\n2\n\n\n\n# 输出重定向\n\n * 标准输入 (stdin) ：代码为 0 ,使用 < 或 <<\n * 标准输出 (stdout)：代码为 1 ,使用 > 或 >>\n * 标准错误输出(stderr)：代码为 2 ,使用 2> 或 2>>\n\n>  --\x3e ps: ifconfig > test.log    # 将结果保存在test.log\n>  --\x3e ps: ifconfig 2>test.log    # 将结果(包括错误信息)保存在test.log\n>> --\x3e ps: ifconfig >> test.log   # 将结果追加保存在test.log\n>> --\x3e ps: ifconfig 2>>test.log   # 将结果(包括错误信息)追加保存在test.log\n\n> --\x3e ps: ifconfig > test.log 2>&1  # 将结果(包括错误信息)保存在test.log\n>> --\x3e ps: ifconfig >> test.log 2>&1  # 将结果(包括错误信息)追加保存在test.log\n>> --\x3e ps: ifconfig &>>test.log  # 将结果(包括错误信息)追加保存在test.log\n>> --\x3e ps: ifconfig 1>>success.log 2>>error.log  # 将成功放入success,失败放入error.log\n> --\x3e ps: ifconfig &>/dev/null\n> --\x3e ps: ifconfig > /dev/null 2>&1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 关机\n\n * shutdown + 参数 + 时间\n\n-c  # 取消\n-h  # 关机\n-r  # 重启\n\n\n1\n2\n3\n\n * runlevel 运行级别\n * reboot 重启系统\n * logout 退出登录\n * init 0 关机\n\n\n# 常用快捷键\n\n * clear / ctrl+l 清屏\n * ctrl + u 从光标所在位置删除到行首\n * ctrl + a 从光标移动到命令行首\n * ctrl + e 从光标移动到命令行尾\n * ctrl + c 强制终止当前命令\n * ctrl + z 把命令放入后台\n * ctrl + r 在历史命令中搜索\n\n\n# alias 别名\n\nalias # 查看系统已拥有别名\nalias 别名=\'原命令\'  # 临时生效,关机重启无效\n\n# alias永久生效需要写入系统环境变量 \'./bashrc\'中\nsource ./bashrc  # 立即生效\n\n# 删掉别名：\n\'unalias 别名\'  # 然后去系统关系删掉对应的条件\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 服务启动与关闭\n\n * /etc/init.d/服务名 start|stop|status|restart 启动服务 (推荐)\n * service 服务名 start|stop|status|restart 启动服务 (不推荐)\n * chkconfig --level 2345 服务名 on 启用自启动服务 (不推荐)\n * chkconfig --level 2345 服务名 off 停止自启动服务 (不推荐)\n * ntsysv 启用自启动服务 (不推荐)\n * /etc/rc.d/rc.local | /etc/rc.local 修改自启动服务 (推荐)\n * xinetd 服务的管理\n * yum install xinetd -y 安装 xinetd\n * /etc/xinetd.d/rsync vim 修改配置文件\n * service xinetd restart 启动服务\n\n\n# 创建文件夹\n\n * mkdir + 参数 + 文件夹名\n\n-p # 递归创建文件夹\n\nmkdir test\nmkdir -p test/demo/po\n\n\n1\n2\n3\n4\n\n\n\n# 创建文件\n\ntouch a.txt\nvi a.txt   # (没有相应文件)创建编辑\n# >表示覆盖, >>表示追加\nps: echo hello world! > readme.md ;\necho \'hello!!\' >> a.txt   # 文件追加内容\n\n\n1\n2\n3\n4\n5\n\n\n\n# 查看文件\n\n * more less 查看文件，如more /etc/passwd、less /etc/passwd\n * ls + 参数 + 文件\n\nls -a  # a隐藏\nls -l  # 详细\nls -d  # 目录属性\nls -h  # 文件大小\nls -i  # 显示inode\n\ncat a.txt\ncat test/a.txt\n\ntail a.txt   # 可以输出文件里的最后一小部分内容\ntail test/a.txt\n\nhead # 查看文件前几行\nhead -5 index.html\n\ntail # 查看文件后几行 –n –f\ntail index.html、tail -f -n 5 index.html\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 编辑文件\n\nvi a.txt\nvi text/a.txt\n\n\n1\n2\n\n\n\n# 复制\n\n * cp + 参数 + 源文件 + 目标文件\n\ncp -r # 复制目录\ncp -p # 文件属性\ncp -d # 源文件是链接文件则复制链接属性\ncp -a # 拷贝源文件后的所有属性一致\n\n- cp test1/a.txt test2/app/   # 复制文件\n- cp -r test1 test1-bak       # 复制文件夹test1下所有文件\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 重命名与移动\n\n- mv a.txt home/   # 移动 a.text 到该目录下的home文件夹\n- mv test1 test2   # 重命名\n\n\n1\n2\n\n\n\n# 删除\n\n * rm -rf 文件\n\nr # 删除\nf # 强制删除\n\n- rm text/a.txt # 删除文件\n- rm -rf text   # 删除非空目录\n- rmdir (remove directory) # 删除文件夹，只能删除空文件夹\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 软连接和硬链接 ln\n\n * ln -s 源文件绝对路径 目标文件 创建软连接 (删掉源文件,无法使用)\n * ln 源文件 目标文件 硬链接 相当于把源文件拷贝一份(删掉源文件,也可以正常使用不影响)\n\n\n# 通配符\n\n * * 匹配任意一个或多个内容\n * ? 匹配任意一个内容\n * [] 匹配中括号中的一个字符\n\n\n# 逻辑链接符\n\n * ; 顺序执行,没有逻辑关系\n * && 逻辑与\n * || 逻辑非\n\n\n# 工作进程\n\n * 运行程序 & | ctrl + z (暂停) 将进程放入到后台\n * jobs -l 查看\n * fg %工作号 将后台暂停的工作回复到前台执行\n * bg %工作号 将后台暂停的工作回复到后台执行\n * /etc/rc.local 将需要后台执行的命令加入开机启动(脱离终端执行)(推荐)\n * nohup 命令 & 将进程放入到后台执行(脱离终端执行)\n\n\n# 系统资源查看\n\n * vmstat 刷新延迟 刷新次数 ps:vmstat 1 3 监控系统资源\n * 缓存 cache 用来加速数据从硬盘读取的速度\n * 缓冲 buffer 用来加速数据的写入速度\n * dmesg ps: dmesg | grep cup 开机时内核检测信息\n * free [-b|-k|-m|g] 查看内存使用状态\n * cat /proc/cpuinfo 查看 cpu 信息\n * uptime\n * uname -a\n * lsof\n\n\n# 帮助命令\n\n * man\n\nman ls  # 查看ls的帮助信息\n-f -> ps: man -f passwd   # 查看命令拥有的什么级别的帮助\nman -f + 命令 # 相当于 whatis + 命令\n-k -> ps: man -k passwd   # 查看和命令相关的所有帮助\nman -k + 命令 # 相当于 apropos + 命令\n\n\n1\n2\n3\n4\n5\n\n * 命令 + --help 查看该命令的帮助信息\n\n\n# 压缩/解压\n\ntar 参数\n-c：打包\n-v：显示过程\n-f：指定打包后的文件名\n-x：解压\n-t：查看内容\n-r：向压缩归档文件末尾追加文件\n-u：更新原压缩包中的文件\n-z：有gzip属性的\n-j：有bz2属性的\n\ntar -zcvf 压缩包名.tar.gz 源文件  # 压缩\ntar -zxvf 压缩包名.tar.gz         # 解压缩\ntar -jcvf 压缩包名.tar.bz2 源文件 # 压缩\ntar -jxvf 压缩包名.tar.bz2        # 解压缩\n\ntar -jtvf 压缩包名.tar.bz2        # 查看压缩文件\ntar -ztvf 压缩包名.tar.gz         # 查看压缩文件\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# wc 统计\n\n * wc 统计用来计算数字,并将统计结果显示输出\n\n-c # 统计字节数\n-l # 统计行数\n-m # 统计字符数。这个标志不能与 -c 标志一起使用\n-w # 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串\n-l # 打印最长行的长度\n\nwc -l test.txt > test.log`\nwc < test.log\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 挂载命令\n\n * 挂载命令mount\n\n\'mount\'     # 查看当前已挂载设备\n\'mount -a\'  # 挂载 "/etc/fstab" 里写入数据的设备\n\'mount [-t文件系统][-o特殊选项] + 设备文件名 + 挂载点\'\n\n\n1\n2\n3\n\n * 挂载光盘mount\n\nmkdir /mnt/cdrom\nmount -t iso9660 /dev/sr0 /mnt/cdrom/\n\n\n1\n2\n\n * 卸载光盘umount /mnt/cdrom/\n * fdisk -l 查看设备名\n * 挂载 u 盘：mount -t vfat /dev/sdb1/mnt/usb/\n\n\n# 运行级别\n\n * 运行系统级别 init 3\n * 查看运行级别 runlevel\n * 修改默认运行级别 /etc/inittab\n\n0 # 关机\n1 # 单用户模式,主要用户系统修复\n2 # 不完全的命令模式,不含nfs服务\n3 # 完全的命令模式,就是标准的字符界面\n4 # 系统保留\n5 # 图形模式\n6 # 重启\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 查询已安装的服务\n\n * rpm 包安装的服务\n\n# 查看服务自启动服务状态,可以看到所有rpm安装包的服务\nchkconfig --list   # 自启动服务\n\n\n1\n2\n\n * 源码包安装的服务: 查看服务安装位置,一般是在 /usr/local/\n\n\n# 服务与端口号\n\n * etc/services\n * 查看服务 ps aux\n * 查看系统开启端口号 netstat\n\n# 安装 net-tools 服务\n\nnetstat -tlunp   # 启动服务(监听的服务)\n-t # 列出tcp数据\n-u # 列出udp数据\n-l # 列出正在监听的网络服务(不包含已经连接的网络服务)\n-n # 用端口号来显示服务,而不是用服务名\n-p # 列出该服务的进程id(pid)\n\nnetstat -an  # 已经启动的服务\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# rpm 包服务\n\n * rpm 常用命令组合\n\n－ivh：# 安装显示安装进度--install--verbose--hash\n－uvh：# 升级软件包--update\n－qpl：# 列出rpm软件包内的文件信息[query package list]\n－qpi：# 列出rpm软件包的描述信息[query package install package(s)]\n－qf：# 查找指定文件属于哪个rpm软件包[query file]\n－va：# 校验所有的 rpm软件包，查找丢失的文件[view lost]\n－e：# 删除包\n\nrpm -q samba # 查询程序是否安装\n\nrpm -ivh  /media/cdrom/redhat/rpms/samba-3.0.10-1.4e.i386.rpm # 按路径安装并显示进度\nrpm -ivh --relocate /=/opt/gaim gaim-1.3.0-1.fc4.i386.rpm    # 指定安装目录\n\nrpm -ivh --test gaim-1.3.0-1.fc4.i386.rpm　　　 # 用来检查依赖关系；并不是真正的安装；\nrpm -uvh --oldpackage gaim-1.3.0-1.fc4.i386.rpm # 新版本降级为旧版本\n\nrpm -qa | grep httpd　# [搜索指定rpm包是否安装]--all搜索*httpd*\nrpm -ql httpd　　　# [搜索rpm包]--list所有文件安装目录\n\nrpm -qpi linux-1.4-6.i368.rpm　# [查看rpm包]--query--package--install package信息\nrpm -qpf linux-1.4-6.i368.rpm　# [查看rpm包]--file\nrpm -qpr file.rpm　　　　　　　# [查看包]依赖关系\nrpm2cpio file.rpm |cpio -div    # [抽出文件]\n\nrpm -ivh file.rpm 　# [安装新的rpm]--install--verbose--hash\nrpm -ivh\n\nrpm -uvh file.rpm    # [升级一个rpm]--upgrade\nrpm -e file.rpm      # [删除一个rpm包]--erase\n\n# .src.rpm 结尾的文件，这些文件是由软件的源代码包装而成的，用户要安装这类rpm软件包\nrpm　--recompile　vim-4.6-4.src.rpm  # 这个命令会把源代码解包并编译、安装它\nrpm　--rebuild　vim-4.6-4.src.rpm　# 在安装完成后，还会把编译生成的可执行文件重新包装成i386.rpm的rpm软件包\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n * 独立服务安装位置(一般)\n\n/etc/init.d/  # 启动脚本位置\n/etc/sysconfig/ # 初始化环境配置文件位置\n/etc/ # 配置文件位置\n/etc/xinetd.conf # xinetd配置文件\n/etc/xinetd.d/ # 基于xinetd服务的启动脚本\n/var/lib/ # 服务产生的数据放在这里\n/var/log/ # 日志文件\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 源码包服务\n\n * /usr/local/ 一般安装目录\n * 源码包安装绝对路径 start|stop|restart|status 开启服务 (推荐)\n * /etc/rc.local | /etc/rc.d/rc.local 开启自启动 (推荐)\n\n/usr/local/apache2/bin/apachectl start\n\n\n1\n\n * ln -s 源码包安装绝对路径 /etc/init.d/服务名 软连接使该服务支持 service 服务方式启动 (不推荐)\n\nln -s /usr/local/apache2/bin/apachectl /etc/init.d/apache3\nservice apache3 restart  启动apache3服务\n\n\n1\n2\n\n * 让源码包的 apache3 服务能被 chkconfig 与 ntsysv 命令管理自启动 (不推荐)\n\n# chkconfig:运行级别　启动顺序　关闭顺序\n# 启动顺序、关闭顺序:可以去"/etc/rc3.d/"查看,找没有的数字填写\nvi /etc/init.d/appache3\n  #chkconfig:35 86 76\n  #description:source package apache3\nchkconfig --add apche3\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 进程\n\n * ps aux 查看系统所有进程\n * ps -le 查看系统所有进程\n\n-a # 显示一个终端的所有进程,处理会话引线\n-u # 显示进程的归属用户及内存的使用情况\n-x # 显示没有控制终端的进程\n-l # 长格式显示 显示更加详细的信息\n-e # 显示所有进程,和-a作用一致\n\n\n1\n2\n3\n4\n5\n\n * pstree [选项] 进程树\n\n# 选项\n-p # 显示进程的pid\n-u # 显示进程的所属用户\n\n\n1\n2\n3\n\n * top 查看进程健康状态\n\n- p # 以cpu使用率排序\n- m # 以内存的使用率排序\n- n # 以pid排序\n- q # 退出top\n\n\n1\n2\n3\n4\n\n * kill(选项) 进程或作业识别号 杀死单一进程\n\n-l：# 列出所有信号名称\n-a：# 当处理当前进程时，不限制命令名和进程号的对应关系\n-p：# 指定kill 命令只打印相关进程的进程号，而不发送任何信号；\n-s <信息名称或编号>：# 指定要送出的信息\n-u：# 指定用户\n\n-hup    1     # 终端断线\n-int    2     # 中断（同 ctrl + c）\n-quit   3     # 退出（同 ctrl + \\）\n-term   15    # 终止\n-kill   9     # 强制终止\n-cont   18    # 继续（与stop相反， fg/bg命令）\n-stop   19    # 暂停（同 ctrl + z）\n\nps: kill -hup 进程号 | kill -1 进程号  # 重启进程\nps: kill -9 进程号  # 强制杀死进程\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n * killall [选项i/i] [信号] 进程号\n\n-e：# 对长名称进行精确匹配\n-l：# 忽略大小写的不同\n-p：# 杀死进程所属的进程组\n-i：# 交互式杀死进程，杀死进程前需要进行确认\n-l：# 打印所有已知信号列表\n-q：# 如果没有进程被杀死。则不输出任何信息\n-r：# 使用正规表达式匹配要杀死的进程名称\n-s：# 用指定的进程号代替默认信号“sigterm”\n-u：# 杀死指定用户的进程\n\ni ：# 交互式,询问是否要杀死进程\ni ：# 忽略进程名的大小写\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * pkill (选项) 进程名称\n\n-o：# 仅向找到的最小（起始）进程号发送信号\n-n：# 仅向找到的最大（结束）进程号发送信号\n-p：# 指定父进程号发送信号\n-g：# 指定进程组\n-t：# 指定开启进程的终端\n\npkill -9 -t pts/1\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 系统定时任务\n\n * at\n * cron\n * anacron\n * crontab\n\nyum install vixie-cron -y\nyum install crontab -y\ncrontab -l\n"no crontab for root -> crontab -e   -> wq "\nservice crond status\n\n`vim /etc/cron.deny`  # 系统定时循环任务\n`ls /etc/cron*`  # 系统定时任务\n\ncrontab [选项]\n- e # 编辑crontab定时任务\n- l # 查询crontab定时任务\n- r # 删除当前用户所有的crontab定时任务\n\ncrontab -e # 默认绑定当前用户权限的命令；\n# 即普通用户不能执行root用户权限，命令无效\n\n* * * * *\nm h d m w\n\n# 没有精确到秒,最小单位为分钟\nm -> 0-59  # 每小时的第几分钟\nh -> 0-23  # 每天的第几小时\nd -> 1-31  # 每月的第几天\nm -> 1-12  # 每年的第几月\nw -> 0,7-6 # 一周当中的星期几 (0,7 表示星期日)\n\n- * # 表示任何时候都匹配\n- a,b,c,d # 表示a或b或c或d时执行任务\n- 1-8 # 表示1到8连续时间段执行命令任务\n- */a # 表示每a分钟(小时|周|月)执行一次命令\n\n\n"crontab -e"   # 命令行执行\n"0 */2 * * *  执行命令(绝对路径)"  # vim编辑内容\n\nps: */5 * 1-5 * 2,3 date\n# d和w同时存在是 "或" 的关系\nps: 1-20/2 * * * * date\nps: 0 */2 * * * echo \'hello...\'\n\n\n# contab通过编辑配置文件添加定时任务\nvim /etc/crontab  # vim手动编辑配置文件添加定时循环任务\nls /etc/cron.*   # 将需要定时执行的脚本复制到任意一个目录下\n\n"0 */2 * * *  用户名  执行命令(绝对路径)"  # vim编辑内容\nps: 0 */2 * * * user1 echo \'hello...\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n\n\n\n# 基本权限\n\n * 文件类型( - 普通文件 | d 目录 | l 软连接文件 )\n * u 所有者 | g 所属组 | o 其他人\n * r-4 读 | w-2 写 | x-1 执行\n\nr : 读   # 对文件的查看.例：cat、more等;对目录下文件名的查看.例：ls\n\nw : 写  # 对文件的编辑,新增,修改数据的功能;但不能删除该文件本身.\n        # 修改目录结构的权限.例：删除该目录及目录下所有文件(rm、touch、mv、cp)\n\nx : 执行 # 对文件的可执行权限;可进入目录的权限.例：cd\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 新建用户\n\n * adduser xyz 创建用户\n\n * passwd xyz 修改密码\n\n * chown 用户:群组 文件/目录 对文件或目录赋予用户和用户组\n\n * usermod -c +用户备注+用户名 给用户名添加备注\n\n * usermod -l newusr oldusr 更改用户名\n\n * gpasswd -a 用户名 群组 将用户加入到用户组\n\n * useradd 用户名 创建用户\n\n * chown 用户名 文件名 修改所有者(u)\n\n * umask 查看 mask 权限\n\n * /etc/profile 修改使命令永久生效\n\n * useradd -g test1 yxz1 创建 yxz1 用户加入到 test1 用户组\n\n * useradd -d /home/ddd xyz 创建 xyz 用户并指定创建的 ddd 为 xyz 用户目录\n\n * usermod -g newgroup oldgroup 更改用户组\n\n * userdel 用户名 删除用户名\n\n * userdel -r 用户名 删除用户的同时用户目录也一并删除\n\n * touch /etc/nologin 禁用其他账户登录系统(root 除外)\n\n * passwd -l 用户名 锁定用户名\n\n * passwd -u 用户名 解决用户名锁定\n\n * passwd -d 用户名 清除用户名密码\n\n * gpasswd -a 用户名 用户组 添加用户名的副所属组\n\n * gpasswd -d 用户名 用户组 删除用户名的副所属组\n\n# 加入相应用户组群拥有权限\nsudo gpasswd -a xyz wheel  # 将xyz用户加入到wheel组\n\n# 查看用户群组\ngroups xyz  # 查看用户所属的群组\n\n# 用户群组\nsudo groupadd test # 创建test用户群组\n/etc/group\n\nsudo usermod -a -g test xyz  # 把xyz这个用户放到test这个群组里\ngroups xyz\nxyz test wheel\n\nsudo usermod -g test xyz   # 把 xyz 用户的主群组修改成 test组\ngroups xyz\ntest wheel\n\n# 移除用户组\nsudo gpasswd -d xyz wheel  # 把xyz用户移除wheel组\n\n# 删除用户：\nuserdel -r xyz  # 用于删除用户帐号及相关档案\nuserdel xyz\ngroupdel xyz\nusermod –g xyz xyz # 强制删除该用户的主目录和目录下的所有文件和子目录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 用户组\n\n * chgrp 群组 文件名 修改群组\n * groupadd 群组 创建用户组\n * groups + 用户名 用户名的所属组\n * gpasswd 用户组 设置用户组密码\n * newgrp 副所属组 切换副所属组\n * chown 用户:群组 文件/目录 对文件或目录赋予用户和用户组\n * useradd -g mgroup -g group1,group2 abc mgroup 主 -- group1 副\n * su + 用户名 切换用户\n * whoami 显示当期用户\n * id + 用户名 用户名资料\n * chfn + 用户名 设置用户名详细资料\n * finger + 用户名 显示用户名详细资料\n * 更改用户组名 groupmod -n + 新组名 + 组名 ps: groupmod -n test2 test1\n * 组编号 groupmod -g + 编号 + 组名 ps: groupmod -g 666 test2\n * groupadd -g 888 test3 创建组号 888 组名 test3\n * groupdel test1 删除用户组\n * /etc/shadow 存储当前系统中所有用户的密码信息\n * /etc/group 存储当前系统中所有用户组信息\n\n  group :       x         :  123   :  abc,def,xyz\n# 组名称:   组密码占位符      : 组编号  : 组中用户名列表\n\n\n1\n2\n\n * /etc/gshadow 存储当前系统中用户组的密码信息\n\n  group :   *    :          :  abc,def,xyz\n# 组名称: 组密码   : 组管理者   : 组中用户名列表\n\n\n1\n2\n\n * /etc/passwd 存储当前系统中用户的信息\n\n  user  :  x       :   123  :    456   :    xxxx    :/home/user:/bin/bash\n# 用户名 :密码占位符  :用户编号  :用户组编号  :用户注释信息  :用户组目录:shell类型\n\n\n1\n2\n\n\n\n# chown 修改文件与目录的所有权\n\n# chown 用户:群组 文件/目录\nchown xyz:czh test\nls -l\n\n# 修改某个目录以及它里面包含的所有的子目录的所有权\nchown -r 用户:群组 目录\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 文件权限(rwx)\n\n# 字母\nr:read（读取）\nw：write（写入）\nx：excute（执行）\n\n# 第一位：\n-(常规文件)、d(目录)、l(符号链接)、c(字符特殊设备)、b(模块特殊设备)、p(fifo)、s(套接字)\n\n# 用户列表：\n# 拥有者（owner），用户组（group），其它人（others）\n\ntouch a.txt\nls -l\n-rw-rw-r--\n\n# 数字表示的权限：\nr：4  # 读\nw：2  # 写\nx：1  # 执行\n\n\n# 例如：\n7：r + w + x # 表示所有权限\n6：r + w # 表示读取与写入权限\n4：r # 表示读取权限\n\n# 例：drwxrwxr-x\n# 第一位d表示目录\n# 从左到右每三个一组，依次表示所有者权限、组权限、其他用户权限\nd     # dir\nrwx   # 所有者拥有读、写、执行\nrwx   # 组权拥有读、写、执行\nrwx   # 其他拥有读、执行  (-表示没有)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# chmod 修改文件与目录的权限\n\n * chmod 选项 模式 文件名 修改文件权限\n\n# 选项 ：\n-r  # 递归\n\n# 模式 ：\nu+x | u-x | 755 | a=wrx\n\n\n1\n2\n3\n4\n5\n\n\n# chmod 权限 目录/文件\n\n# 数字：\n# 4 是读取，2 是写入，1 是执行\nchmod 755 目录\nchmod 644 文件\n\n# 字母：\nr 是读取，w 是写入，x 是执行\n\nu 表示拥有者，g 表示所属用户组，o 表示其它人，a 表示所有人\n\n# 配合使用 + 与 - 号，去添加或去掉权限\nchmod u+x 文件\nchmod g+w 目录\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n * acl 权限\n\n\n# sudo 权限命令\n\n * sudo -l 查看可用的 sudo 命令\n * vim /etc/sudoers 赋予用户权限命令\n\n  root      all         =   (all)       all\n# 用户名  被管理主机的地址 = (可使用的身份)  授权命令(绝对路径)\nuser1       all         = (all)         /sbin/shutdown -r now\n\nuser2 all=/usr/sbin/useradd\nuser2 all=/usr/bin/passwd [a-za-z]*, !/usr/bin/passwd "", !/usr/bin/passwd root\n\n%wheel        all       =   (all)       all\n# %组名  被管理主机的地址 = (可使用的身份)  授权命令(绝对路径)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * sudo /sbin/shutdown -r now 普通用户自行 sudo 赋予的命令\n\n\n# ip 常用网段\n\n# 网络类别 |            ip范围            | 主机数  | 私有内网ip范围\n    a     | 1.0.0.0 - 126.255.255.255   | 2^24-2 | 10.0.0.0 - 10.255.255.255\n    b     | 128.0.0.0 - 191.255.255.255 | 2^16-2 | 172.16.0.0 - 172.31.255.255\n    c     | 192.0.0.0 - 223.255.255.255 | 2^8-2  | 192.168.0.0- 192.168.255.255\n\n\n1\n2\n3\n4\n\n\n * ip address 查看 ip 地址\n\n * tcp/udp\n\n * netstat -an 查看端口\n\n * 常见端口号\n   \n   * ftp ： 文件传输 ： 20 21\n   * ssh ： 安全 shell 协议 ： 22\n   * telnet ： 远程登录协议 ： 23\n   * dns ： 域名系统 ： 53\n   * http ： 超文本传输协议 ： 80\n   * smtp ： 简单邮件传输协议 ： 25\n   * pop3 ： 邮局协议 3 代 ： 110\n\n * dns 域名与服务器 ip 进行转换\n\n * 默认网关 在内网中进行通信以及使内网 ip 与公网 ip 进行互相转换通信\n\n * 配置 linux 的 ip\n\n# virtualbox (桥接模式):\n\nvim /etc/sysconfig/network-scripts/ifcfg-eth0\nifcfg-eth0  # 对应的网卡名\n\n# 配置说明\n  device = "eth0"   # 对应网卡设备名\n  bootproto = "none"  # 是否自动获取ip (none/static/dhcp)\n  hwaddr = xxxx    # 对应的mac地址\n  userctl = "no"  # 不允许非root用户控制此网卡\n  onboot = "yes"    #  是否随网络服务启动\n  ipaddr = 192.168.1.102  # 本机的ip (勿于pc机冲突)\n  netmask = 255.255.255.0  # 子网掩码\n  gateway = 192.168.1.1   # 网关 (与pc机默认网关一致)\n  dns1 = 114.114.114.114  # dns\nservice network restart  # 重启网络服务\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 新建.sh 脚本\n\n * demo.sh\n\n#!/bin/bash;\n#上一句话不可省略!!!\n#this is a test program\necho \'hello\';\n\n\n1\n2\n3\n4\n\n\n\n# bash 变量\n\n * 变量可以是数字,下划线和字母; 但是不能以数字开头\n * 变量默认都是字符串类型\n\n\n# bash 执行方法\n\n# 执行方式1：\nbash demo.sh\n\n# 执行方式2：\nchmod +x demo.sh   # 附加执行权限\n./demo.bash        # 运行脚本\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# shell\n\n * $? 上一行命令是否正确\n * $# 输入参数有多少个\n * $* 输出所有输入的参数\n * $n $1 $2... 输入的参数\n\n\n# 环境变量\n\n * export 变量=赋值\n * set 显示系统中已经存在的 shell 变量\n * unset 删除变量\n * env\n * path\n * locale 语系变量\n * source source 配置文件 | . 配置文件 使配置文件直接生效\n * 登录系统时执行的命令文件\n\n/etc/profile\n/etc/profile.d/*.sh\n~/.bash_profile\n~/.bashrc\n/etc/bashrc\n\n\n1\n2\n3\n4\n5\n\n * 退出系统时执行的命令文件\n\n~/.bash_logout\n\n\n1\n\n * /etc/issue 本地显示登录信息\n * /etc/issue.net 远程终端显示登录信息\n\n# 加入 "banner /etc/issue.net" 行,重启ssh服务\n/etc/ssh/sshd_config\n\n\n1\n2\n\n * /etc/motd 登录后欢迎信息(支持本地和远程)\n\n\n# 其他\n\n * 释放网页缓存，目录项和索引\n\nsync; echo 3 > /proc/sys/vm/drop_caches\n\n\n1\n\n\n\n# 文件搜索\n\n * locate\n\n`locate + 文件名` # 查找`/var/lib/mlocate`中的数据,默认一天一更新\n\nupdatedb  # 用户更新/var/lib/mlocate数据\nyum install mlocate # 安装\n\n\n1\n2\n3\n4\n\n * whereis / which\n\nwhereis + 参数 + 查找系统命令\n-b  # 只查找可执行文件位置\n-m  # 只查找帮助文件\nwhereis ls\n\n\n1\n2\n3\n4\n\n * find\n\n`find + 搜索范围 + 搜索条件 + 搜索内容` # 搜索符合条件的文件\n\n# 搜索条件\n-i   # 不区分大小写\n-user # 用户\n-name # 名称\n-nouser\n-size  # 文件大小\nfind . -size +20k # 当前文件夹大于20k文件\nfind . -size -20k # 当前文件夹小于20k文件\n-atime  # 文件访问事件\nfind . -atime +10 # 10天前修改文件\nfind . -atime -10 # 10天内修改文件\nfind . -atime 10  # 10天当天内修改文件\n-ctime  # 改变文件属性\n-mtime  # 修改文件内容\n-inum   # i节点\n-a  # 逻辑与\n-o  # 逻辑或\n-exec # 对搜索结果进行处理\n\nfind /home -name "test.txt*"\nfind /home -size +20k -a -100k\nfind /home -size +20k -a -100k -exec ls -lh {} \\;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n * grep\n\n`grep + 参数 + 字符串 + 文件名` # 搜索文件中的符合内容的字符串\n\n-i # 忽略大小写\n-v # 排除指定字符串\n\ngrep -i \'size\' text.txt  # 查找text.txt中包含size的行\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# linux日期时间显示输出\n\n> https://www.cnblogs.com/xzlive/p/13368079.html\n\n * 1、输出当前年月日\n\necho $(date +%f)\n2014-02-21\n\n\n1\n2\n\n * 2、输出当前时间 (时分)\n\necho $(date +%r)\n12:45\n\n\n1\n2\n\n * 3、输出当前时间 (时分秒)\n\necho $(date +%t)\n12:52:51\n\n\n1\n2\n\n * 4、输出星期\n\necho $(date +%a)\n星期五\n\n\n1\n2\n\n * 5.1输出年月日\n\necho $(date +%y/%m/%d)\n2014/02/21\n%y参数: 年\n%m参数: 月\n%d参数: 日\n\n\n1\n2\n3\n4\n5\n\n * 5.2输出时分秒\n\necho $(date +%h:%m:%s)\n12:50:44\n%h参数: 时\n%m参数: 分\n%s参数: 秒\n\n\n1\n2\n3\n4\n5\n\n * 5.3输出年月日时分秒\n\necho $(date +%f%n%t)\n2014-02-21 12:56:46\n%n参数: 空格\n%f参数: 年月日\n%t参数: 时分秒\n\n\n1\n2\n3\n4\n5\n\n\n\n# 相关链接\n\n * linux 命令大全\n * linux rpm 命令参数使用详解［介绍和应用］\n * linux kill 命令详解\n * linux 软件安装管理\n * iptables 命令\n * iptables input 链使用实例说明\n * judasn/linux-tutorial\n * ping.pe',charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1647517837e3},{title:"meilisearch",frontmatter:{title:"meilisearch",date:"2021-11-01T00:00:00.000Z",sidebar:"auto",tags:["meilisearch","vuepress"],categories:["frontend"],readingShow:"top"},regularPath:"/services/tools/meilisearch.html",relativePath:"services/tools/meilisearch.md",key:"v-005e6c35",path:"/services/tools/meilisearch.html",headers:[{level:2,title:"github url",slug:"github-url",normalizedTitle:"github url",charIndex:2},{level:2,title:"Add a Search Bar to Your Docs",slug:"add-a-search-bar-to-your-docs",normalizedTitle:"add a search bar to your docs",charIndex:61},{level:2,title:"algolia search",slug:"algolia-search",normalizedTitle:"algolia search",charIndex:189},{level:2,title:"docs-scrape",slug:"docs-scrape",normalizedTitle:"docs-scrape",charIndex:347},{level:2,title:"docs-scraper.config.json",slug:"docs-scraper-config-json",normalizedTitle:"docs-scraper.config.json",charIndex:404},{level:2,title:"docSearch algolia",slug:"docsearch-algolia",normalizedTitle:"docsearch algolia",charIndex:3740}],headersStr:"github url Add a Search Bar to Your Docs algolia search docs-scrape docs-scraper.config.json docSearch algolia",content:'# github url\n\nhttps://github.com/meilisearch/MeiliSearch\n\n\n# Add a Search Bar to Your Docs\n\n * https://docs.meilisearch.com/create/how_to/search_bar_for_docs.html#scrape-your-content\n\n\n\n\n# algolia search\n\n * https://www.algolia.com/doc/tools/crawler/netlify-plugin/quick-start/\n * https://www.npmjs.com/package/@algolia/netlify-plugin-crawler\n\n\n# docs-scrape\n\n * meilisearch docs-scraper\n * docs-scraper/docs-scraper.config.json\n * https://github.com/meilisearch/MeiliSearch\n * https://github.com/algolia/docsearch-configs\n\n\n# docs-scraper.config.json\n\n{\n  "index_uid": "vuepress",\n  "sitemap_urls": ["https://guide.chenio.top/sitemap.xml"],\n  "start_urls": ["https://guide.chenio.top"],\n  "selectors": {\n    "lvl0": {\n      "selector": ".page-title h1",\n      "global": true,\n      "default_value": "Documentation"\n    },\n    "lvl1": ".theme-reco-content h1",\n    "lvl2": ".theme-reco-content h2",\n    "lvl3": ".theme-reco-content h3",\n    "lvl4": ".theme-reco-content h4",\n    "lvl5": ".theme-reco-content h5",\n    "text": ".theme-reco-content p, .theme-reco-content li, .theme-reco-content a"\n  },\n  "strip_chars": " .,;:#",\n  "scrap_start_urls": true,\n  "custom_settings": {\n    "synonyms": {\n      "relevancy": ["relevant", "relevance"],\n      "relevant": ["relevancy", "relevance"],\n      "relevance": ["relevancy", "relevant"]\n    },\n    "stopWords": ["i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself", "yourselves", "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself", "they", "them", "their", "theirs", "themselves", "what", "which", "who", "whom", "this", "that", "these", "those", "am", "is", "are", "was", "were", "be", "been", "being", "have", "has", "had", "having", "do", "does", "did", "doing", "a", "an", "the", "and", "but", "if", "or", "because", "as", "until", "while", "of", "at", "by", "for", "with", "about", "against", "between", "into", "through", "during", "before", "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off", "over", "under", "again", "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any", "both", "each", "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so", "than", "too", "very", "s", "t", "can", "will", "just", "don", "should", "now"]\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n * use custom selectors per page\n\n{\n  "start_urls": [\n    "http://www.example.com/docs/",\n    {\n      "url": "http://www.example.com/docs/concepts/",\n      "selectors_key": "concepts"\n    },\n    {\n      "url": "http://www.example.com/docs/contributors/",\n      "selectors_key": "contributors"\n    }\n  ],\n  "selectors": {\n    "default": {\n      "lvl0": ".main h1",\n      "lvl1": ".main h2",\n      "lvl2": ".main h3",\n      "lvl3": ".main h4",\n      "lvl4": ".main h5",\n      "text": ".main p"\n    },\n    "concepts": {\n      "lvl0": ".header h2",\n      "lvl1": ".main h1.title",\n      "lvl2": ".main h2.title",\n      "lvl3": ".main h3.title",\n      "lvl4": ".main h5.title",\n      "text": ".main p"\n    },\n    "contributors": {\n      "lvl0": ".main h1",\n      "lvl1": ".contributors .name",\n      "lvl2": ".contributors .title",\n      "text": ".contributors .description"\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n * https://github.com/meilisearch/docs-scraper\n\ndocker run -t --rm \\\n    -e MEILISEARCH_HOST_URL= \\\n    -e MEILISEARCH_API_KEY= \\\n    -v ${PWD}/docs/.vuepress/config/docs-scraper.config.json:/docs-scraper/config.json \\\n    getmeili/docs-scraper:latest pipenv run ./docs_scraper config.json\n\n\n1\n2\n3\n4\n5\n\n\n\n# docSearch algolia\n\n * https://docsearch.algolia.com/\n * run-your-own\n * https://www.bilibili.com/video/BV1vb411m7NY?p=20&t=26\n * https://github.com/darrenjennings/algolia-docsearch-action\n * vuepress\n\nalgolia:{\n    appId: \'xxx\',\n    apiKey: \'xxx\',\n    indexName: \'xxx\',\n    algoliaOptions:{\n        facetFilters: \'\'\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * github action yml\n\nname: Build and Deploy\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout 🛎️\n        uses: actions/checkout@v2.3.4\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: Get npm cache directory\n        id: npm-cache-dir\n        run: |\n          echo "::set-output name=dir::$(npm config get cache)"\n      - uses: actions/cache@v2\n        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != \'true\'\n        with:\n          path: ${{ steps.npm-cache-dir.outputs.dir }}\n          key: ${{ runner.os }}-node-${{ hashFiles(\'**/package-lock.json\') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Install and Build 🔧\n        run: |\n          npm install\n          npm run build\n\n      - name: Deploy 🚀\n        uses: JamesIves/github-pages-deploy-action@4.1.1\n        with:\n          token: ${{ secrets.ACCESS_TOKEN }}\n          branch: gh-pages # The branch the action should deploy to.\n          folder: dist # The folder the action should deploy.\n\n  scrape-docs:\n    needs: build-and-deploy\n    runs-on: ubuntu-18.04\n    steps:\n    - uses: actions/checkout@v2.3.4\n    - name: Run docs-scraper\n      env:\n        HOST_URL: ${{ secrets.MEILISEARCH_HOST_URL }}\n        API_KEY: ${{ secrets.MEILISEARCH_API_KEY }}\n        CONFIG_FILE_PATH: ${{ github.workspace }}/docs/.vuepress/docs-scraper/docs-scraper.config.json\n      run: |\n        docker run -t --rm \\\n          -e MEILISEARCH_HOST_URL=$HOST_URL \\\n          -e MEILISEARCH_API_KEY=$API_KEY \\\n          -v $CONFIG_FILE_PATH:/docs-scraper/config.json \\\n          getmeili/docs-scraper:v0.10.4 pipenv run ./docs_scraper config.json\n\n  algolia-docs:\n    needs: build-and-deploy\n    runs-on: ubuntu-18.04\n    steps:\n    - uses: actions/checkout@v2.3.4\n    - uses: darrenjennings/algolia-docsearch-action@v0.1.0\n      with:\n        algolia_application_id: ${{ secrets.ALGOLIA_APP_ID }}\n        algolia_api_key: ${{ secrets.ALGOLIA_API_KEY }}\n        file: docs/.vuepress/docs-scraper/docs-scraper.config.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\n * json\n\n{\n  "index_name": "vuepress",\n  "sitemap_urls": [\n    "https://guide.chenio.top/sitemap.xml"\n  ],\n  "start_urls": [\n    "https://guide.chenio.top"\n  ],\n  "selectors": {\n    "lvl0": {\n      "selector": "p.sidebar-heading.open",\n      "global": true,\n      "default_value": "Documentation"\n    },\n    "lvl1": ".page h1",\n    "lvl2": ".page h2",\n    "lvl3": ".page h3",\n    "lvl4": ".page h4",\n    "lvl5": ".page h5",\n    "text": ".page p, .page li, .page a",\n    "lang": {\n      "selector": "/html/@lang",\n      "type": "xpath",\n      "global": true,\n      "default_value": "en-US"\n    }\n  },\n  "selectors_exclude": [\n    ".table-of-contents"\n  ],\n  "strip_chars": " .,;:#",\n  "scrap_start_urls": false,\n  "custom_settings": {\n    "attributesForFaceting": [\n      "lang"\n    ]\n  },\n  "nb_hits": 7042\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n',normalizedContent:'# github url\n\nhttps://github.com/meilisearch/meilisearch\n\n\n# add a search bar to your docs\n\n * https://docs.meilisearch.com/create/how_to/search_bar_for_docs.html#scrape-your-content\n\n\n\n\n# algolia search\n\n * https://www.algolia.com/doc/tools/crawler/netlify-plugin/quick-start/\n * https://www.npmjs.com/package/@algolia/netlify-plugin-crawler\n\n\n# docs-scrape\n\n * meilisearch docs-scraper\n * docs-scraper/docs-scraper.config.json\n * https://github.com/meilisearch/meilisearch\n * https://github.com/algolia/docsearch-configs\n\n\n# docs-scraper.config.json\n\n{\n  "index_uid": "vuepress",\n  "sitemap_urls": ["https://guide.chenio.top/sitemap.xml"],\n  "start_urls": ["https://guide.chenio.top"],\n  "selectors": {\n    "lvl0": {\n      "selector": ".page-title h1",\n      "global": true,\n      "default_value": "documentation"\n    },\n    "lvl1": ".theme-reco-content h1",\n    "lvl2": ".theme-reco-content h2",\n    "lvl3": ".theme-reco-content h3",\n    "lvl4": ".theme-reco-content h4",\n    "lvl5": ".theme-reco-content h5",\n    "text": ".theme-reco-content p, .theme-reco-content li, .theme-reco-content a"\n  },\n  "strip_chars": " .,;:#",\n  "scrap_start_urls": true,\n  "custom_settings": {\n    "synonyms": {\n      "relevancy": ["relevant", "relevance"],\n      "relevant": ["relevancy", "relevance"],\n      "relevance": ["relevancy", "relevant"]\n    },\n    "stopwords": ["i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself", "yourselves", "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself", "they", "them", "their", "theirs", "themselves", "what", "which", "who", "whom", "this", "that", "these", "those", "am", "is", "are", "was", "were", "be", "been", "being", "have", "has", "had", "having", "do", "does", "did", "doing", "a", "an", "the", "and", "but", "if", "or", "because", "as", "until", "while", "of", "at", "by", "for", "with", "about", "against", "between", "into", "through", "during", "before", "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off", "over", "under", "again", "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any", "both", "each", "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so", "than", "too", "very", "s", "t", "can", "will", "just", "don", "should", "now"]\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n * use custom selectors per page\n\n{\n  "start_urls": [\n    "http://www.example.com/docs/",\n    {\n      "url": "http://www.example.com/docs/concepts/",\n      "selectors_key": "concepts"\n    },\n    {\n      "url": "http://www.example.com/docs/contributors/",\n      "selectors_key": "contributors"\n    }\n  ],\n  "selectors": {\n    "default": {\n      "lvl0": ".main h1",\n      "lvl1": ".main h2",\n      "lvl2": ".main h3",\n      "lvl3": ".main h4",\n      "lvl4": ".main h5",\n      "text": ".main p"\n    },\n    "concepts": {\n      "lvl0": ".header h2",\n      "lvl1": ".main h1.title",\n      "lvl2": ".main h2.title",\n      "lvl3": ".main h3.title",\n      "lvl4": ".main h5.title",\n      "text": ".main p"\n    },\n    "contributors": {\n      "lvl0": ".main h1",\n      "lvl1": ".contributors .name",\n      "lvl2": ".contributors .title",\n      "text": ".contributors .description"\n    }\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n * https://github.com/meilisearch/docs-scraper\n\ndocker run -t --rm \\\n    -e meilisearch_host_url= \\\n    -e meilisearch_api_key= \\\n    -v ${pwd}/docs/.vuepress/config/docs-scraper.config.json:/docs-scraper/config.json \\\n    getmeili/docs-scraper:latest pipenv run ./docs_scraper config.json\n\n\n1\n2\n3\n4\n5\n\n\n\n# docsearch algolia\n\n * https://docsearch.algolia.com/\n * run-your-own\n * https://www.bilibili.com/video/bv1vb411m7ny?p=20&t=26\n * https://github.com/darrenjennings/algolia-docsearch-action\n * vuepress\n\nalgolia:{\n    appid: \'xxx\',\n    apikey: \'xxx\',\n    indexname: \'xxx\',\n    algoliaoptions:{\n        facetfilters: \'\'\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * github action yml\n\nname: build and deploy\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: checkout 🛎️\n        uses: actions/checkout@v2.3.4\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: get npm cache directory\n        id: npm-cache-dir\n        run: |\n          echo "::set-output name=dir::$(npm config get cache)"\n      - uses: actions/cache@v2\n        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != \'true\'\n        with:\n          path: ${{ steps.npm-cache-dir.outputs.dir }}\n          key: ${{ runner.os }}-node-${{ hashfiles(\'**/package-lock.json\') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: install and build 🔧\n        run: |\n          npm install\n          npm run build\n\n      - name: deploy 🚀\n        uses: jamesives/github-pages-deploy-action@4.1.1\n        with:\n          token: ${{ secrets.access_token }}\n          branch: gh-pages # the branch the action should deploy to.\n          folder: dist # the folder the action should deploy.\n\n  scrape-docs:\n    needs: build-and-deploy\n    runs-on: ubuntu-18.04\n    steps:\n    - uses: actions/checkout@v2.3.4\n    - name: run docs-scraper\n      env:\n        host_url: ${{ secrets.meilisearch_host_url }}\n        api_key: ${{ secrets.meilisearch_api_key }}\n        config_file_path: ${{ github.workspace }}/docs/.vuepress/docs-scraper/docs-scraper.config.json\n      run: |\n        docker run -t --rm \\\n          -e meilisearch_host_url=$host_url \\\n          -e meilisearch_api_key=$api_key \\\n          -v $config_file_path:/docs-scraper/config.json \\\n          getmeili/docs-scraper:v0.10.4 pipenv run ./docs_scraper config.json\n\n  algolia-docs:\n    needs: build-and-deploy\n    runs-on: ubuntu-18.04\n    steps:\n    - uses: actions/checkout@v2.3.4\n    - uses: darrenjennings/algolia-docsearch-action@v0.1.0\n      with:\n        algolia_application_id: ${{ secrets.algolia_app_id }}\n        algolia_api_key: ${{ secrets.algolia_api_key }}\n        file: docs/.vuepress/docs-scraper/docs-scraper.config.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\n * json\n\n{\n  "index_name": "vuepress",\n  "sitemap_urls": [\n    "https://guide.chenio.top/sitemap.xml"\n  ],\n  "start_urls": [\n    "https://guide.chenio.top"\n  ],\n  "selectors": {\n    "lvl0": {\n      "selector": "p.sidebar-heading.open",\n      "global": true,\n      "default_value": "documentation"\n    },\n    "lvl1": ".page h1",\n    "lvl2": ".page h2",\n    "lvl3": ".page h3",\n    "lvl4": ".page h4",\n    "lvl5": ".page h5",\n    "text": ".page p, .page li, .page a",\n    "lang": {\n      "selector": "/html/@lang",\n      "type": "xpath",\n      "global": true,\n      "default_value": "en-us"\n    }\n  },\n  "selectors_exclude": [\n    ".table-of-contents"\n  ],\n  "strip_chars": " .,;:#",\n  "scrap_start_urls": false,\n  "custom_settings": {\n    "attributesforfaceting": [\n      "lang"\n    ]\n  },\n  "nb_hits": 7042\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n',charsets:{cjk:!0},lastUpdated:"2/3/2022",lastUpdatedTimestamp:1643899953e3,createdTime:1643899953e3},{title:"nginx安装使用",frontmatter:{title:"nginx安装使用",date:"2021-11-21T00:00:00.000Z",sidebar:"auto",tags:["nginx"],categories:["services"],readingShow:"top"},regularPath:"/services/tools/nginx.html",relativePath:"services/tools/nginx.md",key:"v-2e27bdad",path:"/services/tools/nginx.html",headers:[{level:2,title:"nginx",slug:"nginx",normalizedTitle:"nginx",charIndex:2},{level:2,title:"pcre",slug:"pcre",normalizedTitle:"pcre",charIndex:31},{level:2,title:"openssl",slug:"openssl",normalizedTitle:"openssl",charIndex:96},{level:2,title:"zlib",slug:"zlib",normalizedTitle:"zlib",charIndex:171},{level:2,title:"Compile Nginx",slug:"compile-nginx",normalizedTitle:"compile nginx",charIndex:232},{level:2,title:"Install Nginx",slug:"install-nginx",normalizedTitle:"install nginx",charIndex:402},{level:2,title:"Add the nginx binary to $PATH:",slug:"add-the-nginx-binary-to-path",normalizedTitle:"add the nginx binary to $path:",charIndex:452},{level:2,title:"Caddy 2",slug:"caddy-2",normalizedTitle:"caddy 2",charIndex:535},{level:2,title:"nginx结构",slug:"nginx结构",normalizedTitle:"nginx结构",charIndex:938},{level:2,title:"nginx config server",slug:"nginx-config-server",normalizedTitle:"nginx config server",charIndex:3266},{level:2,title:"nginx配置ssl",slug:"nginx配置ssl",normalizedTitle:"nginx配置ssl",charIndex:6026},{level:2,title:"nginx配置转发",slug:"nginx配置转发",normalizedTitle:"nginx配置转发",charIndex:7051},{level:2,title:"fileBrowser",slug:"filebrowser",normalizedTitle:"filebrowser",charIndex:8017},{level:2,title:"OneDrive Directory Index",slug:"onedrive-directory-index",normalizedTitle:"onedrive directory index",charIndex:8049}],headersStr:"nginx pcre openssl zlib Compile Nginx Install Nginx Add the nginx binary to $PATH: Caddy 2 nginx结构 nginx config server nginx配置ssl nginx配置转发 fileBrowser OneDrive Directory Index",content:"# nginx\n\nhttps://nginx.org\n\n\n# pcre\n\nhttp://www.pcre.org/\n\ntar xvzf pcre2-10.36.tar.gz\n\n\n1\n\n\n\n# openssl\n\nhttps://www.openssl.org/\n\ntar xvzf openssl-1.1.1j.tar.gz\n\n\n1\n\n\n\n# zlib\n\nhttp://zlib.net/\n\ntar zxvf zlib-1.2.11.tar.gz\n\n\n1\n\n\n\n# Compile Nginx\n\nsudo ./configure\n\n$ ./configure --with-pcre=../pcre2-10.36 --with-http_ssl_module --with-openssl=../openssl-1.1.1j --with-zlib=../zlib-1.2.11\n\n\n1\n2\n3\n\n\n\n# Install Nginx\n\nsudo make && make install\n\n\n1\n\n\n\n# Add the nginx binary to $PATH:\n\nexport PATH=\"/usr/local/nginx/sbin:$PATH\"\n\n\n1\n\n\n\n# Caddy 2\n\ncaddy Traefik\n\n * Caddyfile 配置域名\n\ndemo1.test.com {\n    root * /var/www/html\n    file_server\n}\n\n\n1\n2\n3\n4\n\n * Caddyfile reverse_proxy 代理\n\ndemo2.test.com {\n    reverse_proxy 127.0.0.1:8080\n}\n\n\n1\n2\n3\n\n * Caddyfile redir 重定向\n\ndemo3.test.com {\n    redir https://baidu.com\n}\n\n\n1\n2\n3\n\n * Caddyfile 泛域名\n\n*.test.com {\n    tls {\n        on_demand\n    }\n\n    redir https://baidu.com\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# nginx结构\n\n##定义Nginx运行的用户和用户组用user指令\nuser nginx;\n\n##定义nginx进程数,建议设置为等于CPU总核心数\nworker_processes  8;\n\n##全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]用error_log指令\nerror_log  /var/log/nginx/error.log info;\n\n##定义进程文件用pid指令\npid /var/run/nginx.pid;\n\n##描述nginx进程打开的最多文件描述符的数目\nworker_rlimit_nofile 65535;\n\n##Main段，定义全局属性\nevents {\n  ##定义不同IO模型下的工作机制\n  ##参考事件模型指令：use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];\n  use epoll;\n\n  ##设置单个进程最大连接数用指令：(最大连接数=连接数*进程数)\n  worker_connections 1024;\n\n}\nhttp {\n    ##定义作为web服务器的相关属性\n\n    ##设定mime类型,类型由mime.type文件定义 用include指令\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    ##开启gzip压缩指令\n    gzip on;\n    gzip_disable \"MSIE [1-6]\\.(?!.*SV1)\";\n\n    server {\n        ##定义一个虚拟主机的属性，所有web服务必须定义成一个虚拟主机，与httpd不同\n        ##侦听80端口\n        listen       80;\n\n        ##定义使用www.xx.com访问\n        server_name  www.xx.com;\n\n        ##设定本虚拟主机的访问日志\n        access_log  logs/www.xx.com.access.log  main;\n\n        ##定义服务器的默认网站根目录位置\n        root   /root;\n\n        ##默认请求\n        location / {\n\n            index index.php index.html index.htm;   ##定义首页索引文件的名称\n\n            fastcgi_pass  www.xx.com;\n\n            fastcgi_param  SCRIPT_FILENAME $document_root/$fastcgi_script_name;\n\n            include /etc/nginx/fastcgi_params;\n        }\n\n        ##定义错误提示页面\n        error_page   500 502 503 504 /50x.html;\n        location = /50x.html {\n          root   /root;\n        }\n\n        location / {\n          ##反向代理\n          ##proxy_pass请求转向指令\n          ##proxy_set_header允许重新定义或添加字段传递给代理服务器的请求头\n          proxy_set_header Host $host:$server_port;\n          proxy_set_header X-Real-IP $remote_addr;\n          proxy_set_header X-Real-PORT $remote_port;\n          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n          proxy_pass https://www.baidu.com;\n        }\n\n    }\n    upstream mysvr {\n      ##weigth参数表示权值，权值越高被分配到的几率越大\n      ##本机上的Squid开启3128端口\n        server 192.168.8.1:3128 weight=5;\n        server 192.168.8.2:80  weight=1;\n        server 192.168.8.3:80  weight=6;\n    }\n }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n\n\n\n# nginx config server\n\nserver {\n    listen 80;\n    server_name www.domain.cn;\n    rewrite ^(.*) https://$http_host$request_uri? permanent;\n}\n\n\nserver {\n    listen  443 ssl;\n    server_name  www.domain.cn;\n    root  /usr/local/nginx/wwwroot;\n\n    ssl on;\n\n    ssl_certificate /usr/local/nginx/ssl/fullchain.cer;\n    ssl_certificate_key /usr/local/nginx/ssl/domain_cn.key;\n\n    keepalive_timeout   70;\n    fastcgi_param   HTTPS               on;\n    fastcgi_param   HTTP_SCHEME         https;\n    server_tokens off;\n\n\n    location / {\n        index  index.html index.htm;\n    }\n    # 开启文件夹访问\n    location /note {\n        autoindex on;\n        autoindex_exact_size off;\n        autoindex_localtime on;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n * 静态文件下载\n\nlocation /test {\n   add_header Content-Disposition \"attachment;\";\n}\n\n\n1\n2\n3\n\n * server\n\nserver {\n    listen  80;\n    server_name  api.domain.cn;\n    root  /usr/local/nginx/wwwroot/api;\n    location / {\n        index  index.html index.htm;\n    }\n    location /note {\n        autoindex on;\n        autoindex_exact_size off;\n        autoindex_localtime on;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * upstream\n\nupstream getImg {\n    server 127.0.0.1:3000;\n}\n\nmap $http_origin $corsHost {\n    default 0;\n    \"~http://www.domain.cn\" http://www.domain.cn;\n    \"~http://blog.domain.cn\" http://blog.domain.cn;\n    \"~http://www.domain.top\" http://www.domain.top;\n}\n\nserver {\n    listen  80;\n    server_name  api.domain.cn;\n    location / {\n        if ($request_method = \"OPTIONS\") {\n            add_header 'Access-Control-Max-Age' 86400;\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE';\n            add_header 'Access-Control-Allow-Headers' 'reqid, nid, host, x-real-ip, x-forwarded-ip, event-type, event-id, accept, content-type';\n            add_header 'Content-Length' 0;\n            add_header 'Content-Type' 'text/plain, charset=utf-8';\n            return 204;\n        }\n        add_header 'Access-Control-Allow-Origin' $corsHost;\n        add_header 'Access-Control-Allow-Credentials' 'true';\n        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Requested-With';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS, DELETE';\n\n\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Nginx-Proxy true;\n        proxy_pass http://getImg;\n        proxy_redirect off;\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n# nginx配置ssl\n\n * https://github.com/jc21/nginx-proxy-manager\n * https://freessl.org\n * https://certbot.eff.org/\n * Neilpang/acme.sh\n\nserver {\n    listen 80;\n    server_name  www.domain.cn domain.cn;\n    rewrite ^(.*) https://$http_host$request_uri? permanent;\n}\n\nserver {\n    listen  443 ssl;\n    server_name  www.domain.cn domain.cn;\n\n    root  /usr/share/nginx/html;\n\n    error_page 404 /404/404.html;\n\n    # ssl on;\n    ssl_certificate /etc/nginx/ssl/fullchain.cer;\n    ssl_certificate_key /etc/nginx/ssl/domain.cn.key;\n\n    keepalive_timeout   70;\n    fastcgi_param   HTTPS               on;\n    fastcgi_param   HTTP_SCHEME         https;\n\n    server_tokens off;\n\n    location / {\n        index  index.html index.htm;\n    }\n\n    location /xxx {\n        autoindex on;\n        autoindex_exact_size off;\n        autoindex_localtime on;\n    }\n\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n# nginx配置转发\n\n * 前端页面转发，www.domain.com/page/mall/about,根据page转发到前端upstream，upstream由mall决定，转发到mall.example.com，前端处理路由about\n\n# www.domain.com/page/mall/about -> mall.example.com/about\n\nlocation ~ ^/page/([a-z]*)/(.*)$ {\n  set $a $1;\n  set $b $2;\n  set $upstream $a.domain.com;\n  proxy_pass http://$upstream/$b$is_args$args;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 后端接口转发，www.domain.com/api/mall/app/home/xx,根据api转发到后端upstream，upstream由mall决定，转发到mall.example.com，后端处理路由/app/home/xx\n\n# www.domain.com/api/mall/app/home/sift -> mall.example.com/app/home/sift\n\nlocation ~ ^/api/([a-z]*)/(.*)$ {\n    set $a $1;\n    set $b $2;\n    set $upstream $a.domain.com;\n    proxy_pass http://$upstream/$b$is_args$args;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 主站首页转发，mall.domain.com\n\nlocation = / {\n  set $upstream mall.domain.com;\n  proxy_pass http://$upstream;\n}\n\n\n1\n2\n3\n4\n\n * 404页面, mall.domain.com/notfound\n\nlocation / {\n    set $upstream mall.domain.com;\n    proxy_pass http://$upstream/notfound;\n}\n\n\n1\n2\n3\n4\n\n\n\n# fileBrowser\n\n * fileBrowser\n\n\n# OneDrive Directory Index\n\n * olaindex",normalizedContent:"# nginx\n\nhttps://nginx.org\n\n\n# pcre\n\nhttp://www.pcre.org/\n\ntar xvzf pcre2-10.36.tar.gz\n\n\n1\n\n\n\n# openssl\n\nhttps://www.openssl.org/\n\ntar xvzf openssl-1.1.1j.tar.gz\n\n\n1\n\n\n\n# zlib\n\nhttp://zlib.net/\n\ntar zxvf zlib-1.2.11.tar.gz\n\n\n1\n\n\n\n# compile nginx\n\nsudo ./configure\n\n$ ./configure --with-pcre=../pcre2-10.36 --with-http_ssl_module --with-openssl=../openssl-1.1.1j --with-zlib=../zlib-1.2.11\n\n\n1\n2\n3\n\n\n\n# install nginx\n\nsudo make && make install\n\n\n1\n\n\n\n# add the nginx binary to $path:\n\nexport path=\"/usr/local/nginx/sbin:$path\"\n\n\n1\n\n\n\n# caddy 2\n\ncaddy traefik\n\n * caddyfile 配置域名\n\ndemo1.test.com {\n    root * /var/www/html\n    file_server\n}\n\n\n1\n2\n3\n4\n\n * caddyfile reverse_proxy 代理\n\ndemo2.test.com {\n    reverse_proxy 127.0.0.1:8080\n}\n\n\n1\n2\n3\n\n * caddyfile redir 重定向\n\ndemo3.test.com {\n    redir https://baidu.com\n}\n\n\n1\n2\n3\n\n * caddyfile 泛域名\n\n*.test.com {\n    tls {\n        on_demand\n    }\n\n    redir https://baidu.com\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# nginx结构\n\n##定义nginx运行的用户和用户组用user指令\nuser nginx;\n\n##定义nginx进程数,建议设置为等于cpu总核心数\nworker_processes  8;\n\n##全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]用error_log指令\nerror_log  /var/log/nginx/error.log info;\n\n##定义进程文件用pid指令\npid /var/run/nginx.pid;\n\n##描述nginx进程打开的最多文件描述符的数目\nworker_rlimit_nofile 65535;\n\n##main段，定义全局属性\nevents {\n  ##定义不同io模型下的工作机制\n  ##参考事件模型指令：use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];\n  use epoll;\n\n  ##设置单个进程最大连接数用指令：(最大连接数=连接数*进程数)\n  worker_connections 1024;\n\n}\nhttp {\n    ##定义作为web服务器的相关属性\n\n    ##设定mime类型,类型由mime.type文件定义 用include指令\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    ##开启gzip压缩指令\n    gzip on;\n    gzip_disable \"msie [1-6]\\.(?!.*sv1)\";\n\n    server {\n        ##定义一个虚拟主机的属性，所有web服务必须定义成一个虚拟主机，与httpd不同\n        ##侦听80端口\n        listen       80;\n\n        ##定义使用www.xx.com访问\n        server_name  www.xx.com;\n\n        ##设定本虚拟主机的访问日志\n        access_log  logs/www.xx.com.access.log  main;\n\n        ##定义服务器的默认网站根目录位置\n        root   /root;\n\n        ##默认请求\n        location / {\n\n            index index.php index.html index.htm;   ##定义首页索引文件的名称\n\n            fastcgi_pass  www.xx.com;\n\n            fastcgi_param  script_filename $document_root/$fastcgi_script_name;\n\n            include /etc/nginx/fastcgi_params;\n        }\n\n        ##定义错误提示页面\n        error_page   500 502 503 504 /50x.html;\n        location = /50x.html {\n          root   /root;\n        }\n\n        location / {\n          ##反向代理\n          ##proxy_pass请求转向指令\n          ##proxy_set_header允许重新定义或添加字段传递给代理服务器的请求头\n          proxy_set_header host $host:$server_port;\n          proxy_set_header x-real-ip $remote_addr;\n          proxy_set_header x-real-port $remote_port;\n          proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;\n          proxy_pass https://www.baidu.com;\n        }\n\n    }\n    upstream mysvr {\n      ##weigth参数表示权值，权值越高被分配到的几率越大\n      ##本机上的squid开启3128端口\n        server 192.168.8.1:3128 weight=5;\n        server 192.168.8.2:80  weight=1;\n        server 192.168.8.3:80  weight=6;\n    }\n }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n\n\n\n# nginx config server\n\nserver {\n    listen 80;\n    server_name www.domain.cn;\n    rewrite ^(.*) https://$http_host$request_uri? permanent;\n}\n\n\nserver {\n    listen  443 ssl;\n    server_name  www.domain.cn;\n    root  /usr/local/nginx/wwwroot;\n\n    ssl on;\n\n    ssl_certificate /usr/local/nginx/ssl/fullchain.cer;\n    ssl_certificate_key /usr/local/nginx/ssl/domain_cn.key;\n\n    keepalive_timeout   70;\n    fastcgi_param   https               on;\n    fastcgi_param   http_scheme         https;\n    server_tokens off;\n\n\n    location / {\n        index  index.html index.htm;\n    }\n    # 开启文件夹访问\n    location /note {\n        autoindex on;\n        autoindex_exact_size off;\n        autoindex_localtime on;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n * 静态文件下载\n\nlocation /test {\n   add_header content-disposition \"attachment;\";\n}\n\n\n1\n2\n3\n\n * server\n\nserver {\n    listen  80;\n    server_name  api.domain.cn;\n    root  /usr/local/nginx/wwwroot/api;\n    location / {\n        index  index.html index.htm;\n    }\n    location /note {\n        autoindex on;\n        autoindex_exact_size off;\n        autoindex_localtime on;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * upstream\n\nupstream getimg {\n    server 127.0.0.1:3000;\n}\n\nmap $http_origin $corshost {\n    default 0;\n    \"~http://www.domain.cn\" http://www.domain.cn;\n    \"~http://blog.domain.cn\" http://blog.domain.cn;\n    \"~http://www.domain.top\" http://www.domain.top;\n}\n\nserver {\n    listen  80;\n    server_name  api.domain.cn;\n    location / {\n        if ($request_method = \"options\") {\n            add_header 'access-control-max-age' 86400;\n            add_header 'access-control-allow-methods' 'get, post, options, delete';\n            add_header 'access-control-allow-headers' 'reqid, nid, host, x-real-ip, x-forwarded-ip, event-type, event-id, accept, content-type';\n            add_header 'content-length' 0;\n            add_header 'content-type' 'text/plain, charset=utf-8';\n            return 204;\n        }\n        add_header 'access-control-allow-origin' $corshost;\n        add_header 'access-control-allow-credentials' 'true';\n        add_header 'access-control-allow-headers' 'authorization,content-type,accept,origin,user-agent,dnt,cache-control,x-mx-reqtoken,x-requested-with';\n        add_header 'access-control-allow-methods' 'get, post, put, options, delete';\n\n\n        proxy_set_header x-real-ip $remote_addr;\n        proxy_set_header x-forward-for $proxy_add_x_forwarded_for;\n        proxy_set_header host $http_host;\n        proxy_set_header x-nginx-proxy true;\n        proxy_pass http://getimg;\n        proxy_redirect off;\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n# nginx配置ssl\n\n * https://github.com/jc21/nginx-proxy-manager\n * https://freessl.org\n * https://certbot.eff.org/\n * neilpang/acme.sh\n\nserver {\n    listen 80;\n    server_name  www.domain.cn domain.cn;\n    rewrite ^(.*) https://$http_host$request_uri? permanent;\n}\n\nserver {\n    listen  443 ssl;\n    server_name  www.domain.cn domain.cn;\n\n    root  /usr/share/nginx/html;\n\n    error_page 404 /404/404.html;\n\n    # ssl on;\n    ssl_certificate /etc/nginx/ssl/fullchain.cer;\n    ssl_certificate_key /etc/nginx/ssl/domain.cn.key;\n\n    keepalive_timeout   70;\n    fastcgi_param   https               on;\n    fastcgi_param   http_scheme         https;\n\n    server_tokens off;\n\n    location / {\n        index  index.html index.htm;\n    }\n\n    location /xxx {\n        autoindex on;\n        autoindex_exact_size off;\n        autoindex_localtime on;\n    }\n\n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n# nginx配置转发\n\n * 前端页面转发，www.domain.com/page/mall/about,根据page转发到前端upstream，upstream由mall决定，转发到mall.example.com，前端处理路由about\n\n# www.domain.com/page/mall/about -> mall.example.com/about\n\nlocation ~ ^/page/([a-z]*)/(.*)$ {\n  set $a $1;\n  set $b $2;\n  set $upstream $a.domain.com;\n  proxy_pass http://$upstream/$b$is_args$args;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 后端接口转发，www.domain.com/api/mall/app/home/xx,根据api转发到后端upstream，upstream由mall决定，转发到mall.example.com，后端处理路由/app/home/xx\n\n# www.domain.com/api/mall/app/home/sift -> mall.example.com/app/home/sift\n\nlocation ~ ^/api/([a-z]*)/(.*)$ {\n    set $a $1;\n    set $b $2;\n    set $upstream $a.domain.com;\n    proxy_pass http://$upstream/$b$is_args$args;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * 主站首页转发，mall.domain.com\n\nlocation = / {\n  set $upstream mall.domain.com;\n  proxy_pass http://$upstream;\n}\n\n\n1\n2\n3\n4\n\n * 404页面, mall.domain.com/notfound\n\nlocation / {\n    set $upstream mall.domain.com;\n    proxy_pass http://$upstream/notfound;\n}\n\n\n1\n2\n3\n4\n\n\n\n# filebrowser\n\n * filebrowser\n\n\n# onedrive directory index\n\n * olaindex",charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1647517837e3},{title:"node.js的记录",frontmatter:{title:"node.js的记录",date:"2020-07-21T00:00:00.000Z",sidebar:"auto",tags:["node.js"],categories:["frontend"],readingShow:"top"},regularPath:"/services/tools/nodejs.html",relativePath:"services/tools/nodejs.md",key:"v-3b86fbaa",path:"/services/tools/nodejs.html",headers:[{level:2,title:"nodejs",slug:"nodejs",normalizedTitle:"nodejs",charIndex:2},{level:2,title:"Node Package Manager",slug:"node-package-manager",normalizedTitle:"node package manager",charIndex:183},{level:2,title:"nvm",slug:"nvm",normalizedTitle:"nvm",charIndex:370},{level:3,title:"mac中nvm自动切换node版本",slug:"mac中nvm自动切换node版本",normalizedTitle:"mac中nvm自动切换node版本",charIndex:685},{level:2,title:"nrm",slug:"nrm",normalizedTitle:"nrm",charIndex:1530},{level:2,title:"npm",slug:"npm",normalizedTitle:"npm",charIndex:209},{level:2,title:"yarn",slug:"yarn",normalizedTitle:"yarn",charIndex:238},{level:2,title:"私有的 npm 仓库",slug:"私有的-npm-仓库",normalizedTitle:"私有的 npm 仓库",charIndex:2126},{level:2,title:"常见许可证",slug:"常见许可证",normalizedTitle:"常见许可证",charIndex:2169},{level:3,title:"宽松式",slug:"宽松式",normalizedTitle:"宽松式",charIndex:2179},{level:3,title:"Copyleft",slug:"copyleft",normalizedTitle:"copyleft",charIndex:2406},{level:2,title:"express",slug:"express",normalizedTitle:"express",charIndex:2612},{level:2,title:"Set Nodejs Process Env",slug:"set-nodejs-process-env",normalizedTitle:"set nodejs process env",charIndex:3335},{level:2,title:"nodejs requre.resolve",slug:"nodejs-requre-resolve",normalizedTitle:"nodejs requre.resolve",charIndex:3437},{level:2,title:"npm package",slug:"npm-package",normalizedTitle:"npm package",charIndex:4190},{level:2,title:"ORM : Object Relational Mapping",slug:"orm-object-relational-mapping",normalizedTitle:"orm : object relational mapping",charIndex:5188},{level:2,title:"version版本号说明",slug:"version版本号说明",normalizedTitle:"version版本号说明",charIndex:5420},{level:2,title:"管理package版本",slug:"管理package版本",normalizedTitle:"管理package版本",charIndex:5550},{level:3,title:"发布说明",slug:"发布说明",normalizedTitle:"发布说明",charIndex:5566},{level:3,title:"本地调试",slug:"本地调试",normalizedTitle:"本地调试",charIndex:6116},{level:2,title:"npm version",slug:"npm-version",normalizedTitle:"npm version",charIndex:6193},{level:2,title:"相关链接",slug:"相关链接",normalizedTitle:"相关链接",charIndex:6331}],headersStr:"nodejs Node Package Manager nvm mac中nvm自动切换node版本 nrm npm yarn 私有的 npm 仓库 常见许可证 宽松式 Copyleft express Set Nodejs Process Env nodejs requre.resolve npm package ORM : Object Relational Mapping version版本号说明 管理package版本 发布说明 本地调试 npm version 相关链接",content:'# nodejs\n\n * Node.js是一个在浏览器之外可以解析和执行JavaScript代码的运行时环境\n\na) Node.js基于哪个JavaScript引擎？\n   Chrome 的 V8引擎\nb) 谁创建了Node.js？\n   Ryan Dahl\nc) Node.js的特性是什么？\n   事件驱动、非阻塞IO模型\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# Node Package Manager\n\n * pnpm : https://pnpm.io/zh/\n * yarn : https://yarnpkg.com/\n * npm: https://docs.npmjs.com/\n * npm.io: https://npm.io/\n * leran: https://github.com/lerna/lerna\n\n\n# nvm\n\n * Node version Manager 这是一个Node.js的版本管理工具\n * creationix@nvm\n * coreybutler@nvm-windows\n * 安装一个指定版本 nvm install node_version\n * 使用一个指定版本 nvm use node_version\n * 指定默认版本 nvm alias default node_version\n * 卸载一个已安装的指定版本 nvm uninstall version\n * 查看 npm 全局安装包 npm list -g --depth=0\n * nvm（Node.js version manage）\n\n\n# mac中nvm自动切换node版本\n\n> zsh安装：https://ohmyz.sh/ ; nvm安装：https://github.com/nvm-sh/nvm\n\n * step1: 进入项目根目录：运行 node -v > .nvmrc\n\n * step2: 编辑.zshrc最后加入(前提是安装zsh)\n\n# place this after nvm initialization!\nautoload -U add-zsh-hook\nload-nvmrc() {\n  local node_version="$(nvm version)"\n  local nvmrc_path="$(nvm_find_nvmrc)"\n​\n  if [ -n "$nvmrc_path" ]; then\n    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")\n​\n    if [ "$nvmrc_node_version" = "N/A" ]; then\n      nvm install\n    elif [ "$nvmrc_node_version" != "$node_version" ]; then\n      nvm use\n    fi\n  elif [ "$node_version" != "$(nvm version default)" ]; then\n    echo "Reverting to nvm default version"\n    nvm use default\n  fi\n}\nadd-zsh-hook chpwd load-nvmrc\nload-nvmrc\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n * step3: 命令行运行\n\nsource ~/.zshrc  # 不报错即可\n\n\n1\n\n\n\n# nrm\n\n * 全局安装 npm install nrm -g\n * 查看 mirror 源 nrm ls\n * 使用 mirror 源 nrm use mirror_name\n * 添加源 nrm add mirror_name http://npm-registry.example.me\n\n\n# npm\n\n * npmjs\n\n * npm 淘宝国内镜像\n\n * mac 上管理不同 node 版本\n\n * shields.io 徽章\n\n * packagephobia\n\n * config\n\nnpm config set prefix "C:\\dev\\nvm\\npm"\nnpm config set python python2.7\nnpm config set registry " https://registry.npm.taobao.org "\nnpm install phantomjs-prebuilt@2.1.14 --save-dev  --ignore-scripts\n\n\n1\n2\n3\n4\n\n * publish\n\nnpm login / npm adduser  # 登录npm账号\nnpm publish --access=public # 发布一个公开的package\n\n\n1\n2\n\n\n\n# yarn\n\n * yarn\n * yarn bootcss\n\n\n# 私有的 npm 仓库\n\n * cnpmjs.org\n * verdaccio\n\n\n# 常见许可证\n\n\n# 宽松式\n\n * BSD 2-Clause Licence 分发软件时，必须保留原始的许可证声明\n * BSD 3-Clause Licence 分发软件时，必须保留原始的许可证声明。不得使用原始作者的名字为软件促销\n * MIT 分发软件时，必须保留原始的许可证声明，与 BSD（二条款版）基本一致\n * Apache 2 分发软件时，必须保留原始的许可证声明。凡是修改过的文件，必须向用户说明该文件修改过；没有修改过的文件，必须保持许可证不变\n\n\n# Copyleft\n\n * Affero GPL (AGPL): 如果云服务（即 SAAS）用到的代码是该许可证，那么云服务的代码也必须开源\n * GPL: 如果项目包含了 GPL 许可证的代码，那么整个项目都必须使用 GPL 许可证\n * LGPL: 如果项目采用动态链接调用该许可证的库，项目可以不用开源\n * Mozilla（MPL）: 只要该许可证的代码在单独的文件中，新增的其他文件可以不用开源\n\n\n# express\n\n * express cors\n\n/**\n *  处理跨域请求，有点重要喔\n *  如果不涉及跨域，请忽略\n **/\napp.all("*", function(req, res, next) {\n  res.header("Access-Control-Allow-Origin", req.headers.origin);\n  res.header("Access-Control-Allow-Credentials", true);\n  res.header(\n    "Access-Control-Allow-Headers",\n    "Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-with, X_Requested_With"\n  );\n  res.header("Access-Control-Allow-Methods", "PUT, POST, GET, DELETE, OPTIONS");\n  res.header("X-Powered-By", "3.2.1");\n  res.header("Content-Type", "application/json; charset=utf-8");\n\n  if (req.method === "OPTIONS") {\n    res.end("options ok");\n  } else {\n    next();\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# Set Nodejs Process Env\n\n * mac： export VUE_APP_USE_MOCK=true\n * window: set VUE_APP_USE_MOCK=true\n\n\n# nodejs requre.resolve\n\n> https://juejin.cn/post/7020607552190677000\n\n * 获取 package 的绝对路径\n\nnew ModuleFederationPlugin({\n  name: \'app1\'\n  exposes: {\n    \'./react\': require.resolve(\'react\'),\n    \'./react-dom\': require.resolve(\'react-dom\'),\n  },\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * enhanced-resolve\n\nimport { CachedInputFileSystem, ResolverFactory } from \'enhanced-resolve\';\nimport * as fs from \'fs\';\n\nconst myResolver = ResolverFactory.createResolver({\n  fileSystem: new CachedInputFileSystem(fs, 4000),\n  conditionNames: [\'node\'],\n  extensions: [\'.js\', \'.json\', \'.node\'],\n  useSyncFileSystemCalls: true,\n  mainFields: [\'esm\', \'module\', \'main\'],\n});\n\n// 获取 antd 包入口路径，优先 esm，兜底 cjs\nmyResolver.resolveSync({}, process.cwd(), "antd")\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# npm package\n\n * shelljs https://github.com/shelljs/shelljs\n * rimraf https://github.com/isaacs/rimraf\n * nodemon https://github.com/remy/nodemon\n * chokidar https://github.com/paulmillr/chokidar\n * zx https://github.com/google/zx\n * cross-env https://github.com/kentcdodds/cross-env\n * wait-on https://github.com/jeffbski/wait-on\n * concurrently https://github.com/open-cli-tools/concurrently\n * npm run all https://www.npmjs.com/package/npm-run-all\n * rollup esbuild swc webpack parcel vite microbundle\n * api-extractor https://www.npmjs.com/package/@microsoft/api-extractor\n * rrweb https://github.com/rrweb-io/rrweb\n * web-vitals https://github.com/GoogleChrome/web-vitals\n * path-to-regexp https://github.com/pillarjs/path-to-regexp\n * localforage https://github.com/localForage/localForage\n * file-type https://github.com/sindresorhus/file-type\n * uppy https://github.com/transloadit/uppy\n * async-validator https://github.com/yiminghe/async-validator\n * ncc https://github.com/vercel/ncc\n\n\n# ORM : Object Relational Mapping\n\n * sqlite3: https://github.com/sqlite/sqlite\n * bookshelf: https://github.com/bookshelf/bookshelf\n * sequelize: https://github.com/sequelize/sequelize\n * prisma: https://github.com/prisma/prisma\n\n\n# version版本号说明\n\n * Alpha：第一个测试版本，还不稳定\n * Beta：特性稳定了，但还有bug\n * RC(Release Candidate)：除非有重大bug，否则这就是会成为正式版的Beta\n * Release：正式发布版本\n\n\n# 管理package版本\n\n\n# 发布说明\n\n * 1.使用standard-version控制发布版本\n\n// package.json\n"scripts": {\n  "publish:release": "standard-version",\n  "publish:minor": "standard-version --release-as minor",\n  "publish:major": "standard-version --release-as major",\n  "publish:beta": "standard-version --prerelease beta"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 2.推送tag与commit到远程仓库\n\ngit push --follow-tags origin master\n\n\n1\n\n * 3.npm发布包\n\n# 使用nvm切换源\nhttps://npm.xesv5.com/\n\n# 登录\nnpm login\n\n# 发布对应的版本: https://docs.npmjs.com/cli/v8/commands/npm-publish\nnpm publish [--tag <beta|latest|...>]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 本地调试\n\n * 方式一：<推荐> 使用 yalc: https://github.com/wclr/yalc\n\n * 方式二：npm link\n\n\n# npm version\n\n * npm version[https://docs.npmjs.com/cli/v8/configuring-npm/package-json#dependencies]\n * 使用 npm 的语义版本控制\n * node-semver\n\n\n# 相关链接\n\n * 开源许可证\n * Sequelize mysql',normalizedContent:'# nodejs\n\n * node.js是一个在浏览器之外可以解析和执行javascript代码的运行时环境\n\na) node.js基于哪个javascript引擎？\n   chrome 的 v8引擎\nb) 谁创建了node.js？\n   ryan dahl\nc) node.js的特性是什么？\n   事件驱动、非阻塞io模型\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# node package manager\n\n * pnpm : https://pnpm.io/zh/\n * yarn : https://yarnpkg.com/\n * npm: https://docs.npmjs.com/\n * npm.io: https://npm.io/\n * leran: https://github.com/lerna/lerna\n\n\n# nvm\n\n * node version manager 这是一个node.js的版本管理工具\n * creationix@nvm\n * coreybutler@nvm-windows\n * 安装一个指定版本 nvm install node_version\n * 使用一个指定版本 nvm use node_version\n * 指定默认版本 nvm alias default node_version\n * 卸载一个已安装的指定版本 nvm uninstall version\n * 查看 npm 全局安装包 npm list -g --depth=0\n * nvm（node.js version manage）\n\n\n# mac中nvm自动切换node版本\n\n> zsh安装：https://ohmyz.sh/ ; nvm安装：https://github.com/nvm-sh/nvm\n\n * step1: 进入项目根目录：运行 node -v > .nvmrc\n\n * step2: 编辑.zshrc最后加入(前提是安装zsh)\n\n# place this after nvm initialization!\nautoload -u add-zsh-hook\nload-nvmrc() {\n  local node_version="$(nvm version)"\n  local nvmrc_path="$(nvm_find_nvmrc)"\n​\n  if [ -n "$nvmrc_path" ]; then\n    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")\n​\n    if [ "$nvmrc_node_version" = "n/a" ]; then\n      nvm install\n    elif [ "$nvmrc_node_version" != "$node_version" ]; then\n      nvm use\n    fi\n  elif [ "$node_version" != "$(nvm version default)" ]; then\n    echo "reverting to nvm default version"\n    nvm use default\n  fi\n}\nadd-zsh-hook chpwd load-nvmrc\nload-nvmrc\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n * step3: 命令行运行\n\nsource ~/.zshrc  # 不报错即可\n\n\n1\n\n\n\n# nrm\n\n * 全局安装 npm install nrm -g\n * 查看 mirror 源 nrm ls\n * 使用 mirror 源 nrm use mirror_name\n * 添加源 nrm add mirror_name http://npm-registry.example.me\n\n\n# npm\n\n * npmjs\n\n * npm 淘宝国内镜像\n\n * mac 上管理不同 node 版本\n\n * shields.io 徽章\n\n * packagephobia\n\n * config\n\nnpm config set prefix "c:\\dev\\nvm\\npm"\nnpm config set python python2.7\nnpm config set registry " https://registry.npm.taobao.org "\nnpm install phantomjs-prebuilt@2.1.14 --save-dev  --ignore-scripts\n\n\n1\n2\n3\n4\n\n * publish\n\nnpm login / npm adduser  # 登录npm账号\nnpm publish --access=public # 发布一个公开的package\n\n\n1\n2\n\n\n\n# yarn\n\n * yarn\n * yarn bootcss\n\n\n# 私有的 npm 仓库\n\n * cnpmjs.org\n * verdaccio\n\n\n# 常见许可证\n\n\n# 宽松式\n\n * bsd 2-clause licence 分发软件时，必须保留原始的许可证声明\n * bsd 3-clause licence 分发软件时，必须保留原始的许可证声明。不得使用原始作者的名字为软件促销\n * mit 分发软件时，必须保留原始的许可证声明，与 bsd（二条款版）基本一致\n * apache 2 分发软件时，必须保留原始的许可证声明。凡是修改过的文件，必须向用户说明该文件修改过；没有修改过的文件，必须保持许可证不变\n\n\n# copyleft\n\n * affero gpl (agpl): 如果云服务（即 saas）用到的代码是该许可证，那么云服务的代码也必须开源\n * gpl: 如果项目包含了 gpl 许可证的代码，那么整个项目都必须使用 gpl 许可证\n * lgpl: 如果项目采用动态链接调用该许可证的库，项目可以不用开源\n * mozilla（mpl）: 只要该许可证的代码在单独的文件中，新增的其他文件可以不用开源\n\n\n# express\n\n * express cors\n\n/**\n *  处理跨域请求，有点重要喔\n *  如果不涉及跨域，请忽略\n **/\napp.all("*", function(req, res, next) {\n  res.header("access-control-allow-origin", req.headers.origin);\n  res.header("access-control-allow-credentials", true);\n  res.header(\n    "access-control-allow-headers",\n    "content-type, access-control-allow-headers, authorization, x-requested-with, x_requested_with"\n  );\n  res.header("access-control-allow-methods", "put, post, get, delete, options");\n  res.header("x-powered-by", "3.2.1");\n  res.header("content-type", "application/json; charset=utf-8");\n\n  if (req.method === "options") {\n    res.end("options ok");\n  } else {\n    next();\n  }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# set nodejs process env\n\n * mac： export vue_app_use_mock=true\n * window: set vue_app_use_mock=true\n\n\n# nodejs requre.resolve\n\n> https://juejin.cn/post/7020607552190677000\n\n * 获取 package 的绝对路径\n\nnew modulefederationplugin({\n  name: \'app1\'\n  exposes: {\n    \'./react\': require.resolve(\'react\'),\n    \'./react-dom\': require.resolve(\'react-dom\'),\n  },\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * enhanced-resolve\n\nimport { cachedinputfilesystem, resolverfactory } from \'enhanced-resolve\';\nimport * as fs from \'fs\';\n\nconst myresolver = resolverfactory.createresolver({\n  filesystem: new cachedinputfilesystem(fs, 4000),\n  conditionnames: [\'node\'],\n  extensions: [\'.js\', \'.json\', \'.node\'],\n  usesyncfilesystemcalls: true,\n  mainfields: [\'esm\', \'module\', \'main\'],\n});\n\n// 获取 antd 包入口路径，优先 esm，兜底 cjs\nmyresolver.resolvesync({}, process.cwd(), "antd")\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# npm package\n\n * shelljs https://github.com/shelljs/shelljs\n * rimraf https://github.com/isaacs/rimraf\n * nodemon https://github.com/remy/nodemon\n * chokidar https://github.com/paulmillr/chokidar\n * zx https://github.com/google/zx\n * cross-env https://github.com/kentcdodds/cross-env\n * wait-on https://github.com/jeffbski/wait-on\n * concurrently https://github.com/open-cli-tools/concurrently\n * npm run all https://www.npmjs.com/package/npm-run-all\n * rollup esbuild swc webpack parcel vite microbundle\n * api-extractor https://www.npmjs.com/package/@microsoft/api-extractor\n * rrweb https://github.com/rrweb-io/rrweb\n * web-vitals https://github.com/googlechrome/web-vitals\n * path-to-regexp https://github.com/pillarjs/path-to-regexp\n * localforage https://github.com/localforage/localforage\n * file-type https://github.com/sindresorhus/file-type\n * uppy https://github.com/transloadit/uppy\n * async-validator https://github.com/yiminghe/async-validator\n * ncc https://github.com/vercel/ncc\n\n\n# orm : object relational mapping\n\n * sqlite3: https://github.com/sqlite/sqlite\n * bookshelf: https://github.com/bookshelf/bookshelf\n * sequelize: https://github.com/sequelize/sequelize\n * prisma: https://github.com/prisma/prisma\n\n\n# version版本号说明\n\n * alpha：第一个测试版本，还不稳定\n * beta：特性稳定了，但还有bug\n * rc(release candidate)：除非有重大bug，否则这就是会成为正式版的beta\n * release：正式发布版本\n\n\n# 管理package版本\n\n\n# 发布说明\n\n * 1.使用standard-version控制发布版本\n\n// package.json\n"scripts": {\n  "publish:release": "standard-version",\n  "publish:minor": "standard-version --release-as minor",\n  "publish:major": "standard-version --release-as major",\n  "publish:beta": "standard-version --prerelease beta"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * 2.推送tag与commit到远程仓库\n\ngit push --follow-tags origin master\n\n\n1\n\n * 3.npm发布包\n\n# 使用nvm切换源\nhttps://npm.xesv5.com/\n\n# 登录\nnpm login\n\n# 发布对应的版本: https://docs.npmjs.com/cli/v8/commands/npm-publish\nnpm publish [--tag <beta|latest|...>]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 本地调试\n\n * 方式一：<推荐> 使用 yalc: https://github.com/wclr/yalc\n\n * 方式二：npm link\n\n\n# npm version\n\n * npm version[https://docs.npmjs.com/cli/v8/configuring-npm/package-json#dependencies]\n * 使用 npm 的语义版本控制\n * node-semver\n\n\n# 相关链接\n\n * 开源许可证\n * sequelize mysql',charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1647517837e3},{title:"manjaro命令参数",frontmatter:{title:"manjaro命令参数",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["manjaro"],categories:["system"],readingShow:"top"},regularPath:"/services/tools/manjaro.html",relativePath:"services/tools/manjaro.md",key:"v-f5c06ff6",path:"/services/tools/manjaro.html",headers:[{level:2,title:"manjaro 命令",slug:"manjaro-命令",normalizedTitle:"manjaro 命令",charIndex:42},{level:2,title:"Manjaro 配置",slug:"manjaro-配置",normalizedTitle:"manjaro 配置",charIndex:314},{level:2,title:"常用软件安装",slug:"常用软件安装",normalizedTitle:"常用软件安装",charIndex:1381},{level:2,title:"相关链接",slug:"相关链接",normalizedTitle:"相关链接",charIndex:1499}],headersStr:"manjaro 命令 Manjaro 配置 常用软件安装 相关链接",content:' * manjaro 官网\n * 中科大镜像\n * 清华大学开源软件镜像站\n\n\n# manjaro 命令\n\npacman -S   # 安装\npacman -R   # 删除\npacman -Rs  # 移除已安装不需要软件包\npacman -Rsc # 删除一个包,所有依赖\npacman -Syu # 升级包\npacman -Ss  # 查询包数据库\npacman -Qs  # 搜索以安装的包\npacman -Si  # 显示包大量信息\npacman -Qi  # 本地安装包\npacman -Sc  # 清理包缓存\npacman -Syyu  # 更新系统\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Manjaro 配置\n\n * 配置中国的 mirrors sudo pacman-mirrors -i -c China -m rank\n * 安装 geditsudo pacman -S gedit\n * 在 /etc/pacman.conf中添加archlinuxcn源 sudo gedit /etc/pacman.conf\n\n[archlinuxcn]\nSigLevel = Optional TrustedOnly\nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n[arch4edu]\nSigLevel = Never\nServer = http://mirrors.tuna.tsinghua.edu.cn/arch4edu/$arch\n\n\n1\n2\n3\n4\n5\n6\n\n * 更新源列表 sudo pacman -Syyu\n * 安装 yaourt,使用 AUR 源里的软件 sudo pacman -S yaourt pacaur\n * 修改配置文件后，执行命令sudo pacman -Syy && sudo pacman -S archlinuxcn-keyring\n * 将本地数据包与远程数据包同步 sudo pacman -Syy\n * 安装 vim sudo pacman -S vim\n * 安装 gitsudo pacman -S git\n * 安装 ZSH sudo pacman -S zsh\n * 配置 oh-my-zsh sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"\n * 更换默认的 shell chsh -s /bin/zsh\n * 安装搜狗输入法\n\nsudo pacman -S fcitx-sogoupinyin\nsudo pacman -S fcitx-im         # 全部安装\nsudo pacman -S fcitx-configtool # 图形化配置工具\n\n\n1\n2\n3\n\n * 设置中文输入法环境变量，编辑~/.xprofile文件，增加下面几行(如果文件不存在，则新建)\n\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS="@im=fcitx"\n\n\n1\n2\n3\n\n\n\n# 常用软件安装\n\n * 谷歌浏览器 (sudo pacman -S chromium)\n * 网易云音乐 (sudo pacman -S netease-cloud-music)\n * wine (pacman -S wine)\n\n\n# 相关链接\n\n * Manjaro 安装以及美化教程',normalizedContent:' * manjaro 官网\n * 中科大镜像\n * 清华大学开源软件镜像站\n\n\n# manjaro 命令\n\npacman -s   # 安装\npacman -r   # 删除\npacman -rs  # 移除已安装不需要软件包\npacman -rsc # 删除一个包,所有依赖\npacman -syu # 升级包\npacman -ss  # 查询包数据库\npacman -qs  # 搜索以安装的包\npacman -si  # 显示包大量信息\npacman -qi  # 本地安装包\npacman -sc  # 清理包缓存\npacman -syyu  # 更新系统\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# manjaro 配置\n\n * 配置中国的 mirrors sudo pacman-mirrors -i -c china -m rank\n * 安装 geditsudo pacman -s gedit\n * 在 /etc/pacman.conf中添加archlinuxcn源 sudo gedit /etc/pacman.conf\n\n[archlinuxcn]\nsiglevel = optional trustedonly\nserver = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n[arch4edu]\nsiglevel = never\nserver = http://mirrors.tuna.tsinghua.edu.cn/arch4edu/$arch\n\n\n1\n2\n3\n4\n5\n6\n\n * 更新源列表 sudo pacman -syyu\n * 安装 yaourt,使用 aur 源里的软件 sudo pacman -s yaourt pacaur\n * 修改配置文件后，执行命令sudo pacman -syy && sudo pacman -s archlinuxcn-keyring\n * 将本地数据包与远程数据包同步 sudo pacman -syy\n * 安装 vim sudo pacman -s vim\n * 安装 gitsudo pacman -s git\n * 安装 zsh sudo pacman -s zsh\n * 配置 oh-my-zsh sh -c "$(curl -fssl https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"\n * 更换默认的 shell chsh -s /bin/zsh\n * 安装搜狗输入法\n\nsudo pacman -s fcitx-sogoupinyin\nsudo pacman -s fcitx-im         # 全部安装\nsudo pacman -s fcitx-configtool # 图形化配置工具\n\n\n1\n2\n3\n\n * 设置中文输入法环境变量，编辑~/.xprofile文件，增加下面几行(如果文件不存在，则新建)\n\nexport gtk_im_module=fcitx\nexport qt_im_module=fcitx\nexport xmodifiers="@im=fcitx"\n\n\n1\n2\n3\n\n\n\n# 常用软件安装\n\n * 谷歌浏览器 (sudo pacman -s chromium)\n * 网易云音乐 (sudo pacman -s netease-cloud-music)\n * wine (pacman -s wine)\n\n\n# 相关链接\n\n * manjaro 安装以及美化教程',charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1647517837e3},{title:"搜索小技巧",frontmatter:{title:"搜索小技巧",date:"2021-8-01",sidebar:"auto",tags:["search","github"],categories:["system"],readingShow:"top"},regularPath:"/services/tools/search-tip.html",relativePath:"services/tools/search-tip.md",key:"v-1982f56a",path:"/services/tools/search-tip.html",headers:[{level:2,title:"github搜索",slug:"github搜索",normalizedTitle:"github搜索",charIndex:2},{level:3,title:"1、根据star，fork数筛选",slug:"_1、根据star-fork数筛选",normalizedTitle:"1、根据star，fork数筛选",charIndex:130},{level:3,title:"2、 关键字 in",slug:"_2、-关键字-in",normalizedTitle:"2、 关键字 in",charIndex:514},{level:3,title:"3、awesome + 关键字",slug:"_3、awesome-关键字",normalizedTitle:"3、awesome + 关键字",charIndex:830},{level:3,title:"4、搜索某个语言，某个地区",slug:"_4、搜索某个语言-某个地区",normalizedTitle:"4、搜索某个语言，某个地区",charIndex:904},{level:3,title:"5、查看源码利器 t",slug:"_5、查看源码利器-t",normalizedTitle:"5、查看源码利器 t",charIndex:1226},{level:3,title:"6、实现某行，某块代码高亮",slug:"_6、实现某行-某块代码高亮",normalizedTitle:"6、实现某行，某块代码高亮",charIndex:1271},{level:3,title:"7、查询某位用户",slug:"_7、查询某位用户",normalizedTitle:"7、查询某位用户",charIndex:1406},{level:2,title:"google搜索",slug:"google搜索",normalizedTitle:"google搜索",charIndex:1458},{level:3,title:"1、关键词包含在标题中",slug:"_1、关键词包含在标题中",normalizedTitle:"1、关键词包含在标题中",charIndex:1471},{level:3,title:"2、关键词包含在正文中",slug:"_2、关键词包含在正文中",normalizedTitle:"2、关键词包含在正文中",charIndex:1609},{level:3,title:"3、限定搜索网站",slug:"_3、限定搜索网站",normalizedTitle:"3、限定搜索网站",charIndex:1662},{level:3,title:"4、限定在两个数值之间进行搜索",slug:"_4、限定在两个数值之间进行搜索",normalizedTitle:"4、限定在两个数值之间进行搜索",charIndex:1902},{level:3,title:"5、指定网站内搜索",slug:"_5、指定网站内搜索",normalizedTitle:"5、指定网站内搜索",charIndex:1977},{level:3,title:"6、限定文件类型",slug:"_6、限定文件类型",normalizedTitle:"6、限定文件类型",charIndex:2007},{level:3,title:"7、精确搜索(给关键词加引号)",slug:"_7、精确搜索-给关键词加引号",normalizedTitle:"7、精确搜索(给关键词加引号)",charIndex:2137},{level:3,title:"8、星号（*）",slug:"_8、星号",normalizedTitle:"8、星号（*）",charIndex:2263}],headersStr:"github搜索 1、根据star，fork数筛选 2、 关键字 in 3、awesome + 关键字 4、搜索某个语言，某个地区 5、查看源码利器 t 6、实现某行，某块代码高亮 7、查询某位用户 google搜索 1、关键词包含在标题中 2、关键词包含在正文中 3、限定搜索网站 4、限定在两个数值之间进行搜索 5、指定网站内搜索 6、限定文件类型 7、精确搜索(给关键词加引号) 8、星号（*）",content:'# github搜索\n\n * searching-on-github： https://docs.github.com/cn/github/searching-for-information-on-github/searching-on-github\n\n\n# 1、根据star，fork数筛选\n\n * 1、 大于等于\n\n语法： 关键字 stars:>= 数量 forks:>=数量\n\n例子：\n\n//搜索springboot有关star数>=5000的内容\nspringboot stars:>=5000\n\n//搜索springboot 的star>=5000，且fork数>=5000的内容\nspringboot stars:>=5000 forks:>=5000\n\n可单独搜索，也可组合搜索，中间用空格隔开，是&（且）的关系。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 2、范围查询\n\n语法： 关键字 stars:范围1..范围2\n\n例子：\n\n//搜索star数在 4000到500的springboot相关内容\nspringboot stars:4000..5000\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 2、 关键字 in\n\n> 搜索关键字在github上发布的位置 ，主要以下3个位置\n\n * name: 发布的仓库名称\n * description: 指的是文章的摘要部分\n * Readme: 说明文档\n * USERNAME: 表示在USERNAME中搜索 TSP 关键字\n * ORGNAME: 表示在组织或机构名中搜索 TSP 关键字\n\n语法：关键字 in\n\n例子：\n\n//查找名称中包含netty的内容\nnetty in:name\n\n//逗号分隔，是 || (或)的关系，指的是查询名称，或者描述中包含netty的内容\nnetty in:name,description\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 3、awesome + 关键字\n\n语法：awesome 关键字\n\n例子：\n\nawesome springboot\n\n\n1\n2\n3\n4\n5\n\n\n\n# 4、搜索某个语言，某个地区\n\n例子：\n\n// 表示在TSP项目中筛选编程语言为MATLAB的项目\nTSP language:MATLAB\n\n// 表示在TSP项目中筛选开发者为中国人的项目\nTSP location:china\n\n// 表示在TSP项目中筛选开发者粉丝大于1000的项目\nTSP followers:>1000\n\n// 表示搜索用户命为UCAS的开发者的项目\nUCAS in:fullname\n\n// 表示筛选TSP项目中是中国人写的而且是MATLAB语言的的项目\nTSP language:MATLAB&location:china\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 5、查看源码利器 t\n\n> 用 t ，该框架所有的类以列表形式平铺展开，方便查看\n\n\n# 6、实现某行，某块代码高亮\n\n * 某行高亮: #L23\n\nhttps://github.com/xxx/xxx.js#L23\n\n\n1\n\n * 某个代码块: #L23-35\n\nhttps://github.com/xxx/xxx.js#L23-L35\n\n\n1\n\n\n\n# 7、查询某位用户\n\n语法：user:名称\n\n例子：user:fullname\n\n\n1\n2\n3\n\n\n\n# google搜索\n\n\n# 1、关键词包含在标题中\n\n * intitle:（关键词）\n\nintitle:github\n\n\n1\n\n * allintitle\n\n// 相当于intitle:zabbix intitle:docker\nallintitle:zabbix docker\n\n\n1\n2\n\n\n\n# 2、关键词包含在正文中\n\n * intext:（关键词）\n\nintext:github\n\n\n1\n\n\n\n# 3、限定搜索网站\n\n * （关键词）inurl:（网站类型）\n\n网站类型:\n\n〔.com〕商业组织和公司\n〔.net〕网络服务商\n〔.gov〕政府部门\n〔.org〕非营利性组织\n〔.int〕国际组织\n〔.edu〕教育部门\n\n示例：\nbaidu inurl:.org\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * allinurl\n\n// 相当于 inurl:zabbix inurl:docker\nallinurl:zabbix hadoop\n\n\n1\n2\n\n\n\n# 4、限定在两个数值之间进行搜索\n\n * 开始时间.. 结束时间： 关键词 2018.. 2021\n\nxxx 1920.. 1950\n\n\n1\n\n\n\n# 5、指定网站内搜索\n\n * site:域名 关键词\n\n\n# 6、限定文件类型\n\n * （关键词）filetype:文件类型\n\n常见文件类型\n\n〔pdf〕PDF文件\n〔xls〕:excle文件\n〔ppt〕:powerpoint文件\n〔doc〕:word文件\n〔txt〕:文本文档\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 7、精确搜索(给关键词加引号)\n\n * "关键词"\n\n// 搜索 小苹果 关键词\n"小苹果"\n\n\n1\n2\n\n * 排除关键词：关键词 -排除关键词\n\n足球 -篮球\n\n\n1\n\n * 包含某个关键词：关键词 +附加关键词\n\n足球 +篮球\n\n\n1\n\n\n\n# 8、星号（*）\n\n * 常用的案例:搜索报错中的特定路径 , 有个词忘记了或者不会打\n\ngit push remote error does not match * user account\n\n\n1\n\n * 搜索词模糊\n\narchitect*\n\n返回是所有包含 architect、architectural、以及其他所有以「architect」作为开头的词汇的条目\n\n\n1\n2\n3\n',normalizedContent:'# github搜索\n\n * searching-on-github： https://docs.github.com/cn/github/searching-for-information-on-github/searching-on-github\n\n\n# 1、根据star，fork数筛选\n\n * 1、 大于等于\n\n语法： 关键字 stars:>= 数量 forks:>=数量\n\n例子：\n\n//搜索springboot有关star数>=5000的内容\nspringboot stars:>=5000\n\n//搜索springboot 的star>=5000，且fork数>=5000的内容\nspringboot stars:>=5000 forks:>=5000\n\n可单独搜索，也可组合搜索，中间用空格隔开，是&（且）的关系。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * 2、范围查询\n\n语法： 关键字 stars:范围1..范围2\n\n例子：\n\n//搜索star数在 4000到500的springboot相关内容\nspringboot stars:4000..5000\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 2、 关键字 in\n\n> 搜索关键字在github上发布的位置 ，主要以下3个位置\n\n * name: 发布的仓库名称\n * description: 指的是文章的摘要部分\n * readme: 说明文档\n * username: 表示在username中搜索 tsp 关键字\n * orgname: 表示在组织或机构名中搜索 tsp 关键字\n\n语法：关键字 in\n\n例子：\n\n//查找名称中包含netty的内容\nnetty in:name\n\n//逗号分隔，是 || (或)的关系，指的是查询名称，或者描述中包含netty的内容\nnetty in:name,description\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 3、awesome + 关键字\n\n语法：awesome 关键字\n\n例子：\n\nawesome springboot\n\n\n1\n2\n3\n4\n5\n\n\n\n# 4、搜索某个语言，某个地区\n\n例子：\n\n// 表示在tsp项目中筛选编程语言为matlab的项目\ntsp language:matlab\n\n// 表示在tsp项目中筛选开发者为中国人的项目\ntsp location:china\n\n// 表示在tsp项目中筛选开发者粉丝大于1000的项目\ntsp followers:>1000\n\n// 表示搜索用户命为ucas的开发者的项目\nucas in:fullname\n\n// 表示筛选tsp项目中是中国人写的而且是matlab语言的的项目\ntsp language:matlab&location:china\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 5、查看源码利器 t\n\n> 用 t ，该框架所有的类以列表形式平铺展开，方便查看\n\n\n# 6、实现某行，某块代码高亮\n\n * 某行高亮: #l23\n\nhttps://github.com/xxx/xxx.js#l23\n\n\n1\n\n * 某个代码块: #l23-35\n\nhttps://github.com/xxx/xxx.js#l23-l35\n\n\n1\n\n\n\n# 7、查询某位用户\n\n语法：user:名称\n\n例子：user:fullname\n\n\n1\n2\n3\n\n\n\n# google搜索\n\n\n# 1、关键词包含在标题中\n\n * intitle:（关键词）\n\nintitle:github\n\n\n1\n\n * allintitle\n\n// 相当于intitle:zabbix intitle:docker\nallintitle:zabbix docker\n\n\n1\n2\n\n\n\n# 2、关键词包含在正文中\n\n * intext:（关键词）\n\nintext:github\n\n\n1\n\n\n\n# 3、限定搜索网站\n\n * （关键词）inurl:（网站类型）\n\n网站类型:\n\n〔.com〕商业组织和公司\n〔.net〕网络服务商\n〔.gov〕政府部门\n〔.org〕非营利性组织\n〔.int〕国际组织\n〔.edu〕教育部门\n\n示例：\nbaidu inurl:.org\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * allinurl\n\n// 相当于 inurl:zabbix inurl:docker\nallinurl:zabbix hadoop\n\n\n1\n2\n\n\n\n# 4、限定在两个数值之间进行搜索\n\n * 开始时间.. 结束时间： 关键词 2018.. 2021\n\nxxx 1920.. 1950\n\n\n1\n\n\n\n# 5、指定网站内搜索\n\n * site:域名 关键词\n\n\n# 6、限定文件类型\n\n * （关键词）filetype:文件类型\n\n常见文件类型\n\n〔pdf〕pdf文件\n〔xls〕:excle文件\n〔ppt〕:powerpoint文件\n〔doc〕:word文件\n〔txt〕:文本文档\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 7、精确搜索(给关键词加引号)\n\n * "关键词"\n\n// 搜索 小苹果 关键词\n"小苹果"\n\n\n1\n2\n\n * 排除关键词：关键词 -排除关键词\n\n足球 -篮球\n\n\n1\n\n * 包含某个关键词：关键词 +附加关键词\n\n足球 +篮球\n\n\n1\n\n\n\n# 8、星号（*）\n\n * 常用的案例:搜索报错中的特定路径 , 有个词忘记了或者不会打\n\ngit push remote error does not match * user account\n\n\n1\n\n * 搜索词模糊\n\narchitect*\n\n返回是所有包含 architect、architectural、以及其他所有以「architect」作为开头的词汇的条目\n\n\n1\n2\n3\n',charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1647517837e3},{title:"todo list",frontmatter:{title:"todo list",date:"2020-06-18T00:00:00.000Z",sidebar:"auto",categories:["frontend"],readingShow:"top"},regularPath:"/services/tools/todo.html",relativePath:"services/tools/todo.md",key:"v-37306b0b",path:"/services/tools/todo.html",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2/8/2022",lastUpdatedTimestamp:164431345e4,createdTime:1643899953e3},{title:"前端监控sentry使用",frontmatter:{title:"前端监控sentry使用",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["sentry"],categories:["frontend"],readingShow:"top"},regularPath:"/services/tools/sentry.html",relativePath:"services/tools/sentry.md",key:"v-d68118aa",path:"/services/tools/sentry.html",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:24},{level:2,title:"example",slug:"example",normalizedTitle:"example",charIndex:260},{level:2,title:"相关链接",slug:"相关链接",normalizedTitle:"相关链接",charIndex:3970}],headersStr:"安装 example 相关链接",content:'sentry\n\ndocs/docker\n\n\n# 安装\n\n * Step1\n\ngit clone git@github.com:getsentry/onpremise.git\n\n\n1\n\n * Step2: cd onpremise\n\n * Step3: 创建 name volume，持久化\n\ndocker volume create --name=sentry-data && docker volume create --name=sentry-postgres\n\n\n1\n\n\n * Step4: cp -n .env.example .env\n\n * Step5\n\n# onpremise下 创建目录\nmkdir -p data/{sentry,postgres}\n# 一定执行，不然报错，然后再生成key\ndocker-compose build\n\n\n1\n2\n3\n4\n\n * Step6: 生成 key 放到 .env 文件中\n\n# 获取项目的key\ndocker-compose run --rm web config generate-secret-key\n\n\n1\n2\n\n * Step7: 生成数据库，并在这一步设置超级用户\n\ndocker-compose run --rm web upgrade\n\n\n1\n\n * Step8: 开启 sentry 服务\n\ndocker-compose up -d\n\n\n1\n\n\n * Step9: http:://localhost:9000 即可进入sentry\n\n * DSN\n\n# DSN位置：项目 - 选择目标项目 - 设置 - 客户端密钥 (DSN) - 配置\n{PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}/{PATH}{PROJECT_ID}\n\nPROTOCOL 使用的协议: http或https\nPUBLIC_KEY 验证sdk的公钥\nSECRET_KEY 验证sdk的密钥\nHOST 目标sentry服务器\nPATH 通常为空\nPROJECT_ID 验证用户绑定的项目id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 客户端中使用\n\nimport * as Sentry from "@sentry/browser";\n\nSentry.init({\n  dsn: "http://PUBLIC_KEY:SECRET_KEY@localhost:9000/PROJECT_ID",\n  release: "sentry_app@20190710",\n  environment: process.env.NODE_ENV\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# example\n\n * 工程目录部分文件 示例\n\n.\n├── .gitignore\n├── .sentryclirc # sentry配置文件\n├── config-overrides.js # react-app-rewired配置文件\n├── README.md\n├── build # 打包后的文件\n│   └── static\n│       ├── js\n│       │   ├── main.28cb07aa.chunk.js\n│       │   └── main.28cb07aa.chunk.js.map\n├── package.json\n├── public\n│   └── index.html\n├── src\n│   ├── App.js\n│   ├── Button.js\n│   ├── index.js\n│   └── serviceWorker.js\n└── yarn.lock\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * package.json部分配置\n\n  "scripts": {\n    "start": "react-app-rewired start",\n    "build": "react-app-rewired build"\n  },\n  "devDependencies": {\n    "@sentry/webpack-plugin": "^1.7.0",\n    "react-app-rewired": "^2.1.3"\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * npx create-react-app react-sentry\n * .sentryclirc\n\n[defaults]\nurl = http://localhost:9000\norg = sentry\nproject = react-sentry\n\n[auth]\ntoken = 9210xxxxxxxx42b5823d8b0f6ebfdbb4\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * Button.js\n\nimport React, { Component } from "react";\nclass Button extends Component {\n  constructor() {\n    this.methodDoesNotExist = this.methodDoesNotExist.bind(this);\n  }\n  methodDoesNotExist() {\n    throw new Error(`我是一个抛出的错误日志: ${new Date()}`);\n  }\n  render() {\n    return <button onClick={this.methodDoesNotExist}> Break the world</button>;\n  }\n}\nexport default Button;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * App.js\n\nimport React from "react";\nimport * as Sentry from "@sentry/browser";\nimport Button from "./Button";\n\n// 自建sentry服务的dsn组成部分\n// dsn: PROTOCOL://PUBLIC_KEY:SECRET_KEY@localhost:9000/PROJECT_ID\nSentry.init({\n  dsn: "http://05bdfb2xxxx77:00a40ae1bxxxxf0@localhost:9000/4",\n  release: "react-sentry@20190711",\n  environment: process.env.NODE_ENV\n});\nfunction App() {\n  return (\n    <div className="App">\n      <Button />\n    </div>\n  );\n}\nexport default App;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * 上传 sourcemap 文件：sentry-cli\n\n# sentry-cli releases -o 组织 -p 项目 files staging@1.0.1 upload-sourcemaps js文件所在目录 --url-prefix 线上资源URI\n\n# 运行如下命令\nsentry-cli releases files react-sentry@20190711 upload-sourcemaps ./build/ --url-prefix \'~/static/js/\'\n\n\n1\n2\n3\n4\n\n * 上传 sourcemap 文件：@sentry/webpack-plugin\n\n# 通过配置webpack： config-overrides.js\n# 安装：react-app-rewired\n$ `npm install react-app-rewired --save-dev`\n\n\n1\n2\n3\n\n * 配置config-overrides.js\n\nconst SentryCliPlugin = require("@sentry/webpack-plugin");\n\nmodule.exports = function override(config, env) {\n  //do stuff with the webpack config...\n  if (process.env.NODE_ENV === "production") {\n    config.plugins.push(\n      new SentryCliPlugin({\n        include: "./build",\n        urlPrefix: "~/static/js/",\n        ignoreFile: ".sentrycliignore",\n        ignore: ["node_modules", "webpack.config.js"],\n        configFile: "sentry.properties"\n      })\n    );\n  }\n  return config;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * 运行npm run build上传 sourcemap\n\n\n# 相关链接\n\n * 异常监控服务 Sentry 的部署\n * 前端异常监控之 Sentry 的部署和使用\n * 给你的项目装个探头 — Sentry\n * webfunny',normalizedContent:'sentry\n\ndocs/docker\n\n\n# 安装\n\n * step1\n\ngit clone git@github.com:getsentry/onpremise.git\n\n\n1\n\n * step2: cd onpremise\n\n * step3: 创建 name volume，持久化\n\ndocker volume create --name=sentry-data && docker volume create --name=sentry-postgres\n\n\n1\n\n\n * step4: cp -n .env.example .env\n\n * step5\n\n# onpremise下 创建目录\nmkdir -p data/{sentry,postgres}\n# 一定执行，不然报错，然后再生成key\ndocker-compose build\n\n\n1\n2\n3\n4\n\n * step6: 生成 key 放到 .env 文件中\n\n# 获取项目的key\ndocker-compose run --rm web config generate-secret-key\n\n\n1\n2\n\n * step7: 生成数据库，并在这一步设置超级用户\n\ndocker-compose run --rm web upgrade\n\n\n1\n\n * step8: 开启 sentry 服务\n\ndocker-compose up -d\n\n\n1\n\n\n * step9: http:://localhost:9000 即可进入sentry\n\n * dsn\n\n# dsn位置：项目 - 选择目标项目 - 设置 - 客户端密钥 (dsn) - 配置\n{protocol}://{public_key}:{secret_key}@{host}/{path}{project_id}\n\nprotocol 使用的协议: http或https\npublic_key 验证sdk的公钥\nsecret_key 验证sdk的密钥\nhost 目标sentry服务器\npath 通常为空\nproject_id 验证用户绑定的项目id\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n * 客户端中使用\n\nimport * as sentry from "@sentry/browser";\n\nsentry.init({\n  dsn: "http://public_key:secret_key@localhost:9000/project_id",\n  release: "sentry_app@20190710",\n  environment: process.env.node_env\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# example\n\n * 工程目录部分文件 示例\n\n.\n├── .gitignore\n├── .sentryclirc # sentry配置文件\n├── config-overrides.js # react-app-rewired配置文件\n├── readme.md\n├── build # 打包后的文件\n│   └── static\n│       ├── js\n│       │   ├── main.28cb07aa.chunk.js\n│       │   └── main.28cb07aa.chunk.js.map\n├── package.json\n├── public\n│   └── index.html\n├── src\n│   ├── app.js\n│   ├── button.js\n│   ├── index.js\n│   └── serviceworker.js\n└── yarn.lock\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * package.json部分配置\n\n  "scripts": {\n    "start": "react-app-rewired start",\n    "build": "react-app-rewired build"\n  },\n  "devdependencies": {\n    "@sentry/webpack-plugin": "^1.7.0",\n    "react-app-rewired": "^2.1.3"\n  }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n * npx create-react-app react-sentry\n * .sentryclirc\n\n[defaults]\nurl = http://localhost:9000\norg = sentry\nproject = react-sentry\n\n[auth]\ntoken = 9210xxxxxxxx42b5823d8b0f6ebfdbb4\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * button.js\n\nimport react, { component } from "react";\nclass button extends component {\n  constructor() {\n    this.methoddoesnotexist = this.methoddoesnotexist.bind(this);\n  }\n  methoddoesnotexist() {\n    throw new error(`我是一个抛出的错误日志: ${new date()}`);\n  }\n  render() {\n    return <button onclick={this.methoddoesnotexist}> break the world</button>;\n  }\n}\nexport default button;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * app.js\n\nimport react from "react";\nimport * as sentry from "@sentry/browser";\nimport button from "./button";\n\n// 自建sentry服务的dsn组成部分\n// dsn: protocol://public_key:secret_key@localhost:9000/project_id\nsentry.init({\n  dsn: "http://05bdfb2xxxx77:00a40ae1bxxxxf0@localhost:9000/4",\n  release: "react-sentry@20190711",\n  environment: process.env.node_env\n});\nfunction app() {\n  return (\n    <div classname="app">\n      <button />\n    </div>\n  );\n}\nexport default app;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n * 上传 sourcemap 文件：sentry-cli\n\n# sentry-cli releases -o 组织 -p 项目 files staging@1.0.1 upload-sourcemaps js文件所在目录 --url-prefix 线上资源uri\n\n# 运行如下命令\nsentry-cli releases files react-sentry@20190711 upload-sourcemaps ./build/ --url-prefix \'~/static/js/\'\n\n\n1\n2\n3\n4\n\n * 上传 sourcemap 文件：@sentry/webpack-plugin\n\n# 通过配置webpack： config-overrides.js\n# 安装：react-app-rewired\n$ `npm install react-app-rewired --save-dev`\n\n\n1\n2\n3\n\n * 配置config-overrides.js\n\nconst sentrycliplugin = require("@sentry/webpack-plugin");\n\nmodule.exports = function override(config, env) {\n  //do stuff with the webpack config...\n  if (process.env.node_env === "production") {\n    config.plugins.push(\n      new sentrycliplugin({\n        include: "./build",\n        urlprefix: "~/static/js/",\n        ignorefile: ".sentrycliignore",\n        ignore: ["node_modules", "webpack.config.js"],\n        configfile: "sentry.properties"\n      })\n    );\n  }\n  return config;\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * 运行npm run build上传 sourcemap\n\n\n# 相关链接\n\n * 异常监控服务 sentry 的部署\n * 前端异常监控之 sentry 的部署和使用\n * 给你的项目装个探头 — sentry\n * webfunny',charsets:{cjk:!0},lastUpdated:"2/3/2022",lastUpdatedTimestamp:1643899953e3,createdTime:1643899953e3},{title:"ubuntu常见命名",frontmatter:{title:"ubuntu常见命名",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["ubuntu"],categories:["system"],readingShow:"top"},regularPath:"/services/tools/ubuntu.html",relativePath:"services/tools/ubuntu.md",key:"v-0cbf1aab",path:"/services/tools/ubuntu.html",headers:[{level:2,title:"常用命令",slug:"常用命令",normalizedTitle:"常用命令",charIndex:2},{level:2,title:"连接工具",slug:"连接工具",normalizedTitle:"连接工具",charIndex:492},{level:2,title:"删除基本不用的自带软件",slug:"删除基本不用的自带软件",normalizedTitle:"删除基本不用的自带软件",charIndex:570},{level:2,title:"安装 chrome",slug:"安装-chrome",normalizedTitle:"安装 chrome",charIndex:878},{level:2,title:"ubuntu server 20.04 设置开机启动",slug:"ubuntu-server-20-04-设置开机启动",normalizedTitle:"ubuntu server 20.04 设置开机启动",charIndex:1267},{level:2,title:"相关链接",slug:"相关链接",normalizedTitle:"相关链接",charIndex:2094}],headersStr:"常用命令 连接工具 删除基本不用的自带软件 安装 chrome ubuntu server 20.04 设置开机启动 相关链接",content:'# 常用命令\n\n * sudo apt-get -f install\n * sudo apt-get vim*\n * sudo apt-get install net-tools\n * sudo apt-get update\n * sudo apt-get upgrade\n * sudo apt-get install unity-tweak-tool\n * sudo dpkg --install atom-amd64.deb\n * sudo apt autoremove //删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包\n * apt-get clean // 删除包缓存中的所有包\n * apt-get autoclean //将已经删除了的软件包的 deb 安装文件从硬盘中删除掉\n * apt-get remove 软件包名称 //删除已安装的软件包(保留配置文件)\n * apt-get --purge remove 软件包名称 //删除已安装包(不保留配置文件)\n * sudo passwd //ubuntu 默认安装后修改 root 密码\n\n\n# 连接工具\n\n * sudo apt-get install openssh-server\n * xshell -- putty -- winscp\n\n\n# 删除基本不用的自带软件\n\n * sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku landscape-client-ui-install onboard deja-dup libreoffice-common unity-webapps-common gnomine printer-driver*\n\n\n# 安装 chrome\n\n- https://askubuntu.com/questions/510056/how-to-install-google-chrome\n- wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -\n- sudo sh -c \'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list\n- sudo apt-get update\n- sudo apt-get install google-chrome-stable\n\n\n1\n2\n3\n4\n5\n\n\n\n# ubuntu server 20.04 设置开机启动\n\n> https://www.jianshu.com/p/0f0c71f7f715\n\n * 编辑rc-local.service\n\n# vi /lib/systemd/system/rc-local.service\n[Unit]\nDescription=/etc/rc.local Compatibility\nDocumentation=man:systemd-rc-local-generator(8)\nConditionFileIsExecutable=/etc/rc.local\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/etc/rc.local start\nTimeoutSec=0\nRemainAfterExit=yes\nGuessMainPID=no\n\n[Install]\nWantedBy=multi-user.target\nAlias=rc-local.service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * 保存的文件链接到 /etc/systemd/system/ 目录下\n\nln -s /lib/systemd/system/rc-local.service /etc/systemd/system/rc-local.service\n\n\n1\n\n * 打开 /etc/rc.local 输入\n\nvi /etc/rc.local\n#!/bin/bash\nautossh -M 8888 -NR 1234:localhost:22 root@101.201.235.247 -p 22 &\nexit 0\n\n\n1\n2\n3\n4\n\n * 保存，退出，赋权限，重启\n\nchmod 755 /etc/rc.local\n# 重启\nreboot\n\n\n1\n2\n3\n\n\n\n# 相关链接\n\n * apt-get 指令的 autoclean,clean,autoremove 的区别\n * ubuntu12.04destdrop 删除不必要的软件',normalizedContent:'# 常用命令\n\n * sudo apt-get -f install\n * sudo apt-get vim*\n * sudo apt-get install net-tools\n * sudo apt-get update\n * sudo apt-get upgrade\n * sudo apt-get install unity-tweak-tool\n * sudo dpkg --install atom-amd64.deb\n * sudo apt autoremove //删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包\n * apt-get clean // 删除包缓存中的所有包\n * apt-get autoclean //将已经删除了的软件包的 deb 安装文件从硬盘中删除掉\n * apt-get remove 软件包名称 //删除已安装的软件包(保留配置文件)\n * apt-get --purge remove 软件包名称 //删除已安装包(不保留配置文件)\n * sudo passwd //ubuntu 默认安装后修改 root 密码\n\n\n# 连接工具\n\n * sudo apt-get install openssh-server\n * xshell -- putty -- winscp\n\n\n# 删除基本不用的自带软件\n\n * sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku landscape-client-ui-install onboard deja-dup libreoffice-common unity-webapps-common gnomine printer-driver*\n\n\n# 安装 chrome\n\n- https://askubuntu.com/questions/510056/how-to-install-google-chrome\n- wget -q -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -\n- sudo sh -c \'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list\n- sudo apt-get update\n- sudo apt-get install google-chrome-stable\n\n\n1\n2\n3\n4\n5\n\n\n\n# ubuntu server 20.04 设置开机启动\n\n> https://www.jianshu.com/p/0f0c71f7f715\n\n * 编辑rc-local.service\n\n# vi /lib/systemd/system/rc-local.service\n[unit]\ndescription=/etc/rc.local compatibility\ndocumentation=man:systemd-rc-local-generator(8)\nconditionfileisexecutable=/etc/rc.local\nafter=network.target\n\n[service]\ntype=forking\nexecstart=/etc/rc.local start\ntimeoutsec=0\nremainafterexit=yes\nguessmainpid=no\n\n[install]\nwantedby=multi-user.target\nalias=rc-local.service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n * 保存的文件链接到 /etc/systemd/system/ 目录下\n\nln -s /lib/systemd/system/rc-local.service /etc/systemd/system/rc-local.service\n\n\n1\n\n * 打开 /etc/rc.local 输入\n\nvi /etc/rc.local\n#!/bin/bash\nautossh -m 8888 -nr 1234:localhost:22 root@101.201.235.247 -p 22 &\nexit 0\n\n\n1\n2\n3\n4\n\n * 保存，退出，赋权限，重启\n\nchmod 755 /etc/rc.local\n# 重启\nreboot\n\n\n1\n2\n3\n\n\n\n# 相关链接\n\n * apt-get 指令的 autoclean,clean,autoremove 的区别\n * ubuntu12.04destdrop 删除不必要的软件',charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1647517837e3},{title:"vagrant虚拟机的使用",frontmatter:{title:"vagrant虚拟机的使用",date:"2021-07-21T00:00:00.000Z",sidebar:"auto",tags:["vagrant"],categories:["services"],readingShow:"top"},regularPath:"/services/tools/vagrant.html",relativePath:"services/tools/vagrant.md",key:"v-19f48aff",path:"/services/tools/vagrant.html",headers:[{level:2,title:"command",slug:"command",normalizedTitle:"command",charIndex:86},{level:2,title:"基本使用命令",slug:"基本使用命令",normalizedTitle:"基本使用命令",charIndex:729},{level:2,title:"vagrant 添加无版本号的 box",slug:"vagrant-添加无版本号的-box",normalizedTitle:"vagrant 添加无版本号的 box",charIndex:1508},{level:2,title:"vagrant 添加带版本号的 box",slug:"vagrant-添加带版本号的-box",normalizedTitle:"vagrant 添加带版本号的 box",charIndex:1717},{level:2,title:"SSH 登录 linux",slug:"ssh-登录-linux",normalizedTitle:"ssh 登录 linux",charIndex:2136},{level:2,title:"vagrant init",slug:"vagrant-init",normalizedTitle:"vagrant init",charIndex:123},{level:2,title:"plugin",slug:"plugin",normalizedTitle:"plugin",charIndex:618},{level:3,title:"vagrant-vbguest",slug:"vagrant-vbguest",normalizedTitle:"vagrant-vbguest",charIndex:1392},{level:3,title:"vagrant-hostmanager",slug:"vagrant-hostmanager",normalizedTitle:"vagrant-hostmanager",charIndex:1432},{level:3,title:"vagrant-bindfs",slug:"vagrant-bindfs",normalizedTitle:"vagrant-bindfs",charIndex:1476},{level:2,title:"packge",slug:"packge",normalizedTitle:"packge",charIndex:9545},{level:2,title:"multi Machine",slug:"multi-machine",normalizedTitle:"multi machine",charIndex:9653},{level:2,title:"参考资料",slug:"参考资料",normalizedTitle:"参考资料",charIndex:10540}],headersStr:"command 基本使用命令 vagrant 添加无版本号的 box vagrant 添加带版本号的 box SSH 登录 linux vagrant init plugin vagrant-vbguest vagrant-hostmanager vagrant-bindfs packge multi Machine 参考资料",content:' * vagrant\n * app.vagrantup\n * rubygems\n * virtualbox\n * https://www.osboxes.org/\n\n\n# command\n\nTABLES                  ARE\nvagrant init            初始化 box 的操作，会生成 vagrant 的配置文件 Vagrantfile\nvagrant up              启动本地环境\nvagrant ssh             通过 ssh 登录本地环境所在虚拟机\nvagrant halt            关闭本地环境\nvagrant suspend         暂停本地环境\nvagrant resume          恢复本地环境\nvagrant reload          修改了 Vagrantfile 后，使之生效（相当于先 halt，再 up）\nvagrant destroy         彻底移除本地环境\nvagrant box list        显示当前已经添加的 box 列表\nvagrant box add         添加 box 到列表\nvagrant box remove      删除相应的 box\nvagrant package         打包命令，可以把当前的运行的虚拟机环境进行打包\nvagrant plugin          用于安装卸载插件\nvagrant status          获取当前虚拟机的状态\nvagrant global-status   显示当前用户 Vagrant 的所有环境状态\n\n\n# 基本使用命令\n\nstart: vagrant up\n\ncheck status: vagrant status\n\nssh connect: vagrant ssh <name>\n# ssh -i  /path/.vagrant/machines/default/virtualbox/private_key vagrant@ip\n\nssh config: vagrant ssh-config\n\nsuspend/resume/reload/stop: vagrant suspend/resume/reload/halt <name>\n\ndelete/remove: vagrant destory <name>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * centos7: http://cloud.centos.org/centos\n\nvagrant box add centos/7\n\n\n1\n\n * ubuntu: http://cloud-images.ubuntu.com/\n\nvagrant box add https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images/bionic/current/bionic-server-cloudimg-amd64-vagrant.box --name ubuntu/20\n\n\n1\n\n * plugin: https://rubygems.org/\n\nvagrant plugin install vagrant-vbguest\n\nvagrant plugin install vagrant-hostmanager\n\nvagrant plugin install vagrant-bindfs\n\n\n1\n2\n3\n4\n5\n\n\n\n# vagrant 添加无版本号的 box\n\n * vagrant box add centos/7\n\ncentos/7 # 表示 centos系统 和 centos的版本号7\n\n\n1\n\n * vagrant box add boxName ./downloadBoxName.box\n\nboxName # 添加之后的box 名称\n./downloadBoxName.box # 下载到本地的box\n\n\n1\n2\n\n\n\n# vagrant 添加带版本号的 box\n\n * 创建：metadata.json\n   \n   * name：添加的 box 名字\n   * version：版本号\n   * providers.name：虚拟主机类型\n   * providers.url：box 地址\n\n{\n  "name": "centos/7",\n  "versions": [\n    {\n      "version": "1809.01",\n      "providers": [\n        {\n          "name": "virtualbox",\n          "url": "./virtualbox.box"\n        }\n      ]\n    }\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * 运行创建: vagrant box add metadata.json\n\n\n# SSH 登录 linux\n\nssh: 127.0.0.1\n端口: 2222\n用户名: vagrant\n密码: vagrant\n\n\n1\n2\n3\n4\n\n\n\n# vagrant init\n\n * 初始化项目：vagrant init centos/7\n\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# All Vagrant configuration is done below. The "2" in Vagrant.configure\n# configures the configuration version (we support older styles for\n# backwards compatibility). Please don\'t change it unless you know what\n# you\'re doing.\nVagrant.configure("2") do |config|\n  # The most common configuration options are documented and commented below.\n  # For a complete reference, please see the online documentation at\n  # https://docs.vagrantup.com.\n\n  # Every Vagrant development environment requires a box. You can search for\n  # boxes at https://vagrantcloud.com/search.\n  config.vm.box = "centos/7"\n\n  # Disable automatic box update checking. If you disable this, then\n  # boxes will only be checked for updates when the user runs\n  # `vagrant box outdated`. This is not recommended.\n  config.vm.box_check_update = false\n  # Create a forwarded port mapping which allows access to a specific port\n  # within the machine from a port on the host machine. In the example below,\n  # accessing "localhost:8080" will access port 80 on the guest machine.\n  # NOTE: This will enable public access to the opened port\n  # config.vm.network "forwarded_port", guest: 80, host: 8080\n\n  # Create a forwarded port mapping which allows access to a specific port\n  # within the machine from a port on the host machine and only allow access\n  # via 127.0.0.1 to disable public access\n  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"\n\n  # set auto_update to false, if you do NOT want to check the correct\n  # additions version when booting this machine\n  # cmd: vagrant vbguest --status\n  config.vbguest.auto_update = false\n  # do NOT download the iso file from a webserver\n  config.vbguest.no_remote = true\n\n  # Create a private network, which allows host-only access to the machine\n  # using a specific IP.\n  config.vm.network "private_network", ip: "192.168.33.10"\n\n  # Create a public network, which generally matched to bridged network.\n  # Bridged networks make the machine appear as another physical device on\n  # your network.\n  # config.vm.network "public_network"\n\n  # Share an additional folder to the guest VM. The first argument is\n  # the path on the host to the actual folder. The second argument is\n  # the path on the guest to mount the folder. And the optional third\n  # argument is a set of non-required options.\n  config.vm.synced_folder "E:/boxs/centos7/data", "/vagrant_data",\n    create: true, owner: "root", group: "root"\n  # Provider-specific configuration so you can fine-tune various\n  # backing providers for Vagrant. These expose provider-specific options.\n  # Example for VirtualBox:\n  #\n  # config.vm.provider "virtualbox" do |vb|\n  #   # Display the VirtualBox GUI when booting the machine\n  #   vb.gui = true\n  #\n  #   # Customize the amount of memory on the VM:\n  #   vb.memory = "1024"\n  # end\n  #\n  # View the documentation for the provider you are using for more\n  # information on available options.\n\n  # Enable provisioning with a shell script. Additional provisioners such as\n  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the\n  # documentation for more information about their specific syntax and use.\n  # config.vm.provision "shell", inline: <<-SHELL\n  #   apt-get update\n  #   apt-get install -y apache2\n  # SHELL\nend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n\n\n\n# plugin\n\n * 列出插件: vagrant plugin list\n * 安装: vagrant plugin install\n\n# Installing a plugin from a known gem source\n  vagrant plugin install my-plugin\n\n# Installing a plugin from a local file source\n  vagrant plugin install /path/to/my-plugin.gem\n\n\n1\n2\n3\n4\n5\n\n\n * 更新: vagrant plugin update [my-plugin]\n\n * 卸载: vagrant plugin uninstall my-plugin\n\n * Vagrantfile\n\nVagrant.config(2) do |config|\n    config.vm.box = "centos/7"\n\n    config.vm.define "node1" do |node1|\n        node1.vm.network "private_network", ip: "192.168.33.11"\n        node1.vm.hostname = "node1"\n    end\n\n    config.vm.define "node2" do |node2|\n        node2.vm.network "private_network", ip: "192.168.33.22"\n        node2.vm.hostname = "node2"\n    end\n\n    config.vm.define "node3" do |node3|\n        node3.vm.network "private_network", ip: "192.168.33.33"\n        node3.vm.hostname = "node3"\n    end\n\nend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# vagrant-vbguest\n\n * vagrant plugin install vagrant-vbguest\n * vagrant vbguest --status\n * vagrant vbguest --do install node1\n\nVagrant.config(2) do |config|\n    config.vm.box = "centos/7"\n\n    # 不想自动更新\n    config.vbguest.auto_update = false\n\n    config.vm.define "node1" do |node1|\n        node1.vm.network "private_network", ip: "192.168.33.11"\n        node1.vm.hostname = "node1"\n    end\n\n    config.vm.define "node2" do |node2|\n        node2.vm.network "private_network", ip: "192.168.33.22"\n        node2.vm.hostname = "node2"\n    end\n\n    config.vm.define "node3" do |node3|\n        node3.vm.network "private_network", ip: "192.168.33.33"\n        node3.vm.hostname = "node3"\n    end\n\nend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# vagrant-hostmanager\n\n * vagrant plugin install vagrant-hostmanager\n * vagrant hostmanager\n\nVagrant.config(2) do |config|\n    config.vm.box = "centos/7"\n\n    config.hostmanager.enabled = true\n    config.hostmanager.manage_guest = true\n    config.hostmanager.manage_host = true\n\n    # 不想自动更新\n    config.vbguest.auto_update = false\n\n    config.vm.define "node1" do |node1|\n        node1.vm.network "private_network", ip: "192.168.33.11"\n        node1.vm.hostname = "node1"\n    end\n\n    config.vm.define "node2" do |node2|\n        node2.vm.network "private_network", ip: "192.168.33.22"\n        node2.vm.hostname = "node2"\n    end\n\n    config.vm.define "node3" do |node3|\n        node3.vm.network "private_network", ip: "192.168.33.33"\n        node3.vm.hostname = "node3"\n    end\n\nend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# vagrant-bindfs\n\n * vagrant plugin install vagrant-bindfs\n\nVagrant.config(2) do |config|\n    config.vm.box = "centos/7"\n\n    config.hostmanager.enabled = true\n    config.hostmanager.manage_guest = true\n    config.hostmanager.manage_host = true\n\n    # 不想自动更新\n    config.vbguest.auto_update = false\n\n    config.vm.define "node1" do |node1|\n        # set linux private network\n        node1.vm.network "private_network", ip: "192.168.33.11"\n        # set linux hostname\n        node1.vm.hostname="node1"\n        # set sync folder\n        node1.vm.synced_folder "./app", "/mnt/app-data", type: "nfs"\n        # use bindfs\n        node1.bindfs.bind_folder "/mnt/app-data", "/app",\n            # add roles\n            force_user: \'root\', force_group: \'root\', o: "nonempty"\n    end\n\n    config.vm.define "node2" do |node2|\n        node2.vm.network "private_network", ip: "192.168.33.22"\n        node2.vm.hostname = "node2"\n    end\n\n    config.vm.define "node3" do |node3|\n        node3.vm.network "private_network", ip: "192.168.33.33"\n        node3.vm.hostname = "node3"\n    end\n\nend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# packge\n\n# nginx： sudo rm -rf /etc/udev/rules.d/70-persistent-net.rules\n\n# 打包\nvagrant package\n\n\n1\n2\n3\n4\n\n\n\n# multi Machine\n\n * 初始化: vagrant init centos/7\n\n * Vagrantfile\n\nVagrant.configure("2") do |config|\n  # use centos/7 box\n  config.vm.box = "centos/7"\n\n  config.vm.box_check_update = false\n\n  config.vbguest.auto_update = false\n  config.vbguest.no_remote = true\n\n  config.vm.provision "shell", inline: "echo Hello"\n\n\n\n  # define: host is web , params is web\n  config.vm.define "web" do |web|\n    # config\n    web.vm.network "private_network", ip: "192.168.33.10"\n    web.vm.hostname = "nginx"\n    web.vm.synced_folder "./web", "/web"\n  end\n\n  config.vm.define "db" do |db|\n    # config\n    db.vm.network "private_network", ip: "192.168.33.11"\n    db.vm.hostname = "mysql"\n    db.vm.synced_folder "./db", "/db"\n  end\n\nend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n * ssh\n\nvagrant up # 启动主机\nvagrant status # 查看状态\nvagrant ssh web # ssh连接web主机\n\n\n1\n2\n3\n\n\n\n# 参考资料\n\n * 使用 Vagrant 打造跨平台开发环境\n * 超详细的 Vagrant 上手指南\n * Vagrant的网络配置',normalizedContent:' * vagrant\n * app.vagrantup\n * rubygems\n * virtualbox\n * https://www.osboxes.org/\n\n\n# command\n\ntables                  are\nvagrant init            初始化 box 的操作，会生成 vagrant 的配置文件 vagrantfile\nvagrant up              启动本地环境\nvagrant ssh             通过 ssh 登录本地环境所在虚拟机\nvagrant halt            关闭本地环境\nvagrant suspend         暂停本地环境\nvagrant resume          恢复本地环境\nvagrant reload          修改了 vagrantfile 后，使之生效（相当于先 halt，再 up）\nvagrant destroy         彻底移除本地环境\nvagrant box list        显示当前已经添加的 box 列表\nvagrant box add         添加 box 到列表\nvagrant box remove      删除相应的 box\nvagrant package         打包命令，可以把当前的运行的虚拟机环境进行打包\nvagrant plugin          用于安装卸载插件\nvagrant status          获取当前虚拟机的状态\nvagrant global-status   显示当前用户 vagrant 的所有环境状态\n\n\n# 基本使用命令\n\nstart: vagrant up\n\ncheck status: vagrant status\n\nssh connect: vagrant ssh <name>\n# ssh -i  /path/.vagrant/machines/default/virtualbox/private_key vagrant@ip\n\nssh config: vagrant ssh-config\n\nsuspend/resume/reload/stop: vagrant suspend/resume/reload/halt <name>\n\ndelete/remove: vagrant destory <name>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n * centos7: http://cloud.centos.org/centos\n\nvagrant box add centos/7\n\n\n1\n\n * ubuntu: http://cloud-images.ubuntu.com/\n\nvagrant box add https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images/bionic/current/bionic-server-cloudimg-amd64-vagrant.box --name ubuntu/20\n\n\n1\n\n * plugin: https://rubygems.org/\n\nvagrant plugin install vagrant-vbguest\n\nvagrant plugin install vagrant-hostmanager\n\nvagrant plugin install vagrant-bindfs\n\n\n1\n2\n3\n4\n5\n\n\n\n# vagrant 添加无版本号的 box\n\n * vagrant box add centos/7\n\ncentos/7 # 表示 centos系统 和 centos的版本号7\n\n\n1\n\n * vagrant box add boxname ./downloadboxname.box\n\nboxname # 添加之后的box 名称\n./downloadboxname.box # 下载到本地的box\n\n\n1\n2\n\n\n\n# vagrant 添加带版本号的 box\n\n * 创建：metadata.json\n   \n   * name：添加的 box 名字\n   * version：版本号\n   * providers.name：虚拟主机类型\n   * providers.url：box 地址\n\n{\n  "name": "centos/7",\n  "versions": [\n    {\n      "version": "1809.01",\n      "providers": [\n        {\n          "name": "virtualbox",\n          "url": "./virtualbox.box"\n        }\n      ]\n    }\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n * 运行创建: vagrant box add metadata.json\n\n\n# ssh 登录 linux\n\nssh: 127.0.0.1\n端口: 2222\n用户名: vagrant\n密码: vagrant\n\n\n1\n2\n3\n4\n\n\n\n# vagrant init\n\n * 初始化项目：vagrant init centos/7\n\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# all vagrant configuration is done below. the "2" in vagrant.configure\n# configures the configuration version (we support older styles for\n# backwards compatibility). please don\'t change it unless you know what\n# you\'re doing.\nvagrant.configure("2") do |config|\n  # the most common configuration options are documented and commented below.\n  # for a complete reference, please see the online documentation at\n  # https://docs.vagrantup.com.\n\n  # every vagrant development environment requires a box. you can search for\n  # boxes at https://vagrantcloud.com/search.\n  config.vm.box = "centos/7"\n\n  # disable automatic box update checking. if you disable this, then\n  # boxes will only be checked for updates when the user runs\n  # `vagrant box outdated`. this is not recommended.\n  config.vm.box_check_update = false\n  # create a forwarded port mapping which allows access to a specific port\n  # within the machine from a port on the host machine. in the example below,\n  # accessing "localhost:8080" will access port 80 on the guest machine.\n  # note: this will enable public access to the opened port\n  # config.vm.network "forwarded_port", guest: 80, host: 8080\n\n  # create a forwarded port mapping which allows access to a specific port\n  # within the machine from a port on the host machine and only allow access\n  # via 127.0.0.1 to disable public access\n  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"\n\n  # set auto_update to false, if you do not want to check the correct\n  # additions version when booting this machine\n  # cmd: vagrant vbguest --status\n  config.vbguest.auto_update = false\n  # do not download the iso file from a webserver\n  config.vbguest.no_remote = true\n\n  # create a private network, which allows host-only access to the machine\n  # using a specific ip.\n  config.vm.network "private_network", ip: "192.168.33.10"\n\n  # create a public network, which generally matched to bridged network.\n  # bridged networks make the machine appear as another physical device on\n  # your network.\n  # config.vm.network "public_network"\n\n  # share an additional folder to the guest vm. the first argument is\n  # the path on the host to the actual folder. the second argument is\n  # the path on the guest to mount the folder. and the optional third\n  # argument is a set of non-required options.\n  config.vm.synced_folder "e:/boxs/centos7/data", "/vagrant_data",\n    create: true, owner: "root", group: "root"\n  # provider-specific configuration so you can fine-tune various\n  # backing providers for vagrant. these expose provider-specific options.\n  # example for virtualbox:\n  #\n  # config.vm.provider "virtualbox" do |vb|\n  #   # display the virtualbox gui when booting the machine\n  #   vb.gui = true\n  #\n  #   # customize the amount of memory on the vm:\n  #   vb.memory = "1024"\n  # end\n  #\n  # view the documentation for the provider you are using for more\n  # information on available options.\n\n  # enable provisioning with a shell script. additional provisioners such as\n  # puppet, chef, ansible, salt, and docker are also available. please see the\n  # documentation for more information about their specific syntax and use.\n  # config.vm.provision "shell", inline: <<-shell\n  #   apt-get update\n  #   apt-get install -y apache2\n  # shell\nend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n\n\n\n# plugin\n\n * 列出插件: vagrant plugin list\n * 安装: vagrant plugin install\n\n# installing a plugin from a known gem source\n  vagrant plugin install my-plugin\n\n# installing a plugin from a local file source\n  vagrant plugin install /path/to/my-plugin.gem\n\n\n1\n2\n3\n4\n5\n\n\n * 更新: vagrant plugin update [my-plugin]\n\n * 卸载: vagrant plugin uninstall my-plugin\n\n * vagrantfile\n\nvagrant.config(2) do |config|\n    config.vm.box = "centos/7"\n\n    config.vm.define "node1" do |node1|\n        node1.vm.network "private_network", ip: "192.168.33.11"\n        node1.vm.hostname = "node1"\n    end\n\n    config.vm.define "node2" do |node2|\n        node2.vm.network "private_network", ip: "192.168.33.22"\n        node2.vm.hostname = "node2"\n    end\n\n    config.vm.define "node3" do |node3|\n        node3.vm.network "private_network", ip: "192.168.33.33"\n        node3.vm.hostname = "node3"\n    end\n\nend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# vagrant-vbguest\n\n * vagrant plugin install vagrant-vbguest\n * vagrant vbguest --status\n * vagrant vbguest --do install node1\n\nvagrant.config(2) do |config|\n    config.vm.box = "centos/7"\n\n    # 不想自动更新\n    config.vbguest.auto_update = false\n\n    config.vm.define "node1" do |node1|\n        node1.vm.network "private_network", ip: "192.168.33.11"\n        node1.vm.hostname = "node1"\n    end\n\n    config.vm.define "node2" do |node2|\n        node2.vm.network "private_network", ip: "192.168.33.22"\n        node2.vm.hostname = "node2"\n    end\n\n    config.vm.define "node3" do |node3|\n        node3.vm.network "private_network", ip: "192.168.33.33"\n        node3.vm.hostname = "node3"\n    end\n\nend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# vagrant-hostmanager\n\n * vagrant plugin install vagrant-hostmanager\n * vagrant hostmanager\n\nvagrant.config(2) do |config|\n    config.vm.box = "centos/7"\n\n    config.hostmanager.enabled = true\n    config.hostmanager.manage_guest = true\n    config.hostmanager.manage_host = true\n\n    # 不想自动更新\n    config.vbguest.auto_update = false\n\n    config.vm.define "node1" do |node1|\n        node1.vm.network "private_network", ip: "192.168.33.11"\n        node1.vm.hostname = "node1"\n    end\n\n    config.vm.define "node2" do |node2|\n        node2.vm.network "private_network", ip: "192.168.33.22"\n        node2.vm.hostname = "node2"\n    end\n\n    config.vm.define "node3" do |node3|\n        node3.vm.network "private_network", ip: "192.168.33.33"\n        node3.vm.hostname = "node3"\n    end\n\nend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# vagrant-bindfs\n\n * vagrant plugin install vagrant-bindfs\n\nvagrant.config(2) do |config|\n    config.vm.box = "centos/7"\n\n    config.hostmanager.enabled = true\n    config.hostmanager.manage_guest = true\n    config.hostmanager.manage_host = true\n\n    # 不想自动更新\n    config.vbguest.auto_update = false\n\n    config.vm.define "node1" do |node1|\n        # set linux private network\n        node1.vm.network "private_network", ip: "192.168.33.11"\n        # set linux hostname\n        node1.vm.hostname="node1"\n        # set sync folder\n        node1.vm.synced_folder "./app", "/mnt/app-data", type: "nfs"\n        # use bindfs\n        node1.bindfs.bind_folder "/mnt/app-data", "/app",\n            # add roles\n            force_user: \'root\', force_group: \'root\', o: "nonempty"\n    end\n\n    config.vm.define "node2" do |node2|\n        node2.vm.network "private_network", ip: "192.168.33.22"\n        node2.vm.hostname = "node2"\n    end\n\n    config.vm.define "node3" do |node3|\n        node3.vm.network "private_network", ip: "192.168.33.33"\n        node3.vm.hostname = "node3"\n    end\n\nend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# packge\n\n# nginx： sudo rm -rf /etc/udev/rules.d/70-persistent-net.rules\n\n# 打包\nvagrant package\n\n\n1\n2\n3\n4\n\n\n\n# multi machine\n\n * 初始化: vagrant init centos/7\n\n * vagrantfile\n\nvagrant.configure("2") do |config|\n  # use centos/7 box\n  config.vm.box = "centos/7"\n\n  config.vm.box_check_update = false\n\n  config.vbguest.auto_update = false\n  config.vbguest.no_remote = true\n\n  config.vm.provision "shell", inline: "echo hello"\n\n\n\n  # define: host is web , params is web\n  config.vm.define "web" do |web|\n    # config\n    web.vm.network "private_network", ip: "192.168.33.10"\n    web.vm.hostname = "nginx"\n    web.vm.synced_folder "./web", "/web"\n  end\n\n  config.vm.define "db" do |db|\n    # config\n    db.vm.network "private_network", ip: "192.168.33.11"\n    db.vm.hostname = "mysql"\n    db.vm.synced_folder "./db", "/db"\n  end\n\nend\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n * ssh\n\nvagrant up # 启动主机\nvagrant status # 查看状态\nvagrant ssh web # ssh连接web主机\n\n\n1\n2\n3\n\n\n\n# 参考资料\n\n * 使用 vagrant 打造跨平台开发环境\n * 超详细的 vagrant 上手指南\n * vagrant的网络配置',charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1647517837e3},{title:"vim的简单使用",frontmatter:{title:"vim的简单使用",date:"2020-04-20T00:00:00.000Z",sidebar:"auto",tags:["vim"],categories:["system"],readingShow:"top"},regularPath:"/services/tools/vim.html",relativePath:"services/tools/vim.md",key:"v-6acd1126",path:"/services/tools/vim.html",headers:[{level:2,title:"vim 模式",slug:"vim-模式",normalizedTitle:"vim 模式",charIndex:2},{level:2,title:"命令模式",slug:"命令模式",normalizedTitle:"命令模式",charIndex:43},{level:2,title:"底行模式",slug:"底行模式",normalizedTitle:"底行模式",charIndex:53},{level:2,title:"命令",slug:"命令",normalizedTitle:"命令",charIndex:43},{level:2,title:"vim 安装与配置",slug:"vim-安装与配置",normalizedTitle:"vim 安装与配置",charIndex:892},{level:2,title:"vim plugin",slug:"vim-plugin",normalizedTitle:"vim plugin",charIndex:1217},{level:2,title:"相关链接",slug:"相关链接",normalizedTitle:"相关链接",charIndex:1284}],headersStr:"vim 模式 命令模式 底行模式 命令 vim 安装与配置 vim plugin 相关链接",content:"# vim 模式\n\n * 使用 vi 编辑器:vi 编辑器提供了 3 种模式: 分别是命令模式、插入模式、底行模式\n\n\n# 命令模式\n\nvi 文件路径\nvim +  /home/xyz/test.txt  # 打开文件后定位到最后一行\nvim +5 /home/xyz/test.txt  # 打开文件后定位到第5行\n\n\n1\n2\n3\n\n\n\n# 底行模式\n\n:w      # 保存，:w fileName另存为\n:q      # 退出\n:wq     # 保存并退出\n:e!     # 撤销更改，返回到上一次保存的状态\n:q!     # 不保存强制退出\n:set nu # 设置行号\n/aaa    # 在该文件中查找aaa\n:noh    # 去掉高亮\n:3      # 定位到第3行\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 命令\n\ni # 进入编辑模式，当前光标处插入\nZZ（大写）# 保存并退出\nu # 辙销操作，可多次使用\ndd # 删除当前行\nyy # 复制当前行\np  # 粘贴内容\nn # 下一个\nN # 上一个\nI # 在当前 行首 插入\nA # 在当前 行尾 插入\ni # 在当前字符的 左边 插入\na # 在当前字符的 右边 插入\no # 在当前行 下面 插入一个新行\nO # 在当前行 上面 插入一个新行\nj # 下\nk # 上\nh # 左\nl # 右\nv # 按 v 之后按方向键可以选中你要选中的文字\ngg # 跳到第 1 行\nG # 跳到第最后行\n16G 或 :16 # 跳到第 16 行\n$ # 到本行 行尾\n0 # 到本行 行头\nw # 到下一个单词的 开头\ne # 到下一个单词的 结尾\nCtrl + u # 向文件 首翻 半屏\nCtrl + d # 向文件 尾翻 半屏\nCtrl + f # 向文件 尾翻 一屏\nCtrl + b # 向文件 首翻 一屏\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# vim 安装与配置\n\ncd ~\ntouch .vimrc\nvim .vimrc\n\nset nu         # 这是设置显示行号\nset showmode   # 设置在命令行界面最下面显示当前模式等。\nset ruler     # 在右下角显示光标所在的行数等信息\n# 设置每次单击Enter键后，光标移动到下一行时与上一行的起始字符对齐\nset autoindent\n# 即设置语法检测，当编辑C或者Shell脚本时，关键字会用特殊颜色显示\nsyntax on\nhi MatchParen ctermbg=blue ctermfg=white   # 匹配的括号颜色修改\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# vim plugin\n\n * vundle 插件管理工具\n * vim-plug 插件管理工具\n * vim-scripts\n\n\n# 相关链接\n\n * vim\n * Vim YouCompleteMe\n * 利用 vundle 工具来管理 vim 插件\n * spaceVim\n * vim-for-server",normalizedContent:"# vim 模式\n\n * 使用 vi 编辑器:vi 编辑器提供了 3 种模式: 分别是命令模式、插入模式、底行模式\n\n\n# 命令模式\n\nvi 文件路径\nvim +  /home/xyz/test.txt  # 打开文件后定位到最后一行\nvim +5 /home/xyz/test.txt  # 打开文件后定位到第5行\n\n\n1\n2\n3\n\n\n\n# 底行模式\n\n:w      # 保存，:w filename另存为\n:q      # 退出\n:wq     # 保存并退出\n:e!     # 撤销更改，返回到上一次保存的状态\n:q!     # 不保存强制退出\n:set nu # 设置行号\n/aaa    # 在该文件中查找aaa\n:noh    # 去掉高亮\n:3      # 定位到第3行\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 命令\n\ni # 进入编辑模式，当前光标处插入\nzz（大写）# 保存并退出\nu # 辙销操作，可多次使用\ndd # 删除当前行\nyy # 复制当前行\np  # 粘贴内容\nn # 下一个\nn # 上一个\ni # 在当前 行首 插入\na # 在当前 行尾 插入\ni # 在当前字符的 左边 插入\na # 在当前字符的 右边 插入\no # 在当前行 下面 插入一个新行\no # 在当前行 上面 插入一个新行\nj # 下\nk # 上\nh # 左\nl # 右\nv # 按 v 之后按方向键可以选中你要选中的文字\ngg # 跳到第 1 行\ng # 跳到第最后行\n16g 或 :16 # 跳到第 16 行\n$ # 到本行 行尾\n0 # 到本行 行头\nw # 到下一个单词的 开头\ne # 到下一个单词的 结尾\nctrl + u # 向文件 首翻 半屏\nctrl + d # 向文件 尾翻 半屏\nctrl + f # 向文件 尾翻 一屏\nctrl + b # 向文件 首翻 一屏\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# vim 安装与配置\n\ncd ~\ntouch .vimrc\nvim .vimrc\n\nset nu         # 这是设置显示行号\nset showmode   # 设置在命令行界面最下面显示当前模式等。\nset ruler     # 在右下角显示光标所在的行数等信息\n# 设置每次单击enter键后，光标移动到下一行时与上一行的起始字符对齐\nset autoindent\n# 即设置语法检测，当编辑c或者shell脚本时，关键字会用特殊颜色显示\nsyntax on\nhi matchparen ctermbg=blue ctermfg=white   # 匹配的括号颜色修改\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# vim plugin\n\n * vundle 插件管理工具\n * vim-plug 插件管理工具\n * vim-scripts\n\n\n# 相关链接\n\n * vim\n * vim youcompleteme\n * 利用 vundle 工具来管理 vim 插件\n * spacevim\n * vim-for-server",charsets:{cjk:!0},lastUpdated:"3/17/2022",lastUpdatedTimestamp:1647517837e3,createdTime:1647517837e3},{title:"vscode",frontmatter:{title:"vscode",date:"2020-07-20T00:00:00.000Z",sidebar:"auto",tags:["vscode"],categories:["frontend"],readingShow:"top"},regularPath:"/services/tools/vscode.html",relativePath:"services/tools/vscode.md",key:"v-1493d54b",path:"/services/tools/vscode.html",headers:[{level:2,title:"plugins",slug:"plugins",normalizedTitle:"plugins",charIndex:29},{level:2,title:"vscode setting",slug:"vscode-setting",normalizedTitle:"vscode setting",charIndex:1153},{level:2,title:"vscode vue",slug:"vscode-vue",normalizedTitle:"vscode vue",charIndex:2560},{level:2,title:"vscode config",slug:"vscode-config",normalizedTitle:"vscode config",charIndex:3999}],headersStr:"plugins vscode setting vscode vue vscode config",content:' * vscode-generator-code\n\n\n# plugins\n\n- Bookmarks\n- Bracket Pair Colorizer\n- Debugger for Chrome\n- EditorConfig for VS Code\n- Error Gutters\n- ESLint\n- TSLint\n- filesize\n- Add jsdoc comments\n\n- open in browser\n- browser preview\n- PicGo\n\n- Live Server\n- Material Theme\n- Material Icon Theme\n- One Dark Pro\n\n- WakaTime\n- Terminal\n\n- Docker\n- Settings Sync\n\n- Git History\n- GitLens — Git supercharged\n\n\n\n- Auto Close Tag\n- Auto Rename Tag\n- Mithril Emmet\n- HTML CSS Support\n- HTML Snippets\n- HTMLHint\n\n- Import Cost\n- markdownlint\n\n- Path Autocomplete\n- Path Intellisense\n\n- Prettier - Code formatter\n- stylelint\n\n- TODO Highlight\n\n- Autoprefixer\n- CSScomb\n- language-stylus\n- Sass\n\n- REST Client\n\n- Angular 1 JavaScript and TypeScript Snippets\n\n- Vetur\n- Vue 2 Snippets\n\n- JavaScript (ES6) code snippets\n- ES7 React/Redux/GraphQL/React-Native snippets\n- Reactjs code snippets\n\n- minapp\n\n- npm\n- npm Intellisense\n\n- any-rule\n- code spell checker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n\n\n\n# vscode setting\n\n * vscode-user-setting.json\n\n...\n{\n  "workbench.iconTheme": "material-icon-theme",\n  "terminal.integrated.shell.osx": "/bin/zsh",\n  "workbench.settings.useSplitJSON": true,\n  "editor.tabSize": 4,\n  "files.associations": {\n    "*.js": "javascript",\n    "*.cjson": "jsonc",\n    "*.wxss": "css",\n    "*.wxs": "javascript",\n    "*.vue": "vue",\n    "*.tpl": "html"\n  },\n  "emmet.triggerExpansionOnTab": true,\n  "emmet.includeLanguages": {\n    "javascript": "javascriptreact",\n    "wxml": "html"\n  },\n  "eslint.enable": true,\n  "eslint.validate": [\n    "vue",\n    "vue-html",\n    "javascript",\n    "typescript",\n    "javascriptreact",\n    "typescriptreact"\n  ],\n  "editor.formatOnPaste": true,\n  "editor.formatOnSave": true,\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": true\n  },\n  "eslint.codeActionsOnSave.mode": "all",\n  "html.format.extraLiners": "",\n  "javascript.updateImportsOnFileMove.enabled": "always",\n  "javascript.format.insertSpaceBeforeFunctionParenthesis": false,\n  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": false,\n  "[html]": {\n    "editor.defaultFormatter": "vscode.html-language-features"\n  }\n  // "[javascript]": {\n  //   "editor.defaultFormatter": "vscode.typescript-language-features"\n  // },\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# vscode vue\n\n * vscode-user-setting-vue.json\n\n{\n  "eslint.enable": true,\n  "eslint.validate": [\n    "javascript",\n    "javascriptreact",\n    {\n      "language": "html",\n      "autoFix": true\n    },\n    {\n      "language": "vue",\n      "autoFix": true\n    },\n    "typescript",\n    "typescriptreact"\n  ],\n  "files.associations": {\n    "*.vue": "vue"\n  },\n\n  "eslint.autoFixOnSave": true,\n  // prettier\n  "prettier.singleQuote": true,\n  "prettier.semi": false,\n  "prettier.requireConfig": true,\n\n  // editor\n  "editor.formatOnPaste": true,\n  "editor.formatOnSave": false,\n\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": true\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n * workspace config vue\n\n{\n  "editor.formatOnPaste": true,\n  "editor.formatOnSave": false,\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": true\n  },\n  "eslint.enable": true,\n  "eslint.validate": ["javascript", "javascriptreact", "vue-html", "vue"],\n  "files.autoSave": "off",\n  "eslint.codeActionsOnSave.mode": "all",\n  //"vetur.format.defaultFormatter.js": "vscode-typescript",\n  // "vetur.format.defaultFormatter.html": "prettier",\n  // "vetur.format.defaultFormatter.js": "prettier-eslint",\n  "javascript.format.insertSpaceBeforeFunctionParenthesis": false,\n  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": false\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# vscode config\n\n"workbench.activityBar.visible": false // 隐藏控制工作台中的活动栏\n\n"breadcrumbs.enabled": true,  // 启用导航路径\n"workbench.settings.useSplitJSON": true  // 打开默认设置配置JSON\n\n// 自定义tab栏样式\n"workbench.colorCustomizations": {\n  "[One Dark Pro]": {\n    // "tab.activeBackground": "#504141",\n    "tab.activeBorder": "#ff0000"\n  },\n},\n"window.titleBarStyle": "custom"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n',normalizedContent:' * vscode-generator-code\n\n\n# plugins\n\n- bookmarks\n- bracket pair colorizer\n- debugger for chrome\n- editorconfig for vs code\n- error gutters\n- eslint\n- tslint\n- filesize\n- add jsdoc comments\n\n- open in browser\n- browser preview\n- picgo\n\n- live server\n- material theme\n- material icon theme\n- one dark pro\n\n- wakatime\n- terminal\n\n- docker\n- settings sync\n\n- git history\n- gitlens — git supercharged\n\n\n\n- auto close tag\n- auto rename tag\n- mithril emmet\n- html css support\n- html snippets\n- htmlhint\n\n- import cost\n- markdownlint\n\n- path autocomplete\n- path intellisense\n\n- prettier - code formatter\n- stylelint\n\n- todo highlight\n\n- autoprefixer\n- csscomb\n- language-stylus\n- sass\n\n- rest client\n\n- angular 1 javascript and typescript snippets\n\n- vetur\n- vue 2 snippets\n\n- javascript (es6) code snippets\n- es7 react/redux/graphql/react-native snippets\n- reactjs code snippets\n\n- minapp\n\n- npm\n- npm intellisense\n\n- any-rule\n- code spell checker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n\n\n\n# vscode setting\n\n * vscode-user-setting.json\n\n...\n{\n  "workbench.icontheme": "material-icon-theme",\n  "terminal.integrated.shell.osx": "/bin/zsh",\n  "workbench.settings.usesplitjson": true,\n  "editor.tabsize": 4,\n  "files.associations": {\n    "*.js": "javascript",\n    "*.cjson": "jsonc",\n    "*.wxss": "css",\n    "*.wxs": "javascript",\n    "*.vue": "vue",\n    "*.tpl": "html"\n  },\n  "emmet.triggerexpansionontab": true,\n  "emmet.includelanguages": {\n    "javascript": "javascriptreact",\n    "wxml": "html"\n  },\n  "eslint.enable": true,\n  "eslint.validate": [\n    "vue",\n    "vue-html",\n    "javascript",\n    "typescript",\n    "javascriptreact",\n    "typescriptreact"\n  ],\n  "editor.formatonpaste": true,\n  "editor.formatonsave": true,\n  "editor.codeactionsonsave": {\n    "source.fixall.eslint": true\n  },\n  "eslint.codeactionsonsave.mode": "all",\n  "html.format.extraliners": "",\n  "javascript.updateimportsonfilemove.enabled": "always",\n  "javascript.format.insertspacebeforefunctionparenthesis": false,\n  "javascript.format.insertspaceafterfunctionkeywordforanonymousfunctions": false,\n  "[html]": {\n    "editor.defaultformatter": "vscode.html-language-features"\n  }\n  // "[javascript]": {\n  //   "editor.defaultformatter": "vscode.typescript-language-features"\n  // },\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# vscode vue\n\n * vscode-user-setting-vue.json\n\n{\n  "eslint.enable": true,\n  "eslint.validate": [\n    "javascript",\n    "javascriptreact",\n    {\n      "language": "html",\n      "autofix": true\n    },\n    {\n      "language": "vue",\n      "autofix": true\n    },\n    "typescript",\n    "typescriptreact"\n  ],\n  "files.associations": {\n    "*.vue": "vue"\n  },\n\n  "eslint.autofixonsave": true,\n  // prettier\n  "prettier.singlequote": true,\n  "prettier.semi": false,\n  "prettier.requireconfig": true,\n\n  // editor\n  "editor.formatonpaste": true,\n  "editor.formatonsave": false,\n\n  "editor.codeactionsonsave": {\n    "source.fixall.eslint": true\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n * workspace config vue\n\n{\n  "editor.formatonpaste": true,\n  "editor.formatonsave": false,\n  "editor.codeactionsonsave": {\n    "source.fixall.eslint": true\n  },\n  "eslint.enable": true,\n  "eslint.validate": ["javascript", "javascriptreact", "vue-html", "vue"],\n  "files.autosave": "off",\n  "eslint.codeactionsonsave.mode": "all",\n  //"vetur.format.defaultformatter.js": "vscode-typescript",\n  // "vetur.format.defaultformatter.html": "prettier",\n  // "vetur.format.defaultformatter.js": "prettier-eslint",\n  "javascript.format.insertspacebeforefunctionparenthesis": false,\n  "javascript.format.insertspaceafterfunctionkeywordforanonymousfunctions": false\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# vscode config\n\n"workbench.activitybar.visible": false // 隐藏控制工作台中的活动栏\n\n"breadcrumbs.enabled": true,  // 启用导航路径\n"workbench.settings.usesplitjson": true  // 打开默认设置配置json\n\n// 自定义tab栏样式\n"workbench.colorcustomizations": {\n  "[one dark pro]": {\n    // "tab.activebackground": "#504141",\n    "tab.activeborder": "#ff0000"\n  },\n},\n"window.titlebarstyle": "custom"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n',charsets:{cjk:!0},lastUpdated:"2/3/2022",lastUpdatedTimestamp:1643899953e3,createdTime:1643899953e3},{title:"travis-ci的使用",frontmatter:{title:"travis-ci的使用",date:"2021-07-21T00:00:00.000Z",sidebar:"auto",tags:["travis-ci"],categories:["services"],readingShow:"top"},regularPath:"/services/tools/travis.html",relativePath:"services/tools/travis.md",key:"v-3a7ef9eb",path:"/services/tools/travis.html",headers:[{level:2,title:"travis配置",slug:"travis配置",normalizedTitle:"travis配置",charIndex:249},{level:2,title:"参考示例",slug:"参考示例",normalizedTitle:"参考示例",charIndex:1139}],headersStr:"travis配置 参考示例",content:' * travis-ci 社区版\n * travis-ci: javascript-with-nodejs\n * 使用 Travis CI 自动部署 Hexo 到 GitHub\n * 使用 Travis CI 自动部署博客到 github pages 和 coding pages\n * 使用 Travis 自动部署 Hexo 到 Github 与 自己的服务器\n * 持续集成服务 Travis CI 教程\n * 前端持续集成解决方案\n * 在 github 中使用 travis CI\n\n\n# travis配置\n\n# https://docs.travis-ci.com/user/job-lifecycle/\n\nsudo: false\nlanguage: node_js\nnode_js:\n  - "lts/*"\n\naddons\ncache # https://docs.travis-ci.com/user/caching/#arbitrary-directories\nbefore_install # install 阶段之前执行\ninstall # 字段用来指定安装脚本\nbefore_script # script 阶段之前执行\nscript # 字段用来指定构建或测试脚本\nbefore_cache # 用于清除cache https://docs.travis-ci.com/user/caching#before_cache-phase\nafter_success # script 阶段成功时执行\nafter_failure # script 阶段失败时执行\nbefore_deploy # deploy 部署之前执行\ndeploy # 部署 https://docs.travis-ci.com/user/deployment/pages/\nafter_deploy # deploy 部署之后执行\nafter_script # script 阶段之后执行\n\nenv # https://docs.travis-ci.com/user/environment-variables/\nbranches # https://docs.travis-ci.com/user/customizing-the-build/#safelisting-or-blocklisting-branches\nnotifications # https://docs.travis-ci.com/user/notifications/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 参考示例\n\n * 项目根目录下创建：.travis.yml\n\nsudo: false\nlanguage: node_js\nnode_js: stable\n\ncache:\n  directories:\n    - node_modules\n\ninstall:\n  - npm install\nscript:\n  - npm run build # 项目打包命令\nafter_success:\n  - cd ./guide # 项目打包后的目录\n  - git init\n  - git config user.name "your name "\n  - git config user.email "your xxx@email.com"\n  - git add .\n  - git commit -m "Travis CI Auto Builder"\n  - git push --force --quiet "https://${GH_TOKEN}@${GH_REF}" master:gh-pages # Config Github "Personal access tokens"\nbranches:\n  only:\n    - master # 打包的分支\nenv:\n  global:\n    - GH_REF: github.com/chengzao/guide.git # Your github repo url\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n',normalizedContent:' * travis-ci 社区版\n * travis-ci: javascript-with-nodejs\n * 使用 travis ci 自动部署 hexo 到 github\n * 使用 travis ci 自动部署博客到 github pages 和 coding pages\n * 使用 travis 自动部署 hexo 到 github 与 自己的服务器\n * 持续集成服务 travis ci 教程\n * 前端持续集成解决方案\n * 在 github 中使用 travis ci\n\n\n# travis配置\n\n# https://docs.travis-ci.com/user/job-lifecycle/\n\nsudo: false\nlanguage: node_js\nnode_js:\n  - "lts/*"\n\naddons\ncache # https://docs.travis-ci.com/user/caching/#arbitrary-directories\nbefore_install # install 阶段之前执行\ninstall # 字段用来指定安装脚本\nbefore_script # script 阶段之前执行\nscript # 字段用来指定构建或测试脚本\nbefore_cache # 用于清除cache https://docs.travis-ci.com/user/caching#before_cache-phase\nafter_success # script 阶段成功时执行\nafter_failure # script 阶段失败时执行\nbefore_deploy # deploy 部署之前执行\ndeploy # 部署 https://docs.travis-ci.com/user/deployment/pages/\nafter_deploy # deploy 部署之后执行\nafter_script # script 阶段之后执行\n\nenv # https://docs.travis-ci.com/user/environment-variables/\nbranches # https://docs.travis-ci.com/user/customizing-the-build/#safelisting-or-blocklisting-branches\nnotifications # https://docs.travis-ci.com/user/notifications/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 参考示例\n\n * 项目根目录下创建：.travis.yml\n\nsudo: false\nlanguage: node_js\nnode_js: stable\n\ncache:\n  directories:\n    - node_modules\n\ninstall:\n  - npm install\nscript:\n  - npm run build # 项目打包命令\nafter_success:\n  - cd ./guide # 项目打包后的目录\n  - git init\n  - git config user.name "your name "\n  - git config user.email "your xxx@email.com"\n  - git add .\n  - git commit -m "travis ci auto builder"\n  - git push --force --quiet "https://${gh_token}@${gh_ref}" master:gh-pages # config github "personal access tokens"\nbranches:\n  only:\n    - master # 打包的分支\nenv:\n  global:\n    - gh_ref: github.com/chengzao/guide.git # your github repo url\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n',charsets:{cjk:!0},lastUpdated:"3/23/2022",lastUpdatedTimestamp:1648018006e3,createdTime:1647517837e3},{frontmatter:{layout:"Tags",title:"Tags",readingShow:"top"},regularPath:"/tag/",key:"v-b1564aac",path:"/tag/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"FrontmatterKey",title:"Categories",readingShow:"top"},regularPath:"/categories/",key:"v-ef9325c4",path:"/categories/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"TimeLines",title:"Timeline",readingShow:"top"},regularPath:"/timeline/",key:"v-6319eb4e",path:"/timeline/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"array Tags",readingShow:"top"},regularPath:"/tag/array/",key:"v-98a2e7c0",path:"/tag/array/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"tree Tags",readingShow:"top"},regularPath:"/tag/tree/",key:"v-13598032",path:"/tag/tree/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"stack Tags",readingShow:"top"},regularPath:"/tag/stack/",key:"v-5b0b7c5e",path:"/tag/stack/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"queue Tags",readingShow:"top"},regularPath:"/tag/queue/",key:"v-61be8730",path:"/tag/queue/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"LinkedList Tags",readingShow:"top"},regularPath:"/tag/LinkedList/",key:"v-9949d8a4",path:"/tag/LinkedList/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"heap Tags",readingShow:"top"},regularPath:"/tag/heap/",key:"v-14b7a14e",path:"/tag/heap/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"cors Tags",readingShow:"top"},regularPath:"/tag/cors/",key:"v-153af490",path:"/tag/cors/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"XMLHttpRequest Tags",readingShow:"top"},regularPath:"/tag/XMLHttpRequest/",key:"v-073a6dd5",path:"/tag/XMLHttpRequest/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"blog Tags",readingShow:"top"},regularPath:"/tag/blog/",key:"v-1559f73a",path:"/tag/blog/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"angular.js Tags",readingShow:"top"},regularPath:"/tag/angular.js/",key:"v-1fa34910",path:"/tag/angular.js/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"axios Tags",readingShow:"top"},regularPath:"/tag/axios/",key:"v-980194ba",path:"/tag/axios/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"commitizen Tags",readingShow:"top"},regularPath:"/tag/commitizen/",key:"v-0cb74bd8",path:"/tag/commitizen/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"dom Tags",readingShow:"top"},regularPath:"/tag/dom/",key:"v-323ace52",path:"/tag/dom/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"element Tags",readingShow:"top"},regularPath:"/tag/element/",key:"v-62655d46",path:"/tag/element/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"eslint Tags",readingShow:"top"},regularPath:"/tag/eslint/",key:"v-d1c09a98",path:"/tag/eslint/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"vue Tags",readingShow:"top"},regularPath:"/tag/vue/",key:"v-322a45da",path:"/tag/vue/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"event Tags",readingShow:"top"},regularPath:"/tag/event/",key:"v-8a96d802",path:"/tag/event/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"function Tags",readingShow:"top"},regularPath:"/tag/function/",key:"v-11e48bed",path:"/tag/function/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"array2tree Tags",readingShow:"top"},regularPath:"/tag/array2tree/",key:"v-dc4adbe4",path:"/tag/array2tree/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"tree2array Tags",readingShow:"top"},regularPath:"/tag/tree2array/",key:"v-5b1c0160",path:"/tag/tree2array/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"继承 Tags",readingShow:"top"},regularPath:"/tag/%E7%BB%A7%E6%89%BF/",key:"v-c784ecce",path:"/tag/继承/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"graphql Tags",readingShow:"top"},regularPath:"/tag/graphql/",key:"v-55654be0",path:"/tag/graphql/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"error Tags",readingShow:"top"},regularPath:"/tag/error/",key:"v-8afbbb5e",path:"/tag/error/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"jest Tags",readingShow:"top"},regularPath:"/tag/jest/",key:"v-147ebb2e",path:"/tag/jest/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"less Tags",readingShow:"top"},regularPath:"/tag/less/",key:"v-14465d68",path:"/tag/less/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"1像素问题 Tags",readingShow:"top"},regularPath:"/tag/1%E5%83%8F%E7%B4%A0%E9%97%AE%E9%A2%98/",key:"v-c9be2158",path:"/tag/1像素问题/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"micro Tags",readingShow:"top"},regularPath:"/tag/micro/",key:"v-70b965d6",path:"/tag/micro/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"promise Tags",readingShow:"top"},regularPath:"/tag/promise/",key:"v-d81c09c4",path:"/tag/promise/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"viewport Tags",readingShow:"top"},regularPath:"/tag/viewport/",key:"v-851ebe42",path:"/tag/viewport/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"rem Tags",readingShow:"top"},regularPath:"/tag/rem/",key:"v-322e5f02",path:"/tag/rem/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"html渲染 Tags",readingShow:"top"},regularPath:"/tag/html%E6%B8%B2%E6%9F%93/",key:"v-4539aef2",path:"/tag/html渲染/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"tsconfig Tags",readingShow:"top"},regularPath:"/tag/tsconfig/",key:"v-2c1fde64",path:"/tag/tsconfig/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"jsconfig Tags",readingShow:"top"},regularPath:"/tag/jsconfig/",key:"v-6173885a",path:"/tag/jsconfig/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"sass Tags",readingShow:"top"},regularPath:"/tag/sass/",key:"v-1384b752",path:"/tag/sass/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"清除浮动 Tags",readingShow:"top"},regularPath:"/tag/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/",key:"v-7630b09a",path:"/tag/清除浮动/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"css三角形 Tags",readingShow:"top"},regularPath:"/tag/css%E4%B8%89%E8%A7%92%E5%BD%A2/",key:"v-0c6f8b40",path:"/tag/css三角形/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"百分比单位 Tags",readingShow:"top"},regularPath:"/tag/%E7%99%BE%E5%88%86%E6%AF%94%E5%8D%95%E4%BD%8D/",key:"v-0c3f0c0d",path:"/tag/百分比单位/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"字体超出省略 Tags",readingShow:"top"},regularPath:"/tag/%E5%AD%97%E4%BD%93%E8%B6%85%E5%87%BA%E7%9C%81%E7%95%A5/",key:"v-1dbca4e8",path:"/tag/字体超出省略/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"居中 Tags",readingShow:"top"},regularPath:"/tag/%E5%B1%85%E4%B8%AD/",key:"v-653195b2",path:"/tag/居中/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"布局 Tags",readingShow:"top"},regularPath:"/tag/%E5%B8%83%E5%B1%80/",key:"v-382cb721",path:"/tag/布局/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"web安全 Tags",readingShow:"top"},regularPath:"/tag/web%E5%AE%89%E5%85%A8/",key:"v-2f234f48",path:"/tag/web安全/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"webpack Tags",readingShow:"top"},regularPath:"/tag/webpack/",key:"v-b53ec9e8",path:"/tag/webpack/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"gulp Tags",readingShow:"top"},regularPath:"/tag/gulp/",key:"v-14c4f1da",path:"/tag/gulp/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"px2rem Tags",readingShow:"top"},regularPath:"/tag/px2rem/",key:"v-3b41c9d6",path:"/tag/px2rem/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"react Tags",readingShow:"top"},regularPath:"/tag/react/",key:"v-601bec8c",path:"/tag/react/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"aria2 Tags",readingShow:"top"},regularPath:"/tag/aria2/",key:"v-98ab27a0",path:"/tag/aria2/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"centos7 Tags",readingShow:"top"},regularPath:"/tag/centos7/",key:"v-c6fb9be4",path:"/tag/centos7/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"curl Tags",readingShow:"top"},regularPath:"/tag/curl/",key:"v-153581ce",path:"/tag/curl/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"ascii Tags",readingShow:"top"},regularPath:"/tag/ascii/",key:"v-989423b0",path:"/tag/ascii/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"docker Tags",readingShow:"top"},regularPath:"/tag/docker/",key:"v-5ae80825",path:"/tag/docker/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"docker-compose Tags",readingShow:"top"},regularPath:"/tag/docker-compose/",key:"v-3801f600",path:"/tag/docker-compose/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"github Tags",readingShow:"top"},regularPath:"/tag/github/",key:"v-1f67da7c",path:"/tag/github/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"gitlab Tags",readingShow:"top"},regularPath:"/tag/gitlab/",key:"v-1f64cdac",path:"/tag/gitlab/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"git Tags",readingShow:"top"},regularPath:"/tag/git/",key:"v-32383f72",path:"/tag/git/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"linux Tags",readingShow:"top"},regularPath:"/tag/linux/",key:"v-7418fe36",path:"/tag/linux/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"meilisearch Tags",readingShow:"top"},regularPath:"/tag/meilisearch/",key:"v-146a0c63",path:"/tag/meilisearch/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"vuepress Tags",readingShow:"top"},regularPath:"/tag/vuepress/",key:"v-dfb71430",path:"/tag/vuepress/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"nginx Tags",readingShow:"top"},regularPath:"/tag/nginx/",key:"v-6d82ba02",path:"/tag/nginx/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"node.js Tags",readingShow:"top"},regularPath:"/tag/node.js/",key:"v-122bf2c4",path:"/tag/node.js/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"manjaro Tags",readingShow:"top"},regularPath:"/tag/manjaro/",key:"v-51bc7eea",path:"/tag/manjaro/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"search Tags",readingShow:"top"},regularPath:"/tag/search/",key:"v-633c019d",path:"/tag/search/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"sentry Tags",readingShow:"top"},regularPath:"/tag/sentry/",key:"v-63f45646",path:"/tag/sentry/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"ubuntu Tags",readingShow:"top"},regularPath:"/tag/ubuntu/",key:"v-6dfb9784",path:"/tag/ubuntu/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"vagrant Tags",readingShow:"top"},regularPath:"/tag/vagrant/",key:"v-728b15a8",path:"/tag/vagrant/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"vim Tags",readingShow:"top"},regularPath:"/tag/vim/",key:"v-322a9e02",path:"/tag/vim/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"vscode Tags",readingShow:"top"},regularPath:"/tag/vscode/",key:"v-19ed615b",path:"/tag/vscode/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Tag",title:"travis-ci Tags",readingShow:"top"},regularPath:"/tag/travis-ci/",key:"v-5e346c83",path:"/tag/travis-ci/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Category",title:"frontend Categories",readingShow:"top"},regularPath:"/categories/frontend/",key:"v-41f4a8ff",path:"/categories/frontend/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Category",title:"system Categories",readingShow:"top"},regularPath:"/categories/system/",key:"v-d80bedfc",path:"/categories/system/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Category",title:"services Categories",readingShow:"top"},regularPath:"/categories/services/",key:"v-2ebc7033",path:"/categories/services/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Layout",title:"Page 2 - frontend | Categories",readingShow:"top"},regularPath:"/categories/frontend/page/2/",key:"v-72641fde",path:"/categories/frontend/page/2/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Layout",title:"Page 3 - frontend | Categories",readingShow:"top"},regularPath:"/categories/frontend/page/3/",key:"v-72641ffd",path:"/categories/frontend/page/3/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Layout",title:"Page 4 - frontend | Categories",readingShow:"top"},regularPath:"/categories/frontend/page/4/",key:"v-7264201c",path:"/categories/frontend/page/4/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Layout",title:"Page 5 - frontend | Categories",readingShow:"top"},regularPath:"/categories/frontend/page/5/",key:"v-7264203b",path:"/categories/frontend/page/5/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{layout:"Layout",title:"Page 6 - frontend | Categories",readingShow:"top"},regularPath:"/categories/frontend/page/6/",key:"v-7264205a",path:"/categories/frontend/page/6/",headersStr:null,content:"",normalizedContent:"",charsets:{}}],themeConfig:{search:!0,searchMaxSuggestions:50,sidebarDepth:2,repo:"chengzao/guide",docsDir:"docs",editLinks:!0,logo:"/logo.png",authorAvatar:"/logo.png",smoothScroll:!0,navbar:!0,nav:[{text:"前端",items:[{text:"笔记",link:"/frontend/issues/"},{text:"框架",link:"/frontend/library/"},{text:"算法",link:"/frontend/algorithm/"}]},{text:"其他",items:[{text:"工具",link:"/services/tools/"}]}],codeTheme:"okaidia",type:"blog",blogConfig:{category:{location:4,text:"分类"},tag:{location:5,text:"标签"}}},locales:{"/":{lang:"zh-CN",path:"/"}}};var X=t(127),Y=t(188);t(366);r.b.component("codepen",()=>t.e(118).then(t.bind(null,492))),r.b.component("getua",()=>t.e(119).then(t.bind(null,493))),r.b.component("todo-Todo",()=>t.e(16).then(t.bind(null,494))),r.b.component("todo-index",()=>t.e(120).then(t.bind(null,495))),r.b.component("Badge",()=>t.e(0).then(t.bind(null,474)));var J=t(190),Q=t(189),Z=t(187),nn=(t(412),{tags:{array:{key:"array",scope:"tags",path:"/tag/array/",pageKeys:["v-cf0122fe","v-5c30984b"]},tree:{key:"tree",scope:"tags",path:"/tag/tree/",pageKeys:["v-cf0122fe","v-737352ab"]},stack:{key:"stack",scope:"tags",path:"/tag/stack/",pageKeys:["v-9bb5e86a"]},queue:{key:"queue",scope:"tags",path:"/tag/queue/",pageKeys:["v-9bb5e86a"]},LinkedList:{key:"LinkedList",scope:"tags",path:"/tag/LinkedList/",pageKeys:["v-87c13ffa"]},heap:{key:"heap",scope:"tags",path:"/tag/heap/",pageKeys:["v-737352ab"]},cors:{key:"cors",scope:"tags",path:"/tag/cors/",pageKeys:["v-7844a1b2"]},XMLHttpRequest:{key:"XMLHttpRequest",scope:"tags",path:"/tag/XMLHttpRequest/",pageKeys:["v-7844a1b2"]},blog:{key:"blog",scope:"tags",path:"/tag/blog/",pageKeys:["v-6c84e740"]},"angular.js":{key:"angular.js",scope:"tags",path:"/tag/angular.js/",pageKeys:["v-8d01e796"]},axios:{key:"axios",scope:"tags",path:"/tag/axios/",pageKeys:["v-7493ab2a"]},commitizen:{key:"commitizen",scope:"tags",path:"/tag/commitizen/",pageKeys:["v-0c938f45"]},dom:{key:"dom",scope:"tags",path:"/tag/dom/",pageKeys:["v-5900f271"]},element:{key:"element",scope:"tags",path:"/tag/element/",pageKeys:["v-3e8b35eb"]},eslint:{key:"eslint",scope:"tags",path:"/tag/eslint/",pageKeys:["v-e6907df6"]},vue:{key:"vue",scope:"tags",path:"/tag/vue/",pageKeys:["v-e6907df6","v-c0454a2a","v-0e09f56b","v-c2129e2a","v-e926e472","v-46d91da7","v-a953fe6a","v-373abf6b","v-3fc296ad","v-04a8950b"]},event:{key:"event",scope:"tags",path:"/tag/event/",pageKeys:["v-521a09eb"]},function:{key:"function",scope:"tags",path:"/tag/function/",pageKeys:["v-dd7fb7c2"]},array2tree:{key:"array2tree",scope:"tags",path:"/tag/array2tree/",pageKeys:["v-2e4cb8ab"]},tree2array:{key:"tree2array",scope:"tags",path:"/tag/tree2array/",pageKeys:["v-2e4cb8ab"]},"继承":{key:"继承",scope:"tags",path:"/tag/继承/",pageKeys:["v-18f00c8b"]},graphql:{key:"graphql",scope:"tags",path:"/tag/graphql/",pageKeys:["v-d4cae84e"]},error:{key:"error",scope:"tags",path:"/tag/error/",pageKeys:["v-09c6e9ab"]},jest:{key:"jest",scope:"tags",path:"/tag/jest/",pageKeys:["v-2e91b746"]},less:{key:"less",scope:"tags",path:"/tag/less/",pageKeys:["v-0139db16"]},"1像素问题":{key:"1像素问题",scope:"tags",path:"/tag/1像素问题/",pageKeys:["v-0139db16","v-37efe66a"]},micro:{key:"micro",scope:"tags",path:"/tag/micro/",pageKeys:["v-0aa71f1e"]},promise:{key:"promise",scope:"tags",path:"/tag/promise/",pageKeys:["v-29559f8b"]},viewport:{key:"viewport",scope:"tags",path:"/tag/viewport/",pageKeys:["v-0c4cce2a"]},rem:{key:"rem",scope:"tags",path:"/tag/rem/",pageKeys:["v-0c4cce2a"]},"html渲染":{key:"html渲染",scope:"tags",path:"/tag/html渲染/",pageKeys:["v-bfe34c2a"]},tsconfig:{key:"tsconfig",scope:"tags",path:"/tag/tsconfig/",pageKeys:["v-55150e46"]},jsconfig:{key:"jsconfig",scope:"tags",path:"/tag/jsconfig/",pageKeys:["v-55150e46"]},sass:{key:"sass",scope:"tags",path:"/tag/sass/",pageKeys:["v-843ae6ea"]},"清除浮动":{key:"清除浮动",scope:"tags",path:"/tag/清除浮动/",pageKeys:["v-37efe66a"]},"css三角形":{key:"css三角形",scope:"tags",path:"/tag/css三角形/",pageKeys:["v-37efe66a"]},"百分比单位":{key:"百分比单位",scope:"tags",path:"/tag/百分比单位/",pageKeys:["v-37efe66a"]},"字体超出省略":{key:"字体超出省略",scope:"tags",path:"/tag/字体超出省略/",pageKeys:["v-37efe66a"]},"居中":{key:"居中",scope:"tags",path:"/tag/居中/",pageKeys:["v-37efe66a"]},"布局":{key:"布局",scope:"tags",path:"/tag/布局/",pageKeys:["v-953c6676"]},"web安全":{key:"web安全",scope:"tags",path:"/tag/web安全/",pageKeys:["v-2858ebea"]},webpack:{key:"webpack",scope:"tags",path:"/tag/webpack/",pageKeys:["v-76cf7acb"]},gulp:{key:"gulp",scope:"tags",path:"/tag/gulp/",pageKeys:["v-76cf7acb"]},px2rem:{key:"px2rem",scope:"tags",path:"/tag/px2rem/",pageKeys:["v-76cf7acb"]},react:{key:"react",scope:"tags",path:"/tag/react/",pageKeys:["v-7d772acb","v-404c7aaa","v-3c6fea4b","v-b6401aea","v-cace3e2a"]},aria2:{key:"aria2",scope:"tags",path:"/tag/aria2/",pageKeys:["v-0cd88c0f"]},centos7:{key:"centos7",scope:"tags",path:"/tag/centos7/",pageKeys:["v-6af8ea4b"]},curl:{key:"curl",scope:"tags",path:"/tag/curl/",pageKeys:["v-a5b2146a"]},ascii:{key:"ascii",scope:"tags",path:"/tag/ascii/",pageKeys:["v-4ff7afff"]},docker:{key:"docker",scope:"tags",path:"/tag/docker/",pageKeys:["v-4fb88c8b"]},"docker-compose":{key:"docker-compose",scope:"tags",path:"/tag/docker-compose/",pageKeys:["v-4fb88c8b"]},github:{key:"github",scope:"tags",path:"/tag/github/",pageKeys:["v-05798f2b","v-1982f56a"]},gitlab:{key:"gitlab",scope:"tags",path:"/tag/gitlab/",pageKeys:["v-90f907aa"]},git:{key:"git",scope:"tags",path:"/tag/git/",pageKeys:["v-4bf2e7fd"]},linux:{key:"linux",scope:"tags",path:"/tag/linux/",pageKeys:["v-b6e43d0e"]},meilisearch:{key:"meilisearch",scope:"tags",path:"/tag/meilisearch/",pageKeys:["v-005e6c35"]},vuepress:{key:"vuepress",scope:"tags",path:"/tag/vuepress/",pageKeys:["v-005e6c35"]},nginx:{key:"nginx",scope:"tags",path:"/tag/nginx/",pageKeys:["v-2e27bdad"]},"node.js":{key:"node.js",scope:"tags",path:"/tag/node.js/",pageKeys:["v-3b86fbaa"]},manjaro:{key:"manjaro",scope:"tags",path:"/tag/manjaro/",pageKeys:["v-f5c06ff6"]},search:{key:"search",scope:"tags",path:"/tag/search/",pageKeys:["v-1982f56a"]},sentry:{key:"sentry",scope:"tags",path:"/tag/sentry/",pageKeys:["v-d68118aa"]},ubuntu:{key:"ubuntu",scope:"tags",path:"/tag/ubuntu/",pageKeys:["v-0cbf1aab"]},vagrant:{key:"vagrant",scope:"tags",path:"/tag/vagrant/",pageKeys:["v-19f48aff"]},vim:{key:"vim",scope:"tags",path:"/tag/vim/",pageKeys:["v-6acd1126"]},vscode:{key:"vscode",scope:"tags",path:"/tag/vscode/",pageKeys:["v-1493d54b"]},"travis-ci":{key:"travis-ci",scope:"tags",path:"/tag/travis-ci/",pageKeys:["v-3a7ef9eb"]}},categories:{frontend:{key:"frontend",scope:"categories",path:"/categories/frontend/",pageKeys:["v-cf0122fe","v-5c30984b","v-9bb5e86a","v-87c13ffa","v-737352ab","v-7844a1b2","v-6c84e740","v-09e74572","v-8d01e796","v-7493ab2a","v-71afeb6b","v-0c938f45","v-5900f271","v-3e8b35eb","v-e6907df6","v-521a09eb","v-dd7fb7c2","v-2e4cb8ab","v-18f00c8b","v-43a964cb","v-d4cae84e","v-09c6e9ab","v-2e91b746","v-0139db16","v-0aa71f1e","v-1c46f5ab","v-29559f8b","v-0c4cce2a","v-bfe34c2a","v-55150e46","v-843ae6ea","v-37efe66a","v-953c6676","v-d3a38240","v-2858ebea","v-76cf7acb","v-7d772acb","v-404c7aaa","v-3c6fea4b","v-b6401aea","v-cace3e2a","v-c0454a2a","v-0e09f56b","v-c2129e2a","v-e926e472","v-46d91da7","v-a953fe6a","v-373abf6b","v-3fc296ad","v-04a8950b","v-6ad03320","v-4ff7afff","v-719d672b","v-05798f2b","v-4bf2e7fd","v-005e6c35","v-3b86fbaa","v-37306b0b","v-d68118aa","v-1493d54b"]},system:{key:"system",scope:"categories",path:"/categories/system/",pageKeys:["v-0cd88c0f","v-6af8ea4b","v-a5b2146a","v-b6e43d0e","v-f5c06ff6","v-1982f56a","v-0cbf1aab","v-6acd1126"]},services:{key:"services",scope:"categories",path:"/categories/services/",pageKeys:["v-4fb88c8b","v-90f907aa","v-2e27bdad","v-19f48aff","v-3a7ef9eb"]}},timeline:{}});class en{constructor(n,e){this._metaMap=Object.assign({},n),Object.keys(this._metaMap).forEach(n=>{const{pageKeys:t}=this._metaMap[n];this._metaMap[n].pages=t.map(n=>function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.key===e)return r}return{path:"",frontmatter:{}}}(e,n))})}get length(){return Object.keys(this._metaMap).length}get map(){return this._metaMap}get pages(){return this.list}get list(){return this.toArray()}toArray(){const n=[];return Object.keys(this._metaMap).forEach(e=>{const{pages:t,path:r}=this._metaMap[e];n.push({name:e,pages:t,path:r})}),n}getItemByName(n){return this._metaMap[n]}}var tn={tags:(n,e)=>{const r=t(145);return r(n.frontmatter.date)-r(e.frontmatter.date)>0?-1:1},categories:(n,e)=>{const r=t(145);return r(n.frontmatter.date)-r(e.frontmatter.date)>0?-1:1}},rn={tags:function(n,e,t){const r=e;return["tags"].some(e=>{const t=n.frontmatter[e];return Array.isArray(t)?t.some(n=>n===r):t===r})},categories:function(n,e,t){const r=e;return["categories"].some(e=>{const t=n.frontmatter[e];return Array.isArray(t)?t.some(n=>n===r):t===r})}},on=[{pid:"tags",id:"array",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/array/",interval:[0,2]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"tree",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/tree/",interval:[0,2]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"stack",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/stack/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"queue",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/queue/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"LinkedList",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/LinkedList/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"heap",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/heap/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"cors",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/cors/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"XMLHttpRequest",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/XMLHttpRequest/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"blog",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/blog/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"angular.js",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/angular.js/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"axios",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/axios/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"commitizen",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/commitizen/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"dom",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/dom/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"element",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/element/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"eslint",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/eslint/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"vue",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/vue/",interval:[0,9]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"event",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/event/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"function",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/function/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"array2tree",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/array2tree/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"tree2array",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/tree2array/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"继承",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/继承/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"graphql",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/graphql/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"error",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/error/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"jest",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/jest/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"less",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/less/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"1像素问题",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/1像素问题/",interval:[0,2]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"micro",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/micro/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"promise",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/promise/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"viewport",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/viewport/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"rem",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/rem/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"html渲染",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/html渲染/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"tsconfig",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/tsconfig/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"jsconfig",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/jsconfig/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"sass",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/sass/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"清除浮动",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/清除浮动/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"css三角形",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/css三角形/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"百分比单位",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/百分比单位/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"字体超出省略",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/字体超出省略/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"居中",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/居中/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"布局",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/布局/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"web安全",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/web安全/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"webpack",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/webpack/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"gulp",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/gulp/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"px2rem",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/px2rem/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"react",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/react/",interval:[0,5]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"aria2",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/aria2/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"centos7",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/centos7/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"curl",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/curl/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"ascii",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/ascii/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"docker",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/docker/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"docker-compose",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/docker-compose/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"github",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/github/",interval:[0,2]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"gitlab",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/gitlab/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"git",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/git/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"linux",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/linux/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"meilisearch",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/meilisearch/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"vuepress",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/vuepress/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"nginx",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/nginx/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"node.js",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/node.js/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"manjaro",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/manjaro/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"search",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/search/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"sentry",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/sentry/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"ubuntu",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/ubuntu/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"vagrant",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/vagrant/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"vim",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/vim/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"vscode",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/vscode/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"tags",id:"travis-ci",filter:rn.tags,sorter:tn.tags,pages:[{path:"/tag/travis-ci/",interval:[0,1]}],prevText:"Prev",nextText:"Next"},{pid:"categories",id:"frontend",filter:rn.categories,sorter:tn.categories,pages:[{path:"/categories/frontend/",interval:[0,9]},{path:"/categories/frontend/page/2/",interval:[10,19]},{path:"/categories/frontend/page/3/",interval:[20,29]},{path:"/categories/frontend/page/4/",interval:[30,39]},{path:"/categories/frontend/page/5/",interval:[40,49]},{path:"/categories/frontend/page/6/",interval:[50,59]}],prevText:"Prev",nextText:"Next"},{pid:"categories",id:"system",filter:rn.categories,sorter:tn.categories,pages:[{path:"/categories/system/",interval:[0,8]}],prevText:"Prev",nextText:"Next"},{pid:"categories",id:"services",filter:rn.categories,sorter:tn.categories,pages:[{path:"/categories/services/",interval:[0,5]}],prevText:"Prev",nextText:"Next"}],an=t(201);const sn=t.n(an)()("plugin-blog:pagination");class ln{constructor(n,e,t){sn("pagination",n);const{pages:r,prevText:o,nextText:a}=n,{path:i}=t;this._prevText=o,this._nextText=a;for(let n=0,e=r.length;n<e;n++){if(r[n].path===i){this.paginationIndex=n;break}}this.paginationIndex||(this.paginationIndex=0),this._paginationPages=r,this._currentPage=r[this.paginationIndex],this._matchedPages=e.filter(e=>n.filter(e,n.id,n.pid)).sort(n.sorter)}setIndexPage(n){this._indexPage=n}get length(){return this._paginationPages.length}get pages(){const[n,e]=this._currentPage.interval;return this._matchedPages.slice(n,e+1)}get hasPrev(){return 0!==this.paginationIndex}get prevLink(){return this.hasPrev?this.paginationIndex-1==0&&this._indexPage?this._indexPage:this._paginationPages[this.paginationIndex-1].path:null}get hasNext(){return this.paginationIndex!==this.length-1}get nextLink(){return this.hasNext?this._paginationPages[this.paginationIndex+1].path:null}get prevText(){return this._prevText}get nextText(){return this._nextText}getSpecificPageLink(n){return this._paginationPages[n].path}}const cn=new class{constructor(n){this.paginations=n}get pages(){return r.b.$vuepress.$get("siteData").pages}getPagination(n,e,t){sn("id",e),sn("pid",n);const r=this.paginations.filter(t=>t.id===e&&t.pid===n)[0];return new ln(r,this.pages,t)}}(on);var dn={comment:{enabled:!1,service:""},email:{enabled:!1},feed:{rss:!1,atom:!1,json:!1}},un=t(146),mn=t(191),pn=t(148),hn=t(192),gn=[X.a,Y.a,{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},J.a,Q.a,({Vue:n})=>{n.mixin({computed:{$perPage:()=>10}})},Z.a,{},({Vue:n})=>{const e=Object.keys(nn).map(n=>{const e=nn[n],t="$"+n;return{[t](){const{pages:n}=this.$site;return new en(e,n)},["$current"+(n.charAt(0).toUpperCase()+n.slice(1))](){const n=this.$route.meta.id;return this[t].getItemByName(n)}}}).reduce((n,e)=>(Object.assign(n,e),n),{});e.$frontmatterKey=function(){const n=this["$"+this.$route.meta.id];return n||null},n.mixin({computed:e})},({Vue:n})=>{n.mixin({computed:{$pagination(){return this.$route.meta.pid&&this.$route.meta.id?this.$getPagination(this.$route.meta.pid,this.$route.meta.id):null}},methods:{$getPagination(n,e){return e=e||n,cn.getPagination(n,e,this.$route)}}})},({Vue:n})=>{const e={$service:()=>dn};n.mixin({computed:e})},un.a,mn.a,pn.a,({siteData:n,options:e})=>{n.themeConfig.sidebar={"/frontend/algorithm/":[{title:"Algorithm",collapsable:!0,sidebarDepth:1,children:["","linkedList-base","binaryTree","stack-base","array-sort","alg-leetcode-01"]}],"/frontend/library/":[{title:"Library",collapsable:!0,sidebarDepth:1,children:["","rc","rc-canvas-poster","rc-hooks-reducer","rc-lifecycle","rc-redux","vue","vue-issues","vue-libs","vue-pagination","vue-plugins","vue-props","vue-router","vue-slot","vue2-tab"]}],"/frontend/issues/":[{title:"Issues",collapsable:!0,sidebarDepth:1,children:["","ajax","all-urls","angular1.x","axios","basic","commitizen","document","dom","eslint","event","fq-fn-01","fq-issue-01","fq-issue-02","fq-issue-03","graphql-github","handleError","learn-jest","less","micro-frontend","oop","promise","rem","render-html","sass","typescript","use-css","use-html","web-xss","webpack"]}],"/services/tools/":[{title:"Tools",collapsable:!0,sidebarDepth:1,children:["","aria2","ascii","centos7","curl","docker","get-ua","git","github-actions","gitlab","linux","manjaro","meilisearch","nginx","nodejs","search-tip","sentry","todo","travis","ubuntu","vagrant","vim","vscode"]}]}},hn.a],fn=["BackToTop","ReadingProgress","TouchPageMenu"];class vn extends class{constructor(){this.store=new r.b({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){r.b.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(vn.prototype,{getPageAsyncComponent:x,getLayoutAsyncComponent:y,getAsyncComponent:w,getVueComponent:k});var bn={install(n){const e=new vn;n.$vuepress=e,n.prototype.$vuepress=e}};function xn(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var yn={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return T("pageKey",e),r.b.component(e)||r.b.component(e,x(e)),r.b.component(e)?n(e):n("")}},wn={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},kn={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},jn=(t(417),t(418),Object(V.a)(kn,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Tn={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};r.b.config.productionTip=!1,r.b.use(o.a),r.b.use(bn),r.b.mixin(function(n,e,t=r.b){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const o=new(n(t.$vuepress.$get("siteData"))),a=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),i={};return Object.keys(a).reduce((n,e)=>(e.startsWith("$")&&(n[e]=a[e].get),n),i),{computed:i}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const r in n)"/"===r?t=n[r]:0===this.$page.path.indexOf(r)&&(e=n[r]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},K)),r.b.component("Content",yn),r.b.component("ContentSlotsDistributor",wn),r.b.component("OutboundLink",jn),r.b.component("ClientOnly",Tn),r.b.component("Layout",y("Layout")),r.b.component("NotFound",y("NotFound")),r.b.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.10",hash:"a3be233be"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:K.routerBase||K.base,t=new o.a({base:e,mode:"history",fallback:!1,routes:G,scrollBehavior:(n,e,t)=>t||(n.hash?!r.b.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,r)=>{if(xn(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";xn(n,t)?r(t):r()}else r();else{const t=e.path+"/",o=e.path+".html";xn(n,o)?r(o):xn(n,t)?r(t):r()}})}(t);const a={};try{await Promise.all(gn.filter(n=>"function"==typeof n).map(e=>e({Vue:r.b,options:a,router:t,siteData:K,isServer:n})))}catch(n){console.error(n)}return{app:new r.b(Object.assign(a,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},fn.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})},463:function(n,e,t){"use strict";e.a={}},58:function(n,e,t){"use strict";e.a={useNative:!0,selector:"lazy",rootMargin:"200px"}}}]);